package sample
/*
#cgo CFLAGS: -x objective-c -I../../objc -I../../out
#cgo LDFLAGS: -framework Foundation -framework AppKit
#import <Cocoa/Cocoa.h>
#import <objc/message.h>
#import <objc/runtime.h>

// runtime
const char* CCG_object_getClassName(void* px) {
    return object_getClassName(px);
}
// NSObject
const char* NSObject_descripton(void* p) {
    return [[(id)p description] UTF8String];
}


////NSObject
void* NSObject_init() {
  return [[NSObject alloc] init];
}
void NSObject_dealloc(void* goobj) {
  [(NSObject*)goobj dealloc];
}
void NSObject_finalize(void* goobj) {
  [(NSObject*)goobj finalize];
}
void* NSObject_copy(void* goobj) {
  return [(NSObject*)goobj copy];
}
void* NSObject_mutableCopy(void* goobj) {
  return [(NSObject*)goobj mutableCopy];
}
//REJECT: IMP aSelector
//IMP NSObject_methodForSelector(void* goobj, SEL aSelector) {
//  return [(NSObject*)goobj methodForSelector:aSelector];
//}
//REJECT: aSelector
//void NSObject_doesNotRecognizeSelector(void* goobj, SEL aSelector) {
//  [(NSObject*)goobj doesNotRecognizeSelector:aSelector];
//}
//REJECT: aSelector
//void* NSObject_forwardingTargetForSelector(void* goobj, SEL aSelector) {
//  return [(NSObject*)goobj forwardingTargetForSelector:aSelector];
//}
//REJECT: anInvocation
//void NSObject_forwardInvocation(void* goobj, void* anInvocation) {
//  [(NSObject*)goobj forwardInvocation:(NSInvocation*)anInvocation];
//}
//REJECT: NSMethodSignature aSelector
//void* NSObject_methodSignatureForSelector(void* goobj, SEL aSelector) {
//  return [(NSObject*)goobj methodSignatureForSelector:aSelector];
//}
//unacceptalble-method
//bool NSObject_allowsWeakReference(void* goobj) {
//  return [(NSObject*)goobj allowsWeakReference];
//}
//unacceptalble-method
//bool NSObject_retainWeakReference(void* goobj) {
//  return [(NSObject*)goobj retainWeakReference];
//}
//REJECT: Class
//Class NSObject_classForCoder(void* goobj) {
//  return [(NSObject*)goobj classForCoder];
//}
void* NSObject_replacementObjectForCoder(void* goobj, void* aCoder) {
  return [(NSObject*)goobj replacementObjectForCoder:(NSCoder*)aCoder];
}
void* NSObject_awakeAfterUsingCoder(void* goobj, void* aDecoder) {
  return [(NSObject*)goobj awakeAfterUsingCoder:(NSCoder*)aDecoder];
}
void* NSObject_autoContentAccessingProxy(void* goobj) {
  return [(NSObject*)goobj autoContentAccessingProxy];
}
//REJECT: didRecoverSelector
//void NSObject_attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(void* goobj, void* error, uint recoveryOptionIndex, void* delegate, SEL didRecoverSelector, void* contextInfo) {
//  [(NSObject*)goobj attemptRecoveryFromError:(NSError**)&error optionIndex:recoveryOptionIndex delegate:delegate didRecoverSelector:didRecoverSelector contextInfo:contextInfo];
//}
bool NSObject_attemptRecoveryFromErrorOptionIndex(void* goobj, void* error, uint recoveryOptionIndex) {
  return [(NSObject*)goobj attemptRecoveryFromError:(NSError**)&error optionIndex:recoveryOptionIndex];
}
bool NSObject_fileManagerShouldProceedAfterError(void* goobj, void* fm, void* errorInfo) {
  return [(NSObject*)goobj fileManager:(NSFileManager*)fm shouldProceedAfterError:(NSDictionary*)errorInfo];
}
void NSObject_fileManagerWillProcessPath(void* goobj, void* fm, void* path) {
  [(NSObject*)goobj fileManager:(NSFileManager*)fm willProcessPath:(NSString*)path];
}
void* NSObject_valueForKey(void* goobj, void* key) {
  return [(NSObject*)goobj valueForKey:(NSString*)key];
}
void NSObject_setValueForKey(void* goobj, void* value, void* key) {
  [(NSObject*)goobj setValue:value forKey:(NSString*)key];
}
bool NSObject_validateValueForKeyError(void* goobj, void* ioValue, void* inKey, void* outError) {
  return [(NSObject*)goobj validateValue:ioValue forKey:(NSString*)inKey error:(NSError**)&outError];
}
void* NSObject_mutableArrayValueForKey(void* goobj, void* key) {
  return [(NSObject*)goobj mutableArrayValueForKey:(NSString*)key];
}
void* NSObject_mutableOrderedSetValueForKey(void* goobj, void* key) {
  return [(NSObject*)goobj mutableOrderedSetValueForKey:(NSString*)key];
}
void* NSObject_mutableSetValueForKey(void* goobj, void* key) {
  return [(NSObject*)goobj mutableSetValueForKey:(NSString*)key];
}
void* NSObject_valueForKeyPath(void* goobj, void* keyPath) {
  return [(NSObject*)goobj valueForKeyPath:(NSString*)keyPath];
}
void NSObject_setValueForKeyPath(void* goobj, void* value, void* keyPath) {
  [(NSObject*)goobj setValue:value forKeyPath:(NSString*)keyPath];
}
bool NSObject_validateValueForKeyPathError(void* goobj, void* ioValue, void* inKeyPath, void* outError) {
  return [(NSObject*)goobj validateValue:ioValue forKeyPath:(NSString*)inKeyPath error:(NSError**)&outError];
}
void* NSObject_mutableArrayValueForKeyPath(void* goobj, void* keyPath) {
  return [(NSObject*)goobj mutableArrayValueForKeyPath:(NSString*)keyPath];
}
void* NSObject_mutableOrderedSetValueForKeyPath(void* goobj, void* keyPath) {
  return [(NSObject*)goobj mutableOrderedSetValueForKeyPath:(NSString*)keyPath];
}
void* NSObject_mutableSetValueForKeyPath(void* goobj, void* keyPath) {
  return [(NSObject*)goobj mutableSetValueForKeyPath:(NSString*)keyPath];
}
void* NSObject_valueForUndefinedKey(void* goobj, void* key) {
  return [(NSObject*)goobj valueForUndefinedKey:(NSString*)key];
}
void NSObject_setValueForUndefinedKey(void* goobj, void* value, void* key) {
  [(NSObject*)goobj setValue:value forUndefinedKey:(NSString*)key];
}
void NSObject_setNilValueForKey(void* goobj, void* key) {
  [(NSObject*)goobj setNilValueForKey:(NSString*)key];
}
void* NSObject_dictionaryWithValuesForKeys(void* goobj, void* keys) {
  return [(NSObject*)goobj dictionaryWithValuesForKeys:(NSArray*)keys];
}
void NSObject_setValuesForKeysWithDictionary(void* goobj, void* keyedValues) {
  [(NSObject*)goobj setValuesForKeysWithDictionary:(NSDictionary*)keyedValues];
}
void NSObject_observeValueForKeyPathOfObjectChangeContext(void* goobj, void* keyPath, void* object, void* change, void* context) {
  [(NSObject*)goobj observeValueForKeyPath:(NSString*)keyPath ofObject:object change:(NSDictionary*)change context:context];
}
void NSObject_addObserverForKeyPathOptionsContext(void* goobj, void* observer, void* keyPath, NSKeyValueObservingOptions options, void* context) {
  [(NSObject*)goobj addObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath options:options context:context];
}
void NSObject_removeObserverForKeyPathContext(void* goobj, void* observer, void* keyPath, void* context) {
  [(NSObject*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath context:context];
}
void NSObject_removeObserverForKeyPath(void* goobj, void* observer, void* keyPath) {
  [(NSObject*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath];
}
void NSObject_willChangeValueForKey(void* goobj, void* key) {
  [(NSObject*)goobj willChangeValueForKey:(NSString*)key];
}
void NSObject_didChangeValueForKey(void* goobj, void* key) {
  [(NSObject*)goobj didChangeValueForKey:(NSString*)key];
}
void NSObject_willChangeValuesAtIndexesForKey(void* goobj, NSKeyValueChange changeKind, void* indexes, void* key) {
  [(NSObject*)goobj willChange:changeKind valuesAtIndexes:(NSIndexSet*)indexes forKey:(NSString*)key];
}
void NSObject_didChangeValuesAtIndexesForKey(void* goobj, NSKeyValueChange changeKind, void* indexes, void* key) {
  [(NSObject*)goobj didChange:changeKind valuesAtIndexes:(NSIndexSet*)indexes forKey:(NSString*)key];
}
void NSObject_willChangeValueForKeyWithSetMutationUsingObjects(void* goobj, void* key, NSKeyValueSetMutationKind mutationKind, void* objects) {
  [(NSObject*)goobj willChangeValueForKey:(NSString*)key withSetMutation:mutationKind usingObjects:(NSSet*)objects];
}
void NSObject_didChangeValueForKeyWithSetMutationUsingObjects(void* goobj, void* key, NSKeyValueSetMutationKind mutationKind, void* objects) {
  [(NSObject*)goobj didChangeValueForKey:(NSString*)key withSetMutation:mutationKind usingObjects:(NSSet*)objects];
}
void NSObject_setObservationInfo(void* goobj, void* observationInfo) {
  [(NSObject*)goobj setObservationInfo:observationInfo];
}
void* NSObject_observationInfo(void* goobj) {
  return [(NSObject*)goobj observationInfo];
}
//REJECT: Class
//Class NSObject_classForKeyedArchiver(void* goobj) {
//  return [(NSObject*)goobj classForKeyedArchiver];
//}
void* NSObject_replacementObjectForKeyedArchiver(void* goobj, void* archiver) {
  return [(NSObject*)goobj replacementObjectForKeyedArchiver:(NSKeyedArchiver*)archiver];
}
//REJECT: aSelector delay
//void NSObject_performSelectorWithObjectAfterDelayInModes(void* goobj, SEL aSelector, void* anArgument, NSTimeInterval delay, void* modes) {
//  [(NSObject*)goobj performSelector:aSelector withObject:anArgument afterDelay:delay inModes:(NSArray*)modes];
//}
//REJECT: aSelector delay
//void NSObject_performSelectorWithObjectAfterDelay(void* goobj, SEL aSelector, void* anArgument, NSTimeInterval delay) {
//  [(NSObject*)goobj performSelector:aSelector withObject:anArgument afterDelay:delay];
//}
//REJECT: aSelector
//void NSObject_performSelectorOnMainThreadWithObjectWaitUntilDoneModes(void* goobj, SEL aSelector, void* arg, bool wait, void* array) {
//  [(NSObject*)goobj performSelectorOnMainThread:aSelector withObject:arg waitUntilDone:wait modes:(NSArray*)array];
//}
//REJECT: aSelector
//void NSObject_performSelectorOnMainThreadWithObjectWaitUntilDone(void* goobj, SEL aSelector, void* arg, bool wait) {
//  [(NSObject*)goobj performSelectorOnMainThread:aSelector withObject:arg waitUntilDone:wait];
//}
//REJECT: aSelector
//void NSObject_performSelectorOnThreadWithObjectWaitUntilDoneModes(void* goobj, SEL aSelector, void* thr, void* arg, bool wait, void* array) {
//  [(NSObject*)goobj performSelector:aSelector onThread:(NSThread*)thr withObject:arg waitUntilDone:wait modes:(NSArray*)array];
//}
//REJECT: aSelector
//void NSObject_performSelectorOnThreadWithObjectWaitUntilDone(void* goobj, SEL aSelector, void* thr, void* arg, bool wait) {
//  [(NSObject*)goobj performSelector:aSelector onThread:(NSThread*)thr withObject:arg waitUntilDone:wait];
//}
//REJECT: aSelector
//void NSObject_performSelectorInBackgroundWithObject(void* goobj, SEL aSelector, void* arg) {
//  [(NSObject*)goobj performSelectorInBackground:aSelector withObject:arg];
//}
//unacceptalble-method
//void NSObject_URLResourceDataDidBecomeAvailable(void* goobj, void* sender, void* newBytes) {
//  [(NSObject*)goobj URL:(NSURL*)sender resourceDataDidBecomeAvailable:(NSData*)newBytes];
//}
//unacceptalble-method
//void NSObject_URLResourceDidFinishLoading(void* goobj, void* sender) {
//  [(NSObject*)goobj URLResourceDidFinishLoading:(NSURL*)sender];
//}
//unacceptalble-method
//void NSObject_URLResourceDidCancelLoading(void* goobj, void* sender) {
//  [(NSObject*)goobj URLResourceDidCancelLoading:(NSURL*)sender];
//}
//unacceptalble-method
//void NSObject_URLResourceDidFailLoadingWithReason(void* goobj, void* sender, void* reason) {
//  [(NSObject*)goobj URL:(NSURL*)sender resourceDidFailLoadingWithReason:(NSString*)reason];
//}
//REJECT: Class
//Class NSObject_classForArchiver(void* goobj) {
//  return [(NSObject*)goobj classForArchiver];
//}
void* NSObject_replacementObjectForArchiver(void* goobj, void* archiver) {
  return [(NSObject*)goobj replacementObjectForArchiver:(NSArchiver*)archiver];
}
//REJECT: Class
//Class NSObject_classForPortCoder(void* goobj) {
//  return [(NSObject*)goobj classForPortCoder];
//}
void* NSObject_replacementObjectForPortCoder(void* goobj, void* coder) {
  return [(NSObject*)goobj replacementObjectForPortCoder:(NSPortCoder*)coder];
}
void* NSObject_classDescription(void* goobj) {
  return [(NSObject*)goobj classDescription];
}
void* NSObject_attributeKeys(void* goobj) {
  return [(NSObject*)goobj attributeKeys];
}
void* NSObject_toOneRelationshipKeys(void* goobj) {
  return [(NSObject*)goobj toOneRelationshipKeys];
}
void* NSObject_toManyRelationshipKeys(void* goobj) {
  return [(NSObject*)goobj toManyRelationshipKeys];
}
void* NSObject_inverseForRelationshipKey(void* goobj, void* relationshipKey) {
  return [(NSObject*)goobj inverseForRelationshipKey:(NSString*)relationshipKey];
}
void* NSObject_scriptingValueForSpecifier(void* goobj, void* objectSpecifier) {
  return [(NSObject*)goobj scriptingValueForSpecifier:(NSScriptObjectSpecifier*)objectSpecifier];
}
void* NSObject_scriptingProperties(void* goobj) {
  return [(NSObject*)goobj scriptingProperties];
}
void NSObject_setScriptingProperties(void* goobj, void* properties) {
  [(NSObject*)goobj setScriptingProperties:(NSDictionary*)properties];
}
void* NSObject_copyScriptingValueForKeyWithProperties(void* goobj, void* value, void* key, void* properties) {
  return [(NSObject*)goobj copyScriptingValue:value forKey:(NSString*)key withProperties:(NSDictionary*)properties];
}
//REJECT: objectClass
//void* NSObject_newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(void* goobj, Class objectClass, void* key, void* contentsValue, void* properties) {
//  return [(NSObject*)goobj newScriptingObjectOfClass:objectClass forValueForKey:(NSString*)key withContentsValue:contentsValue properties:(NSDictionary*)properties];
//}
//REJECT: FourCharCode
//FourCharCode NSObject_classCode(void* goobj) {
//  return [(NSObject*)goobj classCode];
//}
void* NSObject_className(void* goobj) {
  return [(NSObject*)goobj className];
}
void* NSObject_valueAtIndexInPropertyWithKey(void* goobj, uint index, void* key) {
  return [(NSObject*)goobj valueAtIndex:index inPropertyWithKey:(NSString*)key];
}
void* NSObject_valueWithNameInPropertyWithKey(void* goobj, void* name, void* key) {
  return [(NSObject*)goobj valueWithName:(NSString*)name inPropertyWithKey:(NSString*)key];
}
void* NSObject_valueWithUniqueIDInPropertyWithKey(void* goobj, void* uniqueID, void* key) {
  return [(NSObject*)goobj valueWithUniqueID:uniqueID inPropertyWithKey:(NSString*)key];
}
void NSObject_insertValueAtIndexInPropertyWithKey(void* goobj, void* value, uint index, void* key) {
  [(NSObject*)goobj insertValue:value atIndex:index inPropertyWithKey:(NSString*)key];
}
void NSObject_removeValueAtIndexFromPropertyWithKey(void* goobj, uint index, void* key) {
  [(NSObject*)goobj removeValueAtIndex:index fromPropertyWithKey:(NSString*)key];
}
void NSObject_replaceValueAtIndexInPropertyWithKeyWithValue(void* goobj, uint index, void* key, void* value) {
  [(NSObject*)goobj replaceValueAtIndex:index inPropertyWithKey:(NSString*)key withValue:value];
}
void NSObject_insertValueInPropertyWithKey(void* goobj, void* value, void* key) {
  [(NSObject*)goobj insertValue:value inPropertyWithKey:(NSString*)key];
}
void* NSObject_coerceValueForKey(void* goobj, void* value, void* key) {
  return [(NSObject*)goobj coerceValue:value forKey:(NSString*)key];
}
void* NSObject_objectSpecifier(void* goobj) {
  return [(NSObject*)goobj objectSpecifier];
}
void* NSObject_indicesOfObjectsByEvaluatingObjectSpecifier(void* goobj, void* specifier) {
  return [(NSObject*)goobj indicesOfObjectsByEvaluatingObjectSpecifier:(NSScriptObjectSpecifier*)specifier];
}
bool NSObject_isEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj isEqualTo:object];
}
bool NSObject_isLessThanOrEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj isLessThanOrEqualTo:object];
}
bool NSObject_isLessThan(void* goobj, void* object) {
  return [(NSObject*)goobj isLessThan:object];
}
bool NSObject_isGreaterThanOrEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj isGreaterThanOrEqualTo:object];
}
bool NSObject_isGreaterThan(void* goobj, void* object) {
  return [(NSObject*)goobj isGreaterThan:object];
}
bool NSObject_isNotEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj isNotEqualTo:object];
}
bool NSObject_doesContain(void* goobj, void* object) {
  return [(NSObject*)goobj doesContain:object];
}
bool NSObject_isLike(void* goobj, void* object) {
  return [(NSObject*)goobj isLike:(NSString*)object];
}
bool NSObject_isCaseInsensitiveLike(void* goobj, void* object) {
  return [(NSObject*)goobj isCaseInsensitiveLike:(NSString*)object];
}
bool NSObject_scriptingIsEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingIsEqualTo:object];
}
bool NSObject_scriptingIsLessThanOrEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingIsLessThanOrEqualTo:object];
}
bool NSObject_scriptingIsLessThan(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingIsLessThan:object];
}
bool NSObject_scriptingIsGreaterThanOrEqualTo(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingIsGreaterThanOrEqualTo:object];
}
bool NSObject_scriptingIsGreaterThan(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingIsGreaterThan:object];
}
bool NSObject_scriptingBeginsWith(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingBeginsWith:object];
}
bool NSObject_scriptingEndsWith(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingEndsWith:object];
}
bool NSObject_scriptingContains(void* goobj, void* object) {
  return [(NSObject*)goobj scriptingContains:object];
}
void NSObject__load() {
  [NSObject load];
}
void NSObject__initialize() {
  [NSObject initialize];
}
void* NSObject__new() {
  return [NSObject new];
}
//REJECT: zone
//void* NSObject__allocWithZone(struct _NSZone zone) {
//  return [NSObject allocWithZone:zone];
//}
void* NSObject__alloc() {
  return [NSObject alloc];
}
//REJECT: zone
//void* NSObject__copyWithZone(struct _NSZone zone) {
//  return [NSObject copyWithZone:zone];
//}
//REJECT: zone
//void* NSObject__mutableCopyWithZone(struct _NSZone zone) {
//  return [NSObject mutableCopyWithZone:zone];
//}
//REJECT: Class
//Class NSObject__superclass() {
//  return [NSObject superclass];
//}
//REJECT: Class
//Class NSObject__class() {
//  return [NSObject class];
//}
//REJECT: aSelector
//bool NSObject__instancesRespondToSelector(SEL aSelector) {
//  return [NSObject instancesRespondToSelector:aSelector];
//}
bool NSObject__conformsToProtocol(void* protocol) {
  return [NSObject conformsToProtocol:(Protocol*)protocol];
}
//REJECT: IMP aSelector
//IMP NSObject__instanceMethodForSelector(SEL aSelector) {
//  return [NSObject instanceMethodForSelector:aSelector];
//}
//REJECT: NSMethodSignature aSelector
//void* NSObject__instanceMethodSignatureForSelector(SEL aSelector) {
//  return [NSObject instanceMethodSignatureForSelector:aSelector];
//}
void* NSObject__description() {
  return [NSObject description];
}
//REJECT: aClass
//bool NSObject__isSubclassOfClass(Class aClass) {
//  return [NSObject isSubclassOfClass:aClass];
//}
//REJECT: sel
//bool NSObject__resolveClassMethod(SEL sel) {
//  return [NSObject resolveClassMethod:sel];
//}
//REJECT: sel
//bool NSObject__resolveInstanceMethod(SEL sel) {
//  return [NSObject resolveInstanceMethod:sel];
//}

////NSValue
void* NSValue_init() {
  return [[NSValue alloc] init];
}
void NSValue_getValue(void* goobj, void* value) {
  [(NSValue*)goobj getValue:value];
}
const char* NSValue_objCType(void* goobj) {
  return [(NSValue*)goobj objCType];
}
void* NSValue_initWithBytesObjCType(const void* value, const char* type) {
  return [[NSValue alloc] initWithBytes:value objCType:type];
}
void* NSValue_nonretainedObjectValue(void* goobj) {
  return [(NSValue*)goobj nonretainedObjectValue];
}
void* NSValue_pointerValue(void* goobj) {
  return [(NSValue*)goobj pointerValue];
}
bool NSValue_isEqualToValue(void* goobj, void* value) {
  return [(NSValue*)goobj isEqualToValue:(NSValue*)value];
}
//REJECT: NSRange
//NSRange NSValue_rangeValue(void* goobj) {
//  return [(NSValue*)goobj rangeValue];
//}
NSPoint NSValue_pointValue(void* goobj) {
  return [(NSValue*)goobj pointValue];
}
//REJECT: NSSize
//NSSize NSValue_sizeValue(void* goobj) {
//  return [(NSValue*)goobj sizeValue];
//}
NSRect NSValue_rectValue(void* goobj) {
  return [(NSValue*)goobj rectValue];
}


////NSNumber
void* NSNumber_init() {
  return [[NSNumber alloc] init];
}
char NSNumber_charValue(void* goobj) {
  return [(NSNumber*)goobj charValue];
}
unsigned char NSNumber_unsignedCharValue(void* goobj) {
  return [(NSNumber*)goobj unsignedCharValue];
}
short NSNumber_shortValue(void* goobj) {
  return [(NSNumber*)goobj shortValue];
}
unsigned short NSNumber_unsignedShortValue(void* goobj) {
  return [(NSNumber*)goobj unsignedShortValue];
}
int NSNumber_intValue(void* goobj) {
  return [(NSNumber*)goobj intValue];
}
unsigned int NSNumber_unsignedIntValue(void* goobj) {
  return [(NSNumber*)goobj unsignedIntValue];
}
long long NSNumber_longValue(void* goobj) {
  return [(NSNumber*)goobj longValue];
}
unsigned long long NSNumber_unsignedLongValue(void* goobj) {
  return [(NSNumber*)goobj unsignedLongValue];
}
long long NSNumber_longLongValue(void* goobj) {
  return [(NSNumber*)goobj longLongValue];
}
unsigned long long NSNumber_unsignedLongLongValue(void* goobj) {
  return [(NSNumber*)goobj unsignedLongLongValue];
}
float NSNumber_floatValue(void* goobj) {
  return [(NSNumber*)goobj floatValue];
}
double NSNumber_doubleValue(void* goobj) {
  return [(NSNumber*)goobj doubleValue];
}
bool NSNumber_boolValue(void* goobj) {
  return [(NSNumber*)goobj boolValue];
}
//REJECT: NSInteger
//NSInteger NSNumber_integerValue(void* goobj) {
//  return [(NSNumber*)goobj integerValue];
//}
uint NSNumber_unsignedIntegerValue(void* goobj) {
  return [(NSNumber*)goobj unsignedIntegerValue];
}
void* NSNumber_stringValue(void* goobj) {
  return [(NSNumber*)goobj stringValue];
}
//REJECT: NSComparisonResult
//NSComparisonResult NSNumber_compare(void* goobj, void* otherNumber) {
//  return [(NSNumber*)goobj compare:(NSNumber*)otherNumber];
//}
bool NSNumber_isEqualToNumber(void* goobj, void* number) {
  return [(NSNumber*)goobj isEqualToNumber:(NSNumber*)number];
}
void* NSNumber_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSNumber*)goobj descriptionWithLocale:locale];
}
void* NSNumber_initWithChar(char value) {
  return [[NSNumber alloc] initWithChar:value];
}
void* NSNumber_initWithUnsignedChar(unsigned char value) {
  return [[NSNumber alloc] initWithUnsignedChar:value];
}
void* NSNumber_initWithShort(short value) {
  return [[NSNumber alloc] initWithShort:value];
}
void* NSNumber_initWithUnsignedShort(unsigned short value) {
  return [[NSNumber alloc] initWithUnsignedShort:value];
}
void* NSNumber_initWithInt(int value) {
  return [[NSNumber alloc] initWithInt:value];
}
void* NSNumber_initWithUnsignedInt(unsigned int value) {
  return [[NSNumber alloc] initWithUnsignedInt:value];
}
void* NSNumber_initWithLong(long long value) {
  return [[NSNumber alloc] initWithLong:value];
}
void* NSNumber_initWithUnsignedLong(unsigned long long value) {
  return [[NSNumber alloc] initWithUnsignedLong:value];
}
void* NSNumber_initWithLongLong(long long value) {
  return [[NSNumber alloc] initWithLongLong:value];
}
void* NSNumber_initWithUnsignedLongLong(unsigned long long value) {
  return [[NSNumber alloc] initWithUnsignedLongLong:value];
}
void* NSNumber_initWithFloat(float value) {
  return [[NSNumber alloc] initWithFloat:value];
}
void* NSNumber_initWithDouble(double value) {
  return [[NSNumber alloc] initWithDouble:value];
}
void* NSNumber_initWithBool(bool value) {
  return [[NSNumber alloc] initWithBool:value];
}
//REJECT: value
//void* NSNumber_initWithInteger(NSInteger value) {
//  return [[NSNumber alloc] initWithInteger:value];
//}
void* NSNumber_initWithUnsignedInteger(uint value) {
  return [[NSNumber alloc] initWithUnsignedInteger:value];
}
//REJECT: NSDecimal
//NSDecimal NSNumber_decimalValue(void* goobj) {
//  return [(NSNumber*)goobj decimalValue];
//}


////NSString
uint NSString_length(void* goobj) {
  return [(NSString*)goobj length];
}
//REJECT: unichar
//unichar NSString_characterAtIndex(void* goobj, uint index) {
//  return [(NSString*)goobj characterAtIndex:index];
//}
//REJECT: buffer aRange
//void NSString_getCharactersRange(void* goobj, unichar buffer, NSRange aRange) {
//  [(NSString*)goobj getCharacters:buffer range:aRange];
//}
void* NSString_substringFromIndex(void* goobj, uint from) {
  return [(NSString*)goobj substringFromIndex:from];
}
void* NSString_substringToIndex(void* goobj, uint to) {
  return [(NSString*)goobj substringToIndex:to];
}
//REJECT: range
//void* NSString_substringWithRange(void* goobj, NSRange range) {
//  return [(NSString*)goobj substringWithRange:range];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSString_compare(void* goobj, void* string) {
//  return [(NSString*)goobj compare:(NSString*)string];
//}
//REJECT: NSComparisonResult mask
//NSComparisonResult NSString_compareOptions(void* goobj, void* string, NSStringCompareOptions mask) {
//  return [(NSString*)goobj compare:(NSString*)string options:mask];
//}
//REJECT: NSComparisonResult mask compareRange
//NSComparisonResult NSString_compareOptionsRange(void* goobj, void* string, NSStringCompareOptions mask, NSRange compareRange) {
//  return [(NSString*)goobj compare:(NSString*)string options:mask range:compareRange];
//}
//REJECT: NSComparisonResult mask compareRange
//NSComparisonResult NSString_compareOptionsRangeLocale(void* goobj, void* string, NSStringCompareOptions mask, NSRange compareRange, void* locale) {
//  return [(NSString*)goobj compare:(NSString*)string options:mask range:compareRange locale:locale];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSString_caseInsensitiveCompare(void* goobj, void* string) {
//  return [(NSString*)goobj caseInsensitiveCompare:(NSString*)string];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSString_localizedCompare(void* goobj, void* string) {
//  return [(NSString*)goobj localizedCompare:(NSString*)string];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSString_localizedCaseInsensitiveCompare(void* goobj, void* string) {
//  return [(NSString*)goobj localizedCaseInsensitiveCompare:(NSString*)string];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSString_localizedStandardCompare(void* goobj, void* string) {
//  return [(NSString*)goobj localizedStandardCompare:(NSString*)string];
//}
bool NSString_isEqualToString(void* goobj, void* aString) {
  return [(NSString*)goobj isEqualToString:(NSString*)aString];
}
bool NSString_hasPrefix(void* goobj, void* aString) {
  return [(NSString*)goobj hasPrefix:(NSString*)aString];
}
bool NSString_hasSuffix(void* goobj, void* aString) {
  return [(NSString*)goobj hasSuffix:(NSString*)aString];
}
//REJECT: NSRange
//NSRange NSString_rangeOfString(void* goobj, void* aString) {
//  return [(NSString*)goobj rangeOfString:(NSString*)aString];
//}
//REJECT: NSRange mask
//NSRange NSString_rangeOfStringOptions(void* goobj, void* aString, NSStringCompareOptions mask) {
//  return [(NSString*)goobj rangeOfString:(NSString*)aString options:mask];
//}
//REJECT: NSRange mask searchRange
//NSRange NSString_rangeOfStringOptionsRange(void* goobj, void* aString, NSStringCompareOptions mask, NSRange searchRange) {
//  return [(NSString*)goobj rangeOfString:(NSString*)aString options:mask range:searchRange];
//}
//REJECT: NSRange mask searchRange locale
//NSRange NSString_rangeOfStringOptionsRangeLocale(void* goobj, void* aString, NSStringCompareOptions mask, NSRange searchRange, void* locale) {
//  return [(NSString*)goobj rangeOfString:(NSString*)aString options:mask range:searchRange locale:(NSLocale*)locale];
//}
//REJECT: NSRange
//NSRange NSString_rangeOfCharacterFromSet(void* goobj, void* aSet) {
//  return [(NSString*)goobj rangeOfCharacterFromSet:(NSCharacterSet*)aSet];
//}
//REJECT: NSRange mask
//NSRange NSString_rangeOfCharacterFromSetOptions(void* goobj, void* aSet, NSStringCompareOptions mask) {
//  return [(NSString*)goobj rangeOfCharacterFromSet:(NSCharacterSet*)aSet options:mask];
//}
//REJECT: NSRange mask searchRange
//NSRange NSString_rangeOfCharacterFromSetOptionsRange(void* goobj, void* aSet, NSStringCompareOptions mask, NSRange searchRange) {
//  return [(NSString*)goobj rangeOfCharacterFromSet:(NSCharacterSet*)aSet options:mask range:searchRange];
//}
//REJECT: NSRange
//NSRange NSString_rangeOfComposedCharacterSequenceAtIndex(void* goobj, uint index) {
//  return [(NSString*)goobj rangeOfComposedCharacterSequenceAtIndex:index];
//}
//REJECT: NSRange range
//NSRange NSString_rangeOfComposedCharacterSequencesForRange(void* goobj, NSRange range) {
//  return [(NSString*)goobj rangeOfComposedCharacterSequencesForRange:range];
//}
void* NSString_stringByAppendingString(void* goobj, void* aString) {
  return [(NSString*)goobj stringByAppendingString:(NSString*)aString];
}
void* NSString_stringByAppendingFormat(void* goobj, void* format) {
  return [(NSString*)goobj stringByAppendingFormat:(NSString*)format];
}
double NSString_doubleValue(void* goobj) {
  return [(NSString*)goobj doubleValue];
}
float NSString_floatValue(void* goobj) {
  return [(NSString*)goobj floatValue];
}
int NSString_intValue(void* goobj) {
  return [(NSString*)goobj intValue];
}
//REJECT: NSInteger
//NSInteger NSString_integerValue(void* goobj) {
//  return [(NSString*)goobj integerValue];
//}
long long NSString_longLongValue(void* goobj) {
  return [(NSString*)goobj longLongValue];
}
bool NSString_boolValue(void* goobj) {
  return [(NSString*)goobj boolValue];
}
void* NSString_componentsSeparatedByString(void* goobj, void* separator) {
  return [(NSString*)goobj componentsSeparatedByString:(NSString*)separator];
}
void* NSString_componentsSeparatedByCharactersInSet(void* goobj, void* separator) {
  return [(NSString*)goobj componentsSeparatedByCharactersInSet:(NSCharacterSet*)separator];
}
//REJECT: mask
//void* NSString_commonPrefixWithStringOptions(void* goobj, void* aString, NSStringCompareOptions mask) {
//  return [(NSString*)goobj commonPrefixWithString:(NSString*)aString options:mask];
//}
void* NSString_uppercaseString(void* goobj) {
  return [(NSString*)goobj uppercaseString];
}
void* NSString_lowercaseString(void* goobj) {
  return [(NSString*)goobj lowercaseString];
}
void* NSString_capitalizedString(void* goobj) {
  return [(NSString*)goobj capitalizedString];
}
//REJECT: locale
//void* NSString_uppercaseStringWithLocale(void* goobj, void* locale) {
//  return [(NSString*)goobj uppercaseStringWithLocale:(NSLocale*)locale];
//}
//REJECT: locale
//void* NSString_lowercaseStringWithLocale(void* goobj, void* locale) {
//  return [(NSString*)goobj lowercaseStringWithLocale:(NSLocale*)locale];
//}
//REJECT: locale
//void* NSString_capitalizedStringWithLocale(void* goobj, void* locale) {
//  return [(NSString*)goobj capitalizedStringWithLocale:(NSLocale*)locale];
//}
void* NSString_stringByTrimmingCharactersInSet(void* goobj, void* set) {
  return [(NSString*)goobj stringByTrimmingCharactersInSet:(NSCharacterSet*)set];
}
void* NSString_stringByPaddingToLengthWithStringStartingAtIndex(void* goobj, uint newLength, void* padString, uint padIndex) {
  return [(NSString*)goobj stringByPaddingToLength:newLength withString:(NSString*)padString startingAtIndex:padIndex];
}
//REJECT: range
//void NSString_getLineStartEndContentsEndForRange(void* goobj, uint startPtr, uint lineEndPtr, uint contentsEndPtr, NSRange range) {
//  [(NSString*)goobj getLineStart:startPtr end:lineEndPtr contentsEnd:contentsEndPtr forRange:range];
//}
//REJECT: NSRange range
//NSRange NSString_lineRangeForRange(void* goobj, NSRange range) {
//  return [(NSString*)goobj lineRangeForRange:range];
//}
//REJECT: range
//void NSString_getParagraphStartEndContentsEndForRange(void* goobj, uint startPtr, uint parEndPtr, uint contentsEndPtr, NSRange range) {
//  [(NSString*)goobj getParagraphStart:startPtr end:parEndPtr contentsEnd:contentsEndPtr forRange:range];
//}
//REJECT: NSRange range
//NSRange NSString_paragraphRangeForRange(void* goobj, NSRange range) {
//  return [(NSString*)goobj paragraphRangeForRange:range];
//}
//REJECT: range block
//void NSString_enumerateSubstringsInRangeOptionsUsingBlock(void* goobj, NSRange range, NSStringEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSString*)goobj enumerateSubstringsInRange:range options:opts usingBlock:block];
//}
//REJECT: block
//void NSString_enumerateLinesUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSString*)goobj enumerateLinesUsingBlock:block];
//}
void* NSString_description(void* goobj) {
  return [(NSString*)goobj description];
}
uint NSString_hash(void* goobj) {
  return [(NSString*)goobj hash];
}
//REJECT: NSStringEncoding
//NSStringEncoding NSString_fastestEncoding(void* goobj) {
//  return [(NSString*)goobj fastestEncoding];
//}
//REJECT: NSStringEncoding
//NSStringEncoding NSString_smallestEncoding(void* goobj) {
//  return [(NSString*)goobj smallestEncoding];
//}
//REJECT: encoding
//void* NSString_dataUsingEncodingAllowLossyConversion(void* goobj, NSStringEncoding encoding, bool lossy) {
//  return [(NSString*)goobj dataUsingEncoding:encoding allowLossyConversion:lossy];
//}
//REJECT: encoding
//void* NSString_dataUsingEncoding(void* goobj, NSStringEncoding encoding) {
//  return [(NSString*)goobj dataUsingEncoding:encoding];
//}
//REJECT: encoding
//bool NSString_canBeConvertedToEncoding(void* goobj, NSStringEncoding encoding) {
//  return [(NSString*)goobj canBeConvertedToEncoding:encoding];
//}
//REJECT: encoding
//const char* NSString_cStringUsingEncoding(void* goobj, NSStringEncoding encoding) {
//  return [(NSString*)goobj cStringUsingEncoding:encoding];
//}
//REJECT: encoding
//bool NSString_getCStringMaxLengthEncoding(void* goobj, char* buffer, uint maxBufferCount, NSStringEncoding encoding) {
//  return [(NSString*)goobj getCString:buffer maxLength:maxBufferCount encoding:encoding];
//}
//REJECT: encoding range leftover
//bool NSString_getBytesMaxLengthUsedLengthEncodingOptionsRangeRemainingRange(void* goobj, void* buffer, uint maxBufferCount, uint usedBufferCount, NSStringEncoding encoding, NSStringEncodingConversionOptions options, NSRange range, NSRangePointer leftover) {
//  return [(NSString*)goobj getBytes:buffer maxLength:maxBufferCount usedLength:usedBufferCount encoding:encoding options:options range:range remainingRange:leftover];
//}
//REJECT: enc
//uint NSString_maximumLengthOfBytesUsingEncoding(void* goobj, NSStringEncoding enc) {
//  return [(NSString*)goobj maximumLengthOfBytesUsingEncoding:enc];
//}
//REJECT: enc
//uint NSString_lengthOfBytesUsingEncoding(void* goobj, NSStringEncoding enc) {
//  return [(NSString*)goobj lengthOfBytesUsingEncoding:enc];
//}
void* NSString_decomposedStringWithCanonicalMapping(void* goobj) {
  return [(NSString*)goobj decomposedStringWithCanonicalMapping];
}
void* NSString_precomposedStringWithCanonicalMapping(void* goobj) {
  return [(NSString*)goobj precomposedStringWithCanonicalMapping];
}
void* NSString_decomposedStringWithCompatibilityMapping(void* goobj) {
  return [(NSString*)goobj decomposedStringWithCompatibilityMapping];
}
void* NSString_precomposedStringWithCompatibilityMapping(void* goobj) {
  return [(NSString*)goobj precomposedStringWithCompatibilityMapping];
}
//REJECT: options locale
//void* NSString_stringByFoldingWithOptionsLocale(void* goobj, NSStringCompareOptions options, void* locale) {
//  return [(NSString*)goobj stringByFoldingWithOptions:options locale:(NSLocale*)locale];
//}
//REJECT: options searchRange
//void* NSString_stringByReplacingOccurrencesOfStringWithStringOptionsRange(void* goobj, void* target, void* replacement, NSStringCompareOptions options, NSRange searchRange) {
//  return [(NSString*)goobj stringByReplacingOccurrencesOfString:(NSString*)target withString:(NSString*)replacement options:options range:searchRange];
//}
void* NSString_stringByReplacingOccurrencesOfStringWithString(void* goobj, void* target, void* replacement) {
  return [(NSString*)goobj stringByReplacingOccurrencesOfString:(NSString*)target withString:(NSString*)replacement];
}
//REJECT: range
//void* NSString_stringByReplacingCharactersInRangeWithString(void* goobj, NSRange range, void* replacement) {
//  return [(NSString*)goobj stringByReplacingCharactersInRange:range withString:(NSString*)replacement];
//}
const char* NSString_UTF8String(void* goobj) {
  return [(NSString*)goobj UTF8String];
}
void* NSString_init() {
  return [[NSString alloc] init];
}
//REJECT: characters
//void* NSString_initWithCharactersNoCopyLengthFreeWhenDone(unichar characters, uint length, bool freeBuffer) {
//  return [[NSString alloc] initWithCharactersNoCopy:characters length:length freeWhenDone:freeBuffer];
//}
//REJECT: characters
//void* NSString_initWithCharactersLength(unichar characters, uint length) {
//  return [[NSString alloc] initWithCharacters:characters length:length];
//}
void* NSString_initWithUTF8String(const char* nullTerminatedCString) {
  return [[NSString alloc] initWithUTF8String:nullTerminatedCString];
}
void* NSString_initWithString(void* aString) {
  return [[NSString alloc] initWithString:(NSString*)aString];
}
void* NSString_initWithFormat(void* format) {
  return [[NSString alloc] initWithFormat:(NSString*)format];
}
//REJECT: argList
//void* NSString_initWithFormatArguments(void* format, va_list argList) {
//  return [[NSString alloc] initWithFormat:(NSString*)format arguments:argList];
//}
void* NSString_initWithFormatLocale(void* format, void* locale) {
  return [[NSString alloc] initWithFormat:(NSString*)format locale:locale];
}
//REJECT: argList
//void* NSString_initWithFormatLocaleArguments(void* format, void* locale, va_list argList) {
//  return [[NSString alloc] initWithFormat:(NSString*)format locale:locale arguments:argList];
//}
//REJECT: encoding
//void* NSString_initWithDataEncoding(void* data, NSStringEncoding encoding) {
//  return [[NSString alloc] initWithData:(NSData*)data encoding:encoding];
//}
//REJECT: encoding
//void* NSString_initWithBytesLengthEncoding(const void* bytes, uint len, NSStringEncoding encoding) {
//  return [[NSString alloc] initWithBytes:bytes length:len encoding:encoding];
//}
//REJECT: encoding
//void* NSString_initWithBytesNoCopyLengthEncodingFreeWhenDone(void* bytes, uint len, NSStringEncoding encoding, bool freeBuffer) {
//  return [[NSString alloc] initWithBytesNoCopy:bytes length:len encoding:encoding freeWhenDone:freeBuffer];
//}
//REJECT: encoding
//void* NSString_initWithCStringEncoding(const char* nullTerminatedCString, NSStringEncoding encoding) {
//  return [[NSString alloc] initWithCString:nullTerminatedCString encoding:encoding];
//}
//REJECT: enc
//void* NSString_initWithContentsOfURLEncodingError(void* url, NSStringEncoding enc, void* error) {
//  return [[NSString alloc] initWithContentsOfURL:(NSURL*)url encoding:enc error:(NSError**)&error];
//}
//REJECT: enc
//void* NSString_initWithContentsOfFileEncodingError(void* path, NSStringEncoding enc, void* error) {
//  return [[NSString alloc] initWithContentsOfFile:(NSString*)path encoding:enc error:(NSError**)&error];
//}
//REJECT: enc
//void* NSString_initWithContentsOfURLUsedEncodingError(void* url, NSStringEncoding enc, void* error) {
//  return [[NSString alloc] initWithContentsOfURL:(NSURL*)url usedEncoding:enc error:(NSError**)&error];
//}
//REJECT: enc
//void* NSString_initWithContentsOfFileUsedEncodingError(void* path, NSStringEncoding enc, void* error) {
//  return [[NSString alloc] initWithContentsOfFile:(NSString*)path usedEncoding:enc error:(NSError**)&error];
//}
//REJECT: enc
//bool NSString_writeToURLAtomicallyEncodingError(void* goobj, void* url, bool useAuxiliaryFile, NSStringEncoding enc, void* error) {
//  return [(NSString*)goobj writeToURL:(NSURL*)url atomically:useAuxiliaryFile encoding:enc error:(NSError**)&error];
//}
//REJECT: enc
//bool NSString_writeToFileAtomicallyEncodingError(void* goobj, void* path, bool useAuxiliaryFile, NSStringEncoding enc, void* error) {
//  return [(NSString*)goobj writeToFile:(NSString*)path atomically:useAuxiliaryFile encoding:enc error:(NSError**)&error];
//}
void* NSString_propertyList(void* goobj) {
  return [(NSString*)goobj propertyList];
}
void* NSString_propertyListFromStringsFileFormat(void* goobj) {
  return [(NSString*)goobj propertyListFromStringsFileFormat];
}
void* NSString_pathComponents(void* goobj) {
  return [(NSString*)goobj pathComponents];
}
bool NSString_isAbsolutePath(void* goobj) {
  return [(NSString*)goobj isAbsolutePath];
}
void* NSString_lastPathComponent(void* goobj) {
  return [(NSString*)goobj lastPathComponent];
}
void* NSString_stringByDeletingLastPathComponent(void* goobj) {
  return [(NSString*)goobj stringByDeletingLastPathComponent];
}
void* NSString_stringByAppendingPathComponent(void* goobj, void* str) {
  return [(NSString*)goobj stringByAppendingPathComponent:(NSString*)str];
}
void* NSString_pathExtension(void* goobj) {
  return [(NSString*)goobj pathExtension];
}
void* NSString_stringByDeletingPathExtension(void* goobj) {
  return [(NSString*)goobj stringByDeletingPathExtension];
}
void* NSString_stringByAppendingPathExtension(void* goobj, void* str) {
  return [(NSString*)goobj stringByAppendingPathExtension:(NSString*)str];
}
void* NSString_stringByAbbreviatingWithTildeInPath(void* goobj) {
  return [(NSString*)goobj stringByAbbreviatingWithTildeInPath];
}
void* NSString_stringByExpandingTildeInPath(void* goobj) {
  return [(NSString*)goobj stringByExpandingTildeInPath];
}
void* NSString_stringByStandardizingPath(void* goobj) {
  return [(NSString*)goobj stringByStandardizingPath];
}
void* NSString_stringByResolvingSymlinksInPath(void* goobj) {
  return [(NSString*)goobj stringByResolvingSymlinksInPath];
}
void* NSString_stringsByAppendingPaths(void* goobj, void* paths) {
  return [(NSString*)goobj stringsByAppendingPaths:(NSArray*)paths];
}
uint NSString_completePathIntoStringCaseSensitiveMatchesIntoArrayFilterTypes(void* goobj, void* outputName, bool flag, void* outputArray, void* filterTypes) {
  return [(NSString*)goobj completePathIntoString:(NSString*)outputName caseSensitive:flag matchesIntoArray:(NSArray*)outputArray filterTypes:(NSArray*)filterTypes];
}
const char* NSString_fileSystemRepresentation(void* goobj) {
  return [(NSString*)goobj fileSystemRepresentation];
}
bool NSString_getFileSystemRepresentationMaxLength(void* goobj, char* cname, uint max) {
  return [(NSString*)goobj getFileSystemRepresentation:cname maxLength:max];
}
void* NSString_stringByAddingPercentEncodingWithAllowedCharacters(void* goobj, void* allowedCharacters) {
  return [(NSString*)goobj stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet*)allowedCharacters];
}
void* NSString_stringByRemovingPercentEncoding(void* goobj) {
  return [(NSString*)goobj stringByRemovingPercentEncoding];
}
//REJECT: enc
//void* NSString_stringByAddingPercentEscapesUsingEncoding(void* goobj, NSStringEncoding enc) {
//  return [(NSString*)goobj stringByAddingPercentEscapesUsingEncoding:enc];
//}
//REJECT: enc
//void* NSString_stringByReplacingPercentEscapesUsingEncoding(void* goobj, NSStringEncoding enc) {
//  return [(NSString*)goobj stringByReplacingPercentEscapesUsingEncoding:enc];
//}
//REJECT: range
//void* NSString_linguisticTagsInRangeSchemeOptionsOrthographyTokenRanges(void* goobj, NSRange range, void* tagScheme, NSLinguisticTaggerOptions opts, void* orthography, void* tokenRanges) {
//  return [(NSString*)goobj linguisticTagsInRange:range scheme:(NSString*)tagScheme options:opts orthography:(NSOrthography*)orthography tokenRanges:(NSArray*)tokenRanges];
//}
//REJECT: range block
//void NSString_enumerateLinguisticTagsInRangeSchemeOptionsOrthographyUsingBlock(void* goobj, NSRange range, void* tagScheme, NSLinguisticTaggerOptions opts, void* orthography, *INVALID TYPE* block) {
//  [(NSString*)goobj enumerateLinguisticTagsInRange:range scheme:(NSString*)tagScheme options:opts orthography:(NSOrthography*)orthography usingBlock:block];
//}


////NSMutableString
void* NSMutableString_init() {
  return [[NSMutableString alloc] init];
}
//REJECT: range
//void NSMutableString_replaceCharactersInRangeWithString(void* goobj, NSRange range, void* aString) {
//  [(NSMutableString*)goobj replaceCharactersInRange:range withString:(NSString*)aString];
//}
void NSMutableString_insertStringAtIndex(void* goobj, void* aString, uint loc) {
  [(NSMutableString*)goobj insertString:(NSString*)aString atIndex:loc];
}
//REJECT: range
//void NSMutableString_deleteCharactersInRange(void* goobj, NSRange range) {
//  [(NSMutableString*)goobj deleteCharactersInRange:range];
//}
void NSMutableString_appendString(void* goobj, void* aString) {
  [(NSMutableString*)goobj appendString:(NSString*)aString];
}
void NSMutableString_appendFormat(void* goobj, void* format) {
  [(NSMutableString*)goobj appendFormat:(NSString*)format];
}
void NSMutableString_setString(void* goobj, void* aString) {
  [(NSMutableString*)goobj setString:(NSString*)aString];
}
void* NSMutableString_initWithCapacity(uint capacity) {
  return [[NSMutableString alloc] initWithCapacity:capacity];
}
//REJECT: options searchRange
//uint NSMutableString_replaceOccurrencesOfStringWithStringOptionsRange(void* goobj, void* target, void* replacement, NSStringCompareOptions options, NSRange searchRange) {
//  return [(NSMutableString*)goobj replaceOccurrencesOfString:(NSString*)target withString:(NSString*)replacement options:options range:searchRange];
//}


////NSSimpleCString
void* NSSimpleCString_init() {
  return [[NSSimpleCString alloc] init];
}



////NSConstantString
void* NSConstantString_init() {
  return [[NSConstantString alloc] init];
}



////NSCoder
void* NSCoder_init() {
  return [[NSCoder alloc] init];
}
void NSCoder_encodeValueOfObjCTypeAt(void* goobj, const char* type, const void* addr) {
  [(NSCoder*)goobj encodeValueOfObjCType:type at:addr];
}
void NSCoder_encodeDataObject(void* goobj, void* data) {
  [(NSCoder*)goobj encodeDataObject:(NSData*)data];
}
void NSCoder_decodeValueOfObjCTypeAt(void* goobj, const char* type, void* data) {
  [(NSCoder*)goobj decodeValueOfObjCType:type at:data];
}
void* NSCoder_decodeDataObject(void* goobj) {
  return [(NSCoder*)goobj decodeDataObject];
}
//REJECT: NSInteger
//NSInteger NSCoder_versionForClassName(void* goobj, void* className) {
//  return [(NSCoder*)goobj versionForClassName:(NSString*)className];
//}
void NSCoder_encodeObject(void* goobj, void* object) {
  [(NSCoder*)goobj encodeObject:object];
}
void NSCoder_encodeRootObject(void* goobj, void* rootObject) {
  [(NSCoder*)goobj encodeRootObject:rootObject];
}
void NSCoder_encodeBycopyObject(void* goobj, void* anObject) {
  [(NSCoder*)goobj encodeBycopyObject:anObject];
}
void NSCoder_encodeByrefObject(void* goobj, void* anObject) {
  [(NSCoder*)goobj encodeByrefObject:anObject];
}
void NSCoder_encodeConditionalObject(void* goobj, void* object) {
  [(NSCoder*)goobj encodeConditionalObject:object];
}
void NSCoder_encodeValuesOfObjCTypes(void* goobj, const char* types) {
  [(NSCoder*)goobj encodeValuesOfObjCTypes:types];
}
void NSCoder_encodeArrayOfObjCTypeCountAt(void* goobj, const char* type, uint count, const void* array) {
  [(NSCoder*)goobj encodeArrayOfObjCType:type count:count at:array];
}
void NSCoder_encodeBytesLength(void* goobj, const void* byteaddr, uint length) {
  [(NSCoder*)goobj encodeBytes:byteaddr length:length];
}
void* NSCoder_decodeObject(void* goobj) {
  return [(NSCoder*)goobj decodeObject];
}
void NSCoder_decodeValuesOfObjCTypes(void* goobj, const char* types) {
  [(NSCoder*)goobj decodeValuesOfObjCTypes:types];
}
void NSCoder_decodeArrayOfObjCTypeCountAt(void* goobj, const char* itemType, uint count, void* array) {
  [(NSCoder*)goobj decodeArrayOfObjCType:itemType count:count at:array];
}
void* NSCoder_decodeBytesWithReturnedLength(void* goobj, uint lengthp) {
  return [(NSCoder*)goobj decodeBytesWithReturnedLength:lengthp];
}
void NSCoder_encodePropertyList(void* goobj, void* aPropertyList) {
  [(NSCoder*)goobj encodePropertyList:aPropertyList];
}
void* NSCoder_decodePropertyList(void* goobj) {
  return [(NSCoder*)goobj decodePropertyList];
}
//REJECT: zone
//void NSCoder_setObjectZone(void* goobj, NSZone zone) {
//  [(NSCoder*)goobj setObjectZone:zone];
//}
//REJECT: NSZone
//NSZone NSCoder_objectZone(void* goobj) {
//  return [(NSCoder*)goobj objectZone];
//}
unsigned int NSCoder_systemVersion(void* goobj) {
  return [(NSCoder*)goobj systemVersion];
}
bool NSCoder_allowsKeyedCoding(void* goobj) {
  return [(NSCoder*)goobj allowsKeyedCoding];
}
void NSCoder_encodeObjectForKey(void* goobj, void* objv, void* key) {
  [(NSCoder*)goobj encodeObject:objv forKey:(NSString*)key];
}
void NSCoder_encodeConditionalObjectForKey(void* goobj, void* objv, void* key) {
  [(NSCoder*)goobj encodeConditionalObject:objv forKey:(NSString*)key];
}
void NSCoder_encodeBoolForKey(void* goobj, bool boolv, void* key) {
  [(NSCoder*)goobj encodeBool:boolv forKey:(NSString*)key];
}
void NSCoder_encodeIntForKey(void* goobj, int intv, void* key) {
  [(NSCoder*)goobj encodeInt:intv forKey:(NSString*)key];
}
void NSCoder_encodeInt32ForKey(void* goobj, int32_t intv, void* key) {
  [(NSCoder*)goobj encodeInt32:intv forKey:(NSString*)key];
}
void NSCoder_encodeInt64ForKey(void* goobj, int64_t intv, void* key) {
  [(NSCoder*)goobj encodeInt64:intv forKey:(NSString*)key];
}
void NSCoder_encodeFloatForKey(void* goobj, float realv, void* key) {
  [(NSCoder*)goobj encodeFloat:realv forKey:(NSString*)key];
}
void NSCoder_encodeDoubleForKey(void* goobj, double realv, void* key) {
  [(NSCoder*)goobj encodeDouble:realv forKey:(NSString*)key];
}
void NSCoder_encodeBytesLengthForKey(void* goobj, uint8_t bytesp, uint lenv, void* key) {
  [(NSCoder*)goobj encodeBytes:bytesp length:lenv forKey:(NSString*)key];
}
bool NSCoder_containsValueForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj containsValueForKey:(NSString*)key];
}
void* NSCoder_decodeObjectForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeObjectForKey:(NSString*)key];
}
bool NSCoder_decodeBoolForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeBoolForKey:(NSString*)key];
}
int NSCoder_decodeIntForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeIntForKey:(NSString*)key];
}
int32_t NSCoder_decodeInt32ForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeInt32ForKey:(NSString*)key];
}
int64_t NSCoder_decodeInt64ForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeInt64ForKey:(NSString*)key];
}
float NSCoder_decodeFloatForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeFloatForKey:(NSString*)key];
}
double NSCoder_decodeDoubleForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeDoubleForKey:(NSString*)key];
}
uint8_t NSCoder_decodeBytesForKeyReturnedLength(void* goobj, void* key, uint lengthp) {
  return [(NSCoder*)goobj decodeBytesForKey:(NSString*)key returnedLength:lengthp];
}
//REJECT: intv
//void NSCoder_encodeIntegerForKey(void* goobj, NSInteger intv, void* key) {
//  [(NSCoder*)goobj encodeInteger:intv forKey:(NSString*)key];
//}
//REJECT: NSInteger
//NSInteger NSCoder_decodeIntegerForKey(void* goobj, void* key) {
//  return [(NSCoder*)goobj decodeIntegerForKey:(NSString*)key];
//}
bool NSCoder_requiresSecureCoding(void* goobj) {
  return [(NSCoder*)goobj requiresSecureCoding];
}
//REJECT: aClass
//void* NSCoder_decodeObjectOfClassForKey(void* goobj, Class aClass, void* key) {
//  return [(NSCoder*)goobj decodeObjectOfClass:aClass forKey:(NSString*)key];
//}
void* NSCoder_decodeObjectOfClassesForKey(void* goobj, void* classes, void* key) {
  return [(NSCoder*)goobj decodeObjectOfClasses:(NSSet*)classes forKey:(NSString*)key];
}
void* NSCoder_decodePropertyListForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodePropertyListForKey:(NSString*)key];
}
void* NSCoder_allowedClasses(void* goobj) {
  return [(NSCoder*)goobj allowedClasses];
}
void NSCoder_encodeNXObject(void* goobj, void* object) {
  [(NSCoder*)goobj encodeNXObject:object];
}
void* NSCoder_decodeNXObject(void* goobj) {
  return [(NSCoder*)goobj decodeNXObject];
}
void NSCoder_encodePoint(void* goobj, NSPoint point) {
  [(NSCoder*)goobj encodePoint:point];
}
NSPoint NSCoder_decodePoint(void* goobj) {
  return [(NSCoder*)goobj decodePoint];
}
//REJECT: size
//void NSCoder_encodeSize(void* goobj, NSSize size) {
//  [(NSCoder*)goobj encodeSize:size];
//}
//REJECT: NSSize
//NSSize NSCoder_decodeSize(void* goobj) {
//  return [(NSCoder*)goobj decodeSize];
//}
void NSCoder_encodeRect(void* goobj, NSRect rect) {
  [(NSCoder*)goobj encodeRect:rect];
}
NSRect NSCoder_decodeRect(void* goobj) {
  return [(NSCoder*)goobj decodeRect];
}
void NSCoder_encodePointForKey(void* goobj, NSPoint point, void* key) {
  [(NSCoder*)goobj encodePoint:point forKey:(NSString*)key];
}
//REJECT: size
//void NSCoder_encodeSizeForKey(void* goobj, NSSize size, void* key) {
//  [(NSCoder*)goobj encodeSize:size forKey:(NSString*)key];
//}
void NSCoder_encodeRectForKey(void* goobj, NSRect rect, void* key) {
  [(NSCoder*)goobj encodeRect:rect forKey:(NSString*)key];
}
NSPoint NSCoder_decodePointForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodePointForKey:(NSString*)key];
}
//REJECT: NSSize
//NSSize NSCoder_decodeSizeForKey(void* goobj, void* key) {
//  return [(NSCoder*)goobj decodeSizeForKey:(NSString*)key];
//}
NSRect NSCoder_decodeRectForKey(void* goobj, void* key) {
  return [(NSCoder*)goobj decodeRectForKey:(NSString*)key];
}


////NSTouch
void* NSTouch_init() {
  return [[NSTouch alloc] init];
}
void* NSTouch_identity(void* goobj) {
  return [(NSTouch*)goobj identity];
}
//REJECT: NSTouchPhase
//NSTouchPhase NSTouch_phase(void* goobj) {
//  return [(NSTouch*)goobj phase];
//}
NSPoint NSTouch_normalizedPosition(void* goobj) {
  return [(NSTouch*)goobj normalizedPosition];
}
bool NSTouch_isResting(void* goobj) {
  return [(NSTouch*)goobj isResting];
}
void* NSTouch_device(void* goobj) {
  return [(NSTouch*)goobj device];
}
//REJECT: NSSize
//NSSize NSTouch_deviceSize(void* goobj) {
//  return [(NSTouch*)goobj deviceSize];
//}


////NSDate
//REJECT: NSTimeInterval
//NSTimeInterval NSDate_timeIntervalSinceReferenceDate(void* goobj) {
//  return [(NSDate*)goobj timeIntervalSinceReferenceDate];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSDate_timeIntervalSinceDate(void* goobj, void* anotherDate) {
//  return [(NSDate*)goobj timeIntervalSinceDate:(NSDate*)anotherDate];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSDate_timeIntervalSinceNow(void* goobj) {
//  return [(NSDate*)goobj timeIntervalSinceNow];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSDate_timeIntervalSince1970(void* goobj) {
//  return [(NSDate*)goobj timeIntervalSince1970];
//}
//REJECT: seconds
//void* NSDate_addTimeInterval(void* goobj, NSTimeInterval seconds) {
//  return [(NSDate*)goobj addTimeInterval:seconds];
//}
//REJECT: ti
//void* NSDate_dateByAddingTimeInterval(void* goobj, NSTimeInterval ti) {
//  return [(NSDate*)goobj dateByAddingTimeInterval:ti];
//}
void* NSDate_earlierDate(void* goobj, void* anotherDate) {
  return [(NSDate*)goobj earlierDate:(NSDate*)anotherDate];
}
void* NSDate_laterDate(void* goobj, void* anotherDate) {
  return [(NSDate*)goobj laterDate:(NSDate*)anotherDate];
}
//REJECT: NSComparisonResult
//NSComparisonResult NSDate_compare(void* goobj, void* other) {
//  return [(NSDate*)goobj compare:(NSDate*)other];
//}
bool NSDate_isEqualToDate(void* goobj, void* otherDate) {
  return [(NSDate*)goobj isEqualToDate:(NSDate*)otherDate];
}
void* NSDate_description(void* goobj) {
  return [(NSDate*)goobj description];
}
void* NSDate_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSDate*)goobj descriptionWithLocale:locale];
}
void* NSDate_init() {
  return [[NSDate alloc] init];
}
//REJECT: ti
//void* NSDate_initWithTimeIntervalSinceReferenceDate(NSTimeInterval ti) {
//  return [[NSDate alloc] initWithTimeIntervalSinceReferenceDate:ti];
//}
//REJECT: secs
//void* NSDate_initWithTimeIntervalSinceNow(NSTimeInterval secs) {
//  return [[NSDate alloc] initWithTimeIntervalSinceNow:secs];
//}
//REJECT: secs
//void* NSDate_initWithTimeIntervalSince1970(NSTimeInterval secs) {
//  return [[NSDate alloc] initWithTimeIntervalSince1970:secs];
//}
//REJECT: secsToBeAdded
//void* NSDate_initWithTimeIntervalSinceDate(NSTimeInterval secsToBeAdded, void* date) {
//  return [[NSDate alloc] initWithTimeInterval:secsToBeAdded sinceDate:(NSDate*)date];
//}
void* NSDate_dateWithCalendarFormatTimeZone(void* goobj, void* format, void* aTimeZone) {
  return [(NSDate*)goobj dateWithCalendarFormat:(NSString*)format timeZone:(NSTimeZone*)aTimeZone];
}
void* NSDate_descriptionWithCalendarFormatTimeZoneLocale(void* goobj, void* format, void* aTimeZone, void* locale) {
  return [(NSDate*)goobj descriptionWithCalendarFormat:(NSString*)format timeZone:(NSTimeZone*)aTimeZone locale:locale];
}
void* NSDate_initWithString(void* description) {
  return [[NSDate alloc] initWithString:(NSString*)description];
}


////NSEvent
void* NSEvent_init() {
  return [[NSEvent alloc] init];
}
//REJECT: NSEventType
//NSEventType NSEvent_type(void* goobj) {
//  return [(NSEvent*)goobj type];
//}
uint NSEvent_modifierFlags(void* goobj) {
  return [(NSEvent*)goobj modifierFlags];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSEvent_timestamp(void* goobj) {
//  return [(NSEvent*)goobj timestamp];
//}
void* NSEvent_window(void* goobj) {
  return [(NSEvent*)goobj window];
}
//REJECT: NSInteger
//NSInteger NSEvent_windowNumber(void* goobj) {
//  return [(NSEvent*)goobj windowNumber];
//}
void* NSEvent_context(void* goobj) {
  return [(NSEvent*)goobj context];
}
//REJECT: NSInteger
//NSInteger NSEvent_clickCount(void* goobj) {
//  return [(NSEvent*)goobj clickCount];
//}
//REJECT: NSInteger
//NSInteger NSEvent_buttonNumber(void* goobj) {
//  return [(NSEvent*)goobj buttonNumber];
//}
//REJECT: NSInteger
//NSInteger NSEvent_eventNumber(void* goobj) {
//  return [(NSEvent*)goobj eventNumber];
//}
float NSEvent_pressure(void* goobj) {
  return [(NSEvent*)goobj pressure];
}
NSPoint NSEvent_locationInWindow(void* goobj) {
  return [(NSEvent*)goobj locationInWindow];
}
//REJECT: CGFloat
//CGFloat NSEvent_deltaX(void* goobj) {
//  return [(NSEvent*)goobj deltaX];
//}
//REJECT: CGFloat
//CGFloat NSEvent_deltaY(void* goobj) {
//  return [(NSEvent*)goobj deltaY];
//}
//REJECT: CGFloat
//CGFloat NSEvent_deltaZ(void* goobj) {
//  return [(NSEvent*)goobj deltaZ];
//}
bool NSEvent_hasPreciseScrollingDeltas(void* goobj) {
  return [(NSEvent*)goobj hasPreciseScrollingDeltas];
}
//REJECT: CGFloat
//CGFloat NSEvent_scrollingDeltaX(void* goobj) {
//  return [(NSEvent*)goobj scrollingDeltaX];
//}
//REJECT: CGFloat
//CGFloat NSEvent_scrollingDeltaY(void* goobj) {
//  return [(NSEvent*)goobj scrollingDeltaY];
//}
//REJECT: NSEventPhase
//NSEventPhase NSEvent_momentumPhase(void* goobj) {
//  return [(NSEvent*)goobj momentumPhase];
//}
bool NSEvent_isDirectionInvertedFromDevice(void* goobj) {
  return [(NSEvent*)goobj isDirectionInvertedFromDevice];
}
void* NSEvent_characters(void* goobj) {
  return [(NSEvent*)goobj characters];
}
void* NSEvent_charactersIgnoringModifiers(void* goobj) {
  return [(NSEvent*)goobj charactersIgnoringModifiers];
}
bool NSEvent_isARepeat(void* goobj) {
  return [(NSEvent*)goobj isARepeat];
}
unsigned short NSEvent_keyCode(void* goobj) {
  return [(NSEvent*)goobj keyCode];
}
//REJECT: NSInteger
//NSInteger NSEvent_trackingNumber(void* goobj) {
//  return [(NSEvent*)goobj trackingNumber];
//}
void* NSEvent_userData(void* goobj) {
  return [(NSEvent*)goobj userData];
}
void* NSEvent_trackingArea(void* goobj) {
  return [(NSEvent*)goobj trackingArea];
}
short NSEvent_subtype(void* goobj) {
  return [(NSEvent*)goobj subtype];
}
//REJECT: NSInteger
//NSInteger NSEvent_data1(void* goobj) {
//  return [(NSEvent*)goobj data1];
//}
//REJECT: NSInteger
//NSInteger NSEvent_data2(void* goobj) {
//  return [(NSEvent*)goobj data2];
//}
const void* NSEvent_eventRef(void* goobj) {
  return [(NSEvent*)goobj eventRef];
}
//REJECT: CGEventRef
//CGEventRef NSEvent_CGEvent(void* goobj) {
//  return [(NSEvent*)goobj CGEvent];
//}
//REJECT: CGFloat
//CGFloat NSEvent_magnification(void* goobj) {
//  return [(NSEvent*)goobj magnification];
//}
uint NSEvent_deviceID(void* goobj) {
  return [(NSEvent*)goobj deviceID];
}
float NSEvent_rotation(void* goobj) {
  return [(NSEvent*)goobj rotation];
}
//REJECT: NSInteger
//NSInteger NSEvent_absoluteX(void* goobj) {
//  return [(NSEvent*)goobj absoluteX];
//}
//REJECT: NSInteger
//NSInteger NSEvent_absoluteY(void* goobj) {
//  return [(NSEvent*)goobj absoluteY];
//}
//REJECT: NSInteger
//NSInteger NSEvent_absoluteZ(void* goobj) {
//  return [(NSEvent*)goobj absoluteZ];
//}
uint NSEvent_buttonMask(void* goobj) {
  return [(NSEvent*)goobj buttonMask];
}
NSPoint NSEvent_tilt(void* goobj) {
  return [(NSEvent*)goobj tilt];
}
float NSEvent_tangentialPressure(void* goobj) {
  return [(NSEvent*)goobj tangentialPressure];
}
void* NSEvent_vendorDefined(void* goobj) {
  return [(NSEvent*)goobj vendorDefined];
}
uint NSEvent_vendorID(void* goobj) {
  return [(NSEvent*)goobj vendorID];
}
uint NSEvent_tabletID(void* goobj) {
  return [(NSEvent*)goobj tabletID];
}
uint NSEvent_pointingDeviceID(void* goobj) {
  return [(NSEvent*)goobj pointingDeviceID];
}
uint NSEvent_systemTabletID(void* goobj) {
  return [(NSEvent*)goobj systemTabletID];
}
uint NSEvent_vendorPointingDeviceType(void* goobj) {
  return [(NSEvent*)goobj vendorPointingDeviceType];
}
uint NSEvent_pointingDeviceSerialNumber(void* goobj) {
  return [(NSEvent*)goobj pointingDeviceSerialNumber];
}
unsigned long long NSEvent_uniqueID(void* goobj) {
  return [(NSEvent*)goobj uniqueID];
}
uint NSEvent_capabilityMask(void* goobj) {
  return [(NSEvent*)goobj capabilityMask];
}
//REJECT: NSPointingDeviceType
//NSPointingDeviceType NSEvent_pointingDeviceType(void* goobj) {
//  return [(NSEvent*)goobj pointingDeviceType];
//}
bool NSEvent_isEnteringProximity(void* goobj) {
  return [(NSEvent*)goobj isEnteringProximity];
}
//REJECT: phase
//void* NSEvent_touchesMatchingPhaseInView(void* goobj, NSTouchPhase phase, void* view) {
//  return [(NSEvent*)goobj touchesMatchingPhase:phase inView:(NSView*)view];
//}
//REJECT: NSEventPhase
//NSEventPhase NSEvent_phase(void* goobj) {
//  return [(NSEvent*)goobj phase];
//}
//REJECT: options minDampenThreshold maxDampenThreshold trackingHandler
//void NSEvent_trackSwipeEventWithOptionsDampenAmountThresholdMinMaxUsingHandler(void* goobj, NSEventSwipeTrackingOptions options, CGFloat minDampenThreshold, CGFloat maxDampenThreshold, *INVALID TYPE* trackingHandler) {
//  [(NSEvent*)goobj trackSwipeEventWithOptions:options dampenAmountThresholdMin:minDampenThreshold max:maxDampenThreshold usingHandler:trackingHandler];
//}
void* NSEvent__eventWithEventRef(const void* eventRef) {
  return [NSEvent eventWithEventRef:eventRef];
}
//REJECT: cgEvent
//void* NSEvent__eventWithCGEvent(CGEventRef cgEvent) {
//  return [NSEvent eventWithCGEvent:cgEvent];
//}
void NSEvent__setMouseCoalescingEnabled(bool flag) {
  [NSEvent setMouseCoalescingEnabled:flag];
}
bool NSEvent__isMouseCoalescingEnabled() {
  return [NSEvent isMouseCoalescingEnabled];
}
bool NSEvent__isSwipeTrackingFromScrollEventsEnabled() {
  return [NSEvent isSwipeTrackingFromScrollEventsEnabled];
}
//REJECT: delay period
//void NSEvent__startPeriodicEventsAfterDelayWithPeriod(NSTimeInterval delay, NSTimeInterval period) {
//  [NSEvent startPeriodicEventsAfterDelay:delay withPeriod:period];
//}
void NSEvent__stopPeriodicEvents() {
  [NSEvent stopPeriodicEvents];
}
//REJECT: type time wNum eNum cNum
//void* NSEvent__mouseEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberClickCountPressure(NSEventType type, NSPoint location, uint flags, NSTimeInterval time, NSInteger wNum, void* context, NSInteger eNum, NSInteger cNum, float pressure) {
//  return [NSEvent mouseEventWithType:type location:location modifierFlags:flags timestamp:time windowNumber:wNum context:(NSGraphicsContext*)context eventNumber:eNum clickCount:cNum pressure:pressure];
//}
//REJECT: type time wNum
//void* NSEvent__keyEventWithTypeLocationModifierFlagsTimestampWindowNumberContextCharactersCharactersIgnoringModifiersIsARepeatKeyCode(NSEventType type, NSPoint location, uint flags, NSTimeInterval time, NSInteger wNum, void* context, void* keys, void* ukeys, bool flag, unsigned short code) {
//  return [NSEvent keyEventWithType:type location:location modifierFlags:flags timestamp:time windowNumber:wNum context:(NSGraphicsContext*)context characters:(NSString*)keys charactersIgnoringModifiers:(NSString*)ukeys isARepeat:flag keyCode:code];
//}
//REJECT: type time wNum eNum tNum
//void* NSEvent__enterExitEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberTrackingNumberUserData(NSEventType type, NSPoint location, uint flags, NSTimeInterval time, NSInteger wNum, void* context, NSInteger eNum, NSInteger tNum, void* data) {
//  return [NSEvent enterExitEventWithType:type location:location modifierFlags:flags timestamp:time windowNumber:wNum context:(NSGraphicsContext*)context eventNumber:eNum trackingNumber:tNum userData:data];
//}
//REJECT: type time wNum d1 d2
//void* NSEvent__otherEventWithTypeLocationModifierFlagsTimestampWindowNumberContextSubtypeData1Data2(NSEventType type, NSPoint location, uint flags, NSTimeInterval time, NSInteger wNum, void* context, short subtype, NSInteger d1, NSInteger d2) {
//  return [NSEvent otherEventWithType:type location:location modifierFlags:flags timestamp:time windowNumber:wNum context:(NSGraphicsContext*)context subtype:subtype data1:d1 data2:d2];
//}
NSPoint NSEvent__mouseLocation() {
  return [NSEvent mouseLocation];
}
uint NSEvent__modifierFlags() {
  return [NSEvent modifierFlags];
}
uint NSEvent__pressedMouseButtons() {
  return [NSEvent pressedMouseButtons];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSEvent__doubleClickInterval() {
//  return [NSEvent doubleClickInterval];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSEvent__keyRepeatDelay() {
//  return [NSEvent keyRepeatDelay];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSEvent__keyRepeatInterval() {
//  return [NSEvent keyRepeatInterval];
//}
//REJECT: block
//void* NSEvent__addGlobalMonitorForEventsMatchingMaskHandler(NSEventMask mask, *INVALID TYPE* block) {
//  return [NSEvent addGlobalMonitorForEventsMatchingMask:mask handler:block];
//}
//unacceptalble-method
//void* NSEvent__addLocalMonitorForEventsMatchingMaskHandler(NSEventMask mask, void* block) {
//  return [NSEvent addLocalMonitorForEventsMatchingMask:mask handler:(NSEvent*)block];
//}
void NSEvent__removeMonitor(void* eventMonitor) {
  [NSEvent removeMonitor:eventMonitor];
}

////NSResponder
void* NSResponder_init() {
  return [[NSResponder alloc] init];
}
void* NSResponder_nextResponder(void* goobj) {
  return [(NSResponder*)goobj nextResponder];
}
void NSResponder_setNextResponder(void* goobj, void* aResponder) {
  [(NSResponder*)goobj setNextResponder:(NSResponder*)aResponder];
}
//REJECT: anAction
//bool NSResponder_tryToPerformWith(void* goobj, SEL anAction, void* anObject) {
//  return [(NSResponder*)goobj tryToPerform:anAction with:anObject];
//}
bool NSResponder_performKeyEquivalent(void* goobj, void* theEvent) {
  return [(NSResponder*)goobj performKeyEquivalent:(NSEvent*)theEvent];
}
void* NSResponder_validRequestorForSendTypeReturnType(void* goobj, void* sendType, void* returnType) {
  return [(NSResponder*)goobj validRequestorForSendType:(NSString*)sendType returnType:(NSString*)returnType];
}
void NSResponder_mouseDown(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseDown:(NSEvent*)theEvent];
}
void NSResponder_rightMouseDown(void* goobj, void* theEvent) {
  [(NSResponder*)goobj rightMouseDown:(NSEvent*)theEvent];
}
void NSResponder_otherMouseDown(void* goobj, void* theEvent) {
  [(NSResponder*)goobj otherMouseDown:(NSEvent*)theEvent];
}
void NSResponder_mouseUp(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseUp:(NSEvent*)theEvent];
}
void NSResponder_rightMouseUp(void* goobj, void* theEvent) {
  [(NSResponder*)goobj rightMouseUp:(NSEvent*)theEvent];
}
void NSResponder_otherMouseUp(void* goobj, void* theEvent) {
  [(NSResponder*)goobj otherMouseUp:(NSEvent*)theEvent];
}
void NSResponder_mouseMoved(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseMoved:(NSEvent*)theEvent];
}
void NSResponder_mouseDragged(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseDragged:(NSEvent*)theEvent];
}
void NSResponder_scrollWheel(void* goobj, void* theEvent) {
  [(NSResponder*)goobj scrollWheel:(NSEvent*)theEvent];
}
void NSResponder_rightMouseDragged(void* goobj, void* theEvent) {
  [(NSResponder*)goobj rightMouseDragged:(NSEvent*)theEvent];
}
void NSResponder_otherMouseDragged(void* goobj, void* theEvent) {
  [(NSResponder*)goobj otherMouseDragged:(NSEvent*)theEvent];
}
void NSResponder_mouseEntered(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseEntered:(NSEvent*)theEvent];
}
void NSResponder_mouseExited(void* goobj, void* theEvent) {
  [(NSResponder*)goobj mouseExited:(NSEvent*)theEvent];
}
void NSResponder_keyDown(void* goobj, void* theEvent) {
  [(NSResponder*)goobj keyDown:(NSEvent*)theEvent];
}
void NSResponder_keyUp(void* goobj, void* theEvent) {
  [(NSResponder*)goobj keyUp:(NSEvent*)theEvent];
}
void NSResponder_flagsChanged(void* goobj, void* theEvent) {
  [(NSResponder*)goobj flagsChanged:(NSEvent*)theEvent];
}
void NSResponder_tabletPoint(void* goobj, void* theEvent) {
  [(NSResponder*)goobj tabletPoint:(NSEvent*)theEvent];
}
void NSResponder_tabletProximity(void* goobj, void* theEvent) {
  [(NSResponder*)goobj tabletProximity:(NSEvent*)theEvent];
}
void NSResponder_cursorUpdate(void* goobj, void* event) {
  [(NSResponder*)goobj cursorUpdate:(NSEvent*)event];
}
void NSResponder_magnifyWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj magnifyWithEvent:(NSEvent*)event];
}
void NSResponder_rotateWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj rotateWithEvent:(NSEvent*)event];
}
void NSResponder_swipeWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj swipeWithEvent:(NSEvent*)event];
}
void NSResponder_beginGestureWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj beginGestureWithEvent:(NSEvent*)event];
}
void NSResponder_endGestureWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj endGestureWithEvent:(NSEvent*)event];
}
void NSResponder_smartMagnifyWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj smartMagnifyWithEvent:(NSEvent*)event];
}
void NSResponder_touchesBeganWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj touchesBeganWithEvent:(NSEvent*)event];
}
void NSResponder_touchesMovedWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj touchesMovedWithEvent:(NSEvent*)event];
}
void NSResponder_touchesEndedWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj touchesEndedWithEvent:(NSEvent*)event];
}
void NSResponder_touchesCancelledWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj touchesCancelledWithEvent:(NSEvent*)event];
}
void NSResponder_quickLookWithEvent(void* goobj, void* event) {
  [(NSResponder*)goobj quickLookWithEvent:(NSEvent*)event];
}
//REJECT: eventSelector
//void NSResponder_noResponderFor(void* goobj, SEL eventSelector) {
//  [(NSResponder*)goobj noResponderFor:eventSelector];
//}
bool NSResponder_acceptsFirstResponder(void* goobj) {
  return [(NSResponder*)goobj acceptsFirstResponder];
}
bool NSResponder_becomeFirstResponder(void* goobj) {
  return [(NSResponder*)goobj becomeFirstResponder];
}
bool NSResponder_resignFirstResponder(void* goobj) {
  return [(NSResponder*)goobj resignFirstResponder];
}
void NSResponder_interpretKeyEvents(void* goobj, void* eventArray) {
  [(NSResponder*)goobj interpretKeyEvents:(NSArray*)eventArray];
}
void NSResponder_flushBufferedKeyEvents(void* goobj) {
  [(NSResponder*)goobj flushBufferedKeyEvents];
}
void NSResponder_setMenu(void* goobj, void* menu) {
  [(NSResponder*)goobj setMenu:(NSMenu*)menu];
}
void* NSResponder_menu(void* goobj) {
  return [(NSResponder*)goobj menu];
}
void NSResponder_showContextHelp(void* goobj, void* sender) {
  [(NSResponder*)goobj showContextHelp:sender];
}
void NSResponder_helpRequested(void* goobj, void* eventPtr) {
  [(NSResponder*)goobj helpRequested:(NSEvent*)eventPtr];
}
bool NSResponder_shouldBeTreatedAsInkEvent(void* goobj, void* theEvent) {
  return [(NSResponder*)goobj shouldBeTreatedAsInkEvent:(NSEvent*)theEvent];
}
//REJECT: axis
//bool NSResponder_wantsScrollEventsForSwipeTrackingOnAxis(void* goobj, NSEventGestureAxis axis) {
//  return [(NSResponder*)goobj wantsScrollEventsForSwipeTrackingOnAxis:axis];
//}
//REJECT: axis
//bool NSResponder_wantsForwardedScrollEventsForAxis(void* goobj, NSEventGestureAxis axis) {
//  return [(NSResponder*)goobj wantsForwardedScrollEventsForAxis:axis];
//}
//REJECT: action
//void* NSResponder_supplementalTargetForActionSender(void* goobj, SEL action, void* sender) {
//  return [(NSResponder*)goobj supplementalTargetForAction:action sender:sender];
//}
void NSResponder_insertText(void* goobj, void* insertString) {
  [(NSResponder*)goobj insertText:insertString];
}
//REJECT: aSelector
//void NSResponder_doCommandBySelector(void* goobj, SEL aSelector) {
//  [(NSResponder*)goobj doCommandBySelector:aSelector];
//}
void NSResponder_moveForward(void* goobj, void* sender) {
  [(NSResponder*)goobj moveForward:sender];
}
void NSResponder_moveRight(void* goobj, void* sender) {
  [(NSResponder*)goobj moveRight:sender];
}
void NSResponder_moveBackward(void* goobj, void* sender) {
  [(NSResponder*)goobj moveBackward:sender];
}
void NSResponder_moveLeft(void* goobj, void* sender) {
  [(NSResponder*)goobj moveLeft:sender];
}
void NSResponder_moveUp(void* goobj, void* sender) {
  [(NSResponder*)goobj moveUp:sender];
}
void NSResponder_moveDown(void* goobj, void* sender) {
  [(NSResponder*)goobj moveDown:sender];
}
void NSResponder_moveWordForward(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordForward:sender];
}
void NSResponder_moveWordBackward(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordBackward:sender];
}
void NSResponder_moveToBeginningOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfLine:sender];
}
void NSResponder_moveToEndOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfLine:sender];
}
void NSResponder_moveToBeginningOfParagraph(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfParagraph:sender];
}
void NSResponder_moveToEndOfParagraph(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfParagraph:sender];
}
void NSResponder_moveToEndOfDocument(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfDocument:sender];
}
void NSResponder_moveToBeginningOfDocument(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfDocument:sender];
}
void NSResponder_pageDown(void* goobj, void* sender) {
  [(NSResponder*)goobj pageDown:sender];
}
void NSResponder_pageUp(void* goobj, void* sender) {
  [(NSResponder*)goobj pageUp:sender];
}
void NSResponder_centerSelectionInVisibleArea(void* goobj, void* sender) {
  [(NSResponder*)goobj centerSelectionInVisibleArea:sender];
}
void NSResponder_moveBackwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveBackwardAndModifySelection:sender];
}
void NSResponder_moveForwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveForwardAndModifySelection:sender];
}
void NSResponder_moveWordForwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordForwardAndModifySelection:sender];
}
void NSResponder_moveWordBackwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordBackwardAndModifySelection:sender];
}
void NSResponder_moveUpAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveUpAndModifySelection:sender];
}
void NSResponder_moveDownAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveDownAndModifySelection:sender];
}
void NSResponder_moveToBeginningOfLineAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfLineAndModifySelection:sender];
}
void NSResponder_moveToEndOfLineAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfLineAndModifySelection:sender];
}
void NSResponder_moveToBeginningOfParagraphAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfParagraphAndModifySelection:sender];
}
void NSResponder_moveToEndOfParagraphAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfParagraphAndModifySelection:sender];
}
void NSResponder_moveToEndOfDocumentAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToEndOfDocumentAndModifySelection:sender];
}
void NSResponder_moveToBeginningOfDocumentAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToBeginningOfDocumentAndModifySelection:sender];
}
void NSResponder_pageDownAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj pageDownAndModifySelection:sender];
}
void NSResponder_pageUpAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj pageUpAndModifySelection:sender];
}
void NSResponder_moveParagraphForwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveParagraphForwardAndModifySelection:sender];
}
void NSResponder_moveParagraphBackwardAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveParagraphBackwardAndModifySelection:sender];
}
void NSResponder_moveWordRight(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordRight:sender];
}
void NSResponder_moveWordLeft(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordLeft:sender];
}
void NSResponder_moveRightAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveRightAndModifySelection:sender];
}
void NSResponder_moveLeftAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveLeftAndModifySelection:sender];
}
void NSResponder_moveWordRightAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordRightAndModifySelection:sender];
}
void NSResponder_moveWordLeftAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveWordLeftAndModifySelection:sender];
}
void NSResponder_moveToLeftEndOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToLeftEndOfLine:sender];
}
void NSResponder_moveToRightEndOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToRightEndOfLine:sender];
}
void NSResponder_moveToLeftEndOfLineAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToLeftEndOfLineAndModifySelection:sender];
}
void NSResponder_moveToRightEndOfLineAndModifySelection(void* goobj, void* sender) {
  [(NSResponder*)goobj moveToRightEndOfLineAndModifySelection:sender];
}
void NSResponder_scrollPageUp(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollPageUp:sender];
}
void NSResponder_scrollPageDown(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollPageDown:sender];
}
void NSResponder_scrollLineUp(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollLineUp:sender];
}
void NSResponder_scrollLineDown(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollLineDown:sender];
}
void NSResponder_scrollToBeginningOfDocument(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollToBeginningOfDocument:sender];
}
void NSResponder_scrollToEndOfDocument(void* goobj, void* sender) {
  [(NSResponder*)goobj scrollToEndOfDocument:sender];
}
void NSResponder_transpose(void* goobj, void* sender) {
  [(NSResponder*)goobj transpose:sender];
}
void NSResponder_transposeWords(void* goobj, void* sender) {
  [(NSResponder*)goobj transposeWords:sender];
}
void NSResponder_selectAll(void* goobj, void* sender) {
  [(NSResponder*)goobj selectAll:sender];
}
void NSResponder_selectParagraph(void* goobj, void* sender) {
  [(NSResponder*)goobj selectParagraph:sender];
}
void NSResponder_selectLine(void* goobj, void* sender) {
  [(NSResponder*)goobj selectLine:sender];
}
void NSResponder_selectWord(void* goobj, void* sender) {
  [(NSResponder*)goobj selectWord:sender];
}
void NSResponder_indent(void* goobj, void* sender) {
  [(NSResponder*)goobj indent:sender];
}
void NSResponder_insertTab(void* goobj, void* sender) {
  [(NSResponder*)goobj insertTab:sender];
}
void NSResponder_insertBacktab(void* goobj, void* sender) {
  [(NSResponder*)goobj insertBacktab:sender];
}
void NSResponder_insertNewline(void* goobj, void* sender) {
  [(NSResponder*)goobj insertNewline:sender];
}
void NSResponder_insertParagraphSeparator(void* goobj, void* sender) {
  [(NSResponder*)goobj insertParagraphSeparator:sender];
}
void NSResponder_insertNewlineIgnoringFieldEditor(void* goobj, void* sender) {
  [(NSResponder*)goobj insertNewlineIgnoringFieldEditor:sender];
}
void NSResponder_insertTabIgnoringFieldEditor(void* goobj, void* sender) {
  [(NSResponder*)goobj insertTabIgnoringFieldEditor:sender];
}
void NSResponder_insertLineBreak(void* goobj, void* sender) {
  [(NSResponder*)goobj insertLineBreak:sender];
}
void NSResponder_insertContainerBreak(void* goobj, void* sender) {
  [(NSResponder*)goobj insertContainerBreak:sender];
}
void NSResponder_insertSingleQuoteIgnoringSubstitution(void* goobj, void* sender) {
  [(NSResponder*)goobj insertSingleQuoteIgnoringSubstitution:sender];
}
void NSResponder_insertDoubleQuoteIgnoringSubstitution(void* goobj, void* sender) {
  [(NSResponder*)goobj insertDoubleQuoteIgnoringSubstitution:sender];
}
void NSResponder_changeCaseOfLetter(void* goobj, void* sender) {
  [(NSResponder*)goobj changeCaseOfLetter:sender];
}
void NSResponder_uppercaseWord(void* goobj, void* sender) {
  [(NSResponder*)goobj uppercaseWord:sender];
}
void NSResponder_lowercaseWord(void* goobj, void* sender) {
  [(NSResponder*)goobj lowercaseWord:sender];
}
void NSResponder_capitalizeWord(void* goobj, void* sender) {
  [(NSResponder*)goobj capitalizeWord:sender];
}
void NSResponder_deleteForward(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteForward:sender];
}
void NSResponder_deleteBackward(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteBackward:sender];
}
void NSResponder_deleteBackwardByDecomposingPreviousCharacter(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteBackwardByDecomposingPreviousCharacter:sender];
}
void NSResponder_deleteWordForward(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteWordForward:sender];
}
void NSResponder_deleteWordBackward(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteWordBackward:sender];
}
void NSResponder_deleteToBeginningOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteToBeginningOfLine:sender];
}
void NSResponder_deleteToEndOfLine(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteToEndOfLine:sender];
}
void NSResponder_deleteToBeginningOfParagraph(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteToBeginningOfParagraph:sender];
}
void NSResponder_deleteToEndOfParagraph(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteToEndOfParagraph:sender];
}
void NSResponder_yank(void* goobj, void* sender) {
  [(NSResponder*)goobj yank:sender];
}
void NSResponder_complete(void* goobj, void* sender) {
  [(NSResponder*)goobj complete:sender];
}
void NSResponder_setMark(void* goobj, void* sender) {
  [(NSResponder*)goobj setMark:sender];
}
void NSResponder_deleteToMark(void* goobj, void* sender) {
  [(NSResponder*)goobj deleteToMark:sender];
}
void NSResponder_selectToMark(void* goobj, void* sender) {
  [(NSResponder*)goobj selectToMark:sender];
}
void NSResponder_swapWithMark(void* goobj, void* sender) {
  [(NSResponder*)goobj swapWithMark:sender];
}
void NSResponder_cancelOperation(void* goobj, void* sender) {
  [(NSResponder*)goobj cancelOperation:sender];
}
void NSResponder_makeBaseWritingDirectionNatural(void* goobj, void* sender) {
  [(NSResponder*)goobj makeBaseWritingDirectionNatural:sender];
}
void NSResponder_makeBaseWritingDirectionLeftToRight(void* goobj, void* sender) {
  [(NSResponder*)goobj makeBaseWritingDirectionLeftToRight:sender];
}
void NSResponder_makeBaseWritingDirectionRightToLeft(void* goobj, void* sender) {
  [(NSResponder*)goobj makeBaseWritingDirectionRightToLeft:sender];
}
void NSResponder_makeTextWritingDirectionNatural(void* goobj, void* sender) {
  [(NSResponder*)goobj makeTextWritingDirectionNatural:sender];
}
void NSResponder_makeTextWritingDirectionLeftToRight(void* goobj, void* sender) {
  [(NSResponder*)goobj makeTextWritingDirectionLeftToRight:sender];
}
void NSResponder_makeTextWritingDirectionRightToLeft(void* goobj, void* sender) {
  [(NSResponder*)goobj makeTextWritingDirectionRightToLeft:sender];
}
void NSResponder_quickLookPreviewItems(void* goobj, void* sender) {
  [(NSResponder*)goobj quickLookPreviewItems:sender];
}
void* NSResponder_undoManager(void* goobj) {
  return [(NSResponder*)goobj undoManager];
}
bool NSResponder_validateProposedFirstResponderForEvent(void* goobj, void* responder, void* event) {
  return [(NSResponder*)goobj validateProposedFirstResponder:(NSResponder*)responder forEvent:(NSEvent*)event];
}
//REJECT: didPresentSelector
//void NSResponder_presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(void* goobj, void* error, void* window, void* delegate, SEL didPresentSelector, void* contextInfo) {
//  [(NSResponder*)goobj presentError:(NSError**)&error modalForWindow:(NSWindow*)window delegate:delegate didPresentSelector:didPresentSelector contextInfo:contextInfo];
//}
bool NSResponder_presentError(void* goobj, void* error) {
  return [(NSResponder*)goobj presentError:(NSError**)&error];
}
void* NSResponder_willPresentError(void* goobj, void* error) {
  return [(NSResponder*)goobj willPresentError:(NSError**)&error];
}
void NSResponder_performTextFinderAction(void* goobj, void* sender) {
  [(NSResponder*)goobj performTextFinderAction:sender];
}


////NSAppleEventDescriptor
void* NSAppleEventDescriptor_init() {
  return [[NSAppleEventDescriptor alloc] init];
}
//REJECT: aeDesc
//void* NSAppleEventDescriptor_initWithAEDescNoCopy(AEDesc aeDesc) {
//  return [[NSAppleEventDescriptor alloc] initWithAEDescNoCopy:aeDesc];
//}
//REJECT: descriptorType
//void* NSAppleEventDescriptor_initWithDescriptorTypeBytesLength(DescType descriptorType, const void* bytes, uint byteCount) {
//  return [[NSAppleEventDescriptor alloc] initWithDescriptorType:descriptorType bytes:bytes length:byteCount];
//}
//REJECT: descriptorType
//void* NSAppleEventDescriptor_initWithDescriptorTypeData(DescType descriptorType, void* data) {
//  return [[NSAppleEventDescriptor alloc] initWithDescriptorType:descriptorType data:(NSData*)data];
//}
//REJECT: eventClass eventID returnID transactionID
//void* NSAppleEventDescriptor_initWithEventClassEventIDTargetDescriptorReturnIDTransactionID(AEEventClass eventClass, AEEventID eventID, void* targetDescriptor, AEReturnID returnID, AETransactionID transactionID) {
//  return [[NSAppleEventDescriptor alloc] initWithEventClass:eventClass eventID:eventID targetDescriptor:(NSAppleEventDescriptor*)targetDescriptor returnID:returnID transactionID:transactionID];
//}
void* NSAppleEventDescriptor_initListDescriptor(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj initListDescriptor];
}
void* NSAppleEventDescriptor_initRecordDescriptor(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj initRecordDescriptor];
}
//REJECT: AEDesc
//AEDesc NSAppleEventDescriptor_aeDesc(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj aeDesc];
//}
//REJECT: DescType
//DescType NSAppleEventDescriptor_descriptorType(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj descriptorType];
//}
void* NSAppleEventDescriptor_data(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj data];
}
Boolean NSAppleEventDescriptor_booleanValue(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj booleanValue];
}
//REJECT: OSType
//OSType NSAppleEventDescriptor_enumCodeValue(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj enumCodeValue];
//}
SInt32 NSAppleEventDescriptor_int32Value(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj int32Value];
}
//REJECT: OSType
//OSType NSAppleEventDescriptor_typeCodeValue(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj typeCodeValue];
//}
void* NSAppleEventDescriptor_stringValue(void* goobj) {
  return [(NSAppleEventDescriptor*)goobj stringValue];
}
//REJECT: AEEventClass
//AEEventClass NSAppleEventDescriptor_eventClass(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj eventClass];
//}
//REJECT: AEEventID
//AEEventID NSAppleEventDescriptor_eventID(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj eventID];
//}
//REJECT: AEReturnID
//AEReturnID NSAppleEventDescriptor_returnID(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj returnID];
//}
//REJECT: AETransactionID
//AETransactionID NSAppleEventDescriptor_transactionID(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj transactionID];
//}
//REJECT: keyword
//void NSAppleEventDescriptor_setParamDescriptorForKeyword(void* goobj, void* descriptor, AEKeyword keyword) {
//  [(NSAppleEventDescriptor*)goobj setParamDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:keyword];
//}
//REJECT: keyword
//void* NSAppleEventDescriptor_paramDescriptorForKeyword(void* goobj, AEKeyword keyword) {
//  return [(NSAppleEventDescriptor*)goobj paramDescriptorForKeyword:keyword];
//}
//REJECT: keyword
//void NSAppleEventDescriptor_removeParamDescriptorWithKeyword(void* goobj, AEKeyword keyword) {
//  [(NSAppleEventDescriptor*)goobj removeParamDescriptorWithKeyword:keyword];
//}
//REJECT: keyword
//void NSAppleEventDescriptor_setAttributeDescriptorForKeyword(void* goobj, void* descriptor, AEKeyword keyword) {
//  [(NSAppleEventDescriptor*)goobj setAttributeDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:keyword];
//}
//REJECT: keyword
//void* NSAppleEventDescriptor_attributeDescriptorForKeyword(void* goobj, AEKeyword keyword) {
//  return [(NSAppleEventDescriptor*)goobj attributeDescriptorForKeyword:keyword];
//}
//REJECT: NSInteger
//NSInteger NSAppleEventDescriptor_numberOfItems(void* goobj) {
//  return [(NSAppleEventDescriptor*)goobj numberOfItems];
//}
//REJECT: index
//void NSAppleEventDescriptor_insertDescriptorAtIndex(void* goobj, void* descriptor, NSInteger index) {
//  [(NSAppleEventDescriptor*)goobj insertDescriptor:(NSAppleEventDescriptor*)descriptor atIndex:index];
//}
//REJECT: index
//void* NSAppleEventDescriptor_descriptorAtIndex(void* goobj, NSInteger index) {
//  return [(NSAppleEventDescriptor*)goobj descriptorAtIndex:index];
//}
//REJECT: index
//void NSAppleEventDescriptor_removeDescriptorAtIndex(void* goobj, NSInteger index) {
//  [(NSAppleEventDescriptor*)goobj removeDescriptorAtIndex:index];
//}
//REJECT: keyword
//void NSAppleEventDescriptor_setDescriptorForKeyword(void* goobj, void* descriptor, AEKeyword keyword) {
//  [(NSAppleEventDescriptor*)goobj setDescriptor:(NSAppleEventDescriptor*)descriptor forKeyword:keyword];
//}
//REJECT: keyword
//void* NSAppleEventDescriptor_descriptorForKeyword(void* goobj, AEKeyword keyword) {
//  return [(NSAppleEventDescriptor*)goobj descriptorForKeyword:keyword];
//}
//REJECT: keyword
//void NSAppleEventDescriptor_removeDescriptorWithKeyword(void* goobj, AEKeyword keyword) {
//  [(NSAppleEventDescriptor*)goobj removeDescriptorWithKeyword:keyword];
//}
//REJECT: AEKeyword index
//AEKeyword NSAppleEventDescriptor_keywordForDescriptorAtIndex(void* goobj, NSInteger index) {
//  return [(NSAppleEventDescriptor*)goobj keywordForDescriptorAtIndex:index];
//}
//REJECT: descriptorType
//void* NSAppleEventDescriptor_coerceToDescriptorType(void* goobj, DescType descriptorType) {
//  return [(NSAppleEventDescriptor*)goobj coerceToDescriptorType:descriptorType];
//}
void* NSAppleEventDescriptor__nullDescriptor() {
  return [NSAppleEventDescriptor nullDescriptor];
}
//REJECT: descriptorType
//void* NSAppleEventDescriptor__descriptorWithDescriptorTypeBytesLength(DescType descriptorType, const void* bytes, uint byteCount) {
//  return [NSAppleEventDescriptor descriptorWithDescriptorType:descriptorType bytes:bytes length:byteCount];
//}
//REJECT: descriptorType
//void* NSAppleEventDescriptor__descriptorWithDescriptorTypeData(DescType descriptorType, void* data) {
//  return [NSAppleEventDescriptor descriptorWithDescriptorType:descriptorType data:(NSData*)data];
//}
void* NSAppleEventDescriptor__descriptorWithBoolean(Boolean boolean) {
  return [NSAppleEventDescriptor descriptorWithBoolean:boolean];
}
//REJECT: enumerator
//void* NSAppleEventDescriptor__descriptorWithEnumCode(OSType enumerator) {
//  return [NSAppleEventDescriptor descriptorWithEnumCode:enumerator];
//}
void* NSAppleEventDescriptor__descriptorWithInt32(SInt32 signedInt) {
  return [NSAppleEventDescriptor descriptorWithInt32:signedInt];
}
//REJECT: typeCode
//void* NSAppleEventDescriptor__descriptorWithTypeCode(OSType typeCode) {
//  return [NSAppleEventDescriptor descriptorWithTypeCode:typeCode];
//}
void* NSAppleEventDescriptor__descriptorWithString(void* string) {
  return [NSAppleEventDescriptor descriptorWithString:(NSString*)string];
}
//REJECT: eventClass eventID returnID transactionID
//void* NSAppleEventDescriptor__appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(AEEventClass eventClass, AEEventID eventID, void* targetDescriptor, AEReturnID returnID, AETransactionID transactionID) {
//  return [NSAppleEventDescriptor appleEventWithEventClass:eventClass eventID:eventID targetDescriptor:(NSAppleEventDescriptor*)targetDescriptor returnID:returnID transactionID:transactionID];
//}
void* NSAppleEventDescriptor__listDescriptor() {
  return [NSAppleEventDescriptor listDescriptor];
}
void* NSAppleEventDescriptor__recordDescriptor() {
  return [NSAppleEventDescriptor recordDescriptor];
}

////NSWorkspace
void* NSWorkspace_init() {
  return [[NSWorkspace alloc] init];
}
void* NSWorkspace_notificationCenter(void* goobj) {
  return [(NSWorkspace*)goobj notificationCenter];
}
bool NSWorkspace_openFile(void* goobj, void* fullPath) {
  return [(NSWorkspace*)goobj openFile:(NSString*)fullPath];
}
bool NSWorkspace_openFileWithApplication(void* goobj, void* fullPath, void* appName) {
  return [(NSWorkspace*)goobj openFile:(NSString*)fullPath withApplication:(NSString*)appName];
}
bool NSWorkspace_openFileWithApplicationAndDeactivate(void* goobj, void* fullPath, void* appName, bool flag) {
  return [(NSWorkspace*)goobj openFile:(NSString*)fullPath withApplication:(NSString*)appName andDeactivate:flag];
}
bool NSWorkspace_openFileFromImageAtInView(void* goobj, void* fullPath, void* anImage, NSPoint point, void* aView) {
  return [(NSWorkspace*)goobj openFile:(NSString*)fullPath fromImage:(NSImage*)anImage at:point inView:(NSView*)aView];
}
bool NSWorkspace_openURL(void* goobj, void* url) {
  return [(NSWorkspace*)goobj openURL:(NSURL*)url];
}
bool NSWorkspace_launchApplication(void* goobj, void* appName) {
  return [(NSWorkspace*)goobj launchApplication:(NSString*)appName];
}
//REJECT: options
//void* NSWorkspace_launchApplicationAtURLOptionsConfigurationError(void* goobj, void* url, NSWorkspaceLaunchOptions options, void* configuration, void* error) {
//  return [(NSWorkspace*)goobj launchApplicationAtURL:(NSURL*)url options:options configuration:(NSDictionary*)configuration error:(NSError**)&error];
//}
bool NSWorkspace_launchApplicationShowIconAutolaunch(void* goobj, void* appName, bool showIcon, bool autolaunch) {
  return [(NSWorkspace*)goobj launchApplication:(NSString*)appName showIcon:showIcon autolaunch:autolaunch];
}
void* NSWorkspace_fullPathForApplication(void* goobj, void* appName) {
  return [(NSWorkspace*)goobj fullPathForApplication:(NSString*)appName];
}
bool NSWorkspace_selectFileInFileViewerRootedAtPath(void* goobj, void* fullPath, void* rootFullPath) {
  return [(NSWorkspace*)goobj selectFile:(NSString*)fullPath inFileViewerRootedAtPath:(NSString*)rootFullPath];
}
void NSWorkspace_activateFileViewerSelectingURLs(void* goobj, void* fileURLs) {
  [(NSWorkspace*)goobj activateFileViewerSelectingURLs:(NSArray*)fileURLs];
}
bool NSWorkspace_showSearchResultsForQueryString(void* goobj, void* queryString) {
  return [(NSWorkspace*)goobj showSearchResultsForQueryString:(NSString*)queryString];
}
void NSWorkspace_noteFileSystemChanged(void* goobj, void* path) {
  [(NSWorkspace*)goobj noteFileSystemChanged:(NSString*)path];
}
bool NSWorkspace_getInfoForFileApplicationType(void* goobj, void* fullPath, void* appName, void* type) {
  return [(NSWorkspace*)goobj getInfoForFile:(NSString*)fullPath application:(NSString*)appName type:(NSString*)type];
}
bool NSWorkspace_isFilePackageAtPath(void* goobj, void* fullPath) {
  return [(NSWorkspace*)goobj isFilePackageAtPath:(NSString*)fullPath];
}
void* NSWorkspace_iconForFile(void* goobj, void* fullPath) {
  return [(NSWorkspace*)goobj iconForFile:(NSString*)fullPath];
}
void* NSWorkspace_iconForFiles(void* goobj, void* fullPaths) {
  return [(NSWorkspace*)goobj iconForFiles:(NSArray*)fullPaths];
}
void* NSWorkspace_iconForFileType(void* goobj, void* fileType) {
  return [(NSWorkspace*)goobj iconForFileType:(NSString*)fileType];
}
//REJECT: options
//bool NSWorkspace_setIconForFileOptions(void* goobj, void* image, void* fullPath, NSWorkspaceIconCreationOptions options) {
//  return [(NSWorkspace*)goobj setIcon:(NSImage*)image forFile:(NSString*)fullPath options:options];
//}
void* NSWorkspace_fileLabels(void* goobj) {
  return [(NSWorkspace*)goobj fileLabels];
}
void* NSWorkspace_fileLabelColors(void* goobj) {
  return [(NSWorkspace*)goobj fileLabelColors];
}
//REJECT: handler
//void NSWorkspace_recycleURLsCompletionHandler(void* goobj, void* URLs, *INVALID TYPE* handler) {
//  [(NSWorkspace*)goobj recycleURLs:(NSArray*)URLs completionHandler:handler];
//}
//REJECT: handler
//void NSWorkspace_duplicateURLsCompletionHandler(void* goobj, void* URLs, *INVALID TYPE* handler) {
//  [(NSWorkspace*)goobj duplicateURLs:(NSArray*)URLs completionHandler:handler];
//}
bool NSWorkspace_getFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(void* goobj, void* fullPath, bool removableFlag, bool writableFlag, bool unmountableFlag, void* description, void* fileSystemType) {
  return [(NSWorkspace*)goobj getFileSystemInfoForPath:(NSString*)fullPath isRemovable:removableFlag isWritable:writableFlag isUnmountable:unmountableFlag description:(NSString*)description type:(NSString*)fileSystemType];
}
//REJECT: tag
//bool NSWorkspace_performFileOperationSourceDestinationFilesTag(void* goobj, void* operation, void* source, void* destination, void* files, NSInteger tag) {
//  return [(NSWorkspace*)goobj performFileOperation:(NSString*)operation source:(NSString*)source destination:(NSString*)destination files:(NSArray*)files tag:tag];
//}
bool NSWorkspace_unmountAndEjectDeviceAtPath(void* goobj, void* path) {
  return [(NSWorkspace*)goobj unmountAndEjectDeviceAtPath:(NSString*)path];
}
bool NSWorkspace_unmountAndEjectDeviceAtURLError(void* goobj, void* url, void* error) {
  return [(NSWorkspace*)goobj unmountAndEjectDeviceAtURL:(NSURL*)url error:(NSError**)&error];
}
//REJECT: NSInteger requested
//NSInteger NSWorkspace_extendPowerOffBy(void* goobj, NSInteger requested) {
//  return [(NSWorkspace*)goobj extendPowerOffBy:requested];
//}
void NSWorkspace_hideOtherApplications(void* goobj) {
  [(NSWorkspace*)goobj hideOtherApplications];
}
void* NSWorkspace_URLForApplicationWithBundleIdentifier(void* goobj, void* bundleIdentifier) {
  return [(NSWorkspace*)goobj URLForApplicationWithBundleIdentifier:(NSString*)bundleIdentifier];
}
void* NSWorkspace_URLForApplicationToOpenURL(void* goobj, void* url) {
  return [(NSWorkspace*)goobj URLForApplicationToOpenURL:(NSURL*)url];
}
void* NSWorkspace_absolutePathForAppBundleWithIdentifier(void* goobj, void* bundleIdentifier) {
  return [(NSWorkspace*)goobj absolutePathForAppBundleWithIdentifier:(NSString*)bundleIdentifier];
}
//REJECT: options
//bool NSWorkspace_launchAppWithBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifier(void* goobj, void* bundleIdentifier, NSWorkspaceLaunchOptions options, void* descriptor, void* identifier) {
//  return [(NSWorkspace*)goobj launchAppWithBundleIdentifier:(NSString*)bundleIdentifier options:options additionalEventParamDescriptor:(NSAppleEventDescriptor*)descriptor launchIdentifier:(NSNumber*)identifier];
//}
//REJECT: options
//bool NSWorkspace_openURLsWithAppBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifiers(void* goobj, void* urls, void* bundleIdentifier, NSWorkspaceLaunchOptions options, void* descriptor, void* identifiers) {
//  return [(NSWorkspace*)goobj openURLs:(NSArray*)urls withAppBundleIdentifier:(NSString*)bundleIdentifier options:options additionalEventParamDescriptor:(NSAppleEventDescriptor*)descriptor launchIdentifiers:(NSArray*)identifiers];
//}
void* NSWorkspace_frontmostApplication(void* goobj) {
  return [(NSWorkspace*)goobj frontmostApplication];
}
void* NSWorkspace_menuBarOwningApplication(void* goobj) {
  return [(NSWorkspace*)goobj menuBarOwningApplication];
}
void* NSWorkspace_typeOfFileError(void* goobj, void* absoluteFilePath, void* outError) {
  return [(NSWorkspace*)goobj typeOfFile:(NSString*)absoluteFilePath error:(NSError**)&outError];
}
void* NSWorkspace_localizedDescriptionForType(void* goobj, void* typeName) {
  return [(NSWorkspace*)goobj localizedDescriptionForType:(NSString*)typeName];
}
void* NSWorkspace_preferredFilenameExtensionForType(void* goobj, void* typeName) {
  return [(NSWorkspace*)goobj preferredFilenameExtensionForType:(NSString*)typeName];
}
bool NSWorkspace_filenameExtensionIsValidForType(void* goobj, void* filenameExtension, void* typeName) {
  return [(NSWorkspace*)goobj filenameExtension:(NSString*)filenameExtension isValidForType:(NSString*)typeName];
}
bool NSWorkspace_typeConformsToType(void* goobj, void* firstTypeName, void* secondTypeName) {
  return [(NSWorkspace*)goobj type:(NSString*)firstTypeName conformsToType:(NSString*)secondTypeName];
}
bool NSWorkspace_setDesktopImageURLForScreenOptionsError(void* goobj, void* url, void* screen, void* options, void* error) {
  return [(NSWorkspace*)goobj setDesktopImageURL:(NSURL*)url forScreen:(NSScreen*)screen options:(NSDictionary*)options error:(NSError**)&error];
}
void* NSWorkspace_desktopImageURLForScreen(void* goobj, void* screen) {
  return [(NSWorkspace*)goobj desktopImageURLForScreen:(NSScreen*)screen];
}
void* NSWorkspace_desktopImageOptionsForScreen(void* goobj, void* screen) {
  return [(NSWorkspace*)goobj desktopImageOptionsForScreen:(NSScreen*)screen];
}
void* NSWorkspace_runningApplications(void* goobj) {
  return [(NSWorkspace*)goobj runningApplications];
}
void* NSWorkspace__sharedWorkspace() {
  return [NSWorkspace sharedWorkspace];
}

////NSRunningApplication
void* NSRunningApplication_init() {
  return [[NSRunningApplication alloc] init];
}
bool NSRunningApplication_hide(void* goobj) {
  return [(NSRunningApplication*)goobj hide];
}
bool NSRunningApplication_unhide(void* goobj) {
  return [(NSRunningApplication*)goobj unhide];
}
//REJECT: options
//bool NSRunningApplication_activateWithOptions(void* goobj, NSApplicationActivationOptions options) {
//  return [(NSRunningApplication*)goobj activateWithOptions:options];
//}
bool NSRunningApplication_terminate(void* goobj) {
  return [(NSRunningApplication*)goobj terminate];
}
bool NSRunningApplication_forceTerminate(void* goobj) {
  return [(NSRunningApplication*)goobj forceTerminate];
}
char NSRunningApplication_isTerminated(void* goobj) {
  return [(NSRunningApplication*)goobj isTerminated];
}
char NSRunningApplication_isFinishedLaunching(void* goobj) {
  return [(NSRunningApplication*)goobj isFinishedLaunching];
}
char NSRunningApplication_isHidden(void* goobj) {
  return [(NSRunningApplication*)goobj isHidden];
}
char NSRunningApplication_isActive(void* goobj) {
  return [(NSRunningApplication*)goobj isActive];
}
bool NSRunningApplication_ownsMenuBar(void* goobj) {
  return [(NSRunningApplication*)goobj ownsMenuBar];
}
//REJECT: NSApplicationActivationPolicy
//NSApplicationActivationPolicy NSRunningApplication_activationPolicy(void* goobj) {
//  return [(NSRunningApplication*)goobj activationPolicy];
//}
void* NSRunningApplication_localizedName(void* goobj) {
  return [(NSRunningApplication*)goobj localizedName];
}
void* NSRunningApplication_bundleIdentifier(void* goobj) {
  return [(NSRunningApplication*)goobj bundleIdentifier];
}
void* NSRunningApplication_bundleURL(void* goobj) {
  return [(NSRunningApplication*)goobj bundleURL];
}
void* NSRunningApplication_executableURL(void* goobj) {
  return [(NSRunningApplication*)goobj executableURL];
}
//REJECT: pid_t
//pid_t NSRunningApplication_processIdentifier(void* goobj) {
//  return [(NSRunningApplication*)goobj processIdentifier];
//}
void* NSRunningApplication_launchDate(void* goobj) {
  return [(NSRunningApplication*)goobj launchDate];
}
void* NSRunningApplication_icon(void* goobj) {
  return [(NSRunningApplication*)goobj icon];
}
//REJECT: NSInteger
//NSInteger NSRunningApplication_executableArchitecture(void* goobj) {
//  return [(NSRunningApplication*)goobj executableArchitecture];
//}
void* NSRunningApplication__runningApplicationsWithBundleIdentifier(void* bundleIdentifier) {
  return [NSRunningApplication runningApplicationsWithBundleIdentifier:(NSString*)bundleIdentifier];
}
//REJECT: pid
//void* NSRunningApplication__runningApplicationWithProcessIdentifier(pid_t pid) {
//  return [NSRunningApplication runningApplicationWithProcessIdentifier:pid];
//}
void* NSRunningApplication__currentApplication() {
  return [NSRunningApplication currentApplication];
}
void NSRunningApplication__terminateAutomaticallyTerminableApplications() {
  [NSRunningApplication terminateAutomaticallyTerminableApplications];
}

////NSApplication
void* NSApplication_init() {
  return [[NSApplication alloc] init];
}
void NSApplication_setDelegate(void* goobj, void* anObject) {
  [(NSApplication*)goobj setDelegate:anObject];
}
void* NSApplication_delegate(void* goobj) {
  return [(NSApplication*)goobj delegate];
}
void* NSApplication_context(void* goobj) {
  return [(NSApplication*)goobj context];
}
void NSApplication_hide(void* goobj, void* sender) {
  [(NSApplication*)goobj hide:sender];
}
void NSApplication_unhide(void* goobj, void* sender) {
  [(NSApplication*)goobj unhide:sender];
}
void NSApplication_unhideWithoutActivation(void* goobj) {
  [(NSApplication*)goobj unhideWithoutActivation];
}
//REJECT: windowNum
//void* NSApplication_windowWithWindowNumber(void* goobj, NSInteger windowNum) {
//  return [(NSApplication*)goobj windowWithWindowNumber:windowNum];
//}
void* NSApplication_mainWindow(void* goobj) {
  return [(NSApplication*)goobj mainWindow];
}
void* NSApplication_keyWindow(void* goobj) {
  return [(NSApplication*)goobj keyWindow];
}
bool NSApplication_isActive(void* goobj) {
  return [(NSApplication*)goobj isActive];
}
bool NSApplication_isHidden(void* goobj) {
  return [(NSApplication*)goobj isHidden];
}
bool NSApplication_isRunning(void* goobj) {
  return [(NSApplication*)goobj isRunning];
}
void NSApplication_deactivate(void* goobj) {
  [(NSApplication*)goobj deactivate];
}
void NSApplication_activateIgnoringOtherApps(void* goobj, bool flag) {
  [(NSApplication*)goobj activateIgnoringOtherApps:flag];
}
void NSApplication_hideOtherApplications(void* goobj, void* sender) {
  [(NSApplication*)goobj hideOtherApplications:sender];
}
void NSApplication_unhideAllApplications(void* goobj, void* sender) {
  [(NSApplication*)goobj unhideAllApplications:sender];
}
void NSApplication_finishLaunching(void* goobj) {
  [(NSApplication*)goobj finishLaunching];
}
void NSApplication_run(void* goobj) {
  [(NSApplication*)goobj run];
}
//REJECT: NSInteger
//NSInteger NSApplication_runModalForWindow(void* goobj, void* theWindow) {
//  return [(NSApplication*)goobj runModalForWindow:(NSWindow*)theWindow];
//}
void NSApplication_stop(void* goobj, void* sender) {
  [(NSApplication*)goobj stop:sender];
}
void NSApplication_stopModal(void* goobj) {
  [(NSApplication*)goobj stopModal];
}
//REJECT: returnCode
//void NSApplication_stopModalWithCode(void* goobj, NSInteger returnCode) {
//  [(NSApplication*)goobj stopModalWithCode:returnCode];
//}
void NSApplication_abortModal(void* goobj) {
  [(NSApplication*)goobj abortModal];
}
void* NSApplication_modalWindow(void* goobj) {
  return [(NSApplication*)goobj modalWindow];
}
//REJECT: NSModalSession
//NSModalSession NSApplication_beginModalSessionForWindow(void* goobj, void* theWindow) {
//  return [(NSApplication*)goobj beginModalSessionForWindow:(NSWindow*)theWindow];
//}
//REJECT: NSInteger session
//NSInteger NSApplication_runModalSession(void* goobj, NSModalSession session) {
//  return [(NSApplication*)goobj runModalSession:session];
//}
//REJECT: session
//void NSApplication_endModalSession(void* goobj, NSModalSession session) {
//  [(NSApplication*)goobj endModalSession:session];
//}
void NSApplication_terminate(void* goobj, void* sender) {
  [(NSApplication*)goobj terminate:sender];
}
//REJECT: NSInteger requestType
//NSInteger NSApplication_requestUserAttention(void* goobj, NSRequestUserAttentionType requestType) {
//  return [(NSApplication*)goobj requestUserAttention:requestType];
//}
//REJECT: request
//void NSApplication_cancelUserAttentionRequest(void* goobj, NSInteger request) {
//  [(NSApplication*)goobj cancelUserAttentionRequest:request];
//}
void* NSApplication_nextEventMatchingMaskUntilDateInModeDequeue(void* goobj, uint mask, void* expiration, void* mode, bool deqFlag) {
  return [(NSApplication*)goobj nextEventMatchingMask:mask untilDate:(NSDate*)expiration inMode:(NSString*)mode dequeue:deqFlag];
}
void NSApplication_discardEventsMatchingMaskBeforeEvent(void* goobj, uint mask, void* lastEvent) {
  [(NSApplication*)goobj discardEventsMatchingMask:mask beforeEvent:(NSEvent*)lastEvent];
}
void NSApplication_postEventAtStart(void* goobj, void* event, bool flag) {
  [(NSApplication*)goobj postEvent:(NSEvent*)event atStart:flag];
}
void* NSApplication_currentEvent(void* goobj) {
  return [(NSApplication*)goobj currentEvent];
}
void NSApplication_sendEvent(void* goobj, void* theEvent) {
  [(NSApplication*)goobj sendEvent:(NSEvent*)theEvent];
}
void NSApplication_preventWindowOrdering(void* goobj) {
  [(NSApplication*)goobj preventWindowOrdering];
}
//REJECT: aSelector
//void* NSApplication_makeWindowsPerformInOrder(void* goobj, SEL aSelector, bool flag) {
//  return [(NSApplication*)goobj makeWindowsPerform:aSelector inOrder:flag];
//}
void* NSApplication_windows(void* goobj) {
  return [(NSApplication*)goobj windows];
}
void NSApplication_setWindowsNeedUpdate(void* goobj, bool needUpdate) {
  [(NSApplication*)goobj setWindowsNeedUpdate:needUpdate];
}
void NSApplication_updateWindows(void* goobj) {
  [(NSApplication*)goobj updateWindows];
}
void NSApplication_setMainMenu(void* goobj, void* aMenu) {
  [(NSApplication*)goobj setMainMenu:(NSMenu*)aMenu];
}
void* NSApplication_mainMenu(void* goobj) {
  return [(NSApplication*)goobj mainMenu];
}
void NSApplication_setHelpMenu(void* goobj, void* helpMenu) {
  [(NSApplication*)goobj setHelpMenu:(NSMenu*)helpMenu];
}
void* NSApplication_helpMenu(void* goobj) {
  return [(NSApplication*)goobj helpMenu];
}
void NSApplication_setApplicationIconImage(void* goobj, void* image) {
  [(NSApplication*)goobj setApplicationIconImage:(NSImage*)image];
}
void* NSApplication_applicationIconImage(void* goobj) {
  return [(NSApplication*)goobj applicationIconImage];
}
//REJECT: NSApplicationActivationPolicy
//NSApplicationActivationPolicy NSApplication_activationPolicy(void* goobj) {
//  return [(NSApplication*)goobj activationPolicy];
//}
//REJECT: activationPolicy
//bool NSApplication_setActivationPolicy(void* goobj, NSApplicationActivationPolicy activationPolicy) {
//  return [(NSApplication*)goobj setActivationPolicy:activationPolicy];
//}
void* NSApplication_dockTile(void* goobj) {
  return [(NSApplication*)goobj dockTile];
}
//REJECT: theAction
//bool NSApplication_sendActionToFrom(void* goobj, SEL theAction, void* theTarget, void* sender) {
//  return [(NSApplication*)goobj sendAction:theAction to:theTarget from:sender];
//}
//REJECT: theAction
//void* NSApplication_targetForAction(void* goobj, SEL theAction) {
//  return [(NSApplication*)goobj targetForAction:theAction];
//}
//REJECT: theAction
//void* NSApplication_targetForActionToFrom(void* goobj, SEL theAction, void* theTarget, void* sender) {
//  return [(NSApplication*)goobj targetForAction:theAction to:theTarget from:sender];
//}
//REJECT: anAction
//bool NSApplication_tryToPerformWith(void* goobj, SEL anAction, void* anObject) {
//  return [(NSApplication*)goobj tryToPerform:anAction with:anObject];
//}
void* NSApplication_validRequestorForSendTypeReturnType(void* goobj, void* sendType, void* returnType) {
  return [(NSApplication*)goobj validRequestorForSendType:(NSString*)sendType returnType:(NSString*)returnType];
}
void NSApplication_reportException(void* goobj, void* theException) {
  [(NSApplication*)goobj reportException:(NSException*)theException];
}
void NSApplication_replyToApplicationShouldTerminate(void* goobj, bool shouldTerminate) {
  [(NSApplication*)goobj replyToApplicationShouldTerminate:shouldTerminate];
}
//REJECT: reply
//void NSApplication_replyToOpenOrPrint(void* goobj, NSApplicationDelegateReply reply) {
//  [(NSApplication*)goobj replyToOpenOrPrint:reply];
//}
void NSApplication_orderFrontCharacterPalette(void* goobj, void* sender) {
  [(NSApplication*)goobj orderFrontCharacterPalette:sender];
}
NSApplicationPresentationOptions NSApplication_presentationOptions(void* goobj) {
  return [(NSApplication*)goobj presentationOptions];
}
void NSApplication_setPresentationOptions(void* goobj, NSApplicationPresentationOptions newOptions) {
  [(NSApplication*)goobj setPresentationOptions:newOptions];
}
NSApplicationPresentationOptions NSApplication_currentSystemPresentationOptions(void* goobj) {
  return [(NSApplication*)goobj currentSystemPresentationOptions];
}
NSApplicationOcclusionState NSApplication_occlusionState(void* goobj) {
  return [(NSApplication*)goobj occlusionState];
}
void NSApplication_setWindowsMenu(void* goobj, void* aMenu) {
  [(NSApplication*)goobj setWindowsMenu:(NSMenu*)aMenu];
}
void* NSApplication_windowsMenu(void* goobj) {
  return [(NSApplication*)goobj windowsMenu];
}
void NSApplication_arrangeInFront(void* goobj, void* sender) {
  [(NSApplication*)goobj arrangeInFront:sender];
}
void NSApplication_removeWindowsItem(void* goobj, void* win) {
  [(NSApplication*)goobj removeWindowsItem:(NSWindow*)win];
}
void NSApplication_addWindowsItemTitleFilename(void* goobj, void* win, void* aString, bool isFilename) {
  [(NSApplication*)goobj addWindowsItem:(NSWindow*)win title:(NSString*)aString filename:isFilename];
}
void NSApplication_changeWindowsItemTitleFilename(void* goobj, void* win, void* aString, bool isFilename) {
  [(NSApplication*)goobj changeWindowsItem:(NSWindow*)win title:(NSString*)aString filename:isFilename];
}
void NSApplication_updateWindowsItem(void* goobj, void* win) {
  [(NSApplication*)goobj updateWindowsItem:(NSWindow*)win];
}
void NSApplication_miniaturizeAll(void* goobj, void* sender) {
  [(NSApplication*)goobj miniaturizeAll:sender];
}
bool NSApplication_isFullKeyboardAccessEnabled(void* goobj) {
  return [(NSApplication*)goobj isFullKeyboardAccessEnabled];
}
void NSApplication_setServicesMenu(void* goobj, void* aMenu) {
  [(NSApplication*)goobj setServicesMenu:(NSMenu*)aMenu];
}
void* NSApplication_servicesMenu(void* goobj) {
  return [(NSApplication*)goobj servicesMenu];
}
void NSApplication_registerServicesMenuSendTypesReturnTypes(void* goobj, void* sendTypes, void* returnTypes) {
  [(NSApplication*)goobj registerServicesMenuSendTypes:(NSArray*)sendTypes returnTypes:(NSArray*)returnTypes];
}
void NSApplication_setServicesProvider(void* goobj, void* provider) {
  [(NSApplication*)goobj setServicesProvider:provider];
}
void* NSApplication_servicesProvider(void* goobj) {
  return [(NSApplication*)goobj servicesProvider];
}
void NSApplication_orderFrontStandardAboutPanel(void* goobj, void* sender) {
  [(NSApplication*)goobj orderFrontStandardAboutPanel:sender];
}
void NSApplication_orderFrontStandardAboutPanelWithOptions(void* goobj, void* optionsDictionary) {
  [(NSApplication*)goobj orderFrontStandardAboutPanelWithOptions:(NSDictionary*)optionsDictionary];
}
//REJECT: NSUserInterfaceLayoutDirection
//NSUserInterfaceLayoutDirection NSApplication_userInterfaceLayoutDirection(void* goobj) {
//  return [(NSApplication*)goobj userInterfaceLayoutDirection];
//}
void NSApplication_disableRelaunchOnLogin(void* goobj) {
  [(NSApplication*)goobj disableRelaunchOnLogin];
}
void NSApplication_enableRelaunchOnLogin(void* goobj) {
  [(NSApplication*)goobj enableRelaunchOnLogin];
}
//REJECT: types
//void NSApplication_registerForRemoteNotificationTypes(void* goobj, NSRemoteNotificationType types) {
//  [(NSApplication*)goobj registerForRemoteNotificationTypes:types];
//}
void NSApplication_unregisterForRemoteNotifications(void* goobj) {
  [(NSApplication*)goobj unregisterForRemoteNotifications];
}
//REJECT: NSRemoteNotificationType
//NSRemoteNotificationType NSApplication_enabledRemoteNotificationTypes(void* goobj) {
//  return [(NSApplication*)goobj enabledRemoteNotificationTypes];
//}
void* NSApplication__sharedApplication() {
  return [NSApplication sharedApplication];
}
//REJECT: selector
//void NSApplication__detachDrawingThreadToTargetWithObject(SEL selector, void* target, void* argument) {
//  [NSApplication detachDrawingThread:selector toTarget:target withObject:argument];
//}

////NSEnumerator
void* NSEnumerator_init() {
  return [[NSEnumerator alloc] init];
}
void* NSEnumerator_nextObject(void* goobj) {
  return [(NSEnumerator*)goobj nextObject];
}
void* NSEnumerator_allObjects(void* goobj) {
  return [(NSEnumerator*)goobj allObjects];
}


////NSArray
uint NSArray_count(void* goobj) {
  return [(NSArray*)goobj count];
}
void* NSArray_objectAtIndex(void* goobj, uint index) {
  return [(NSArray*)goobj objectAtIndex:index];
}
void* NSArray_arrayByAddingObject(void* goobj, void* anObject) {
  return [(NSArray*)goobj arrayByAddingObject:anObject];
}
void* NSArray_arrayByAddingObjectsFromArray(void* goobj, void* otherArray) {
  return [(NSArray*)goobj arrayByAddingObjectsFromArray:(NSArray*)otherArray];
}
void* NSArray_componentsJoinedByString(void* goobj, void* separator) {
  return [(NSArray*)goobj componentsJoinedByString:(NSString*)separator];
}
bool NSArray_containsObject(void* goobj, void* anObject) {
  return [(NSArray*)goobj containsObject:anObject];
}
void* NSArray_description(void* goobj) {
  return [(NSArray*)goobj description];
}
void* NSArray_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSArray*)goobj descriptionWithLocale:locale];
}
void* NSArray_descriptionWithLocaleIndent(void* goobj, void* locale, uint level) {
  return [(NSArray*)goobj descriptionWithLocale:locale indent:level];
}
void* NSArray_firstObjectCommonWithArray(void* goobj, void* otherArray) {
  return [(NSArray*)goobj firstObjectCommonWithArray:(NSArray*)otherArray];
}
//REJECT: range
//void NSArray_getObjectsRange(void* goobj, void* objects, NSRange range) {
//  [(NSArray*)goobj getObjects:objects range:range];
//}
uint NSArray_indexOfObject(void* goobj, void* anObject) {
  return [(NSArray*)goobj indexOfObject:anObject];
}
//REJECT: range
//uint NSArray_indexOfObjectInRange(void* goobj, void* anObject, NSRange range) {
//  return [(NSArray*)goobj indexOfObject:anObject inRange:range];
//}
uint NSArray_indexOfObjectIdenticalTo(void* goobj, void* anObject) {
  return [(NSArray*)goobj indexOfObjectIdenticalTo:anObject];
}
//REJECT: range
//uint NSArray_indexOfObjectIdenticalToInRange(void* goobj, void* anObject, NSRange range) {
//  return [(NSArray*)goobj indexOfObjectIdenticalTo:anObject inRange:range];
//}
bool NSArray_isEqualToArray(void* goobj, void* otherArray) {
  return [(NSArray*)goobj isEqualToArray:(NSArray*)otherArray];
}
void* NSArray_firstObject(void* goobj) {
  return [(NSArray*)goobj firstObject];
}
void* NSArray_lastObject(void* goobj) {
  return [(NSArray*)goobj lastObject];
}
void* NSArray_objectEnumerator(void* goobj) {
  return [(NSArray*)goobj objectEnumerator];
}
void* NSArray_reverseObjectEnumerator(void* goobj) {
  return [(NSArray*)goobj reverseObjectEnumerator];
}
void* NSArray_sortedArrayHint(void* goobj) {
  return [(NSArray*)goobj sortedArrayHint];
}
//REJECT: comparator
//void* NSArray_sortedArrayUsingFunctionContext(void* goobj, NSInteger comparator, void* context) {
//  return [(NSArray*)goobj sortedArrayUsingFunction:comparator context:context];
//}
//REJECT: comparator
//void* NSArray_sortedArrayUsingFunctionContextHint(void* goobj, NSInteger comparator, void* context, void* hint) {
//  return [(NSArray*)goobj sortedArrayUsingFunction:comparator context:context hint:(NSData*)hint];
//}
//REJECT: comparator
//void* NSArray_sortedArrayUsingSelector(void* goobj, SEL comparator) {
//  return [(NSArray*)goobj sortedArrayUsingSelector:comparator];
//}
//REJECT: range
//void* NSArray_subarrayWithRange(void* goobj, NSRange range) {
//  return [(NSArray*)goobj subarrayWithRange:range];
//}
bool NSArray_writeToFileAtomically(void* goobj, void* path, bool useAuxiliaryFile) {
  return [(NSArray*)goobj writeToFile:(NSString*)path atomically:useAuxiliaryFile];
}
bool NSArray_writeToURLAtomically(void* goobj, void* url, bool atomically) {
  return [(NSArray*)goobj writeToURL:(NSURL*)url atomically:atomically];
}
//REJECT: aSelector
//void NSArray_makeObjectsPerformSelector(void* goobj, SEL aSelector) {
//  [(NSArray*)goobj makeObjectsPerformSelector:aSelector];
//}
//REJECT: aSelector
//void NSArray_makeObjectsPerformSelectorWithObject(void* goobj, SEL aSelector, void* argument) {
//  [(NSArray*)goobj makeObjectsPerformSelector:aSelector withObject:argument];
//}
void* NSArray_objectsAtIndexes(void* goobj, void* indexes) {
  return [(NSArray*)goobj objectsAtIndexes:(NSIndexSet*)indexes];
}
void* NSArray_objectAtIndexedSubscript(void* goobj, uint idx) {
  return [(NSArray*)goobj objectAtIndexedSubscript:idx];
}
//REJECT: block
//void NSArray_enumerateObjectsUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSArray*)goobj enumerateObjectsUsingBlock:block];
//}
//REJECT: opts block
//void NSArray_enumerateObjectsWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSArray*)goobj enumerateObjectsWithOptions:opts usingBlock:block];
//}
//REJECT: opts block
//void NSArray_enumerateObjectsAtIndexesOptionsUsingBlock(void* goobj, void* s, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSArray*)goobj enumerateObjectsAtIndexes:(NSIndexSet*)s options:opts usingBlock:block];
//}
//unacceptalble-method
//uint NSArray_indexOfObjectPassingTest(void* goobj, bool predicate) {
//  return [(NSArray*)goobj indexOfObjectPassingTest:predicate];
//}
//REJECT: opts
//uint NSArray_indexOfObjectWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSArray*)goobj indexOfObjectWithOptions:opts passingTest:predicate];
//}
//REJECT: opts
//uint NSArray_indexOfObjectAtIndexesOptionsPassingTest(void* goobj, void* s, NSEnumerationOptions opts, bool predicate) {
//  return [(NSArray*)goobj indexOfObjectAtIndexes:(NSIndexSet*)s options:opts passingTest:predicate];
//}
//unacceptalble-method
//void* NSArray_indexesOfObjectsPassingTest(void* goobj, bool predicate) {
//  return [(NSArray*)goobj indexesOfObjectsPassingTest:predicate];
//}
//REJECT: opts
//void* NSArray_indexesOfObjectsWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSArray*)goobj indexesOfObjectsWithOptions:opts passingTest:predicate];
//}
//REJECT: opts
//void* NSArray_indexesOfObjectsAtIndexesOptionsPassingTest(void* goobj, void* s, NSEnumerationOptions opts, bool predicate) {
//  return [(NSArray*)goobj indexesOfObjectsAtIndexes:(NSIndexSet*)s options:opts passingTest:predicate];
//}
//REJECT: cmptr
//void* NSArray_sortedArrayUsingComparator(void* goobj, NSComparator cmptr) {
//  return [(NSArray*)goobj sortedArrayUsingComparator:cmptr];
//}
//REJECT: opts cmptr
//void* NSArray_sortedArrayWithOptionsUsingComparator(void* goobj, NSSortOptions opts, NSComparator cmptr) {
//  return [(NSArray*)goobj sortedArrayWithOptions:opts usingComparator:cmptr];
//}
//REJECT: r cmp
//uint NSArray_indexOfObjectInSortedRangeOptionsUsingComparator(void* goobj, void* obj, NSRange r, NSBinarySearchingOptions opts, NSComparator cmp) {
//  return [(NSArray*)goobj indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
//}
void* NSArray_init() {
  return [[NSArray alloc] init];
}
void* NSArray_initWithObjectsCount(void* objects, uint cnt) {
  return [[NSArray alloc] initWithObjects:objects count:cnt];
}
void* NSArray_initWithObjects(void* firstObj) {
  return [[NSArray alloc] initWithObjects:firstObj];
}
void* NSArray_initWithArray(void* array) {
  return [[NSArray alloc] initWithArray:(NSArray*)array];
}
void* NSArray_initWithArrayCopyItems(void* array, bool flag) {
  return [[NSArray alloc] initWithArray:(NSArray*)array copyItems:flag];
}
void* NSArray_initWithContentsOfFile(void* path) {
  return [[NSArray alloc] initWithContentsOfFile:(NSString*)path];
}
void* NSArray_initWithContentsOfURL(void* url) {
  return [[NSArray alloc] initWithContentsOfURL:(NSURL*)url];
}
void* NSArray_pathsMatchingExtensions(void* goobj, void* filterTypes) {
  return [(NSArray*)goobj pathsMatchingExtensions:(NSArray*)filterTypes];
}
void* NSArray_valueForKey(void* goobj, void* key) {
  return [(NSArray*)goobj valueForKey:(NSString*)key];
}
void NSArray_setValueForKey(void* goobj, void* value, void* key) {
  [(NSArray*)goobj setValue:value forKey:(NSString*)key];
}
void NSArray_addObserverToObjectsAtIndexesForKeyPathOptionsContext(void* goobj, void* observer, void* indexes, void* keyPath, NSKeyValueObservingOptions options, void* context) {
  [(NSArray*)goobj addObserver:(NSObject*)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString*)keyPath options:options context:context];
}
void NSArray_removeObserverFromObjectsAtIndexesForKeyPathContext(void* goobj, void* observer, void* indexes, void* keyPath, void* context) {
  [(NSArray*)goobj removeObserver:(NSObject*)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString*)keyPath context:context];
}
void NSArray_removeObserverFromObjectsAtIndexesForKeyPath(void* goobj, void* observer, void* indexes, void* keyPath) {
  [(NSArray*)goobj removeObserver:(NSObject*)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString*)keyPath];
}
void NSArray_addObserverForKeyPathOptionsContext(void* goobj, void* observer, void* keyPath, NSKeyValueObservingOptions options, void* context) {
  [(NSArray*)goobj addObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath options:options context:context];
}
void NSArray_removeObserverForKeyPathContext(void* goobj, void* observer, void* keyPath, void* context) {
  [(NSArray*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath context:context];
}
void NSArray_removeObserverForKeyPath(void* goobj, void* observer, void* keyPath) {
  [(NSArray*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath];
}
void* NSArray_sortedArrayUsingDescriptors(void* goobj, void* sortDescriptors) {
  return [(NSArray*)goobj sortedArrayUsingDescriptors:(NSArray*)sortDescriptors];
}
void* NSArray_filteredArrayUsingPredicate(void* goobj, void* predicate) {
  return [(NSArray*)goobj filteredArrayUsingPredicate:(NSPredicate*)predicate];
}


////NSMutableArray
void NSMutableArray_addObject(void* goobj, void* anObject) {
  [(NSMutableArray*)goobj addObject:anObject];
}
void NSMutableArray_insertObjectAtIndex(void* goobj, void* anObject, uint index) {
  [(NSMutableArray*)goobj insertObject:anObject atIndex:index];
}
void NSMutableArray_removeLastObject(void* goobj) {
  [(NSMutableArray*)goobj removeLastObject];
}
void NSMutableArray_removeObjectAtIndex(void* goobj, uint index) {
  [(NSMutableArray*)goobj removeObjectAtIndex:index];
}
void NSMutableArray_replaceObjectAtIndexWithObject(void* goobj, uint index, void* anObject) {
  [(NSMutableArray*)goobj replaceObjectAtIndex:index withObject:anObject];
}
void NSMutableArray_addObjectsFromArray(void* goobj, void* otherArray) {
  [(NSMutableArray*)goobj addObjectsFromArray:(NSArray*)otherArray];
}
void NSMutableArray_exchangeObjectAtIndexWithObjectAtIndex(void* goobj, uint idx1, uint idx2) {
  [(NSMutableArray*)goobj exchangeObjectAtIndex:idx1 withObjectAtIndex:idx2];
}
void NSMutableArray_removeAllObjects(void* goobj) {
  [(NSMutableArray*)goobj removeAllObjects];
}
//REJECT: range
//void NSMutableArray_removeObjectInRange(void* goobj, void* anObject, NSRange range) {
//  [(NSMutableArray*)goobj removeObject:anObject inRange:range];
//}
void NSMutableArray_removeObject(void* goobj, void* anObject) {
  [(NSMutableArray*)goobj removeObject:anObject];
}
//REJECT: range
//void NSMutableArray_removeObjectIdenticalToInRange(void* goobj, void* anObject, NSRange range) {
//  [(NSMutableArray*)goobj removeObjectIdenticalTo:anObject inRange:range];
//}
void NSMutableArray_removeObjectIdenticalTo(void* goobj, void* anObject) {
  [(NSMutableArray*)goobj removeObjectIdenticalTo:anObject];
}
void NSMutableArray_removeObjectsFromIndicesNumIndices(void* goobj, uint indices, uint cnt) {
  [(NSMutableArray*)goobj removeObjectsFromIndices:indices numIndices:cnt];
}
void NSMutableArray_removeObjectsInArray(void* goobj, void* otherArray) {
  [(NSMutableArray*)goobj removeObjectsInArray:(NSArray*)otherArray];
}
//REJECT: range
//void NSMutableArray_removeObjectsInRange(void* goobj, NSRange range) {
//  [(NSMutableArray*)goobj removeObjectsInRange:range];
//}
//REJECT: range otherRange
//void NSMutableArray_replaceObjectsInRangeWithObjectsFromArrayRange(void* goobj, NSRange range, void* otherArray, NSRange otherRange) {
//  [(NSMutableArray*)goobj replaceObjectsInRange:range withObjectsFromArray:(NSArray*)otherArray range:otherRange];
//}
//REJECT: range
//void NSMutableArray_replaceObjectsInRangeWithObjectsFromArray(void* goobj, NSRange range, void* otherArray) {
//  [(NSMutableArray*)goobj replaceObjectsInRange:range withObjectsFromArray:(NSArray*)otherArray];
//}
void NSMutableArray_setArray(void* goobj, void* otherArray) {
  [(NSMutableArray*)goobj setArray:(NSArray*)otherArray];
}
//REJECT: compare
//void NSMutableArray_sortUsingFunctionContext(void* goobj, NSInteger compare, void* context) {
//  [(NSMutableArray*)goobj sortUsingFunction:compare context:context];
//}
//REJECT: comparator
//void NSMutableArray_sortUsingSelector(void* goobj, SEL comparator) {
//  [(NSMutableArray*)goobj sortUsingSelector:comparator];
//}
void NSMutableArray_insertObjectsAtIndexes(void* goobj, void* objects, void* indexes) {
  [(NSMutableArray*)goobj insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes];
}
void NSMutableArray_removeObjectsAtIndexes(void* goobj, void* indexes) {
  [(NSMutableArray*)goobj removeObjectsAtIndexes:(NSIndexSet*)indexes];
}
void NSMutableArray_replaceObjectsAtIndexesWithObjects(void* goobj, void* indexes, void* objects) {
  [(NSMutableArray*)goobj replaceObjectsAtIndexes:(NSIndexSet*)indexes withObjects:(NSArray*)objects];
}
void NSMutableArray_setObjectAtIndexedSubscript(void* goobj, void* obj, uint idx) {
  [(NSMutableArray*)goobj setObject:obj atIndexedSubscript:idx];
}
//REJECT: cmptr
//void NSMutableArray_sortUsingComparator(void* goobj, NSComparator cmptr) {
//  [(NSMutableArray*)goobj sortUsingComparator:cmptr];
//}
//REJECT: opts cmptr
//void NSMutableArray_sortWithOptionsUsingComparator(void* goobj, NSSortOptions opts, NSComparator cmptr) {
//  [(NSMutableArray*)goobj sortWithOptions:opts usingComparator:cmptr];
//}
void* NSMutableArray_init() {
  return [[NSMutableArray alloc] init];
}
void* NSMutableArray_initWithCapacity(uint numItems) {
  return [[NSMutableArray alloc] initWithCapacity:numItems];
}
void NSMutableArray_sortUsingDescriptors(void* goobj, void* sortDescriptors) {
  [(NSMutableArray*)goobj sortUsingDescriptors:(NSArray*)sortDescriptors];
}
void NSMutableArray_filterUsingPredicate(void* goobj, void* predicate) {
  [(NSMutableArray*)goobj filterUsingPredicate:(NSPredicate*)predicate];
}


////NSAutoreleasePool
void* NSAutoreleasePool_init() {
  return [[NSAutoreleasePool alloc] init];
}
void NSAutoreleasePool_addObject(void* goobj, void* anObject) {
  [(NSAutoreleasePool*)goobj addObject:anObject];
}
void NSAutoreleasePool_drain(void* goobj) {
  [(NSAutoreleasePool*)goobj drain];
}
void NSAutoreleasePool__addObject(void* anObject) {
  [NSAutoreleasePool addObject:anObject];
}

////NSBundle
void* NSBundle_init() {
  return [[NSBundle alloc] init];
}
void* NSBundle_initWithPath(void* path) {
  return [[NSBundle alloc] initWithPath:(NSString*)path];
}
void* NSBundle_initWithURL(void* url) {
  return [[NSBundle alloc] initWithURL:(NSURL*)url];
}
bool NSBundle_load(void* goobj) {
  return [(NSBundle*)goobj load];
}
bool NSBundle_isLoaded(void* goobj) {
  return [(NSBundle*)goobj isLoaded];
}
bool NSBundle_unload(void* goobj) {
  return [(NSBundle*)goobj unload];
}
bool NSBundle_preflightAndReturnError(void* goobj, void* error) {
  return [(NSBundle*)goobj preflightAndReturnError:(NSError**)&error];
}
bool NSBundle_loadAndReturnError(void* goobj, void* error) {
  return [(NSBundle*)goobj loadAndReturnError:(NSError**)&error];
}
void* NSBundle_bundleURL(void* goobj) {
  return [(NSBundle*)goobj bundleURL];
}
void* NSBundle_resourceURL(void* goobj) {
  return [(NSBundle*)goobj resourceURL];
}
void* NSBundle_executableURL(void* goobj) {
  return [(NSBundle*)goobj executableURL];
}
void* NSBundle_URLForAuxiliaryExecutable(void* goobj, void* executableName) {
  return [(NSBundle*)goobj URLForAuxiliaryExecutable:(NSString*)executableName];
}
void* NSBundle_privateFrameworksURL(void* goobj) {
  return [(NSBundle*)goobj privateFrameworksURL];
}
void* NSBundle_sharedFrameworksURL(void* goobj) {
  return [(NSBundle*)goobj sharedFrameworksURL];
}
void* NSBundle_sharedSupportURL(void* goobj) {
  return [(NSBundle*)goobj sharedSupportURL];
}
void* NSBundle_builtInPlugInsURL(void* goobj) {
  return [(NSBundle*)goobj builtInPlugInsURL];
}
void* NSBundle_appStoreReceiptURL(void* goobj) {
  return [(NSBundle*)goobj appStoreReceiptURL];
}
void* NSBundle_bundlePath(void* goobj) {
  return [(NSBundle*)goobj bundlePath];
}
void* NSBundle_resourcePath(void* goobj) {
  return [(NSBundle*)goobj resourcePath];
}
void* NSBundle_executablePath(void* goobj) {
  return [(NSBundle*)goobj executablePath];
}
void* NSBundle_pathForAuxiliaryExecutable(void* goobj, void* executableName) {
  return [(NSBundle*)goobj pathForAuxiliaryExecutable:(NSString*)executableName];
}
void* NSBundle_privateFrameworksPath(void* goobj) {
  return [(NSBundle*)goobj privateFrameworksPath];
}
void* NSBundle_sharedFrameworksPath(void* goobj) {
  return [(NSBundle*)goobj sharedFrameworksPath];
}
void* NSBundle_sharedSupportPath(void* goobj) {
  return [(NSBundle*)goobj sharedSupportPath];
}
void* NSBundle_builtInPlugInsPath(void* goobj) {
  return [(NSBundle*)goobj builtInPlugInsPath];
}
void* NSBundle_URLForResourceWithExtension(void* goobj, void* name, void* ext) {
  return [(NSBundle*)goobj URLForResource:(NSString*)name withExtension:(NSString*)ext];
}
void* NSBundle_URLForResourceWithExtensionSubdirectory(void* goobj, void* name, void* ext, void* subpath) {
  return [(NSBundle*)goobj URLForResource:(NSString*)name withExtension:(NSString*)ext subdirectory:(NSString*)subpath];
}
void* NSBundle_URLForResourceWithExtensionSubdirectoryLocalization(void* goobj, void* name, void* ext, void* subpath, void* localizationName) {
  return [(NSBundle*)goobj URLForResource:(NSString*)name withExtension:(NSString*)ext subdirectory:(NSString*)subpath localization:(NSString*)localizationName];
}
void* NSBundle_URLsForResourcesWithExtensionSubdirectory(void* goobj, void* ext, void* subpath) {
  return [(NSBundle*)goobj URLsForResourcesWithExtension:(NSString*)ext subdirectory:(NSString*)subpath];
}
void* NSBundle_URLsForResourcesWithExtensionSubdirectoryLocalization(void* goobj, void* ext, void* subpath, void* localizationName) {
  return [(NSBundle*)goobj URLsForResourcesWithExtension:(NSString*)ext subdirectory:(NSString*)subpath localization:(NSString*)localizationName];
}
void* NSBundle_pathForResourceOfType(void* goobj, void* name, void* ext) {
  return [(NSBundle*)goobj pathForResource:(NSString*)name ofType:(NSString*)ext];
}
void* NSBundle_pathForResourceOfTypeInDirectory(void* goobj, void* name, void* ext, void* subpath) {
  return [(NSBundle*)goobj pathForResource:(NSString*)name ofType:(NSString*)ext inDirectory:(NSString*)subpath];
}
void* NSBundle_pathForResourceOfTypeInDirectoryForLocalization(void* goobj, void* name, void* ext, void* subpath, void* localizationName) {
  return [(NSBundle*)goobj pathForResource:(NSString*)name ofType:(NSString*)ext inDirectory:(NSString*)subpath forLocalization:(NSString*)localizationName];
}
void* NSBundle_pathsForResourcesOfTypeInDirectory(void* goobj, void* ext, void* subpath) {
  return [(NSBundle*)goobj pathsForResourcesOfType:(NSString*)ext inDirectory:(NSString*)subpath];
}
void* NSBundle_pathsForResourcesOfTypeInDirectoryForLocalization(void* goobj, void* ext, void* subpath, void* localizationName) {
  return [(NSBundle*)goobj pathsForResourcesOfType:(NSString*)ext inDirectory:(NSString*)subpath forLocalization:(NSString*)localizationName];
}
void* NSBundle_localizedStringForKeyValueTable(void* goobj, void* key, void* value, void* tableName) {
  return [(NSBundle*)goobj localizedStringForKey:(NSString*)key value:(NSString*)value table:(NSString*)tableName];
}
void* NSBundle_bundleIdentifier(void* goobj) {
  return [(NSBundle*)goobj bundleIdentifier];
}
void* NSBundle_infoDictionary(void* goobj) {
  return [(NSBundle*)goobj infoDictionary];
}
void* NSBundle_localizedInfoDictionary(void* goobj) {
  return [(NSBundle*)goobj localizedInfoDictionary];
}
void* NSBundle_objectForInfoDictionaryKey(void* goobj, void* key) {
  return [(NSBundle*)goobj objectForInfoDictionaryKey:(NSString*)key];
}
//REJECT: Class
//Class NSBundle_classNamed(void* goobj, void* className) {
//  return [(NSBundle*)goobj classNamed:(NSString*)className];
//}
//REJECT: Class
//Class NSBundle_principalClass(void* goobj) {
//  return [(NSBundle*)goobj principalClass];
//}
void* NSBundle_preferredLocalizations(void* goobj) {
  return [(NSBundle*)goobj preferredLocalizations];
}
void* NSBundle_localizations(void* goobj) {
  return [(NSBundle*)goobj localizations];
}
void* NSBundle_developmentLocalization(void* goobj) {
  return [(NSBundle*)goobj developmentLocalization];
}
void* NSBundle_executableArchitectures(void* goobj) {
  return [(NSBundle*)goobj executableArchitectures];
}
void* NSBundle__mainBundle() {
  return [NSBundle mainBundle];
}
void* NSBundle__bundleWithPath(void* path) {
  return [NSBundle bundleWithPath:(NSString*)path];
}
void* NSBundle__bundleWithURL(void* url) {
  return [NSBundle bundleWithURL:(NSURL*)url];
}
//REJECT: aClass
//void* NSBundle__bundleForClass(Class aClass) {
//  return [NSBundle bundleForClass:aClass];
//}
void* NSBundle__bundleWithIdentifier(void* identifier) {
  return [NSBundle bundleWithIdentifier:(NSString*)identifier];
}
void* NSBundle__allBundles() {
  return [NSBundle allBundles];
}
void* NSBundle__allFrameworks() {
  return [NSBundle allFrameworks];
}
void* NSBundle__URLForResourceWithExtensionSubdirectoryInBundleWithURL(void* name, void* ext, void* subpath, void* bundleURL) {
  return [NSBundle URLForResource:(NSString*)name withExtension:(NSString*)ext subdirectory:(NSString*)subpath inBundleWithURL:(NSURL*)bundleURL];
}
void* NSBundle__URLsForResourcesWithExtensionSubdirectoryInBundleWithURL(void* ext, void* subpath, void* bundleURL) {
  return [NSBundle URLsForResourcesWithExtension:(NSString*)ext subdirectory:(NSString*)subpath inBundleWithURL:(NSURL*)bundleURL];
}
void* NSBundle__pathForResourceOfTypeInDirectory(void* name, void* ext, void* bundlePath) {
  return [NSBundle pathForResource:(NSString*)name ofType:(NSString*)ext inDirectory:(NSString*)bundlePath];
}
void* NSBundle__pathsForResourcesOfTypeInDirectory(void* ext, void* bundlePath) {
  return [NSBundle pathsForResourcesOfType:(NSString*)ext inDirectory:(NSString*)bundlePath];
}
void* NSBundle__preferredLocalizationsFromArray(void* localizationsArray) {
  return [NSBundle preferredLocalizationsFromArray:(NSArray*)localizationsArray];
}
void* NSBundle__preferredLocalizationsFromArrayForPreferences(void* localizationsArray, void* preferencesArray) {
  return [NSBundle preferredLocalizationsFromArray:(NSArray*)localizationsArray forPreferences:(NSArray*)preferencesArray];
}

////NSCalendar
void* NSCalendar_init() {
  return [[NSCalendar alloc] init];
}
void* NSCalendar_initWithCalendarIdentifier(void* ident) {
  return [[NSCalendar alloc] initWithCalendarIdentifier:(NSString*)ident];
}
void* NSCalendar_calendarIdentifier(void* goobj) {
  return [(NSCalendar*)goobj calendarIdentifier];
}
//REJECT: locale
//void NSCalendar_setLocale(void* goobj, void* locale) {
//  [(NSCalendar*)goobj setLocale:(NSLocale*)locale];
//}
//REJECT: NSLocale
//void* NSCalendar_locale(void* goobj) {
//  return [(NSCalendar*)goobj locale];
//}
void NSCalendar_setTimeZone(void* goobj, void* tz) {
  [(NSCalendar*)goobj setTimeZone:(NSTimeZone*)tz];
}
void* NSCalendar_timeZone(void* goobj) {
  return [(NSCalendar*)goobj timeZone];
}
void NSCalendar_setFirstWeekday(void* goobj, uint weekday) {
  [(NSCalendar*)goobj setFirstWeekday:weekday];
}
uint NSCalendar_firstWeekday(void* goobj) {
  return [(NSCalendar*)goobj firstWeekday];
}
void NSCalendar_setMinimumDaysInFirstWeek(void* goobj, uint mdw) {
  [(NSCalendar*)goobj setMinimumDaysInFirstWeek:mdw];
}
uint NSCalendar_minimumDaysInFirstWeek(void* goobj) {
  return [(NSCalendar*)goobj minimumDaysInFirstWeek];
}
void* NSCalendar_eraSymbols(void* goobj) {
  return [(NSCalendar*)goobj eraSymbols];
}
void* NSCalendar_longEraSymbols(void* goobj) {
  return [(NSCalendar*)goobj longEraSymbols];
}
void* NSCalendar_monthSymbols(void* goobj) {
  return [(NSCalendar*)goobj monthSymbols];
}
void* NSCalendar_shortMonthSymbols(void* goobj) {
  return [(NSCalendar*)goobj shortMonthSymbols];
}
void* NSCalendar_veryShortMonthSymbols(void* goobj) {
  return [(NSCalendar*)goobj veryShortMonthSymbols];
}
void* NSCalendar_standaloneMonthSymbols(void* goobj) {
  return [(NSCalendar*)goobj standaloneMonthSymbols];
}
void* NSCalendar_shortStandaloneMonthSymbols(void* goobj) {
  return [(NSCalendar*)goobj shortStandaloneMonthSymbols];
}
void* NSCalendar_veryShortStandaloneMonthSymbols(void* goobj) {
  return [(NSCalendar*)goobj veryShortStandaloneMonthSymbols];
}
void* NSCalendar_weekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj weekdaySymbols];
}
void* NSCalendar_shortWeekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj shortWeekdaySymbols];
}
void* NSCalendar_veryShortWeekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj veryShortWeekdaySymbols];
}
void* NSCalendar_standaloneWeekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj standaloneWeekdaySymbols];
}
void* NSCalendar_shortStandaloneWeekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj shortStandaloneWeekdaySymbols];
}
void* NSCalendar_veryShortStandaloneWeekdaySymbols(void* goobj) {
  return [(NSCalendar*)goobj veryShortStandaloneWeekdaySymbols];
}
void* NSCalendar_quarterSymbols(void* goobj) {
  return [(NSCalendar*)goobj quarterSymbols];
}
void* NSCalendar_shortQuarterSymbols(void* goobj) {
  return [(NSCalendar*)goobj shortQuarterSymbols];
}
void* NSCalendar_standaloneQuarterSymbols(void* goobj) {
  return [(NSCalendar*)goobj standaloneQuarterSymbols];
}
void* NSCalendar_shortStandaloneQuarterSymbols(void* goobj) {
  return [(NSCalendar*)goobj shortStandaloneQuarterSymbols];
}
void* NSCalendar_AMSymbol(void* goobj) {
  return [(NSCalendar*)goobj AMSymbol];
}
void* NSCalendar_PMSymbol(void* goobj) {
  return [(NSCalendar*)goobj PMSymbol];
}
//REJECT: NSRange
//NSRange NSCalendar_minimumRangeOfUnit(void* goobj, NSCalendarUnit unit) {
//  return [(NSCalendar*)goobj minimumRangeOfUnit:unit];
//}
//REJECT: NSRange
//NSRange NSCalendar_maximumRangeOfUnit(void* goobj, NSCalendarUnit unit) {
//  return [(NSCalendar*)goobj maximumRangeOfUnit:unit];
//}
//REJECT: NSRange
//NSRange NSCalendar_rangeOfUnitInUnitForDate(void* goobj, NSCalendarUnit smaller, NSCalendarUnit larger, void* date) {
//  return [(NSCalendar*)goobj rangeOfUnit:smaller inUnit:larger forDate:(NSDate*)date];
//}
uint NSCalendar_ordinalityOfUnitInUnitForDate(void* goobj, NSCalendarUnit smaller, NSCalendarUnit larger, void* date) {
  return [(NSCalendar*)goobj ordinalityOfUnit:smaller inUnit:larger forDate:(NSDate*)date];
}
//REJECT: tip
//bool NSCalendar_rangeOfUnitStartDateIntervalForDate(void* goobj, NSCalendarUnit unit, void* datep, NSTimeInterval tip, void* date) {
//  return [(NSCalendar*)goobj rangeOfUnit:unit startDate:(NSDate*)datep interval:tip forDate:(NSDate*)date];
//}
void* NSCalendar_dateFromComponents(void* goobj, void* comps) {
  return [(NSCalendar*)goobj dateFromComponents:(NSDateComponents*)comps];
}
void* NSCalendar_componentsFromDate(void* goobj, NSCalendarUnit unitFlags, void* date) {
  return [(NSCalendar*)goobj components:unitFlags fromDate:(NSDate*)date];
}
void* NSCalendar_dateByAddingComponentsToDateOptions(void* goobj, void* comps, void* date, NSCalendarOptions opts) {
  return [(NSCalendar*)goobj dateByAddingComponents:(NSDateComponents*)comps toDate:(NSDate*)date options:opts];
}
void* NSCalendar_componentsFromDateToDateOptions(void* goobj, NSCalendarUnit unitFlags, void* startingDate, void* resultDate, NSCalendarOptions opts) {
  return [(NSCalendar*)goobj components:unitFlags fromDate:(NSDate*)startingDate toDate:(NSDate*)resultDate options:opts];
}
//REJECT: eraValuePointer yearValuePointer monthValuePointer dayValuePointer
//void NSCalendar_getEraYearMonthDayFromDate(void* goobj, NSInteger eraValuePointer, NSInteger yearValuePointer, NSInteger monthValuePointer, NSInteger dayValuePointer, void* date) {
//  [(NSCalendar*)goobj getEra:eraValuePointer year:yearValuePointer month:monthValuePointer day:dayValuePointer fromDate:(NSDate*)date];
//}
//REJECT: eraValuePointer yearValuePointer weekValuePointer weekdayValuePointer
//void NSCalendar_getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(void* goobj, NSInteger eraValuePointer, NSInteger yearValuePointer, NSInteger weekValuePointer, NSInteger weekdayValuePointer, void* date) {
//  [(NSCalendar*)goobj getEra:eraValuePointer yearForWeekOfYear:yearValuePointer weekOfYear:weekValuePointer weekday:weekdayValuePointer fromDate:(NSDate*)date];
//}
//REJECT: hourValuePointer minuteValuePointer secondValuePointer nanosecondValuePointer
//void NSCalendar_getHourMinuteSecondNanosecondFromDate(void* goobj, NSInteger hourValuePointer, NSInteger minuteValuePointer, NSInteger secondValuePointer, NSInteger nanosecondValuePointer, void* date) {
//  [(NSCalendar*)goobj getHour:hourValuePointer minute:minuteValuePointer second:secondValuePointer nanosecond:nanosecondValuePointer fromDate:(NSDate*)date];
//}
//REJECT: NSInteger
//NSInteger NSCalendar_componentFromDate(void* goobj, NSCalendarUnit unit, void* date) {
//  return [(NSCalendar*)goobj component:unit fromDate:(NSDate*)date];
//}
//REJECT: eraValue yearValue monthValue dayValue hourValue minuteValue secondValue nanosecondValue
//void* NSCalendar_dateWithEraYearMonthDayHourMinuteSecondNanosecond(void* goobj, NSInteger eraValue, NSInteger yearValue, NSInteger monthValue, NSInteger dayValue, NSInteger hourValue, NSInteger minuteValue, NSInteger secondValue, NSInteger nanosecondValue) {
//  return [(NSCalendar*)goobj dateWithEra:eraValue year:yearValue month:monthValue day:dayValue hour:hourValue minute:minuteValue second:secondValue nanosecond:nanosecondValue];
//}
//REJECT: eraValue yearValue weekValue weekdayValue hourValue minuteValue secondValue nanosecondValue
//void* NSCalendar_dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(void* goobj, NSInteger eraValue, NSInteger yearValue, NSInteger weekValue, NSInteger weekdayValue, NSInteger hourValue, NSInteger minuteValue, NSInteger secondValue, NSInteger nanosecondValue) {
//  return [(NSCalendar*)goobj dateWithEra:eraValue yearForWeekOfYear:yearValue weekOfYear:weekValue weekday:weekdayValue hour:hourValue minute:minuteValue second:secondValue nanosecond:nanosecondValue];
//}
void* NSCalendar_startOfDayForDate(void* goobj, void* date) {
  return [(NSCalendar*)goobj startOfDayForDate:(NSDate*)date];
}
void* NSCalendar_componentsInTimeZoneFromDate(void* goobj, void* timezone, void* date) {
  return [(NSCalendar*)goobj componentsInTimeZone:(NSTimeZone*)timezone fromDate:(NSDate*)date];
}
//REJECT: NSComparisonResult
//NSComparisonResult NSCalendar_compareDateToDateToUnitGranularity(void* goobj, void* date1, void* date2, NSCalendarUnit unit) {
//  return [(NSCalendar*)goobj compareDate:(NSDate*)date1 toDate:(NSDate*)date2 toUnitGranularity:unit];
//}
bool NSCalendar_isDateEqualToDateToUnitGranularity(void* goobj, void* date1, void* date2, NSCalendarUnit unit) {
  return [(NSCalendar*)goobj isDate:(NSDate*)date1 equalToDate:(NSDate*)date2 toUnitGranularity:unit];
}
bool NSCalendar_isDateInSameDayAsDate(void* goobj, void* date1, void* date2) {
  return [(NSCalendar*)goobj isDate:(NSDate*)date1 inSameDayAsDate:(NSDate*)date2];
}
bool NSCalendar_isDateInToday(void* goobj, void* date) {
  return [(NSCalendar*)goobj isDateInToday:(NSDate*)date];
}
bool NSCalendar_isDateInYesterday(void* goobj, void* date) {
  return [(NSCalendar*)goobj isDateInYesterday:(NSDate*)date];
}
bool NSCalendar_isDateInTomorrow(void* goobj, void* date) {
  return [(NSCalendar*)goobj isDateInTomorrow:(NSDate*)date];
}
bool NSCalendar_isDateInWeekend(void* goobj, void* date) {
  return [(NSCalendar*)goobj isDateInWeekend:(NSDate*)date];
}
//REJECT: tip
//bool NSCalendar_rangeOfWeekendStartDateIntervalContainingDate(void* goobj, void* datep, NSTimeInterval tip, void* date) {
//  return [(NSCalendar*)goobj rangeOfWeekendStartDate:(NSDate*)datep interval:tip containingDate:(NSDate*)date];
//}
//REJECT: tip
//bool NSCalendar_nextWeekendStartDateIntervalOptionsAfterDate(void* goobj, void* datep, NSTimeInterval tip, NSCalendarOptions options, void* date) {
//  return [(NSCalendar*)goobj nextWeekendStartDate:(NSDate*)datep interval:tip options:options afterDate:(NSDate*)date];
//}
void* NSCalendar_componentsFromDateComponentsToDateComponentsOptions(void* goobj, NSCalendarUnit unitFlags, void* startingDateComp, void* resultDateComp, NSCalendarOptions options) {
  return [(NSCalendar*)goobj components:unitFlags fromDateComponents:(NSDateComponents*)startingDateComp toDateComponents:(NSDateComponents*)resultDateComp options:options];
}
//REJECT: value
//void* NSCalendar_dateByAddingUnitValueToDateOptions(void* goobj, NSCalendarUnit unit, NSInteger value, void* date, NSCalendarOptions options) {
//  return [(NSCalendar*)goobj dateByAddingUnit:unit value:value toDate:(NSDate*)date options:options];
//}
//REJECT: block
//void NSCalendar_enumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock(void* goobj, void* start, void* comps, NSCalendarOptions opts, *INVALID TYPE* block) {
//  [(NSCalendar*)goobj enumerateDatesStartingAfterDate:(NSDate*)start matchingComponents:(NSDateComponents*)comps options:opts usingBlock:block];
//}
void* NSCalendar_nextDateAfterDateMatchingComponentsOptions(void* goobj, void* date, void* comps, NSCalendarOptions options) {
  return [(NSCalendar*)goobj nextDateAfterDate:(NSDate*)date matchingComponents:(NSDateComponents*)comps options:options];
}
//REJECT: value
//void* NSCalendar_nextDateAfterDateMatchingUnitValueOptions(void* goobj, void* date, NSCalendarUnit unit, NSInteger value, NSCalendarOptions options) {
//  return [(NSCalendar*)goobj nextDateAfterDate:(NSDate*)date matchingUnit:unit value:value options:options];
//}
//REJECT: hourValue minuteValue secondValue
//void* NSCalendar_nextDateAfterDateMatchingHourMinuteSecondOptions(void* goobj, void* date, NSInteger hourValue, NSInteger minuteValue, NSInteger secondValue, NSCalendarOptions options) {
//  return [(NSCalendar*)goobj nextDateAfterDate:(NSDate*)date matchingHour:hourValue minute:minuteValue second:secondValue options:options];
//}
//REJECT: v
//void* NSCalendar_dateBySettingUnitValueOfDateOptions(void* goobj, NSCalendarUnit unit, NSInteger v, void* date, NSCalendarOptions opts) {
//  return [(NSCalendar*)goobj dateBySettingUnit:unit value:v ofDate:(NSDate*)date options:opts];
//}
//REJECT: h m s
//void* NSCalendar_dateBySettingHourMinuteSecondOfDateOptions(void* goobj, NSInteger h, NSInteger m, NSInteger s, void* date, NSCalendarOptions opts) {
//  return [(NSCalendar*)goobj dateBySettingHour:h minute:m second:s ofDate:(NSDate*)date options:opts];
//}
bool NSCalendar_dateMatchesComponents(void* goobj, void* date, void* components) {
  return [(NSCalendar*)goobj date:(NSDate*)date matchesComponents:(NSDateComponents*)components];
}
void* NSCalendar__currentCalendar() {
  return [NSCalendar currentCalendar];
}
void* NSCalendar__autoupdatingCurrentCalendar() {
  return [NSCalendar autoupdatingCurrentCalendar];
}
void* NSCalendar__calendarWithIdentifier(void* calendarIdentifierConstant) {
  return [NSCalendar calendarWithIdentifier:(NSString*)calendarIdentifierConstant];
}

////NSDateComponents
void* NSDateComponents_init() {
  return [[NSDateComponents alloc] init];
}
void* NSDateComponents_calendar(void* goobj) {
  return [(NSDateComponents*)goobj calendar];
}
void* NSDateComponents_timeZone(void* goobj) {
  return [(NSDateComponents*)goobj timeZone];
}
//REJECT: NSInteger
//NSInteger NSDateComponents_era(void* goobj) {
//  return [(NSDateComponents*)goobj era];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_year(void* goobj) {
//  return [(NSDateComponents*)goobj year];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_month(void* goobj) {
//  return [(NSDateComponents*)goobj month];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_day(void* goobj) {
//  return [(NSDateComponents*)goobj day];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_hour(void* goobj) {
//  return [(NSDateComponents*)goobj hour];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_minute(void* goobj) {
//  return [(NSDateComponents*)goobj minute];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_second(void* goobj) {
//  return [(NSDateComponents*)goobj second];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_nanosecond(void* goobj) {
//  return [(NSDateComponents*)goobj nanosecond];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_week(void* goobj) {
//  return [(NSDateComponents*)goobj week];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_weekday(void* goobj) {
//  return [(NSDateComponents*)goobj weekday];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_weekdayOrdinal(void* goobj) {
//  return [(NSDateComponents*)goobj weekdayOrdinal];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_quarter(void* goobj) {
//  return [(NSDateComponents*)goobj quarter];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_weekOfMonth(void* goobj) {
//  return [(NSDateComponents*)goobj weekOfMonth];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_weekOfYear(void* goobj) {
//  return [(NSDateComponents*)goobj weekOfYear];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_yearForWeekOfYear(void* goobj) {
//  return [(NSDateComponents*)goobj yearForWeekOfYear];
//}
bool NSDateComponents_isLeapMonth(void* goobj) {
  return [(NSDateComponents*)goobj isLeapMonth];
}
void NSDateComponents_setCalendar(void* goobj, void* cal) {
  [(NSDateComponents*)goobj setCalendar:(NSCalendar*)cal];
}
void NSDateComponents_setTimeZone(void* goobj, void* tz) {
  [(NSDateComponents*)goobj setTimeZone:(NSTimeZone*)tz];
}
//REJECT: v
//void NSDateComponents_setEra(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setEra:v];
//}
//REJECT: v
//void NSDateComponents_setYear(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setYear:v];
//}
//REJECT: v
//void NSDateComponents_setMonth(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setMonth:v];
//}
//REJECT: v
//void NSDateComponents_setDay(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setDay:v];
//}
//REJECT: v
//void NSDateComponents_setHour(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setHour:v];
//}
//REJECT: v
//void NSDateComponents_setMinute(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setMinute:v];
//}
//REJECT: v
//void NSDateComponents_setSecond(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setSecond:v];
//}
//REJECT: value
//void NSDateComponents_setNanosecond(void* goobj, NSInteger value) {
//  [(NSDateComponents*)goobj setNanosecond:value];
//}
//REJECT: v
//void NSDateComponents_setWeek(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setWeek:v];
//}
//REJECT: v
//void NSDateComponents_setWeekday(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setWeekday:v];
//}
//REJECT: v
//void NSDateComponents_setWeekdayOrdinal(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setWeekdayOrdinal:v];
//}
//REJECT: v
//void NSDateComponents_setQuarter(void* goobj, NSInteger v) {
//  [(NSDateComponents*)goobj setQuarter:v];
//}
//REJECT: w
//void NSDateComponents_setWeekOfMonth(void* goobj, NSInteger w) {
//  [(NSDateComponents*)goobj setWeekOfMonth:w];
//}
//REJECT: w
//void NSDateComponents_setWeekOfYear(void* goobj, NSInteger w) {
//  [(NSDateComponents*)goobj setWeekOfYear:w];
//}
//REJECT: y
//void NSDateComponents_setYearForWeekOfYear(void* goobj, NSInteger y) {
//  [(NSDateComponents*)goobj setYearForWeekOfYear:y];
//}
void NSDateComponents_setLeapMonth(void* goobj, bool lm) {
  [(NSDateComponents*)goobj setLeapMonth:lm];
}
void* NSDateComponents_date(void* goobj) {
  return [(NSDateComponents*)goobj date];
}
//REJECT: value
//void NSDateComponents_setValueForComponent(void* goobj, NSInteger value, NSCalendarUnit unit) {
//  [(NSDateComponents*)goobj setValue:value forComponent:unit];
//}
//REJECT: NSInteger
//NSInteger NSDateComponents_valueForComponent(void* goobj, NSCalendarUnit unit) {
//  return [(NSDateComponents*)goobj valueForComponent:unit];
//}
bool NSDateComponents_isValidDate(void* goobj) {
  return [(NSDateComponents*)goobj isValidDate];
}
bool NSDateComponents_isValidDateInCalendar(void* goobj, void* calendar) {
  return [(NSDateComponents*)goobj isValidDateInCalendar:(NSCalendar*)calendar];
}


////NSCharacterSet
void* NSCharacterSet_init() {
  return [[NSCharacterSet alloc] init];
}
//REJECT: aCharacter
//bool NSCharacterSet_characterIsMember(void* goobj, unichar aCharacter) {
//  return [(NSCharacterSet*)goobj characterIsMember:aCharacter];
//}
void* NSCharacterSet_bitmapRepresentation(void* goobj) {
  return [(NSCharacterSet*)goobj bitmapRepresentation];
}
void* NSCharacterSet_invertedSet(void* goobj) {
  return [(NSCharacterSet*)goobj invertedSet];
}
//REJECT: theLongChar
//bool NSCharacterSet_longCharacterIsMember(void* goobj, UTF32Char theLongChar) {
//  return [(NSCharacterSet*)goobj longCharacterIsMember:theLongChar];
//}
bool NSCharacterSet_isSupersetOfSet(void* goobj, void* theOtherSet) {
  return [(NSCharacterSet*)goobj isSupersetOfSet:(NSCharacterSet*)theOtherSet];
}
bool NSCharacterSet_hasMemberInPlane(void* goobj, uint8_t thePlane) {
  return [(NSCharacterSet*)goobj hasMemberInPlane:thePlane];
}
void* NSCharacterSet__controlCharacterSet() {
  return [NSCharacterSet controlCharacterSet];
}
void* NSCharacterSet__whitespaceCharacterSet() {
  return [NSCharacterSet whitespaceCharacterSet];
}
void* NSCharacterSet__whitespaceAndNewlineCharacterSet() {
  return [NSCharacterSet whitespaceAndNewlineCharacterSet];
}
void* NSCharacterSet__decimalDigitCharacterSet() {
  return [NSCharacterSet decimalDigitCharacterSet];
}
void* NSCharacterSet__letterCharacterSet() {
  return [NSCharacterSet letterCharacterSet];
}
void* NSCharacterSet__lowercaseLetterCharacterSet() {
  return [NSCharacterSet lowercaseLetterCharacterSet];
}
void* NSCharacterSet__uppercaseLetterCharacterSet() {
  return [NSCharacterSet uppercaseLetterCharacterSet];
}
void* NSCharacterSet__nonBaseCharacterSet() {
  return [NSCharacterSet nonBaseCharacterSet];
}
void* NSCharacterSet__alphanumericCharacterSet() {
  return [NSCharacterSet alphanumericCharacterSet];
}
void* NSCharacterSet__decomposableCharacterSet() {
  return [NSCharacterSet decomposableCharacterSet];
}
void* NSCharacterSet__illegalCharacterSet() {
  return [NSCharacterSet illegalCharacterSet];
}
void* NSCharacterSet__punctuationCharacterSet() {
  return [NSCharacterSet punctuationCharacterSet];
}
void* NSCharacterSet__capitalizedLetterCharacterSet() {
  return [NSCharacterSet capitalizedLetterCharacterSet];
}
void* NSCharacterSet__symbolCharacterSet() {
  return [NSCharacterSet symbolCharacterSet];
}
void* NSCharacterSet__newlineCharacterSet() {
  return [NSCharacterSet newlineCharacterSet];
}
//REJECT: aRange
//void* NSCharacterSet__characterSetWithRange(NSRange aRange) {
//  return [NSCharacterSet characterSetWithRange:aRange];
//}
void* NSCharacterSet__characterSetWithCharactersInString(void* aString) {
  return [NSCharacterSet characterSetWithCharactersInString:(NSString*)aString];
}
void* NSCharacterSet__characterSetWithBitmapRepresentation(void* data) {
  return [NSCharacterSet characterSetWithBitmapRepresentation:(NSData*)data];
}
void* NSCharacterSet__characterSetWithContentsOfFile(void* fName) {
  return [NSCharacterSet characterSetWithContentsOfFile:(NSString*)fName];
}

////NSMutableCharacterSet
void* NSMutableCharacterSet_init() {
  return [[NSMutableCharacterSet alloc] init];
}
//REJECT: aRange
//void NSMutableCharacterSet_addCharactersInRange(void* goobj, NSRange aRange) {
//  [(NSMutableCharacterSet*)goobj addCharactersInRange:aRange];
//}
//REJECT: aRange
//void NSMutableCharacterSet_removeCharactersInRange(void* goobj, NSRange aRange) {
//  [(NSMutableCharacterSet*)goobj removeCharactersInRange:aRange];
//}
void NSMutableCharacterSet_addCharactersInString(void* goobj, void* aString) {
  [(NSMutableCharacterSet*)goobj addCharactersInString:(NSString*)aString];
}
void NSMutableCharacterSet_removeCharactersInString(void* goobj, void* aString) {
  [(NSMutableCharacterSet*)goobj removeCharactersInString:(NSString*)aString];
}
void NSMutableCharacterSet_formUnionWithCharacterSet(void* goobj, void* otherSet) {
  [(NSMutableCharacterSet*)goobj formUnionWithCharacterSet:(NSCharacterSet*)otherSet];
}
void NSMutableCharacterSet_formIntersectionWithCharacterSet(void* goobj, void* otherSet) {
  [(NSMutableCharacterSet*)goobj formIntersectionWithCharacterSet:(NSCharacterSet*)otherSet];
}
void NSMutableCharacterSet_invert(void* goobj) {
  [(NSMutableCharacterSet*)goobj invert];
}


////NSData
void* NSData_init() {
  return [[NSData alloc] init];
}
uint NSData_length(void* goobj) {
  return [(NSData*)goobj length];
}
const void* NSData_bytes(void* goobj) {
  return [(NSData*)goobj bytes];
}
void* NSData_description(void* goobj) {
  return [(NSData*)goobj description];
}
void NSData_getBytesLength(void* goobj, void* buffer, uint length) {
  [(NSData*)goobj getBytes:buffer length:length];
}
//REJECT: range
//void NSData_getBytesRange(void* goobj, void* buffer, NSRange range) {
//  [(NSData*)goobj getBytes:buffer range:range];
//}
bool NSData_isEqualToData(void* goobj, void* other) {
  return [(NSData*)goobj isEqualToData:(NSData*)other];
}
//REJECT: range
//void* NSData_subdataWithRange(void* goobj, NSRange range) {
//  return [(NSData*)goobj subdataWithRange:range];
//}
bool NSData_writeToFileAtomically(void* goobj, void* path, bool useAuxiliaryFile) {
  return [(NSData*)goobj writeToFile:(NSString*)path atomically:useAuxiliaryFile];
}
bool NSData_writeToURLAtomically(void* goobj, void* url, bool atomically) {
  return [(NSData*)goobj writeToURL:(NSURL*)url atomically:atomically];
}
bool NSData_writeToFileOptionsError(void* goobj, void* path, NSDataWritingOptions writeOptionsMask, void* errorPtr) {
  return [(NSData*)goobj writeToFile:(NSString*)path options:writeOptionsMask error:(NSError**)&errorPtr];
}
bool NSData_writeToURLOptionsError(void* goobj, void* url, NSDataWritingOptions writeOptionsMask, void* errorPtr) {
  return [(NSData*)goobj writeToURL:(NSURL*)url options:writeOptionsMask error:(NSError**)&errorPtr];
}
//REJECT: NSRange searchRange
//NSRange NSData_rangeOfDataOptionsRange(void* goobj, void* dataToFind, NSDataSearchOptions mask, NSRange searchRange) {
//  return [(NSData*)goobj rangeOfData:(NSData*)dataToFind options:mask range:searchRange];
//}
//REJECT: block
//void NSData_enumerateByteRangesUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSData*)goobj enumerateByteRangesUsingBlock:block];
//}
void* NSData_initWithBytesLength(const void* bytes, uint length) {
  return [[NSData alloc] initWithBytes:bytes length:length];
}
void* NSData_initWithBytesNoCopyLength(void* bytes, uint length) {
  return [[NSData alloc] initWithBytesNoCopy:bytes length:length];
}
void* NSData_initWithBytesNoCopyLengthFreeWhenDone(void* bytes, uint length, bool b) {
  return [[NSData alloc] initWithBytesNoCopy:bytes length:length freeWhenDone:b];
}
//REJECT: deallocator
//void* NSData_initWithBytesNoCopyLengthDeallocator(void* bytes, uint length, *INVALID TYPE* deallocator) {
//  return [[NSData alloc] initWithBytesNoCopy:bytes length:length deallocator:deallocator];
//}
void* NSData_initWithContentsOfFileOptionsError(void* path, NSDataReadingOptions readOptionsMask, void* errorPtr) {
  return [[NSData alloc] initWithContentsOfFile:(NSString*)path options:readOptionsMask error:(NSError**)&errorPtr];
}
void* NSData_initWithContentsOfURLOptionsError(void* url, NSDataReadingOptions readOptionsMask, void* errorPtr) {
  return [[NSData alloc] initWithContentsOfURL:(NSURL*)url options:readOptionsMask error:(NSError**)&errorPtr];
}
void* NSData_initWithContentsOfFile(void* path) {
  return [[NSData alloc] initWithContentsOfFile:(NSString*)path];
}
void* NSData_initWithContentsOfURL(void* url) {
  return [[NSData alloc] initWithContentsOfURL:(NSURL*)url];
}
void* NSData_initWithData(void* data) {
  return [[NSData alloc] initWithData:(NSData*)data];
}
void* NSData_initWithBase64EncodedStringOptions(void* base64String, NSDataBase64DecodingOptions options) {
  return [[NSData alloc] initWithBase64EncodedString:(NSString*)base64String options:options];
}
void* NSData_base64EncodedStringWithOptions(void* goobj, NSDataBase64EncodingOptions options) {
  return [(NSData*)goobj base64EncodedStringWithOptions:options];
}
void* NSData_initWithBase64EncodedDataOptions(void* base64Data, NSDataBase64DecodingOptions options) {
  return [[NSData alloc] initWithBase64EncodedData:(NSData*)base64Data options:options];
}
void* NSData_base64EncodedDataWithOptions(void* goobj, NSDataBase64EncodingOptions options) {
  return [(NSData*)goobj base64EncodedDataWithOptions:options];
}


////NSMutableData
void* NSMutableData_init() {
  return [[NSMutableData alloc] init];
}
void* NSMutableData_mutableBytes(void* goobj) {
  return [(NSMutableData*)goobj mutableBytes];
}
void NSMutableData_setLength(void* goobj, uint length) {
  [(NSMutableData*)goobj setLength:length];
}
void NSMutableData_appendBytesLength(void* goobj, const void* bytes, uint length) {
  [(NSMutableData*)goobj appendBytes:bytes length:length];
}
void NSMutableData_appendData(void* goobj, void* other) {
  [(NSMutableData*)goobj appendData:(NSData*)other];
}
void NSMutableData_increaseLengthBy(void* goobj, uint extraLength) {
  [(NSMutableData*)goobj increaseLengthBy:extraLength];
}
//REJECT: range
//void NSMutableData_replaceBytesInRangeWithBytes(void* goobj, NSRange range, const void* bytes) {
//  [(NSMutableData*)goobj replaceBytesInRange:range withBytes:bytes];
//}
//REJECT: range
//void NSMutableData_resetBytesInRange(void* goobj, NSRange range) {
//  [(NSMutableData*)goobj resetBytesInRange:range];
//}
void NSMutableData_setData(void* goobj, void* data) {
  [(NSMutableData*)goobj setData:(NSData*)data];
}
//REJECT: range
//void NSMutableData_replaceBytesInRangeWithBytesLength(void* goobj, NSRange range, const void* replacementBytes, uint replacementLength) {
//  [(NSMutableData*)goobj replaceBytesInRange:range withBytes:replacementBytes length:replacementLength];
//}
void* NSMutableData_initWithCapacity(uint capacity) {
  return [[NSMutableData alloc] initWithCapacity:capacity];
}
void* NSMutableData_initWithLength(uint length) {
  return [[NSMutableData alloc] initWithLength:length];
}


////NSPurgeableData
void* NSPurgeableData_init() {
  return [[NSPurgeableData alloc] init];
}



////NSFormatter
void* NSFormatter_init() {
  return [[NSFormatter alloc] init];
}
void* NSFormatter_stringForObjectValue(void* goobj, void* obj) {
  return [(NSFormatter*)goobj stringForObjectValue:obj];
}
void* NSFormatter_attributedStringForObjectValueWithDefaultAttributes(void* goobj, void* obj, void* attrs) {
  return [(NSFormatter*)goobj attributedStringForObjectValue:obj withDefaultAttributes:(NSDictionary*)attrs];
}
void* NSFormatter_editingStringForObjectValue(void* goobj, void* obj) {
  return [(NSFormatter*)goobj editingStringForObjectValue:obj];
}
bool NSFormatter_getObjectValueForStringErrorDescription(void* goobj, void* obj, void* string, void* error) {
  return [(NSFormatter*)goobj getObjectValue:obj forString:(NSString*)string errorDescription:(NSString*)error];
}
bool NSFormatter_isPartialStringValidNewEditingStringErrorDescription(void* goobj, void* partialString, void* newString, void* error) {
  return [(NSFormatter*)goobj isPartialStringValid:(NSString*)partialString newEditingString:(NSString*)newString errorDescription:(NSString*)error];
}
//REJECT: proposedSelRangePtr origSelRange
//bool NSFormatter_isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(void* goobj, void* partialStringPtr, NSRangePointer proposedSelRangePtr, void* origString, NSRange origSelRange, void* error) {
//  return [(NSFormatter*)goobj isPartialStringValid:(NSString*)partialStringPtr proposedSelectedRange:proposedSelRangePtr originalString:(NSString*)origString originalSelectedRange:origSelRange errorDescription:(NSString*)error];
//}


////NSDateFormatter
void* NSDateFormatter_init() {
  return [[NSDateFormatter alloc] init];
}
//REJECT: rangep
//bool NSDateFormatter_getObjectValueForStringRangeError(void* goobj, void* obj, void* string, NSRange rangep, void* error) {
//  return [(NSDateFormatter*)goobj getObjectValue:obj forString:(NSString*)string range:rangep error:(NSError**)&error];
//}
void* NSDateFormatter_stringFromDate(void* goobj, void* date) {
  return [(NSDateFormatter*)goobj stringFromDate:(NSDate*)date];
}
void* NSDateFormatter_dateFromString(void* goobj, void* string) {
  return [(NSDateFormatter*)goobj dateFromString:(NSString*)string];
}
void* NSDateFormatter_dateFormat(void* goobj) {
  return [(NSDateFormatter*)goobj dateFormat];
}
NSDateFormatterStyle NSDateFormatter_dateStyle(void* goobj) {
  return [(NSDateFormatter*)goobj dateStyle];
}
void NSDateFormatter_setDateStyle(void* goobj, NSDateFormatterStyle style) {
  [(NSDateFormatter*)goobj setDateStyle:style];
}
NSDateFormatterStyle NSDateFormatter_timeStyle(void* goobj) {
  return [(NSDateFormatter*)goobj timeStyle];
}
void NSDateFormatter_setTimeStyle(void* goobj, NSDateFormatterStyle style) {
  [(NSDateFormatter*)goobj setTimeStyle:style];
}
//REJECT: NSLocale
//void* NSDateFormatter_locale(void* goobj) {
//  return [(NSDateFormatter*)goobj locale];
//}
//REJECT: locale
//void NSDateFormatter_setLocale(void* goobj, void* locale) {
//  [(NSDateFormatter*)goobj setLocale:(NSLocale*)locale];
//}
bool NSDateFormatter_generatesCalendarDates(void* goobj) {
  return [(NSDateFormatter*)goobj generatesCalendarDates];
}
void NSDateFormatter_setGeneratesCalendarDates(void* goobj, bool b) {
  [(NSDateFormatter*)goobj setGeneratesCalendarDates:b];
}
NSDateFormatterBehavior NSDateFormatter_formatterBehavior(void* goobj) {
  return [(NSDateFormatter*)goobj formatterBehavior];
}
void NSDateFormatter_setFormatterBehavior(void* goobj, NSDateFormatterBehavior behavior) {
  [(NSDateFormatter*)goobj setFormatterBehavior:behavior];
}
void NSDateFormatter_setDateFormat(void* goobj, void* string) {
  [(NSDateFormatter*)goobj setDateFormat:(NSString*)string];
}
void* NSDateFormatter_timeZone(void* goobj) {
  return [(NSDateFormatter*)goobj timeZone];
}
void NSDateFormatter_setTimeZone(void* goobj, void* tz) {
  [(NSDateFormatter*)goobj setTimeZone:(NSTimeZone*)tz];
}
void* NSDateFormatter_calendar(void* goobj) {
  return [(NSDateFormatter*)goobj calendar];
}
void NSDateFormatter_setCalendar(void* goobj, void* calendar) {
  [(NSDateFormatter*)goobj setCalendar:(NSCalendar*)calendar];
}
bool NSDateFormatter_isLenient(void* goobj) {
  return [(NSDateFormatter*)goobj isLenient];
}
void NSDateFormatter_setLenient(void* goobj, bool b) {
  [(NSDateFormatter*)goobj setLenient:b];
}
void* NSDateFormatter_twoDigitStartDate(void* goobj) {
  return [(NSDateFormatter*)goobj twoDigitStartDate];
}
void NSDateFormatter_setTwoDigitStartDate(void* goobj, void* date) {
  [(NSDateFormatter*)goobj setTwoDigitStartDate:(NSDate*)date];
}
void* NSDateFormatter_defaultDate(void* goobj) {
  return [(NSDateFormatter*)goobj defaultDate];
}
void NSDateFormatter_setDefaultDate(void* goobj, void* date) {
  [(NSDateFormatter*)goobj setDefaultDate:(NSDate*)date];
}
void* NSDateFormatter_eraSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj eraSymbols];
}
void NSDateFormatter_setEraSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setEraSymbols:(NSArray*)array];
}
void* NSDateFormatter_monthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj monthSymbols];
}
void NSDateFormatter_setMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_shortMonthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortMonthSymbols];
}
void NSDateFormatter_setShortMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_weekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj weekdaySymbols];
}
void NSDateFormatter_setWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_shortWeekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortWeekdaySymbols];
}
void NSDateFormatter_setShortWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_AMSymbol(void* goobj) {
  return [(NSDateFormatter*)goobj AMSymbol];
}
void NSDateFormatter_setAMSymbol(void* goobj, void* string) {
  [(NSDateFormatter*)goobj setAMSymbol:(NSString*)string];
}
void* NSDateFormatter_PMSymbol(void* goobj) {
  return [(NSDateFormatter*)goobj PMSymbol];
}
void NSDateFormatter_setPMSymbol(void* goobj, void* string) {
  [(NSDateFormatter*)goobj setPMSymbol:(NSString*)string];
}
void* NSDateFormatter_longEraSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj longEraSymbols];
}
void NSDateFormatter_setLongEraSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setLongEraSymbols:(NSArray*)array];
}
void* NSDateFormatter_veryShortMonthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj veryShortMonthSymbols];
}
void NSDateFormatter_setVeryShortMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setVeryShortMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_standaloneMonthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj standaloneMonthSymbols];
}
void NSDateFormatter_setStandaloneMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setStandaloneMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_shortStandaloneMonthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortStandaloneMonthSymbols];
}
void NSDateFormatter_setShortStandaloneMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortStandaloneMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_veryShortStandaloneMonthSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj veryShortStandaloneMonthSymbols];
}
void NSDateFormatter_setVeryShortStandaloneMonthSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setVeryShortStandaloneMonthSymbols:(NSArray*)array];
}
void* NSDateFormatter_veryShortWeekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj veryShortWeekdaySymbols];
}
void NSDateFormatter_setVeryShortWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setVeryShortWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_standaloneWeekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj standaloneWeekdaySymbols];
}
void NSDateFormatter_setStandaloneWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setStandaloneWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_shortStandaloneWeekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortStandaloneWeekdaySymbols];
}
void NSDateFormatter_setShortStandaloneWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortStandaloneWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_veryShortStandaloneWeekdaySymbols(void* goobj) {
  return [(NSDateFormatter*)goobj veryShortStandaloneWeekdaySymbols];
}
void NSDateFormatter_setVeryShortStandaloneWeekdaySymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setVeryShortStandaloneWeekdaySymbols:(NSArray*)array];
}
void* NSDateFormatter_quarterSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj quarterSymbols];
}
void NSDateFormatter_setQuarterSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setQuarterSymbols:(NSArray*)array];
}
void* NSDateFormatter_shortQuarterSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortQuarterSymbols];
}
void NSDateFormatter_setShortQuarterSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortQuarterSymbols:(NSArray*)array];
}
void* NSDateFormatter_standaloneQuarterSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj standaloneQuarterSymbols];
}
void NSDateFormatter_setStandaloneQuarterSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setStandaloneQuarterSymbols:(NSArray*)array];
}
void* NSDateFormatter_shortStandaloneQuarterSymbols(void* goobj) {
  return [(NSDateFormatter*)goobj shortStandaloneQuarterSymbols];
}
void NSDateFormatter_setShortStandaloneQuarterSymbols(void* goobj, void* array) {
  [(NSDateFormatter*)goobj setShortStandaloneQuarterSymbols:(NSArray*)array];
}
void* NSDateFormatter_gregorianStartDate(void* goobj) {
  return [(NSDateFormatter*)goobj gregorianStartDate];
}
void NSDateFormatter_setGregorianStartDate(void* goobj, void* date) {
  [(NSDateFormatter*)goobj setGregorianStartDate:(NSDate*)date];
}
bool NSDateFormatter_doesRelativeDateFormatting(void* goobj) {
  return [(NSDateFormatter*)goobj doesRelativeDateFormatting];
}
void NSDateFormatter_setDoesRelativeDateFormatting(void* goobj, bool b) {
  [(NSDateFormatter*)goobj setDoesRelativeDateFormatting:b];
}
void* NSDateFormatter_initWithDateFormatAllowNaturalLanguage(void* format, bool flag) {
  return [[NSDateFormatter alloc] initWithDateFormat:(NSString*)format allowNaturalLanguage:flag];
}
bool NSDateFormatter_allowsNaturalLanguage(void* goobj) {
  return [(NSDateFormatter*)goobj allowsNaturalLanguage];
}
void* NSDateFormatter__localizedStringFromDateDateStyleTimeStyle(void* date, NSDateFormatterStyle dstyle, NSDateFormatterStyle tstyle) {
  return [NSDateFormatter localizedStringFromDate:(NSDate*)date dateStyle:dstyle timeStyle:tstyle];
}
//REJECT: locale
//void* NSDateFormatter__dateFormatFromTemplateOptionsLocale(void* tmplate, uint opts, void* locale) {
//  return [NSDateFormatter dateFormatFromTemplate:(NSString*)tmplate options:opts locale:(NSLocale*)locale];
//}
NSDateFormatterBehavior NSDateFormatter__defaultFormatterBehavior() {
  return [NSDateFormatter defaultFormatterBehavior];
}
void NSDateFormatter__setDefaultFormatterBehavior(NSDateFormatterBehavior behavior) {
  [NSDateFormatter setDefaultFormatterBehavior:behavior];
}

////NSScanner
void* NSScanner_init() {
  return [[NSScanner alloc] init];
}
void* NSScanner_string(void* goobj) {
  return [(NSScanner*)goobj string];
}
uint NSScanner_scanLocation(void* goobj) {
  return [(NSScanner*)goobj scanLocation];
}
void NSScanner_setScanLocation(void* goobj, uint pos) {
  [(NSScanner*)goobj setScanLocation:pos];
}
void NSScanner_setCharactersToBeSkipped(void* goobj, void* set) {
  [(NSScanner*)goobj setCharactersToBeSkipped:(NSCharacterSet*)set];
}
void NSScanner_setCaseSensitive(void* goobj, bool flag) {
  [(NSScanner*)goobj setCaseSensitive:flag];
}
void NSScanner_setLocale(void* goobj, void* locale) {
  [(NSScanner*)goobj setLocale:locale];
}
void* NSScanner_charactersToBeSkipped(void* goobj) {
  return [(NSScanner*)goobj charactersToBeSkipped];
}
bool NSScanner_caseSensitive(void* goobj) {
  return [(NSScanner*)goobj caseSensitive];
}
void* NSScanner_locale(void* goobj) {
  return [(NSScanner*)goobj locale];
}
//REJECT: result
//bool NSScanner_scanInt(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanInt:result];
//}
//REJECT: result
//bool NSScanner_scanInteger(void* goobj, NSInteger result) {
//  return [(NSScanner*)goobj scanInteger:result];
//}
//REJECT: result
//bool NSScanner_scanLongLong(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanLongLong:result];
//}
//REJECT: result
//bool NSScanner_scanUnsignedLongLong(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanUnsignedLongLong:result];
//}
//REJECT: result
//bool NSScanner_scanFloat(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanFloat:result];
//}
//REJECT: result
//bool NSScanner_scanDouble(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanDouble:result];
//}
//REJECT: result
//bool NSScanner_scanHexInt(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanHexInt:result];
//}
//REJECT: result
//bool NSScanner_scanHexLongLong(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanHexLongLong:result];
//}
//REJECT: result
//bool NSScanner_scanHexFloat(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanHexFloat:result];
//}
//REJECT: result
//bool NSScanner_scanHexDouble(void* goobj, *INVALID TYPE* result) {
//  return [(NSScanner*)goobj scanHexDouble:result];
//}
bool NSScanner_scanStringIntoString(void* goobj, void* string, void* result) {
  return [(NSScanner*)goobj scanString:(NSString*)string intoString:(NSString*)result];
}
bool NSScanner_scanCharactersFromSetIntoString(void* goobj, void* set, void* result) {
  return [(NSScanner*)goobj scanCharactersFromSet:(NSCharacterSet*)set intoString:(NSString*)result];
}
bool NSScanner_scanUpToStringIntoString(void* goobj, void* string, void* result) {
  return [(NSScanner*)goobj scanUpToString:(NSString*)string intoString:(NSString*)result];
}
bool NSScanner_scanUpToCharactersFromSetIntoString(void* goobj, void* set, void* result) {
  return [(NSScanner*)goobj scanUpToCharactersFromSet:(NSCharacterSet*)set intoString:(NSString*)result];
}
bool NSScanner_isAtEnd(void* goobj) {
  return [(NSScanner*)goobj isAtEnd];
}
void* NSScanner_initWithString(void* string) {
  return [[NSScanner alloc] initWithString:(NSString*)string];
}
//REJECT: dcm
//bool NSScanner_scanDecimal(void* goobj, NSDecimal dcm) {
//  return [(NSScanner*)goobj scanDecimal:dcm];
//}


////NSDictionary
uint NSDictionary_count(void* goobj) {
  return [(NSDictionary*)goobj count];
}
void* NSDictionary_objectForKey(void* goobj, void* aKey) {
  return [(NSDictionary*)goobj objectForKey:aKey];
}
void* NSDictionary_keyEnumerator(void* goobj) {
  return [(NSDictionary*)goobj keyEnumerator];
}
void* NSDictionary_allKeys(void* goobj) {
  return [(NSDictionary*)goobj allKeys];
}
void* NSDictionary_allKeysForObject(void* goobj, void* anObject) {
  return [(NSDictionary*)goobj allKeysForObject:anObject];
}
void* NSDictionary_allValues(void* goobj) {
  return [(NSDictionary*)goobj allValues];
}
void* NSDictionary_description(void* goobj) {
  return [(NSDictionary*)goobj description];
}
void* NSDictionary_descriptionInStringsFileFormat(void* goobj) {
  return [(NSDictionary*)goobj descriptionInStringsFileFormat];
}
void* NSDictionary_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSDictionary*)goobj descriptionWithLocale:locale];
}
void* NSDictionary_descriptionWithLocaleIndent(void* goobj, void* locale, uint level) {
  return [(NSDictionary*)goobj descriptionWithLocale:locale indent:level];
}
bool NSDictionary_isEqualToDictionary(void* goobj, void* otherDictionary) {
  return [(NSDictionary*)goobj isEqualToDictionary:(NSDictionary*)otherDictionary];
}
void* NSDictionary_objectEnumerator(void* goobj) {
  return [(NSDictionary*)goobj objectEnumerator];
}
void* NSDictionary_objectsForKeysNotFoundMarker(void* goobj, void* keys, void* marker) {
  return [(NSDictionary*)goobj objectsForKeys:(NSArray*)keys notFoundMarker:marker];
}
bool NSDictionary_writeToFileAtomically(void* goobj, void* path, bool useAuxiliaryFile) {
  return [(NSDictionary*)goobj writeToFile:(NSString*)path atomically:useAuxiliaryFile];
}
bool NSDictionary_writeToURLAtomically(void* goobj, void* url, bool atomically) {
  return [(NSDictionary*)goobj writeToURL:(NSURL*)url atomically:atomically];
}
//REJECT: comparator
//void* NSDictionary_keysSortedByValueUsingSelector(void* goobj, SEL comparator) {
//  return [(NSDictionary*)goobj keysSortedByValueUsingSelector:comparator];
//}
void NSDictionary_getObjectsAndKeys(void* goobj, void* objects, void* keys) {
  [(NSDictionary*)goobj getObjects:objects andKeys:keys];
}
void* NSDictionary_objectForKeyedSubscript(void* goobj, void* key) {
  return [(NSDictionary*)goobj objectForKeyedSubscript:key];
}
//REJECT: block
//void NSDictionary_enumerateKeysAndObjectsUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSDictionary*)goobj enumerateKeysAndObjectsUsingBlock:block];
//}
//REJECT: opts block
//void NSDictionary_enumerateKeysAndObjectsWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSDictionary*)goobj enumerateKeysAndObjectsWithOptions:opts usingBlock:block];
//}
//REJECT: cmptr
//void* NSDictionary_keysSortedByValueUsingComparator(void* goobj, NSComparator cmptr) {
//  return [(NSDictionary*)goobj keysSortedByValueUsingComparator:cmptr];
//}
//REJECT: opts cmptr
//void* NSDictionary_keysSortedByValueWithOptionsUsingComparator(void* goobj, NSSortOptions opts, NSComparator cmptr) {
//  return [(NSDictionary*)goobj keysSortedByValueWithOptions:opts usingComparator:cmptr];
//}
//unacceptalble-method
//void* NSDictionary_keysOfEntriesPassingTest(void* goobj, bool predicate) {
//  return [(NSDictionary*)goobj keysOfEntriesPassingTest:predicate];
//}
//REJECT: opts
//void* NSDictionary_keysOfEntriesWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSDictionary*)goobj keysOfEntriesWithOptions:opts passingTest:predicate];
//}
void* NSDictionary_init() {
  return [[NSDictionary alloc] init];
}
void* NSDictionary_initWithObjectsForKeysCount(void* objects, void* keys, uint cnt) {
  return [[NSDictionary alloc] initWithObjects:objects forKeys:keys count:cnt];
}
void* NSDictionary_initWithObjectsAndKeys(void* firstObject) {
  return [[NSDictionary alloc] initWithObjectsAndKeys:firstObject];
}
void* NSDictionary_initWithDictionary(void* otherDictionary) {
  return [[NSDictionary alloc] initWithDictionary:(NSDictionary*)otherDictionary];
}
void* NSDictionary_initWithDictionaryCopyItems(void* otherDictionary, bool flag) {
  return [[NSDictionary alloc] initWithDictionary:(NSDictionary*)otherDictionary copyItems:flag];
}
void* NSDictionary_initWithObjectsForKeys(void* objects, void* keys) {
  return [[NSDictionary alloc] initWithObjects:(NSArray*)objects forKeys:(NSArray*)keys];
}
void* NSDictionary_initWithContentsOfFile(void* path) {
  return [[NSDictionary alloc] initWithContentsOfFile:(NSString*)path];
}
void* NSDictionary_initWithContentsOfURL(void* url) {
  return [[NSDictionary alloc] initWithContentsOfURL:(NSURL*)url];
}
unsigned long long NSDictionary_fileSize(void* goobj) {
  return [(NSDictionary*)goobj fileSize];
}
void* NSDictionary_fileModificationDate(void* goobj) {
  return [(NSDictionary*)goobj fileModificationDate];
}
void* NSDictionary_fileType(void* goobj) {
  return [(NSDictionary*)goobj fileType];
}
uint NSDictionary_filePosixPermissions(void* goobj) {
  return [(NSDictionary*)goobj filePosixPermissions];
}
void* NSDictionary_fileOwnerAccountName(void* goobj) {
  return [(NSDictionary*)goobj fileOwnerAccountName];
}
void* NSDictionary_fileGroupOwnerAccountName(void* goobj) {
  return [(NSDictionary*)goobj fileGroupOwnerAccountName];
}
//REJECT: NSInteger
//NSInteger NSDictionary_fileSystemNumber(void* goobj) {
//  return [(NSDictionary*)goobj fileSystemNumber];
//}
uint NSDictionary_fileSystemFileNumber(void* goobj) {
  return [(NSDictionary*)goobj fileSystemFileNumber];
}
bool NSDictionary_fileExtensionHidden(void* goobj) {
  return [(NSDictionary*)goobj fileExtensionHidden];
}
//REJECT: OSType
//OSType NSDictionary_fileHFSCreatorCode(void* goobj) {
//  return [(NSDictionary*)goobj fileHFSCreatorCode];
//}
//REJECT: OSType
//OSType NSDictionary_fileHFSTypeCode(void* goobj) {
//  return [(NSDictionary*)goobj fileHFSTypeCode];
//}
bool NSDictionary_fileIsImmutable(void* goobj) {
  return [(NSDictionary*)goobj fileIsImmutable];
}
bool NSDictionary_fileIsAppendOnly(void* goobj) {
  return [(NSDictionary*)goobj fileIsAppendOnly];
}
void* NSDictionary_fileCreationDate(void* goobj) {
  return [(NSDictionary*)goobj fileCreationDate];
}
void* NSDictionary_fileOwnerAccountID(void* goobj) {
  return [(NSDictionary*)goobj fileOwnerAccountID];
}
void* NSDictionary_fileGroupOwnerAccountID(void* goobj) {
  return [(NSDictionary*)goobj fileGroupOwnerAccountID];
}
void* NSDictionary_valueForKey(void* goobj, void* key) {
  return [(NSDictionary*)goobj valueForKey:(NSString*)key];
}


////NSMutableDictionary
void NSMutableDictionary_removeObjectForKey(void* goobj, void* aKey) {
  [(NSMutableDictionary*)goobj removeObjectForKey:aKey];
}
void NSMutableDictionary_setObjectForKey(void* goobj, void* anObject, void* aKey) {
  [(NSMutableDictionary*)goobj setObject:anObject forKey:aKey];
}
void NSMutableDictionary_addEntriesFromDictionary(void* goobj, void* otherDictionary) {
  [(NSMutableDictionary*)goobj addEntriesFromDictionary:(NSDictionary*)otherDictionary];
}
void NSMutableDictionary_removeAllObjects(void* goobj) {
  [(NSMutableDictionary*)goobj removeAllObjects];
}
void NSMutableDictionary_removeObjectsForKeys(void* goobj, void* keyArray) {
  [(NSMutableDictionary*)goobj removeObjectsForKeys:(NSArray*)keyArray];
}
void NSMutableDictionary_setDictionary(void* goobj, void* otherDictionary) {
  [(NSMutableDictionary*)goobj setDictionary:(NSDictionary*)otherDictionary];
}
void NSMutableDictionary_setObjectForKeyedSubscript(void* goobj, void* obj, void* key) {
  [(NSMutableDictionary*)goobj setObject:obj forKeyedSubscript:key];
}
void* NSMutableDictionary_init() {
  return [[NSMutableDictionary alloc] init];
}
void* NSMutableDictionary_initWithCapacity(uint numItems) {
  return [[NSMutableDictionary alloc] initWithCapacity:numItems];
}
void NSMutableDictionary_setValueForKey(void* goobj, void* value, void* key) {
  [(NSMutableDictionary*)goobj setValue:value forKey:(NSString*)key];
}


////NSDecimalNumber
void* NSDecimalNumber_init() {
  return [[NSDecimalNumber alloc] init];
}
void* NSDecimalNumber_initWithMantissaExponentIsNegative(unsigned long long mantissa, short exponent, bool flag) {
  return [[NSDecimalNumber alloc] initWithMantissa:mantissa exponent:exponent isNegative:flag];
}
//REJECT: dcm
//void* NSDecimalNumber_initWithDecimal(NSDecimal dcm) {
//  return [[NSDecimalNumber alloc] initWithDecimal:dcm];
//}
void* NSDecimalNumber_initWithString(void* numberValue) {
  return [[NSDecimalNumber alloc] initWithString:(NSString*)numberValue];
}
void* NSDecimalNumber_initWithStringLocale(void* numberValue, void* locale) {
  return [[NSDecimalNumber alloc] initWithString:(NSString*)numberValue locale:locale];
}
void* NSDecimalNumber_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSDecimalNumber*)goobj descriptionWithLocale:locale];
}
//REJECT: NSDecimal
//NSDecimal NSDecimalNumber_decimalValue(void* goobj) {
//  return [(NSDecimalNumber*)goobj decimalValue];
//}
void* NSDecimalNumber_decimalNumberByAdding(void* goobj, void* decimalNumber) {
  return [(NSDecimalNumber*)goobj decimalNumberByAdding:(NSDecimalNumber*)decimalNumber];
}
void* NSDecimalNumber_decimalNumberByAddingWithBehavior(void* goobj, void* decimalNumber, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByAdding:(NSDecimalNumber*)decimalNumber withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberBySubtracting(void* goobj, void* decimalNumber) {
  return [(NSDecimalNumber*)goobj decimalNumberBySubtracting:(NSDecimalNumber*)decimalNumber];
}
void* NSDecimalNumber_decimalNumberBySubtractingWithBehavior(void* goobj, void* decimalNumber, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberBySubtracting:(NSDecimalNumber*)decimalNumber withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberByMultiplyingBy(void* goobj, void* decimalNumber) {
  return [(NSDecimalNumber*)goobj decimalNumberByMultiplyingBy:(NSDecimalNumber*)decimalNumber];
}
void* NSDecimalNumber_decimalNumberByMultiplyingByWithBehavior(void* goobj, void* decimalNumber, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByMultiplyingBy:(NSDecimalNumber*)decimalNumber withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberByDividingBy(void* goobj, void* decimalNumber) {
  return [(NSDecimalNumber*)goobj decimalNumberByDividingBy:(NSDecimalNumber*)decimalNumber];
}
void* NSDecimalNumber_decimalNumberByDividingByWithBehavior(void* goobj, void* decimalNumber, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByDividingBy:(NSDecimalNumber*)decimalNumber withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberByRaisingToPower(void* goobj, uint power) {
  return [(NSDecimalNumber*)goobj decimalNumberByRaisingToPower:power];
}
void* NSDecimalNumber_decimalNumberByRaisingToPowerWithBehavior(void* goobj, uint power, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByRaisingToPower:power withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10(void* goobj, short power) {
  return [(NSDecimalNumber*)goobj decimalNumberByMultiplyingByPowerOf10:power];
}
void* NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10WithBehavior(void* goobj, short power, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByMultiplyingByPowerOf10:power withBehavior:behavior];
}
void* NSDecimalNumber_decimalNumberByRoundingAccordingToBehavior(void* goobj, void* behavior) {
  return [(NSDecimalNumber*)goobj decimalNumberByRoundingAccordingToBehavior:behavior];
}
//REJECT: NSComparisonResult
//NSComparisonResult NSDecimalNumber_compare(void* goobj, void* decimalNumber) {
//  return [(NSDecimalNumber*)goobj compare:(NSNumber*)decimalNumber];
//}
const char* NSDecimalNumber_objCType(void* goobj) {
  return [(NSDecimalNumber*)goobj objCType];
}
double NSDecimalNumber_doubleValue(void* goobj) {
  return [(NSDecimalNumber*)goobj doubleValue];
}
void* NSDecimalNumber__decimalNumberWithMantissaExponentIsNegative(unsigned long long mantissa, short exponent, bool flag) {
  return [NSDecimalNumber decimalNumberWithMantissa:mantissa exponent:exponent isNegative:flag];
}
//REJECT: dcm
//void* NSDecimalNumber__decimalNumberWithDecimal(NSDecimal dcm) {
//  return [NSDecimalNumber decimalNumberWithDecimal:dcm];
//}
void* NSDecimalNumber__decimalNumberWithString(void* numberValue) {
  return [NSDecimalNumber decimalNumberWithString:(NSString*)numberValue];
}
void* NSDecimalNumber__decimalNumberWithStringLocale(void* numberValue, void* locale) {
  return [NSDecimalNumber decimalNumberWithString:(NSString*)numberValue locale:locale];
}
void* NSDecimalNumber__zero() {
  return [NSDecimalNumber zero];
}
void* NSDecimalNumber__one() {
  return [NSDecimalNumber one];
}
void* NSDecimalNumber__minimumDecimalNumber() {
  return [NSDecimalNumber minimumDecimalNumber];
}
void* NSDecimalNumber__maximumDecimalNumber() {
  return [NSDecimalNumber maximumDecimalNumber];
}
void* NSDecimalNumber__notANumber() {
  return [NSDecimalNumber notANumber];
}
void NSDecimalNumber__setDefaultBehavior(void* behavior) {
  [NSDecimalNumber setDefaultBehavior:behavior];
}
void* NSDecimalNumber__defaultBehavior() {
  return [NSDecimalNumber defaultBehavior];
}

////NSDecimalNumberHandler
void* NSDecimalNumberHandler_init() {
  return [[NSDecimalNumberHandler alloc] init];
}
void* NSDecimalNumberHandler_initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero) {
  return [[NSDecimalNumberHandler alloc] initWithRoundingMode:roundingMode scale:scale raiseOnExactness:exact raiseOnOverflow:overflow raiseOnUnderflow:underflow raiseOnDivideByZero:divideByZero];
}
void* NSDecimalNumberHandler__defaultDecimalNumberHandler() {
  return [NSDecimalNumberHandler defaultDecimalNumberHandler];
}
void* NSDecimalNumberHandler__decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(NSRoundingMode roundingMode, short scale, bool exact, bool overflow, bool underflow, bool divideByZero) {
  return [NSDecimalNumberHandler decimalNumberHandlerWithRoundingMode:roundingMode scale:scale raiseOnExactness:exact raiseOnOverflow:overflow raiseOnUnderflow:underflow raiseOnDivideByZero:divideByZero];
}

////NSError
void* NSError_init() {
  return [[NSError alloc] init];
}
//REJECT: code
//void* NSError_initWithDomainCodeUserInfo(void* domain, NSInteger code, void* dict) {
//  return [[NSError alloc] initWithDomain:(NSString*)domain code:code userInfo:(NSDictionary*)dict];
//}
void* NSError_domain(void* goobj) {
  return [(NSError*)goobj domain];
}
//REJECT: NSInteger
//NSInteger NSError_code(void* goobj) {
//  return [(NSError*)goobj code];
//}
void* NSError_userInfo(void* goobj) {
  return [(NSError*)goobj userInfo];
}
void* NSError_localizedDescription(void* goobj) {
  return [(NSError*)goobj localizedDescription];
}
void* NSError_localizedFailureReason(void* goobj) {
  return [(NSError*)goobj localizedFailureReason];
}
void* NSError_localizedRecoverySuggestion(void* goobj) {
  return [(NSError*)goobj localizedRecoverySuggestion];
}
void* NSError_localizedRecoveryOptions(void* goobj) {
  return [(NSError*)goobj localizedRecoveryOptions];
}
void* NSError_recoveryAttempter(void* goobj) {
  return [(NSError*)goobj recoveryAttempter];
}
void* NSError_helpAnchor(void* goobj) {
  return [(NSError*)goobj helpAnchor];
}
//REJECT: code
//void* NSError__errorWithDomainCodeUserInfo(void* domain, NSInteger code, void* dict) {
//  return [NSError errorWithDomain:(NSString*)domain code:code userInfo:(NSDictionary*)dict];
//}

////NSException
void* NSException_init() {
  return [[NSException alloc] init];
}
void* NSException_initWithNameReasonUserInfo(void* aName, void* aReason, void* aUserInfo) {
  return [[NSException alloc] initWithName:(NSString*)aName reason:(NSString*)aReason userInfo:(NSDictionary*)aUserInfo];
}
void* NSException_name(void* goobj) {
  return [(NSException*)goobj name];
}
void* NSException_reason(void* goobj) {
  return [(NSException*)goobj reason];
}
void* NSException_userInfo(void* goobj) {
  return [(NSException*)goobj userInfo];
}
void* NSException_callStackReturnAddresses(void* goobj) {
  return [(NSException*)goobj callStackReturnAddresses];
}
void* NSException_callStackSymbols(void* goobj) {
  return [(NSException*)goobj callStackSymbols];
}
void NSException_raise(void* goobj) {
  [(NSException*)goobj raise];
}
void* NSException__exceptionWithNameReasonUserInfo(void* name, void* reason, void* userInfo) {
  return [NSException exceptionWithName:(NSString*)name reason:(NSString*)reason userInfo:(NSDictionary*)userInfo];
}

////NSAssertionHandler
void* NSAssertionHandler_init() {
  return [[NSAssertionHandler alloc] init];
}
//REJECT: selector line
//void NSAssertionHandler_handleFailureInMethodObjectFileLineNumberDescription(void* goobj, SEL selector, void* object, void* fileName, NSInteger line, void* format) {
//  [(NSAssertionHandler*)goobj handleFailureInMethod:selector object:object file:(NSString*)fileName lineNumber:line description:(NSString*)format];
//}
//REJECT: line
//void NSAssertionHandler_handleFailureInFunctionFileLineNumberDescription(void* goobj, void* functionName, void* fileName, NSInteger line, void* format) {
//  [(NSAssertionHandler*)goobj handleFailureInFunction:(NSString*)functionName file:(NSString*)fileName lineNumber:line description:(NSString*)format];
//}
void* NSAssertionHandler__currentHandler() {
  return [NSAssertionHandler currentHandler];
}

////NSFileHandle
void* NSFileHandle_init() {
  return [[NSFileHandle alloc] init];
}
void* NSFileHandle_availableData(void* goobj) {
  return [(NSFileHandle*)goobj availableData];
}
void* NSFileHandle_readDataToEndOfFile(void* goobj) {
  return [(NSFileHandle*)goobj readDataToEndOfFile];
}
void* NSFileHandle_readDataOfLength(void* goobj, uint length) {
  return [(NSFileHandle*)goobj readDataOfLength:length];
}
void NSFileHandle_writeData(void* goobj, void* data) {
  [(NSFileHandle*)goobj writeData:(NSData*)data];
}
unsigned long long NSFileHandle_offsetInFile(void* goobj) {
  return [(NSFileHandle*)goobj offsetInFile];
}
unsigned long long NSFileHandle_seekToEndOfFile(void* goobj) {
  return [(NSFileHandle*)goobj seekToEndOfFile];
}
void NSFileHandle_seekToFileOffset(void* goobj, unsigned long long offset) {
  [(NSFileHandle*)goobj seekToFileOffset:offset];
}
void NSFileHandle_truncateFileAtOffset(void* goobj, unsigned long long offset) {
  [(NSFileHandle*)goobj truncateFileAtOffset:offset];
}
void NSFileHandle_synchronizeFile(void* goobj) {
  [(NSFileHandle*)goobj synchronizeFile];
}
void NSFileHandle_closeFile(void* goobj) {
  [(NSFileHandle*)goobj closeFile];
}
void NSFileHandle_readInBackgroundAndNotifyForModes(void* goobj, void* modes) {
  [(NSFileHandle*)goobj readInBackgroundAndNotifyForModes:(NSArray*)modes];
}
void NSFileHandle_readInBackgroundAndNotify(void* goobj) {
  [(NSFileHandle*)goobj readInBackgroundAndNotify];
}
void NSFileHandle_readToEndOfFileInBackgroundAndNotifyForModes(void* goobj, void* modes) {
  [(NSFileHandle*)goobj readToEndOfFileInBackgroundAndNotifyForModes:(NSArray*)modes];
}
void NSFileHandle_readToEndOfFileInBackgroundAndNotify(void* goobj) {
  [(NSFileHandle*)goobj readToEndOfFileInBackgroundAndNotify];
}
void NSFileHandle_acceptConnectionInBackgroundAndNotifyForModes(void* goobj, void* modes) {
  [(NSFileHandle*)goobj acceptConnectionInBackgroundAndNotifyForModes:(NSArray*)modes];
}
void NSFileHandle_acceptConnectionInBackgroundAndNotify(void* goobj) {
  [(NSFileHandle*)goobj acceptConnectionInBackgroundAndNotify];
}
void NSFileHandle_waitForDataInBackgroundAndNotifyForModes(void* goobj, void* modes) {
  [(NSFileHandle*)goobj waitForDataInBackgroundAndNotifyForModes:(NSArray*)modes];
}
void NSFileHandle_waitForDataInBackgroundAndNotify(void* goobj) {
  [(NSFileHandle*)goobj waitForDataInBackgroundAndNotify];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSFileHandle_readabilityHandler(void* goobj) {
//  return [(NSFileHandle*)goobj readabilityHandler];
//}
//REJECT: readabilityHandler
//void NSFileHandle_setReadabilityHandler(void* goobj, *INVALID TYPE* readabilityHandler) {
//  [(NSFileHandle*)goobj setReadabilityHandler:readabilityHandler];
//}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSFileHandle_writeabilityHandler(void* goobj) {
//  return [(NSFileHandle*)goobj writeabilityHandler];
//}
//REJECT: writeabilityHandler
//void NSFileHandle_setWriteabilityHandler(void* goobj, *INVALID TYPE* writeabilityHandler) {
//  [(NSFileHandle*)goobj setWriteabilityHandler:writeabilityHandler];
//}
void* NSFileHandle_initWithFileDescriptorCloseOnDealloc(int fd, bool closeopt) {
  return [[NSFileHandle alloc] initWithFileDescriptor:fd closeOnDealloc:closeopt];
}
void* NSFileHandle_initWithFileDescriptor(int fd) {
  return [[NSFileHandle alloc] initWithFileDescriptor:fd];
}
int NSFileHandle_fileDescriptor(void* goobj) {
  return [(NSFileHandle*)goobj fileDescriptor];
}


////NSPipe
void* NSPipe_fileHandleForReading(void* goobj) {
  return [(NSPipe*)goobj fileHandleForReading];
}
void* NSPipe_fileHandleForWriting(void* goobj) {
  return [(NSPipe*)goobj fileHandleForWriting];
}
void* NSPipe_init() {
  return [[NSPipe alloc] init];
}
void* NSPipe__pipe() {
  return [NSPipe pipe];
}

////NSFileManager
void* NSFileManager_init() {
  return [[NSFileManager alloc] init];
}
void* NSFileManager_mountedVolumeURLsIncludingResourceValuesForKeysOptions(void* goobj, void* propertyKeys, NSVolumeEnumerationOptions options) {
  return [(NSFileManager*)goobj mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray*)propertyKeys options:options];
}
void* NSFileManager_contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(void* goobj, void* url, void* keys, NSDirectoryEnumerationOptions mask, void* error) {
  return [(NSFileManager*)goobj contentsOfDirectoryAtURL:(NSURL*)url includingPropertiesForKeys:(NSArray*)keys options:mask error:(NSError**)&error];
}
void* NSFileManager_URLsForDirectoryInDomains(void* goobj, NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask) {
  return [(NSFileManager*)goobj URLsForDirectory:directory inDomains:domainMask];
}
void* NSFileManager_URLForDirectoryInDomainAppropriateForURLCreateError(void* goobj, NSSearchPathDirectory directory, NSSearchPathDomainMask domain, void* url, bool shouldCreate, void* error) {
  return [(NSFileManager*)goobj URLForDirectory:directory inDomain:domain appropriateForURL:(NSURL*)url create:shouldCreate error:(NSError**)&error];
}
bool NSFileManager_createDirectoryAtURLWithIntermediateDirectoriesAttributesError(void* goobj, void* url, bool createIntermediates, void* attributes, void* error) {
  return [(NSFileManager*)goobj createDirectoryAtURL:(NSURL*)url withIntermediateDirectories:createIntermediates attributes:(NSDictionary*)attributes error:(NSError**)&error];
}
bool NSFileManager_createSymbolicLinkAtURLWithDestinationURLError(void* goobj, void* url, void* destURL, void* error) {
  return [(NSFileManager*)goobj createSymbolicLinkAtURL:(NSURL*)url withDestinationURL:(NSURL*)destURL error:(NSError**)&error];
}
void NSFileManager_setDelegate(void* goobj, void* delegate) {
  [(NSFileManager*)goobj setDelegate:delegate];
}
void* NSFileManager_delegate(void* goobj) {
  return [(NSFileManager*)goobj delegate];
}
bool NSFileManager_setAttributesOfItemAtPathError(void* goobj, void* attributes, void* path, void* error) {
  return [(NSFileManager*)goobj setAttributes:(NSDictionary*)attributes ofItemAtPath:(NSString*)path error:(NSError**)&error];
}
bool NSFileManager_createDirectoryAtPathWithIntermediateDirectoriesAttributesError(void* goobj, void* path, bool createIntermediates, void* attributes, void* error) {
  return [(NSFileManager*)goobj createDirectoryAtPath:(NSString*)path withIntermediateDirectories:createIntermediates attributes:(NSDictionary*)attributes error:(NSError**)&error];
}
void* NSFileManager_contentsOfDirectoryAtPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj contentsOfDirectoryAtPath:(NSString*)path error:(NSError**)&error];
}
void* NSFileManager_subpathsOfDirectoryAtPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj subpathsOfDirectoryAtPath:(NSString*)path error:(NSError**)&error];
}
void* NSFileManager_attributesOfItemAtPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj attributesOfItemAtPath:(NSString*)path error:(NSError**)&error];
}
void* NSFileManager_attributesOfFileSystemForPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj attributesOfFileSystemForPath:(NSString*)path error:(NSError**)&error];
}
bool NSFileManager_createSymbolicLinkAtPathWithDestinationPathError(void* goobj, void* path, void* destPath, void* error) {
  return [(NSFileManager*)goobj createSymbolicLinkAtPath:(NSString*)path withDestinationPath:(NSString*)destPath error:(NSError**)&error];
}
void* NSFileManager_destinationOfSymbolicLinkAtPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj destinationOfSymbolicLinkAtPath:(NSString*)path error:(NSError**)&error];
}
bool NSFileManager_copyItemAtPathToPathError(void* goobj, void* srcPath, void* dstPath, void* error) {
  return [(NSFileManager*)goobj copyItemAtPath:(NSString*)srcPath toPath:(NSString*)dstPath error:(NSError**)&error];
}
bool NSFileManager_moveItemAtPathToPathError(void* goobj, void* srcPath, void* dstPath, void* error) {
  return [(NSFileManager*)goobj moveItemAtPath:(NSString*)srcPath toPath:(NSString*)dstPath error:(NSError**)&error];
}
bool NSFileManager_linkItemAtPathToPathError(void* goobj, void* srcPath, void* dstPath, void* error) {
  return [(NSFileManager*)goobj linkItemAtPath:(NSString*)srcPath toPath:(NSString*)dstPath error:(NSError**)&error];
}
bool NSFileManager_removeItemAtPathError(void* goobj, void* path, void* error) {
  return [(NSFileManager*)goobj removeItemAtPath:(NSString*)path error:(NSError**)&error];
}
bool NSFileManager_copyItemAtURLToURLError(void* goobj, void* srcURL, void* dstURL, void* error) {
  return [(NSFileManager*)goobj copyItemAtURL:(NSURL*)srcURL toURL:(NSURL*)dstURL error:(NSError**)&error];
}
bool NSFileManager_moveItemAtURLToURLError(void* goobj, void* srcURL, void* dstURL, void* error) {
  return [(NSFileManager*)goobj moveItemAtURL:(NSURL*)srcURL toURL:(NSURL*)dstURL error:(NSError**)&error];
}
bool NSFileManager_linkItemAtURLToURLError(void* goobj, void* srcURL, void* dstURL, void* error) {
  return [(NSFileManager*)goobj linkItemAtURL:(NSURL*)srcURL toURL:(NSURL*)dstURL error:(NSError**)&error];
}
bool NSFileManager_removeItemAtURLError(void* goobj, void* URL, void* error) {
  return [(NSFileManager*)goobj removeItemAtURL:(NSURL*)URL error:(NSError**)&error];
}
bool NSFileManager_trashItemAtURLResultingItemURLError(void* goobj, void* url, void* outResultingURL, void* error) {
  return [(NSFileManager*)goobj trashItemAtURL:(NSURL*)url resultingItemURL:(NSURL*)outResultingURL error:(NSError**)&error];
}
void* NSFileManager_fileAttributesAtPathTraverseLink(void* goobj, void* path, bool yorn) {
  return [(NSFileManager*)goobj fileAttributesAtPath:(NSString*)path traverseLink:yorn];
}
bool NSFileManager_changeFileAttributesAtPath(void* goobj, void* attributes, void* path) {
  return [(NSFileManager*)goobj changeFileAttributes:(NSDictionary*)attributes atPath:(NSString*)path];
}
void* NSFileManager_directoryContentsAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj directoryContentsAtPath:(NSString*)path];
}
void* NSFileManager_fileSystemAttributesAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj fileSystemAttributesAtPath:(NSString*)path];
}
void* NSFileManager_pathContentOfSymbolicLinkAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj pathContentOfSymbolicLinkAtPath:(NSString*)path];
}
bool NSFileManager_createSymbolicLinkAtPathPathContent(void* goobj, void* path, void* otherpath) {
  return [(NSFileManager*)goobj createSymbolicLinkAtPath:(NSString*)path pathContent:(NSString*)otherpath];
}
bool NSFileManager_createDirectoryAtPathAttributes(void* goobj, void* path, void* attributes) {
  return [(NSFileManager*)goobj createDirectoryAtPath:(NSString*)path attributes:(NSDictionary*)attributes];
}
bool NSFileManager_linkPathToPathHandler(void* goobj, void* src, void* dest, void* handler) {
  return [(NSFileManager*)goobj linkPath:(NSString*)src toPath:(NSString*)dest handler:handler];
}
bool NSFileManager_copyPathToPathHandler(void* goobj, void* src, void* dest, void* handler) {
  return [(NSFileManager*)goobj copyPath:(NSString*)src toPath:(NSString*)dest handler:handler];
}
bool NSFileManager_movePathToPathHandler(void* goobj, void* src, void* dest, void* handler) {
  return [(NSFileManager*)goobj movePath:(NSString*)src toPath:(NSString*)dest handler:handler];
}
bool NSFileManager_removeFileAtPathHandler(void* goobj, void* path, void* handler) {
  return [(NSFileManager*)goobj removeFileAtPath:(NSString*)path handler:handler];
}
void* NSFileManager_currentDirectoryPath(void* goobj) {
  return [(NSFileManager*)goobj currentDirectoryPath];
}
bool NSFileManager_changeCurrentDirectoryPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj changeCurrentDirectoryPath:(NSString*)path];
}
bool NSFileManager_fileExistsAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj fileExistsAtPath:(NSString*)path];
}
bool NSFileManager_fileExistsAtPathIsDirectory(void* goobj, void* path, bool isDirectory) {
  return [(NSFileManager*)goobj fileExistsAtPath:(NSString*)path isDirectory:isDirectory];
}
bool NSFileManager_isReadableFileAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj isReadableFileAtPath:(NSString*)path];
}
bool NSFileManager_isWritableFileAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj isWritableFileAtPath:(NSString*)path];
}
bool NSFileManager_isExecutableFileAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj isExecutableFileAtPath:(NSString*)path];
}
bool NSFileManager_isDeletableFileAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj isDeletableFileAtPath:(NSString*)path];
}
bool NSFileManager_contentsEqualAtPathAndPath(void* goobj, void* path1, void* path2) {
  return [(NSFileManager*)goobj contentsEqualAtPath:(NSString*)path1 andPath:(NSString*)path2];
}
void* NSFileManager_displayNameAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj displayNameAtPath:(NSString*)path];
}
void* NSFileManager_componentsToDisplayForPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj componentsToDisplayForPath:(NSString*)path];
}
void* NSFileManager_enumeratorAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj enumeratorAtPath:(NSString*)path];
}
//unacceptalble-method
//void* NSFileManager_enumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler(void* goobj, void* url, void* keys, NSDirectoryEnumerationOptions mask, bool handler) {
//  return [(NSFileManager*)goobj enumeratorAtURL:(NSURL*)url includingPropertiesForKeys:(NSArray*)keys options:mask errorHandler:handler];
//}
void* NSFileManager_subpathsAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj subpathsAtPath:(NSString*)path];
}
void* NSFileManager_contentsAtPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj contentsAtPath:(NSString*)path];
}
bool NSFileManager_createFileAtPathContentsAttributes(void* goobj, void* path, void* data, void* attr) {
  return [(NSFileManager*)goobj createFileAtPath:(NSString*)path contents:(NSData*)data attributes:(NSDictionary*)attr];
}
const char* NSFileManager_fileSystemRepresentationWithPath(void* goobj, void* path) {
  return [(NSFileManager*)goobj fileSystemRepresentationWithPath:(NSString*)path];
}
void* NSFileManager_stringWithFileSystemRepresentationLength(void* goobj, const char* str, uint len) {
  return [(NSFileManager*)goobj stringWithFileSystemRepresentation:str length:len];
}
bool NSFileManager_replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(void* goobj, void* originalItemURL, void* newItemURL, void* backupItemName, NSFileManagerItemReplacementOptions options, void* resultingURL, void* error) {
  return [(NSFileManager*)goobj replaceItemAtURL:(NSURL*)originalItemURL withItemAtURL:(NSURL*)newItemURL backupItemName:(NSString*)backupItemName options:options resultingItemURL:(NSURL*)resultingURL error:(NSError**)&error];
}
bool NSFileManager_setUbiquitousItemAtURLDestinationURLError(void* goobj, bool flag, void* url, void* destinationURL, void* error) {
  return [(NSFileManager*)goobj setUbiquitous:flag itemAtURL:(NSURL*)url destinationURL:(NSURL*)destinationURL error:(NSError**)&error];
}
bool NSFileManager_isUbiquitousItemAtURL(void* goobj, void* url) {
  return [(NSFileManager*)goobj isUbiquitousItemAtURL:(NSURL*)url];
}
bool NSFileManager_startDownloadingUbiquitousItemAtURLError(void* goobj, void* url, void* error) {
  return [(NSFileManager*)goobj startDownloadingUbiquitousItemAtURL:(NSURL*)url error:(NSError**)&error];
}
bool NSFileManager_evictUbiquitousItemAtURLError(void* goobj, void* url, void* error) {
  return [(NSFileManager*)goobj evictUbiquitousItemAtURL:(NSURL*)url error:(NSError**)&error];
}
void* NSFileManager_URLForUbiquityContainerIdentifier(void* goobj, void* containerIdentifier) {
  return [(NSFileManager*)goobj URLForUbiquityContainerIdentifier:(NSString*)containerIdentifier];
}
void* NSFileManager_URLForPublishingUbiquitousItemAtURLExpirationDateError(void* goobj, void* url, void* outDate, void* error) {
  return [(NSFileManager*)goobj URLForPublishingUbiquitousItemAtURL:(NSURL*)url expirationDate:(NSDate*)outDate error:(NSError**)&error];
}
void* NSFileManager_ubiquityIdentityToken(void* goobj) {
  return [(NSFileManager*)goobj ubiquityIdentityToken];
}
void* NSFileManager_containerURLForSecurityApplicationGroupIdentifier(void* goobj, void* groupIdentifier) {
  return [(NSFileManager*)goobj containerURLForSecurityApplicationGroupIdentifier:(NSString*)groupIdentifier];
}
void* NSFileManager__defaultManager() {
  return [NSFileManager defaultManager];
}

////NSDirectoryEnumerator
void* NSDirectoryEnumerator_init() {
  return [[NSDirectoryEnumerator alloc] init];
}
void* NSDirectoryEnumerator_fileAttributes(void* goobj) {
  return [(NSDirectoryEnumerator*)goobj fileAttributes];
}
void* NSDirectoryEnumerator_directoryAttributes(void* goobj) {
  return [(NSDirectoryEnumerator*)goobj directoryAttributes];
}
void NSDirectoryEnumerator_skipDescendents(void* goobj) {
  [(NSDirectoryEnumerator*)goobj skipDescendents];
}
uint NSDirectoryEnumerator_level(void* goobj) {
  return [(NSDirectoryEnumerator*)goobj level];
}
void NSDirectoryEnumerator_skipDescendants(void* goobj) {
  [(NSDirectoryEnumerator*)goobj skipDescendants];
}


////NSPointerFunctions
void* NSPointerFunctions_init() {
  return [[NSPointerFunctions alloc] init];
}
//REJECT: options
//void* NSPointerFunctions_initWithOptions(NSPointerFunctionsOptions options) {
//  return [[NSPointerFunctions alloc] initWithOptions:options];
//}
uint NSPointerFunctions_hashFunction(void* goobj) {
  return [(NSPointerFunctions*)goobj hashFunction];
}
void NSPointerFunctions_setHashFunction(void* goobj, uint hashFunction) {
  [(NSPointerFunctions*)goobj setHashFunction:hashFunction];
}
bool NSPointerFunctions_isEqualFunction(void* goobj) {
  return [(NSPointerFunctions*)goobj isEqualFunction];
}
void NSPointerFunctions_setIsEqualFunction(void* goobj, bool isEqualFunction) {
  [(NSPointerFunctions*)goobj setIsEqualFunction:isEqualFunction];
}
uint NSPointerFunctions_sizeFunction(void* goobj) {
  return [(NSPointerFunctions*)goobj sizeFunction];
}
void NSPointerFunctions_setSizeFunction(void* goobj, uint sizeFunction) {
  [(NSPointerFunctions*)goobj setSizeFunction:sizeFunction];
}
void* NSPointerFunctions_descriptionFunction(void* goobj) {
  return [(NSPointerFunctions*)goobj descriptionFunction];
}
void NSPointerFunctions_setDescriptionFunction(void* goobj, void* descriptionFunction) {
  [(NSPointerFunctions*)goobj setDescriptionFunction:(NSString*)descriptionFunction];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSPointerFunctions_relinquishFunction(void* goobj) {
//  return [(NSPointerFunctions*)goobj relinquishFunction];
//}
//REJECT: relinquishFunction
//void NSPointerFunctions_setRelinquishFunction(void* goobj, *INVALID TYPE* relinquishFunction) {
//  [(NSPointerFunctions*)goobj setRelinquishFunction:relinquishFunction];
//}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSPointerFunctions_acquireFunction(void* goobj) {
//  return [(NSPointerFunctions*)goobj acquireFunction];
//}
//REJECT: acquireFunction
//void NSPointerFunctions_setAcquireFunction(void* goobj, *INVALID TYPE* acquireFunction) {
//  [(NSPointerFunctions*)goobj setAcquireFunction:acquireFunction];
//}
bool NSPointerFunctions_usesStrongWriteBarrier(void* goobj) {
  return [(NSPointerFunctions*)goobj usesStrongWriteBarrier];
}
void NSPointerFunctions_setUsesStrongWriteBarrier(void* goobj, bool usesStrongWriteBarrier) {
  [(NSPointerFunctions*)goobj setUsesStrongWriteBarrier:usesStrongWriteBarrier];
}
bool NSPointerFunctions_usesWeakReadAndWriteBarriers(void* goobj) {
  return [(NSPointerFunctions*)goobj usesWeakReadAndWriteBarriers];
}
void NSPointerFunctions_setUsesWeakReadAndWriteBarriers(void* goobj, bool usesWeakReadAndWriteBarriers) {
  [(NSPointerFunctions*)goobj setUsesWeakReadAndWriteBarriers:usesWeakReadAndWriteBarriers];
}
//REJECT: options
//void* NSPointerFunctions__pointerFunctionsWithOptions(NSPointerFunctionsOptions options) {
//  return [NSPointerFunctions pointerFunctionsWithOptions:options];
//}

////NSHashTable
void* NSHashTable_init() {
  return [[NSHashTable alloc] init];
}
//REJECT: options
//void* NSHashTable_initWithOptionsCapacity(NSPointerFunctionsOptions options, uint initialCapacity) {
//  return [[NSHashTable alloc] initWithOptions:options capacity:initialCapacity];
//}
void* NSHashTable_initWithPointerFunctionsCapacity(void* functions, uint initialCapacity) {
  return [[NSHashTable alloc] initWithPointerFunctions:(NSPointerFunctions*)functions capacity:initialCapacity];
}
void* NSHashTable_pointerFunctions(void* goobj) {
  return [(NSHashTable*)goobj pointerFunctions];
}
uint NSHashTable_count(void* goobj) {
  return [(NSHashTable*)goobj count];
}
void* NSHashTable_member(void* goobj, void* object) {
  return [(NSHashTable*)goobj member:object];
}
void* NSHashTable_objectEnumerator(void* goobj) {
  return [(NSHashTable*)goobj objectEnumerator];
}
void NSHashTable_addObject(void* goobj, void* object) {
  [(NSHashTable*)goobj addObject:object];
}
void NSHashTable_removeObject(void* goobj, void* object) {
  [(NSHashTable*)goobj removeObject:object];
}
void NSHashTable_removeAllObjects(void* goobj) {
  [(NSHashTable*)goobj removeAllObjects];
}
void* NSHashTable_allObjects(void* goobj) {
  return [(NSHashTable*)goobj allObjects];
}
void* NSHashTable_anyObject(void* goobj) {
  return [(NSHashTable*)goobj anyObject];
}
bool NSHashTable_containsObject(void* goobj, void* anObject) {
  return [(NSHashTable*)goobj containsObject:anObject];
}
bool NSHashTable_intersectsHashTable(void* goobj, void* other) {
  return [(NSHashTable*)goobj intersectsHashTable:(NSHashTable*)other];
}
bool NSHashTable_isEqualToHashTable(void* goobj, void* other) {
  return [(NSHashTable*)goobj isEqualToHashTable:(NSHashTable*)other];
}
bool NSHashTable_isSubsetOfHashTable(void* goobj, void* other) {
  return [(NSHashTable*)goobj isSubsetOfHashTable:(NSHashTable*)other];
}
void NSHashTable_intersectHashTable(void* goobj, void* other) {
  [(NSHashTable*)goobj intersectHashTable:(NSHashTable*)other];
}
void NSHashTable_unionHashTable(void* goobj, void* other) {
  [(NSHashTable*)goobj unionHashTable:(NSHashTable*)other];
}
void NSHashTable_minusHashTable(void* goobj, void* other) {
  [(NSHashTable*)goobj minusHashTable:(NSHashTable*)other];
}
void* NSHashTable_setRepresentation(void* goobj) {
  return [(NSHashTable*)goobj setRepresentation];
}
//REJECT: options
//void* NSHashTable__hashTableWithOptions(NSPointerFunctionsOptions options) {
//  return [NSHashTable hashTableWithOptions:options];
//}
void* NSHashTable__hashTableWithWeakObjects() {
  return [NSHashTable hashTableWithWeakObjects];
}
void* NSHashTable__weakObjectsHashTable() {
  return [NSHashTable weakObjectsHashTable];
}

////NSHTTPCookie
void* NSHTTPCookie_init() {
  return [[NSHTTPCookie alloc] init];
}
void* NSHTTPCookie_initWithProperties(void* properties) {
  return [[NSHTTPCookie alloc] initWithProperties:(NSDictionary*)properties];
}
void* NSHTTPCookie_properties(void* goobj) {
  return [(NSHTTPCookie*)goobj properties];
}
uint NSHTTPCookie_version(void* goobj) {
  return [(NSHTTPCookie*)goobj version];
}
void* NSHTTPCookie_name(void* goobj) {
  return [(NSHTTPCookie*)goobj name];
}
void* NSHTTPCookie_value(void* goobj) {
  return [(NSHTTPCookie*)goobj value];
}
void* NSHTTPCookie_expiresDate(void* goobj) {
  return [(NSHTTPCookie*)goobj expiresDate];
}
bool NSHTTPCookie_isSessionOnly(void* goobj) {
  return [(NSHTTPCookie*)goobj isSessionOnly];
}
void* NSHTTPCookie_domain(void* goobj) {
  return [(NSHTTPCookie*)goobj domain];
}
void* NSHTTPCookie_path(void* goobj) {
  return [(NSHTTPCookie*)goobj path];
}
bool NSHTTPCookie_isSecure(void* goobj) {
  return [(NSHTTPCookie*)goobj isSecure];
}
bool NSHTTPCookie_isHTTPOnly(void* goobj) {
  return [(NSHTTPCookie*)goobj isHTTPOnly];
}
void* NSHTTPCookie_comment(void* goobj) {
  return [(NSHTTPCookie*)goobj comment];
}
void* NSHTTPCookie_commentURL(void* goobj) {
  return [(NSHTTPCookie*)goobj commentURL];
}
void* NSHTTPCookie_portList(void* goobj) {
  return [(NSHTTPCookie*)goobj portList];
}
void* NSHTTPCookie__cookieWithProperties(void* properties) {
  return [NSHTTPCookie cookieWithProperties:(NSDictionary*)properties];
}
void* NSHTTPCookie__requestHeaderFieldsWithCookies(void* cookies) {
  return [NSHTTPCookie requestHeaderFieldsWithCookies:(NSArray*)cookies];
}
void* NSHTTPCookie__cookiesWithResponseHeaderFieldsForURL(void* headerFields, void* URL) {
  return [NSHTTPCookie cookiesWithResponseHeaderFields:(NSDictionary*)headerFields forURL:(NSURL*)URL];
}

////NSHTTPCookieStorage
void* NSHTTPCookieStorage_init() {
  return [[NSHTTPCookieStorage alloc] init];
}
void* NSHTTPCookieStorage_cookies(void* goobj) {
  return [(NSHTTPCookieStorage*)goobj cookies];
}
void NSHTTPCookieStorage_setCookie(void* goobj, void* cookie) {
  [(NSHTTPCookieStorage*)goobj setCookie:(NSHTTPCookie*)cookie];
}
void NSHTTPCookieStorage_deleteCookie(void* goobj, void* cookie) {
  [(NSHTTPCookieStorage*)goobj deleteCookie:(NSHTTPCookie*)cookie];
}
void* NSHTTPCookieStorage_cookiesForURL(void* goobj, void* URL) {
  return [(NSHTTPCookieStorage*)goobj cookiesForURL:(NSURL*)URL];
}
void NSHTTPCookieStorage_setCookiesForURLMainDocumentURL(void* goobj, void* cookies, void* URL, void* mainDocumentURL) {
  [(NSHTTPCookieStorage*)goobj setCookies:(NSArray*)cookies forURL:(NSURL*)URL mainDocumentURL:(NSURL*)mainDocumentURL];
}
NSHTTPCookieAcceptPolicy NSHTTPCookieStorage_cookieAcceptPolicy(void* goobj) {
  return [(NSHTTPCookieStorage*)goobj cookieAcceptPolicy];
}
void NSHTTPCookieStorage_setCookieAcceptPolicy(void* goobj, NSHTTPCookieAcceptPolicy cookieAcceptPolicy) {
  [(NSHTTPCookieStorage*)goobj setCookieAcceptPolicy:cookieAcceptPolicy];
}
void* NSHTTPCookieStorage_sortedCookiesUsingDescriptors(void* goobj, void* sortOrder) {
  return [(NSHTTPCookieStorage*)goobj sortedCookiesUsingDescriptors:(NSArray*)sortOrder];
}
void* NSHTTPCookieStorage__sharedHTTPCookieStorage() {
  return [NSHTTPCookieStorage sharedHTTPCookieStorage];
}

////NSIndexPath
void* NSIndexPath_init() {
  return [[NSIndexPath alloc] init];
}
void* NSIndexPath_initWithIndexesLength(uint indexes, uint length) {
  return [[NSIndexPath alloc] initWithIndexes:indexes length:length];
}
void* NSIndexPath_initWithIndex(uint index) {
  return [[NSIndexPath alloc] initWithIndex:index];
}
void* NSIndexPath_indexPathByAddingIndex(void* goobj, uint index) {
  return [(NSIndexPath*)goobj indexPathByAddingIndex:index];
}
void* NSIndexPath_indexPathByRemovingLastIndex(void* goobj) {
  return [(NSIndexPath*)goobj indexPathByRemovingLastIndex];
}
uint NSIndexPath_indexAtPosition(void* goobj, uint position) {
  return [(NSIndexPath*)goobj indexAtPosition:position];
}
uint NSIndexPath_length(void* goobj) {
  return [(NSIndexPath*)goobj length];
}
void NSIndexPath_getIndexes(void* goobj, uint indexes) {
  [(NSIndexPath*)goobj getIndexes:indexes];
}
//REJECT: NSComparisonResult
//NSComparisonResult NSIndexPath_compare(void* goobj, void* otherObject) {
//  return [(NSIndexPath*)goobj compare:(NSIndexPath*)otherObject];
//}
//REJECT: instancetype
//instancetype NSIndexPath__indexPathWithIndex(uint index) {
//  return [NSIndexPath indexPathWithIndex:index];
//}
//REJECT: instancetype
//instancetype NSIndexPath__indexPathWithIndexesLength(uint indexes, uint length) {
//  return [NSIndexPath indexPathWithIndexes:indexes length:length];
//}

////NSIndexSet
void* NSIndexSet_init() {
  return [[NSIndexSet alloc] init];
}
//REJECT: range
//void* NSIndexSet_initWithIndexesInRange(NSRange range) {
//  return [[NSIndexSet alloc] initWithIndexesInRange:range];
//}
void* NSIndexSet_initWithIndexSet(void* indexSet) {
  return [[NSIndexSet alloc] initWithIndexSet:(NSIndexSet*)indexSet];
}
void* NSIndexSet_initWithIndex(uint value) {
  return [[NSIndexSet alloc] initWithIndex:value];
}
bool NSIndexSet_isEqualToIndexSet(void* goobj, void* indexSet) {
  return [(NSIndexSet*)goobj isEqualToIndexSet:(NSIndexSet*)indexSet];
}
uint NSIndexSet_count(void* goobj) {
  return [(NSIndexSet*)goobj count];
}
uint NSIndexSet_firstIndex(void* goobj) {
  return [(NSIndexSet*)goobj firstIndex];
}
uint NSIndexSet_lastIndex(void* goobj) {
  return [(NSIndexSet*)goobj lastIndex];
}
uint NSIndexSet_indexGreaterThanIndex(void* goobj, uint value) {
  return [(NSIndexSet*)goobj indexGreaterThanIndex:value];
}
uint NSIndexSet_indexLessThanIndex(void* goobj, uint value) {
  return [(NSIndexSet*)goobj indexLessThanIndex:value];
}
uint NSIndexSet_indexGreaterThanOrEqualToIndex(void* goobj, uint value) {
  return [(NSIndexSet*)goobj indexGreaterThanOrEqualToIndex:value];
}
uint NSIndexSet_indexLessThanOrEqualToIndex(void* goobj, uint value) {
  return [(NSIndexSet*)goobj indexLessThanOrEqualToIndex:value];
}
//REJECT: range
//uint NSIndexSet_getIndexesMaxCountInIndexRange(void* goobj, uint indexBuffer, uint bufferSize, NSRangePointer range) {
//  return [(NSIndexSet*)goobj getIndexes:indexBuffer maxCount:bufferSize inIndexRange:range];
//}
//REJECT: range
//uint NSIndexSet_countOfIndexesInRange(void* goobj, NSRange range) {
//  return [(NSIndexSet*)goobj countOfIndexesInRange:range];
//}
bool NSIndexSet_containsIndex(void* goobj, uint value) {
  return [(NSIndexSet*)goobj containsIndex:value];
}
//REJECT: range
//bool NSIndexSet_containsIndexesInRange(void* goobj, NSRange range) {
//  return [(NSIndexSet*)goobj containsIndexesInRange:range];
//}
bool NSIndexSet_containsIndexes(void* goobj, void* indexSet) {
  return [(NSIndexSet*)goobj containsIndexes:(NSIndexSet*)indexSet];
}
//REJECT: range
//bool NSIndexSet_intersectsIndexesInRange(void* goobj, NSRange range) {
//  return [(NSIndexSet*)goobj intersectsIndexesInRange:range];
//}
//REJECT: block
//void NSIndexSet_enumerateIndexesUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateIndexesUsingBlock:block];
//}
//REJECT: opts block
//void NSIndexSet_enumerateIndexesWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateIndexesWithOptions:opts usingBlock:block];
//}
//REJECT: range opts block
//void NSIndexSet_enumerateIndexesInRangeOptionsUsingBlock(void* goobj, NSRange range, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateIndexesInRange:range options:opts usingBlock:block];
//}
//unacceptalble-method
//uint NSIndexSet_indexPassingTest(void* goobj, bool predicate) {
//  return [(NSIndexSet*)goobj indexPassingTest:predicate];
//}
//REJECT: opts
//uint NSIndexSet_indexWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSIndexSet*)goobj indexWithOptions:opts passingTest:predicate];
//}
//REJECT: range opts
//uint NSIndexSet_indexInRangeOptionsPassingTest(void* goobj, NSRange range, NSEnumerationOptions opts, bool predicate) {
//  return [(NSIndexSet*)goobj indexInRange:range options:opts passingTest:predicate];
//}
//unacceptalble-method
//void* NSIndexSet_indexesPassingTest(void* goobj, bool predicate) {
//  return [(NSIndexSet*)goobj indexesPassingTest:predicate];
//}
//REJECT: opts
//void* NSIndexSet_indexesWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSIndexSet*)goobj indexesWithOptions:opts passingTest:predicate];
//}
//REJECT: range opts
//void* NSIndexSet_indexesInRangeOptionsPassingTest(void* goobj, NSRange range, NSEnumerationOptions opts, bool predicate) {
//  return [(NSIndexSet*)goobj indexesInRange:range options:opts passingTest:predicate];
//}
//REJECT: block
//void NSIndexSet_enumerateRangesUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateRangesUsingBlock:block];
//}
//REJECT: opts block
//void NSIndexSet_enumerateRangesWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateRangesWithOptions:opts usingBlock:block];
//}
//REJECT: range opts block
//void NSIndexSet_enumerateRangesInRangeOptionsUsingBlock(void* goobj, NSRange range, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSIndexSet*)goobj enumerateRangesInRange:range options:opts usingBlock:block];
//}
//REJECT: instancetype
//instancetype NSIndexSet__indexSet() {
//  return [NSIndexSet indexSet];
//}
//REJECT: instancetype
//instancetype NSIndexSet__indexSetWithIndex(uint value) {
//  return [NSIndexSet indexSetWithIndex:value];
//}
//REJECT: instancetype range
//instancetype NSIndexSet__indexSetWithIndexesInRange(NSRange range) {
//  return [NSIndexSet indexSetWithIndexesInRange:range];
//}

////NSMutableIndexSet
void* NSMutableIndexSet_init() {
  return [[NSMutableIndexSet alloc] init];
}
void NSMutableIndexSet_addIndexes(void* goobj, void* indexSet) {
  [(NSMutableIndexSet*)goobj addIndexes:(NSIndexSet*)indexSet];
}
void NSMutableIndexSet_removeIndexes(void* goobj, void* indexSet) {
  [(NSMutableIndexSet*)goobj removeIndexes:(NSIndexSet*)indexSet];
}
void NSMutableIndexSet_removeAllIndexes(void* goobj) {
  [(NSMutableIndexSet*)goobj removeAllIndexes];
}
void NSMutableIndexSet_addIndex(void* goobj, uint value) {
  [(NSMutableIndexSet*)goobj addIndex:value];
}
void NSMutableIndexSet_removeIndex(void* goobj, uint value) {
  [(NSMutableIndexSet*)goobj removeIndex:value];
}
//REJECT: range
//void NSMutableIndexSet_addIndexesInRange(void* goobj, NSRange range) {
//  [(NSMutableIndexSet*)goobj addIndexesInRange:range];
//}
//REJECT: range
//void NSMutableIndexSet_removeIndexesInRange(void* goobj, NSRange range) {
//  [(NSMutableIndexSet*)goobj removeIndexesInRange:range];
//}
//REJECT: delta
//void NSMutableIndexSet_shiftIndexesStartingAtIndexBy(void* goobj, uint index, NSInteger delta) {
//  [(NSMutableIndexSet*)goobj shiftIndexesStartingAtIndex:index by:delta];
//}


// NSInvocation


////NSJSONSerialization
void* NSJSONSerialization_init() {
  return [[NSJSONSerialization alloc] init];
}

bool NSJSONSerialization__isValidJSONObject(void* obj) {
  return [NSJSONSerialization isValidJSONObject:obj];
}
void* NSJSONSerialization__dataWithJSONObjectOptionsError(void* obj, NSJSONWritingOptions opt, void* error) {
  return [NSJSONSerialization dataWithJSONObject:obj options:opt error:(NSError**)&error];
}
void* NSJSONSerialization__JSONObjectWithDataOptionsError(void* data, NSJSONReadingOptions opt, void* error) {
  return [NSJSONSerialization JSONObjectWithData:(NSData*)data options:opt error:(NSError**)&error];
}
//REJECT: NSInteger
//NSInteger NSJSONSerialization__writeJSONObjectToStreamOptionsError(void* obj, void* stream, NSJSONWritingOptions opt, void* error) {
//  return [NSJSONSerialization writeJSONObject:obj toStream:(NSOutputStream*)stream options:opt error:(NSError**)&error];
//}
void* NSJSONSerialization__JSONObjectWithStreamOptionsError(void* stream, NSJSONReadingOptions opt, void* error) {
  return [NSJSONSerialization JSONObjectWithStream:(NSInputStream*)stream options:opt error:(NSError**)&error];
}

////NSOrderedSet
uint NSOrderedSet_count(void* goobj) {
  return [(NSOrderedSet*)goobj count];
}
void* NSOrderedSet_objectAtIndex(void* goobj, uint idx) {
  return [(NSOrderedSet*)goobj objectAtIndex:idx];
}
uint NSOrderedSet_indexOfObject(void* goobj, void* object) {
  return [(NSOrderedSet*)goobj indexOfObject:object];
}
//REJECT: range
//void NSOrderedSet_getObjectsRange(void* goobj, void* objects, NSRange range) {
//  [(NSOrderedSet*)goobj getObjects:objects range:range];
//}
void* NSOrderedSet_objectsAtIndexes(void* goobj, void* indexes) {
  return [(NSOrderedSet*)goobj objectsAtIndexes:(NSIndexSet*)indexes];
}
void* NSOrderedSet_firstObject(void* goobj) {
  return [(NSOrderedSet*)goobj firstObject];
}
void* NSOrderedSet_lastObject(void* goobj) {
  return [(NSOrderedSet*)goobj lastObject];
}
bool NSOrderedSet_isEqualToOrderedSet(void* goobj, void* other) {
  return [(NSOrderedSet*)goobj isEqualToOrderedSet:(NSOrderedSet*)other];
}
bool NSOrderedSet_containsObject(void* goobj, void* object) {
  return [(NSOrderedSet*)goobj containsObject:object];
}
bool NSOrderedSet_intersectsOrderedSet(void* goobj, void* other) {
  return [(NSOrderedSet*)goobj intersectsOrderedSet:(NSOrderedSet*)other];
}
bool NSOrderedSet_intersectsSet(void* goobj, void* set) {
  return [(NSOrderedSet*)goobj intersectsSet:(NSSet*)set];
}
bool NSOrderedSet_isSubsetOfOrderedSet(void* goobj, void* other) {
  return [(NSOrderedSet*)goobj isSubsetOfOrderedSet:(NSOrderedSet*)other];
}
bool NSOrderedSet_isSubsetOfSet(void* goobj, void* set) {
  return [(NSOrderedSet*)goobj isSubsetOfSet:(NSSet*)set];
}
void* NSOrderedSet_objectAtIndexedSubscript(void* goobj, uint idx) {
  return [(NSOrderedSet*)goobj objectAtIndexedSubscript:idx];
}
void* NSOrderedSet_objectEnumerator(void* goobj) {
  return [(NSOrderedSet*)goobj objectEnumerator];
}
void* NSOrderedSet_reverseObjectEnumerator(void* goobj) {
  return [(NSOrderedSet*)goobj reverseObjectEnumerator];
}
void* NSOrderedSet_reversedOrderedSet(void* goobj) {
  return [(NSOrderedSet*)goobj reversedOrderedSet];
}
void* NSOrderedSet_array(void* goobj) {
  return [(NSOrderedSet*)goobj array];
}
void* NSOrderedSet_set(void* goobj) {
  return [(NSOrderedSet*)goobj set];
}
//REJECT: block
//void NSOrderedSet_enumerateObjectsUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSOrderedSet*)goobj enumerateObjectsUsingBlock:block];
//}
//REJECT: opts block
//void NSOrderedSet_enumerateObjectsWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSOrderedSet*)goobj enumerateObjectsWithOptions:opts usingBlock:block];
//}
//REJECT: opts block
//void NSOrderedSet_enumerateObjectsAtIndexesOptionsUsingBlock(void* goobj, void* s, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSOrderedSet*)goobj enumerateObjectsAtIndexes:(NSIndexSet*)s options:opts usingBlock:block];
//}
//unacceptalble-method
//uint NSOrderedSet_indexOfObjectPassingTest(void* goobj, bool predicate) {
//  return [(NSOrderedSet*)goobj indexOfObjectPassingTest:predicate];
//}
//REJECT: opts
//uint NSOrderedSet_indexOfObjectWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSOrderedSet*)goobj indexOfObjectWithOptions:opts passingTest:predicate];
//}
//REJECT: opts
//uint NSOrderedSet_indexOfObjectAtIndexesOptionsPassingTest(void* goobj, void* s, NSEnumerationOptions opts, bool predicate) {
//  return [(NSOrderedSet*)goobj indexOfObjectAtIndexes:(NSIndexSet*)s options:opts passingTest:predicate];
//}
//unacceptalble-method
//void* NSOrderedSet_indexesOfObjectsPassingTest(void* goobj, bool predicate) {
//  return [(NSOrderedSet*)goobj indexesOfObjectsPassingTest:predicate];
//}
//REJECT: opts
//void* NSOrderedSet_indexesOfObjectsWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSOrderedSet*)goobj indexesOfObjectsWithOptions:opts passingTest:predicate];
//}
//REJECT: opts
//void* NSOrderedSet_indexesOfObjectsAtIndexesOptionsPassingTest(void* goobj, void* s, NSEnumerationOptions opts, bool predicate) {
//  return [(NSOrderedSet*)goobj indexesOfObjectsAtIndexes:(NSIndexSet*)s options:opts passingTest:predicate];
//}
//REJECT: range cmp
//uint NSOrderedSet_indexOfObjectInSortedRangeOptionsUsingComparator(void* goobj, void* object, NSRange range, NSBinarySearchingOptions opts, NSComparator cmp) {
//  return [(NSOrderedSet*)goobj indexOfObject:object inSortedRange:range options:opts usingComparator:cmp];
//}
//REJECT: cmptr
//void* NSOrderedSet_sortedArrayUsingComparator(void* goobj, NSComparator cmptr) {
//  return [(NSOrderedSet*)goobj sortedArrayUsingComparator:cmptr];
//}
//REJECT: opts cmptr
//void* NSOrderedSet_sortedArrayWithOptionsUsingComparator(void* goobj, NSSortOptions opts, NSComparator cmptr) {
//  return [(NSOrderedSet*)goobj sortedArrayWithOptions:opts usingComparator:cmptr];
//}
void* NSOrderedSet_description(void* goobj) {
  return [(NSOrderedSet*)goobj description];
}
void* NSOrderedSet_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSOrderedSet*)goobj descriptionWithLocale:locale];
}
void* NSOrderedSet_descriptionWithLocaleIndent(void* goobj, void* locale, uint level) {
  return [(NSOrderedSet*)goobj descriptionWithLocale:locale indent:level];
}
void* NSOrderedSet_init() {
  return [[NSOrderedSet alloc] init];
}
void* NSOrderedSet_initWithObjectsCount(void* objects, uint cnt) {
  return [[NSOrderedSet alloc] initWithObjects:objects count:cnt];
}
void* NSOrderedSet_initWithObject(void* object) {
  return [[NSOrderedSet alloc] initWithObject:object];
}
void* NSOrderedSet_initWithObjects(void* firstObj) {
  return [[NSOrderedSet alloc] initWithObjects:firstObj];
}
void* NSOrderedSet_initWithOrderedSet(void* set) {
  return [[NSOrderedSet alloc] initWithOrderedSet:(NSOrderedSet*)set];
}
void* NSOrderedSet_initWithOrderedSetCopyItems(void* set, bool flag) {
  return [[NSOrderedSet alloc] initWithOrderedSet:(NSOrderedSet*)set copyItems:flag];
}
//REJECT: range
//void* NSOrderedSet_initWithOrderedSetRangeCopyItems(void* set, NSRange range, bool flag) {
//  return [[NSOrderedSet alloc] initWithOrderedSet:(NSOrderedSet*)set range:range copyItems:flag];
//}
void* NSOrderedSet_initWithArray(void* array) {
  return [[NSOrderedSet alloc] initWithArray:(NSArray*)array];
}
void* NSOrderedSet_initWithArrayCopyItems(void* set, bool flag) {
  return [[NSOrderedSet alloc] initWithArray:(NSArray*)set copyItems:flag];
}
//REJECT: range
//void* NSOrderedSet_initWithArrayRangeCopyItems(void* set, NSRange range, bool flag) {
//  return [[NSOrderedSet alloc] initWithArray:(NSArray*)set range:range copyItems:flag];
//}
void* NSOrderedSet_initWithSet(void* set) {
  return [[NSOrderedSet alloc] initWithSet:(NSSet*)set];
}
void* NSOrderedSet_initWithSetCopyItems(void* set, bool flag) {
  return [[NSOrderedSet alloc] initWithSet:(NSSet*)set copyItems:flag];
}
void* NSOrderedSet_valueForKey(void* goobj, void* key) {
  return [(NSOrderedSet*)goobj valueForKey:(NSString*)key];
}
void NSOrderedSet_setValueForKey(void* goobj, void* value, void* key) {
  [(NSOrderedSet*)goobj setValue:value forKey:(NSString*)key];
}
void NSOrderedSet_addObserverForKeyPathOptionsContext(void* goobj, void* observer, void* keyPath, NSKeyValueObservingOptions options, void* context) {
  [(NSOrderedSet*)goobj addObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath options:options context:context];
}
void NSOrderedSet_removeObserverForKeyPathContext(void* goobj, void* observer, void* keyPath, void* context) {
  [(NSOrderedSet*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath context:context];
}
void NSOrderedSet_removeObserverForKeyPath(void* goobj, void* observer, void* keyPath) {
  [(NSOrderedSet*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath];
}
void* NSOrderedSet_sortedArrayUsingDescriptors(void* goobj, void* sortDescriptors) {
  return [(NSOrderedSet*)goobj sortedArrayUsingDescriptors:(NSArray*)sortDescriptors];
}
void* NSOrderedSet_filteredOrderedSetUsingPredicate(void* goobj, void* p) {
  return [(NSOrderedSet*)goobj filteredOrderedSetUsingPredicate:(NSPredicate*)p];
}


////NSMutableOrderedSet
void NSMutableOrderedSet_insertObjectAtIndex(void* goobj, void* object, uint idx) {
  [(NSMutableOrderedSet*)goobj insertObject:object atIndex:idx];
}
void NSMutableOrderedSet_removeObjectAtIndex(void* goobj, uint idx) {
  [(NSMutableOrderedSet*)goobj removeObjectAtIndex:idx];
}
void NSMutableOrderedSet_replaceObjectAtIndexWithObject(void* goobj, uint idx, void* object) {
  [(NSMutableOrderedSet*)goobj replaceObjectAtIndex:idx withObject:object];
}
void NSMutableOrderedSet_addObject(void* goobj, void* object) {
  [(NSMutableOrderedSet*)goobj addObject:object];
}
void NSMutableOrderedSet_addObjectsCount(void* goobj, void* objects, uint count) {
  [(NSMutableOrderedSet*)goobj addObjects:objects count:count];
}
void NSMutableOrderedSet_addObjectsFromArray(void* goobj, void* array) {
  [(NSMutableOrderedSet*)goobj addObjectsFromArray:(NSArray*)array];
}
void NSMutableOrderedSet_exchangeObjectAtIndexWithObjectAtIndex(void* goobj, uint idx1, uint idx2) {
  [(NSMutableOrderedSet*)goobj exchangeObjectAtIndex:idx1 withObjectAtIndex:idx2];
}
void NSMutableOrderedSet_moveObjectsAtIndexesToIndex(void* goobj, void* indexes, uint idx) {
  [(NSMutableOrderedSet*)goobj moveObjectsAtIndexes:(NSIndexSet*)indexes toIndex:idx];
}
void NSMutableOrderedSet_insertObjectsAtIndexes(void* goobj, void* objects, void* indexes) {
  [(NSMutableOrderedSet*)goobj insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes];
}
void NSMutableOrderedSet_setObjectAtIndex(void* goobj, void* obj, uint idx) {
  [(NSMutableOrderedSet*)goobj setObject:obj atIndex:idx];
}
void NSMutableOrderedSet_setObjectAtIndexedSubscript(void* goobj, void* obj, uint idx) {
  [(NSMutableOrderedSet*)goobj setObject:obj atIndexedSubscript:idx];
}
//REJECT: range
//void NSMutableOrderedSet_replaceObjectsInRangeWithObjectsCount(void* goobj, NSRange range, void* objects, uint count) {
//  [(NSMutableOrderedSet*)goobj replaceObjectsInRange:range withObjects:objects count:count];
//}
void NSMutableOrderedSet_replaceObjectsAtIndexesWithObjects(void* goobj, void* indexes, void* objects) {
  [(NSMutableOrderedSet*)goobj replaceObjectsAtIndexes:(NSIndexSet*)indexes withObjects:(NSArray*)objects];
}
//REJECT: range
//void NSMutableOrderedSet_removeObjectsInRange(void* goobj, NSRange range) {
//  [(NSMutableOrderedSet*)goobj removeObjectsInRange:range];
//}
void NSMutableOrderedSet_removeObjectsAtIndexes(void* goobj, void* indexes) {
  [(NSMutableOrderedSet*)goobj removeObjectsAtIndexes:(NSIndexSet*)indexes];
}
void NSMutableOrderedSet_removeAllObjects(void* goobj) {
  [(NSMutableOrderedSet*)goobj removeAllObjects];
}
void NSMutableOrderedSet_removeObject(void* goobj, void* object) {
  [(NSMutableOrderedSet*)goobj removeObject:object];
}
void NSMutableOrderedSet_removeObjectsInArray(void* goobj, void* array) {
  [(NSMutableOrderedSet*)goobj removeObjectsInArray:(NSArray*)array];
}
void NSMutableOrderedSet_intersectOrderedSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj intersectOrderedSet:(NSOrderedSet*)other];
}
void NSMutableOrderedSet_minusOrderedSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj minusOrderedSet:(NSOrderedSet*)other];
}
void NSMutableOrderedSet_unionOrderedSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj unionOrderedSet:(NSOrderedSet*)other];
}
void NSMutableOrderedSet_intersectSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj intersectSet:(NSSet*)other];
}
void NSMutableOrderedSet_minusSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj minusSet:(NSSet*)other];
}
void NSMutableOrderedSet_unionSet(void* goobj, void* other) {
  [(NSMutableOrderedSet*)goobj unionSet:(NSSet*)other];
}
//REJECT: cmptr
//void NSMutableOrderedSet_sortUsingComparator(void* goobj, NSComparator cmptr) {
//  [(NSMutableOrderedSet*)goobj sortUsingComparator:cmptr];
//}
//REJECT: opts cmptr
//void NSMutableOrderedSet_sortWithOptionsUsingComparator(void* goobj, NSSortOptions opts, NSComparator cmptr) {
//  [(NSMutableOrderedSet*)goobj sortWithOptions:opts usingComparator:cmptr];
//}
//REJECT: range opts cmptr
//void NSMutableOrderedSet_sortRangeOptionsUsingComparator(void* goobj, NSRange range, NSSortOptions opts, NSComparator cmptr) {
//  [(NSMutableOrderedSet*)goobj sortRange:range options:opts usingComparator:cmptr];
//}
void* NSMutableOrderedSet_init() {
  return [[NSMutableOrderedSet alloc] init];
}
void* NSMutableOrderedSet_initWithCapacity(uint numItems) {
  return [[NSMutableOrderedSet alloc] initWithCapacity:numItems];
}
void NSMutableOrderedSet_sortUsingDescriptors(void* goobj, void* sortDescriptors) {
  [(NSMutableOrderedSet*)goobj sortUsingDescriptors:(NSArray*)sortDescriptors];
}
void NSMutableOrderedSet_filterUsingPredicate(void* goobj, void* p) {
  [(NSMutableOrderedSet*)goobj filterUsingPredicate:(NSPredicate*)p];
}


////NSSet
uint NSSet_count(void* goobj) {
  return [(NSSet*)goobj count];
}
void* NSSet_member(void* goobj, void* object) {
  return [(NSSet*)goobj member:object];
}
void* NSSet_objectEnumerator(void* goobj) {
  return [(NSSet*)goobj objectEnumerator];
}
void* NSSet_allObjects(void* goobj) {
  return [(NSSet*)goobj allObjects];
}
void* NSSet_anyObject(void* goobj) {
  return [(NSSet*)goobj anyObject];
}
bool NSSet_containsObject(void* goobj, void* anObject) {
  return [(NSSet*)goobj containsObject:anObject];
}
void* NSSet_description(void* goobj) {
  return [(NSSet*)goobj description];
}
void* NSSet_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSSet*)goobj descriptionWithLocale:locale];
}
bool NSSet_intersectsSet(void* goobj, void* otherSet) {
  return [(NSSet*)goobj intersectsSet:(NSSet*)otherSet];
}
bool NSSet_isEqualToSet(void* goobj, void* otherSet) {
  return [(NSSet*)goobj isEqualToSet:(NSSet*)otherSet];
}
bool NSSet_isSubsetOfSet(void* goobj, void* otherSet) {
  return [(NSSet*)goobj isSubsetOfSet:(NSSet*)otherSet];
}
//REJECT: aSelector
//void NSSet_makeObjectsPerformSelector(void* goobj, SEL aSelector) {
//  [(NSSet*)goobj makeObjectsPerformSelector:aSelector];
//}
//REJECT: aSelector
//void NSSet_makeObjectsPerformSelectorWithObject(void* goobj, SEL aSelector, void* argument) {
//  [(NSSet*)goobj makeObjectsPerformSelector:aSelector withObject:argument];
//}
void* NSSet_setByAddingObject(void* goobj, void* anObject) {
  return [(NSSet*)goobj setByAddingObject:anObject];
}
void* NSSet_setByAddingObjectsFromSet(void* goobj, void* other) {
  return [(NSSet*)goobj setByAddingObjectsFromSet:(NSSet*)other];
}
void* NSSet_setByAddingObjectsFromArray(void* goobj, void* other) {
  return [(NSSet*)goobj setByAddingObjectsFromArray:(NSArray*)other];
}
//REJECT: block
//void NSSet_enumerateObjectsUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSSet*)goobj enumerateObjectsUsingBlock:block];
//}
//REJECT: opts block
//void NSSet_enumerateObjectsWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSSet*)goobj enumerateObjectsWithOptions:opts usingBlock:block];
//}
//unacceptalble-method
//void* NSSet_objectsPassingTest(void* goobj, bool predicate) {
//  return [(NSSet*)goobj objectsPassingTest:predicate];
//}
//REJECT: opts
//void* NSSet_objectsWithOptionsPassingTest(void* goobj, NSEnumerationOptions opts, bool predicate) {
//  return [(NSSet*)goobj objectsWithOptions:opts passingTest:predicate];
//}
void* NSSet_init() {
  return [[NSSet alloc] init];
}
void* NSSet_initWithObjectsCount(void* objects, uint cnt) {
  return [[NSSet alloc] initWithObjects:objects count:cnt];
}
void* NSSet_initWithObjects(void* firstObj) {
  return [[NSSet alloc] initWithObjects:firstObj];
}
void* NSSet_initWithSet(void* set) {
  return [[NSSet alloc] initWithSet:(NSSet*)set];
}
void* NSSet_initWithSetCopyItems(void* set, bool flag) {
  return [[NSSet alloc] initWithSet:(NSSet*)set copyItems:flag];
}
void* NSSet_initWithArray(void* array) {
  return [[NSSet alloc] initWithArray:(NSArray*)array];
}
void* NSSet_valueForKey(void* goobj, void* key) {
  return [(NSSet*)goobj valueForKey:(NSString*)key];
}
void NSSet_setValueForKey(void* goobj, void* value, void* key) {
  [(NSSet*)goobj setValue:value forKey:(NSString*)key];
}
void NSSet_addObserverForKeyPathOptionsContext(void* goobj, void* observer, void* keyPath, NSKeyValueObservingOptions options, void* context) {
  [(NSSet*)goobj addObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath options:options context:context];
}
void NSSet_removeObserverForKeyPathContext(void* goobj, void* observer, void* keyPath, void* context) {
  [(NSSet*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath context:context];
}
void NSSet_removeObserverForKeyPath(void* goobj, void* observer, void* keyPath) {
  [(NSSet*)goobj removeObserver:(NSObject*)observer forKeyPath:(NSString*)keyPath];
}
void* NSSet_sortedArrayUsingDescriptors(void* goobj, void* sortDescriptors) {
  return [(NSSet*)goobj sortedArrayUsingDescriptors:(NSArray*)sortDescriptors];
}
void* NSSet_filteredSetUsingPredicate(void* goobj, void* predicate) {
  return [(NSSet*)goobj filteredSetUsingPredicate:(NSPredicate*)predicate];
}


////NSMutableSet
void NSMutableSet_addObject(void* goobj, void* object) {
  [(NSMutableSet*)goobj addObject:object];
}
void NSMutableSet_removeObject(void* goobj, void* object) {
  [(NSMutableSet*)goobj removeObject:object];
}
void NSMutableSet_addObjectsFromArray(void* goobj, void* array) {
  [(NSMutableSet*)goobj addObjectsFromArray:(NSArray*)array];
}
void NSMutableSet_intersectSet(void* goobj, void* otherSet) {
  [(NSMutableSet*)goobj intersectSet:(NSSet*)otherSet];
}
void NSMutableSet_minusSet(void* goobj, void* otherSet) {
  [(NSMutableSet*)goobj minusSet:(NSSet*)otherSet];
}
void NSMutableSet_removeAllObjects(void* goobj) {
  [(NSMutableSet*)goobj removeAllObjects];
}
void NSMutableSet_unionSet(void* goobj, void* otherSet) {
  [(NSMutableSet*)goobj unionSet:(NSSet*)otherSet];
}
void NSMutableSet_setSet(void* goobj, void* otherSet) {
  [(NSMutableSet*)goobj setSet:(NSSet*)otherSet];
}
void* NSMutableSet_init() {
  return [[NSMutableSet alloc] init];
}
void* NSMutableSet_initWithCapacity(uint numItems) {
  return [[NSMutableSet alloc] initWithCapacity:numItems];
}
void NSMutableSet_filterUsingPredicate(void* goobj, void* predicate) {
  [(NSMutableSet*)goobj filterUsingPredicate:(NSPredicate*)predicate];
}


////NSCountedSet
void* NSCountedSet_init() {
  return [[NSCountedSet alloc] init];
}
void* NSCountedSet_initWithCapacity(uint numItems) {
  return [[NSCountedSet alloc] initWithCapacity:numItems];
}
void* NSCountedSet_initWithArray(void* array) {
  return [[NSCountedSet alloc] initWithArray:(NSArray*)array];
}
void* NSCountedSet_initWithSet(void* set) {
  return [[NSCountedSet alloc] initWithSet:(NSSet*)set];
}
uint NSCountedSet_countForObject(void* goobj, void* object) {
  return [(NSCountedSet*)goobj countForObject:object];
}
void* NSCountedSet_objectEnumerator(void* goobj) {
  return [(NSCountedSet*)goobj objectEnumerator];
}
void NSCountedSet_addObject(void* goobj, void* object) {
  [(NSCountedSet*)goobj addObject:object];
}
void NSCountedSet_removeObject(void* goobj, void* object) {
  [(NSCountedSet*)goobj removeObject:object];
}


////NSPropertyListSerialization
void* NSPropertyListSerialization_init() {
  return [[NSPropertyListSerialization alloc] init];
}

bool NSPropertyListSerialization__propertyListIsValidForFormat(void* plist, NSPropertyListFormat format) {
  return [NSPropertyListSerialization propertyList:plist isValidForFormat:format];
}
//REJECT: opt
//void* NSPropertyListSerialization__dataWithPropertyListFormatOptionsError(void* plist, NSPropertyListFormat format, NSPropertyListWriteOptions opt, void* error) {
//  return [NSPropertyListSerialization dataWithPropertyList:plist format:format options:opt error:(NSError**)&error];
//}
//REJECT: NSInteger opt
//NSInteger NSPropertyListSerialization__writePropertyListToStreamFormatOptionsError(void* plist, void* stream, NSPropertyListFormat format, NSPropertyListWriteOptions opt, void* error) {
//  return [NSPropertyListSerialization writePropertyList:plist toStream:(NSOutputStream*)stream format:format options:opt error:(NSError**)&error];
//}
//REJECT: opt
//void* NSPropertyListSerialization__propertyListWithDataOptionsFormatError(void* data, NSPropertyListReadOptions opt, NSPropertyListFormat format, void* error) {
//  return [NSPropertyListSerialization propertyListWithData:(NSData*)data options:opt format:format error:(NSError**)&error];
//}
//REJECT: opt
//void* NSPropertyListSerialization__propertyListWithStreamOptionsFormatError(void* stream, NSPropertyListReadOptions opt, NSPropertyListFormat format, void* error) {
//  return [NSPropertyListSerialization propertyListWithStream:(NSInputStream*)stream options:opt format:format error:(NSError**)&error];
//}
void* NSPropertyListSerialization__dataFromPropertyListFormatErrorDescription(void* plist, NSPropertyListFormat format, void* errorString) {
  return [NSPropertyListSerialization dataFromPropertyList:plist format:format errorDescription:(NSString*)errorString];
}
void* NSPropertyListSerialization__propertyListFromDataMutabilityOptionFormatErrorDescription(void* data, NSPropertyListMutabilityOptions opt, NSPropertyListFormat format, void* errorString) {
  return [NSPropertyListSerialization propertyListFromData:(NSData*)data mutabilityOption:opt format:format errorDescription:(NSString*)errorString];
}

////NSKeyedArchiver
void* NSKeyedArchiver_init() {
  return [[NSKeyedArchiver alloc] init];
}
void* NSKeyedArchiver_initForWritingWithMutableData(void* goobj, void* data) {
  return [(NSKeyedArchiver*)goobj initForWritingWithMutableData:(NSMutableData*)data];
}
void NSKeyedArchiver_setDelegate(void* goobj, void* delegate) {
  [(NSKeyedArchiver*)goobj setDelegate:delegate];
}
void* NSKeyedArchiver_delegate(void* goobj) {
  return [(NSKeyedArchiver*)goobj delegate];
}
void NSKeyedArchiver_setOutputFormat(void* goobj, NSPropertyListFormat format) {
  [(NSKeyedArchiver*)goobj setOutputFormat:format];
}
NSPropertyListFormat NSKeyedArchiver_outputFormat(void* goobj) {
  return [(NSKeyedArchiver*)goobj outputFormat];
}
void NSKeyedArchiver_finishEncoding(void* goobj) {
  [(NSKeyedArchiver*)goobj finishEncoding];
}
//REJECT: cls
//void NSKeyedArchiver_setClassNameForClass(void* goobj, void* codedName, Class cls) {
//  [(NSKeyedArchiver*)goobj setClassName:(NSString*)codedName forClass:cls];
//}
//REJECT: cls
//void* NSKeyedArchiver_classNameForClass(void* goobj, Class cls) {
//  return [(NSKeyedArchiver*)goobj classNameForClass:cls];
//}
void NSKeyedArchiver_encodeObjectForKey(void* goobj, void* objv, void* key) {
  [(NSKeyedArchiver*)goobj encodeObject:objv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeConditionalObjectForKey(void* goobj, void* objv, void* key) {
  [(NSKeyedArchiver*)goobj encodeConditionalObject:objv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeBoolForKey(void* goobj, bool boolv, void* key) {
  [(NSKeyedArchiver*)goobj encodeBool:boolv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeIntForKey(void* goobj, int intv, void* key) {
  [(NSKeyedArchiver*)goobj encodeInt:intv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeInt32ForKey(void* goobj, int32_t intv, void* key) {
  [(NSKeyedArchiver*)goobj encodeInt32:intv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeInt64ForKey(void* goobj, int64_t intv, void* key) {
  [(NSKeyedArchiver*)goobj encodeInt64:intv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeFloatForKey(void* goobj, float realv, void* key) {
  [(NSKeyedArchiver*)goobj encodeFloat:realv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeDoubleForKey(void* goobj, double realv, void* key) {
  [(NSKeyedArchiver*)goobj encodeDouble:realv forKey:(NSString*)key];
}
void NSKeyedArchiver_encodeBytesLengthForKey(void* goobj, uint8_t bytesp, uint lenv, void* key) {
  [(NSKeyedArchiver*)goobj encodeBytes:bytesp length:lenv forKey:(NSString*)key];
}
void NSKeyedArchiver_setRequiresSecureCoding(void* goobj, bool b) {
  [(NSKeyedArchiver*)goobj setRequiresSecureCoding:b];
}
void* NSKeyedArchiver__archivedDataWithRootObject(void* rootObject) {
  return [NSKeyedArchiver archivedDataWithRootObject:rootObject];
}
bool NSKeyedArchiver__archiveRootObjectToFile(void* rootObject, void* path) {
  return [NSKeyedArchiver archiveRootObject:rootObject toFile:(NSString*)path];
}
//REJECT: cls
//void NSKeyedArchiver__setClassNameForClass(void* codedName, Class cls) {
//  [NSKeyedArchiver setClassName:(NSString*)codedName forClass:cls];
//}
//REJECT: cls
//void* NSKeyedArchiver__classNameForClass(Class cls) {
//  return [NSKeyedArchiver classNameForClass:cls];
//}

////NSKeyedUnarchiver
void* NSKeyedUnarchiver_init() {
  return [[NSKeyedUnarchiver alloc] init];
}
void* NSKeyedUnarchiver_initForReadingWithData(void* goobj, void* data) {
  return [(NSKeyedUnarchiver*)goobj initForReadingWithData:(NSData*)data];
}
void NSKeyedUnarchiver_setDelegate(void* goobj, void* delegate) {
  [(NSKeyedUnarchiver*)goobj setDelegate:delegate];
}
void* NSKeyedUnarchiver_delegate(void* goobj) {
  return [(NSKeyedUnarchiver*)goobj delegate];
}
void NSKeyedUnarchiver_finishDecoding(void* goobj) {
  [(NSKeyedUnarchiver*)goobj finishDecoding];
}
//REJECT: cls
//void NSKeyedUnarchiver_setClassForClassName(void* goobj, Class cls, void* codedName) {
//  [(NSKeyedUnarchiver*)goobj setClass:cls forClassName:(NSString*)codedName];
//}
//REJECT: Class
//Class NSKeyedUnarchiver_classForClassName(void* goobj, void* codedName) {
//  return [(NSKeyedUnarchiver*)goobj classForClassName:(NSString*)codedName];
//}
bool NSKeyedUnarchiver_containsValueForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj containsValueForKey:(NSString*)key];
}
void* NSKeyedUnarchiver_decodeObjectForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeObjectForKey:(NSString*)key];
}
bool NSKeyedUnarchiver_decodeBoolForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeBoolForKey:(NSString*)key];
}
int NSKeyedUnarchiver_decodeIntForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeIntForKey:(NSString*)key];
}
int32_t NSKeyedUnarchiver_decodeInt32ForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeInt32ForKey:(NSString*)key];
}
int64_t NSKeyedUnarchiver_decodeInt64ForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeInt64ForKey:(NSString*)key];
}
float NSKeyedUnarchiver_decodeFloatForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeFloatForKey:(NSString*)key];
}
double NSKeyedUnarchiver_decodeDoubleForKey(void* goobj, void* key) {
  return [(NSKeyedUnarchiver*)goobj decodeDoubleForKey:(NSString*)key];
}
uint8_t NSKeyedUnarchiver_decodeBytesForKeyReturnedLength(void* goobj, void* key, uint lengthp) {
  return [(NSKeyedUnarchiver*)goobj decodeBytesForKey:(NSString*)key returnedLength:lengthp];
}
void NSKeyedUnarchiver_setRequiresSecureCoding(void* goobj, bool b) {
  [(NSKeyedUnarchiver*)goobj setRequiresSecureCoding:b];
}
void* NSKeyedUnarchiver__unarchiveObjectWithData(void* data) {
  return [NSKeyedUnarchiver unarchiveObjectWithData:(NSData*)data];
}
void* NSKeyedUnarchiver__unarchiveObjectWithFile(void* path) {
  return [NSKeyedUnarchiver unarchiveObjectWithFile:(NSString*)path];
}
//REJECT: cls
//void NSKeyedUnarchiver__setClassForClassName(Class cls, void* codedName) {
//  [NSKeyedUnarchiver setClass:cls forClassName:(NSString*)codedName];
//}
//REJECT: Class
//Class NSKeyedUnarchiver__classForClassName(void* codedName) {
//  return [NSKeyedUnarchiver classForClassName:(NSString*)codedName];
//}

// NSLocale


////NSLock
void* NSLock_init() {
  return [[NSLock alloc] init];
}
bool NSLock_tryLock(void* goobj) {
  return [(NSLock*)goobj tryLock];
}
bool NSLock_lockBeforeDate(void* goobj, void* limit) {
  return [(NSLock*)goobj lockBeforeDate:(NSDate*)limit];
}
void NSLock_setName(void* goobj, void* n) {
  [(NSLock*)goobj setName:(NSString*)n];
}
void* NSLock_name(void* goobj) {
  return [(NSLock*)goobj name];
}


////NSConditionLock
void* NSConditionLock_init() {
  return [[NSConditionLock alloc] init];
}
//REJECT: condition
//void* NSConditionLock_initWithCondition(NSInteger condition) {
//  return [[NSConditionLock alloc] initWithCondition:condition];
//}
//REJECT: NSInteger
//NSInteger NSConditionLock_condition(void* goobj) {
//  return [(NSConditionLock*)goobj condition];
//}
//REJECT: condition
//void NSConditionLock_lockWhenCondition(void* goobj, NSInteger condition) {
//  [(NSConditionLock*)goobj lockWhenCondition:condition];
//}
bool NSConditionLock_tryLock(void* goobj) {
  return [(NSConditionLock*)goobj tryLock];
}
//REJECT: condition
//bool NSConditionLock_tryLockWhenCondition(void* goobj, NSInteger condition) {
//  return [(NSConditionLock*)goobj tryLockWhenCondition:condition];
//}
//REJECT: condition
//void NSConditionLock_unlockWithCondition(void* goobj, NSInteger condition) {
//  [(NSConditionLock*)goobj unlockWithCondition:condition];
//}
bool NSConditionLock_lockBeforeDate(void* goobj, void* limit) {
  return [(NSConditionLock*)goobj lockBeforeDate:(NSDate*)limit];
}
//REJECT: condition
//bool NSConditionLock_lockWhenConditionBeforeDate(void* goobj, NSInteger condition, void* limit) {
//  return [(NSConditionLock*)goobj lockWhenCondition:condition beforeDate:(NSDate*)limit];
//}
void NSConditionLock_setName(void* goobj, void* n) {
  [(NSConditionLock*)goobj setName:(NSString*)n];
}
void* NSConditionLock_name(void* goobj) {
  return [(NSConditionLock*)goobj name];
}


////NSRecursiveLock
void* NSRecursiveLock_init() {
  return [[NSRecursiveLock alloc] init];
}
bool NSRecursiveLock_tryLock(void* goobj) {
  return [(NSRecursiveLock*)goobj tryLock];
}
bool NSRecursiveLock_lockBeforeDate(void* goobj, void* limit) {
  return [(NSRecursiveLock*)goobj lockBeforeDate:(NSDate*)limit];
}
void NSRecursiveLock_setName(void* goobj, void* n) {
  [(NSRecursiveLock*)goobj setName:(NSString*)n];
}
void* NSRecursiveLock_name(void* goobj) {
  return [(NSRecursiveLock*)goobj name];
}


////NSCondition
void* NSCondition_init() {
  return [[NSCondition alloc] init];
}
void NSCondition_wait(void* goobj) {
  [(NSCondition*)goobj wait];
}
bool NSCondition_waitUntilDate(void* goobj, void* limit) {
  return [(NSCondition*)goobj waitUntilDate:(NSDate*)limit];
}
void NSCondition_signal(void* goobj) {
  [(NSCondition*)goobj signal];
}
void NSCondition_broadcast(void* goobj) {
  [(NSCondition*)goobj broadcast];
}
void NSCondition_setName(void* goobj, void* n) {
  [(NSCondition*)goobj setName:(NSString*)n];
}
void* NSCondition_name(void* goobj) {
  return [(NSCondition*)goobj name];
}


////NSMapTable
void* NSMapTable_init() {
  return [[NSMapTable alloc] init];
}
//REJECT: keyOptions valueOptions
//void* NSMapTable_initWithKeyOptionsValueOptionsCapacity(NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions, uint initialCapacity) {
//  return [[NSMapTable alloc] initWithKeyOptions:keyOptions valueOptions:valueOptions capacity:initialCapacity];
//}
void* NSMapTable_initWithKeyPointerFunctionsValuePointerFunctionsCapacity(void* keyFunctions, void* valueFunctions, uint initialCapacity) {
  return [[NSMapTable alloc] initWithKeyPointerFunctions:(NSPointerFunctions*)keyFunctions valuePointerFunctions:(NSPointerFunctions*)valueFunctions capacity:initialCapacity];
}
void* NSMapTable_keyPointerFunctions(void* goobj) {
  return [(NSMapTable*)goobj keyPointerFunctions];
}
void* NSMapTable_valuePointerFunctions(void* goobj) {
  return [(NSMapTable*)goobj valuePointerFunctions];
}
void* NSMapTable_objectForKey(void* goobj, void* aKey) {
  return [(NSMapTable*)goobj objectForKey:aKey];
}
void NSMapTable_removeObjectForKey(void* goobj, void* aKey) {
  [(NSMapTable*)goobj removeObjectForKey:aKey];
}
void NSMapTable_setObjectForKey(void* goobj, void* anObject, void* aKey) {
  [(NSMapTable*)goobj setObject:anObject forKey:aKey];
}
uint NSMapTable_count(void* goobj) {
  return [(NSMapTable*)goobj count];
}
void* NSMapTable_keyEnumerator(void* goobj) {
  return [(NSMapTable*)goobj keyEnumerator];
}
void* NSMapTable_objectEnumerator(void* goobj) {
  return [(NSMapTable*)goobj objectEnumerator];
}
void NSMapTable_removeAllObjects(void* goobj) {
  [(NSMapTable*)goobj removeAllObjects];
}
void* NSMapTable_dictionaryRepresentation(void* goobj) {
  return [(NSMapTable*)goobj dictionaryRepresentation];
}
//REJECT: keyOptions valueOptions
//void* NSMapTable__mapTableWithKeyOptionsValueOptions(NSPointerFunctionsOptions keyOptions, NSPointerFunctionsOptions valueOptions) {
//  return [NSMapTable mapTableWithKeyOptions:keyOptions valueOptions:valueOptions];
//}
void* NSMapTable__mapTableWithStrongToStrongObjects() {
  return [NSMapTable mapTableWithStrongToStrongObjects];
}
void* NSMapTable__mapTableWithWeakToStrongObjects() {
  return [NSMapTable mapTableWithWeakToStrongObjects];
}
void* NSMapTable__mapTableWithStrongToWeakObjects() {
  return [NSMapTable mapTableWithStrongToWeakObjects];
}
void* NSMapTable__mapTableWithWeakToWeakObjects() {
  return [NSMapTable mapTableWithWeakToWeakObjects];
}
void* NSMapTable__strongToStrongObjectsMapTable() {
  return [NSMapTable strongToStrongObjectsMapTable];
}
void* NSMapTable__weakToStrongObjectsMapTable() {
  return [NSMapTable weakToStrongObjectsMapTable];
}
void* NSMapTable__strongToWeakObjectsMapTable() {
  return [NSMapTable strongToWeakObjectsMapTable];
}
void* NSMapTable__weakToWeakObjectsMapTable() {
  return [NSMapTable weakToWeakObjectsMapTable];
}

// NSMethodSignature


////NSNotification
void* NSNotification_name(void* goobj) {
  return [(NSNotification*)goobj name];
}
void* NSNotification_object(void* goobj) {
  return [(NSNotification*)goobj object];
}
void* NSNotification_userInfo(void* goobj) {
  return [(NSNotification*)goobj userInfo];
}
void* NSNotification_initWithNameObjectUserInfo(void* name, void* object, void* userInfo) {
  return [[NSNotification alloc] initWithName:(NSString*)name object:object userInfo:(NSDictionary*)userInfo];
}
void* NSNotification_init() {
  return [[NSNotification alloc] init];
}


////NSNotificationCenter
void* NSNotificationCenter_init() {
  return [[NSNotificationCenter alloc] init];
}
//REJECT: aSelector
//void NSNotificationCenter_addObserverSelectorNameObject(void* goobj, void* observer, SEL aSelector, void* aName, void* anObject) {
//  [(NSNotificationCenter*)goobj addObserver:observer selector:aSelector name:(NSString*)aName object:anObject];
//}
void NSNotificationCenter_postNotification(void* goobj, void* notification) {
  [(NSNotificationCenter*)goobj postNotification:(NSNotification*)notification];
}
void NSNotificationCenter_postNotificationNameObject(void* goobj, void* aName, void* anObject) {
  [(NSNotificationCenter*)goobj postNotificationName:(NSString*)aName object:anObject];
}
void NSNotificationCenter_postNotificationNameObjectUserInfo(void* goobj, void* aName, void* anObject, void* aUserInfo) {
  [(NSNotificationCenter*)goobj postNotificationName:(NSString*)aName object:anObject userInfo:(NSDictionary*)aUserInfo];
}
void NSNotificationCenter_removeObserver(void* goobj, void* observer) {
  [(NSNotificationCenter*)goobj removeObserver:observer];
}
void NSNotificationCenter_removeObserverNameObject(void* goobj, void* observer, void* aName, void* anObject) {
  [(NSNotificationCenter*)goobj removeObserver:observer name:(NSString*)aName object:anObject];
}
//REJECT: block
//void* NSNotificationCenter_addObserverForNameObjectQueueUsingBlock(void* goobj, void* name, void* obj, void* queue, *INVALID TYPE* block) {
//  return [(NSNotificationCenter*)goobj addObserverForName:(NSString*)name object:obj queue:(NSOperationQueue*)queue usingBlock:block];
//}
//REJECT: instancetype
//instancetype NSNotificationCenter__defaultCenter() {
//  return [NSNotificationCenter defaultCenter];
//}

////NSNotificationQueue
void* NSNotificationQueue_init() {
  return [[NSNotificationQueue alloc] init];
}
void* NSNotificationQueue_initWithNotificationCenter(void* notificationCenter) {
  return [[NSNotificationQueue alloc] initWithNotificationCenter:(NSNotificationCenter*)notificationCenter];
}
void NSNotificationQueue_enqueueNotificationPostingStyle(void* goobj, void* notification, NSPostingStyle postingStyle) {
  [(NSNotificationQueue*)goobj enqueueNotification:(NSNotification*)notification postingStyle:postingStyle];
}
void NSNotificationQueue_enqueueNotificationPostingStyleCoalesceMaskForModes(void* goobj, void* notification, NSPostingStyle postingStyle, uint coalesceMask, void* modes) {
  [(NSNotificationQueue*)goobj enqueueNotification:(NSNotification*)notification postingStyle:postingStyle coalesceMask:coalesceMask forModes:(NSArray*)modes];
}
void NSNotificationQueue_dequeueNotificationsMatchingCoalesceMask(void* goobj, void* notification, uint coalesceMask) {
  [(NSNotificationQueue*)goobj dequeueNotificationsMatching:(NSNotification*)notification coalesceMask:coalesceMask];
}
void* NSNotificationQueue__defaultQueue() {
  return [NSNotificationQueue defaultQueue];
}

////NSNull
void* NSNull_init() {
  return [[NSNull alloc] init];
}

void* NSNull__null() {
  return [NSNull null];
}

////NSNumberFormatter
void* NSNumberFormatter_init() {
  return [[NSNumberFormatter alloc] init];
}
//REJECT: rangep
//bool NSNumberFormatter_getObjectValueForStringRangeError(void* goobj, void* obj, void* string, NSRange rangep, void* error) {
//  return [(NSNumberFormatter*)goobj getObjectValue:obj forString:(NSString*)string range:rangep error:(NSError**)&error];
//}
void* NSNumberFormatter_stringFromNumber(void* goobj, void* number) {
  return [(NSNumberFormatter*)goobj stringFromNumber:(NSNumber*)number];
}
void* NSNumberFormatter_numberFromString(void* goobj, void* string) {
  return [(NSNumberFormatter*)goobj numberFromString:(NSString*)string];
}
NSNumberFormatterStyle NSNumberFormatter_numberStyle(void* goobj) {
  return [(NSNumberFormatter*)goobj numberStyle];
}
void NSNumberFormatter_setNumberStyle(void* goobj, NSNumberFormatterStyle style) {
  [(NSNumberFormatter*)goobj setNumberStyle:style];
}
//REJECT: NSLocale
//void* NSNumberFormatter_locale(void* goobj) {
//  return [(NSNumberFormatter*)goobj locale];
//}
//REJECT: locale
//void NSNumberFormatter_setLocale(void* goobj, void* locale) {
//  [(NSNumberFormatter*)goobj setLocale:(NSLocale*)locale];
//}
bool NSNumberFormatter_generatesDecimalNumbers(void* goobj) {
  return [(NSNumberFormatter*)goobj generatesDecimalNumbers];
}
void NSNumberFormatter_setGeneratesDecimalNumbers(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setGeneratesDecimalNumbers:b];
}
NSNumberFormatterBehavior NSNumberFormatter_formatterBehavior(void* goobj) {
  return [(NSNumberFormatter*)goobj formatterBehavior];
}
void NSNumberFormatter_setFormatterBehavior(void* goobj, NSNumberFormatterBehavior behavior) {
  [(NSNumberFormatter*)goobj setFormatterBehavior:behavior];
}
void* NSNumberFormatter_negativeFormat(void* goobj) {
  return [(NSNumberFormatter*)goobj negativeFormat];
}
void NSNumberFormatter_setNegativeFormat(void* goobj, void* format) {
  [(NSNumberFormatter*)goobj setNegativeFormat:(NSString*)format];
}
void* NSNumberFormatter_textAttributesForNegativeValues(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForNegativeValues];
}
void NSNumberFormatter_setTextAttributesForNegativeValues(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForNegativeValues:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_positiveFormat(void* goobj) {
  return [(NSNumberFormatter*)goobj positiveFormat];
}
void NSNumberFormatter_setPositiveFormat(void* goobj, void* format) {
  [(NSNumberFormatter*)goobj setPositiveFormat:(NSString*)format];
}
void* NSNumberFormatter_textAttributesForPositiveValues(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForPositiveValues];
}
void NSNumberFormatter_setTextAttributesForPositiveValues(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForPositiveValues:(NSDictionary*)newAttributes];
}
bool NSNumberFormatter_allowsFloats(void* goobj) {
  return [(NSNumberFormatter*)goobj allowsFloats];
}
void NSNumberFormatter_setAllowsFloats(void* goobj, bool flag) {
  [(NSNumberFormatter*)goobj setAllowsFloats:flag];
}
void* NSNumberFormatter_decimalSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj decimalSeparator];
}
void NSNumberFormatter_setDecimalSeparator(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setDecimalSeparator:(NSString*)string];
}
bool NSNumberFormatter_alwaysShowsDecimalSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj alwaysShowsDecimalSeparator];
}
void NSNumberFormatter_setAlwaysShowsDecimalSeparator(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setAlwaysShowsDecimalSeparator:b];
}
void* NSNumberFormatter_currencyDecimalSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj currencyDecimalSeparator];
}
void NSNumberFormatter_setCurrencyDecimalSeparator(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setCurrencyDecimalSeparator:(NSString*)string];
}
bool NSNumberFormatter_usesGroupingSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj usesGroupingSeparator];
}
void NSNumberFormatter_setUsesGroupingSeparator(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setUsesGroupingSeparator:b];
}
void* NSNumberFormatter_groupingSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj groupingSeparator];
}
void NSNumberFormatter_setGroupingSeparator(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setGroupingSeparator:(NSString*)string];
}
void* NSNumberFormatter_zeroSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj zeroSymbol];
}
void NSNumberFormatter_setZeroSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setZeroSymbol:(NSString*)string];
}
void* NSNumberFormatter_textAttributesForZero(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForZero];
}
void NSNumberFormatter_setTextAttributesForZero(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForZero:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_nilSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj nilSymbol];
}
void NSNumberFormatter_setNilSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setNilSymbol:(NSString*)string];
}
void* NSNumberFormatter_textAttributesForNil(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForNil];
}
void NSNumberFormatter_setTextAttributesForNil(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForNil:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_notANumberSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj notANumberSymbol];
}
void NSNumberFormatter_setNotANumberSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setNotANumberSymbol:(NSString*)string];
}
void* NSNumberFormatter_textAttributesForNotANumber(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForNotANumber];
}
void NSNumberFormatter_setTextAttributesForNotANumber(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForNotANumber:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_positiveInfinitySymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj positiveInfinitySymbol];
}
void NSNumberFormatter_setPositiveInfinitySymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPositiveInfinitySymbol:(NSString*)string];
}
void* NSNumberFormatter_textAttributesForPositiveInfinity(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForPositiveInfinity];
}
void NSNumberFormatter_setTextAttributesForPositiveInfinity(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForPositiveInfinity:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_negativeInfinitySymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj negativeInfinitySymbol];
}
void NSNumberFormatter_setNegativeInfinitySymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setNegativeInfinitySymbol:(NSString*)string];
}
void* NSNumberFormatter_textAttributesForNegativeInfinity(void* goobj) {
  return [(NSNumberFormatter*)goobj textAttributesForNegativeInfinity];
}
void NSNumberFormatter_setTextAttributesForNegativeInfinity(void* goobj, void* newAttributes) {
  [(NSNumberFormatter*)goobj setTextAttributesForNegativeInfinity:(NSDictionary*)newAttributes];
}
void* NSNumberFormatter_positivePrefix(void* goobj) {
  return [(NSNumberFormatter*)goobj positivePrefix];
}
void NSNumberFormatter_setPositivePrefix(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPositivePrefix:(NSString*)string];
}
void* NSNumberFormatter_positiveSuffix(void* goobj) {
  return [(NSNumberFormatter*)goobj positiveSuffix];
}
void NSNumberFormatter_setPositiveSuffix(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPositiveSuffix:(NSString*)string];
}
void* NSNumberFormatter_negativePrefix(void* goobj) {
  return [(NSNumberFormatter*)goobj negativePrefix];
}
void NSNumberFormatter_setNegativePrefix(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setNegativePrefix:(NSString*)string];
}
void* NSNumberFormatter_negativeSuffix(void* goobj) {
  return [(NSNumberFormatter*)goobj negativeSuffix];
}
void NSNumberFormatter_setNegativeSuffix(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setNegativeSuffix:(NSString*)string];
}
void* NSNumberFormatter_currencyCode(void* goobj) {
  return [(NSNumberFormatter*)goobj currencyCode];
}
void NSNumberFormatter_setCurrencyCode(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setCurrencyCode:(NSString*)string];
}
void* NSNumberFormatter_currencySymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj currencySymbol];
}
void NSNumberFormatter_setCurrencySymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setCurrencySymbol:(NSString*)string];
}
void* NSNumberFormatter_internationalCurrencySymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj internationalCurrencySymbol];
}
void NSNumberFormatter_setInternationalCurrencySymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setInternationalCurrencySymbol:(NSString*)string];
}
void* NSNumberFormatter_percentSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj percentSymbol];
}
void NSNumberFormatter_setPercentSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPercentSymbol:(NSString*)string];
}
void* NSNumberFormatter_perMillSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj perMillSymbol];
}
void NSNumberFormatter_setPerMillSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPerMillSymbol:(NSString*)string];
}
void* NSNumberFormatter_minusSign(void* goobj) {
  return [(NSNumberFormatter*)goobj minusSign];
}
void NSNumberFormatter_setMinusSign(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setMinusSign:(NSString*)string];
}
void* NSNumberFormatter_plusSign(void* goobj) {
  return [(NSNumberFormatter*)goobj plusSign];
}
void NSNumberFormatter_setPlusSign(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPlusSign:(NSString*)string];
}
void* NSNumberFormatter_exponentSymbol(void* goobj) {
  return [(NSNumberFormatter*)goobj exponentSymbol];
}
void NSNumberFormatter_setExponentSymbol(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setExponentSymbol:(NSString*)string];
}
uint NSNumberFormatter_groupingSize(void* goobj) {
  return [(NSNumberFormatter*)goobj groupingSize];
}
void NSNumberFormatter_setGroupingSize(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setGroupingSize:number];
}
uint NSNumberFormatter_secondaryGroupingSize(void* goobj) {
  return [(NSNumberFormatter*)goobj secondaryGroupingSize];
}
void NSNumberFormatter_setSecondaryGroupingSize(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setSecondaryGroupingSize:number];
}
void* NSNumberFormatter_multiplier(void* goobj) {
  return [(NSNumberFormatter*)goobj multiplier];
}
void NSNumberFormatter_setMultiplier(void* goobj, void* number) {
  [(NSNumberFormatter*)goobj setMultiplier:(NSNumber*)number];
}
uint NSNumberFormatter_formatWidth(void* goobj) {
  return [(NSNumberFormatter*)goobj formatWidth];
}
void NSNumberFormatter_setFormatWidth(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setFormatWidth:number];
}
void* NSNumberFormatter_paddingCharacter(void* goobj) {
  return [(NSNumberFormatter*)goobj paddingCharacter];
}
void NSNumberFormatter_setPaddingCharacter(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setPaddingCharacter:(NSString*)string];
}
NSNumberFormatterPadPosition NSNumberFormatter_paddingPosition(void* goobj) {
  return [(NSNumberFormatter*)goobj paddingPosition];
}
void NSNumberFormatter_setPaddingPosition(void* goobj, NSNumberFormatterPadPosition position) {
  [(NSNumberFormatter*)goobj setPaddingPosition:position];
}
NSNumberFormatterRoundingMode NSNumberFormatter_roundingMode(void* goobj) {
  return [(NSNumberFormatter*)goobj roundingMode];
}
void NSNumberFormatter_setRoundingMode(void* goobj, NSNumberFormatterRoundingMode mode) {
  [(NSNumberFormatter*)goobj setRoundingMode:mode];
}
void* NSNumberFormatter_roundingIncrement(void* goobj) {
  return [(NSNumberFormatter*)goobj roundingIncrement];
}
void NSNumberFormatter_setRoundingIncrement(void* goobj, void* number) {
  [(NSNumberFormatter*)goobj setRoundingIncrement:(NSNumber*)number];
}
uint NSNumberFormatter_minimumIntegerDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj minimumIntegerDigits];
}
void NSNumberFormatter_setMinimumIntegerDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMinimumIntegerDigits:number];
}
uint NSNumberFormatter_maximumIntegerDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj maximumIntegerDigits];
}
void NSNumberFormatter_setMaximumIntegerDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMaximumIntegerDigits:number];
}
uint NSNumberFormatter_minimumFractionDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj minimumFractionDigits];
}
void NSNumberFormatter_setMinimumFractionDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMinimumFractionDigits:number];
}
uint NSNumberFormatter_maximumFractionDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj maximumFractionDigits];
}
void NSNumberFormatter_setMaximumFractionDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMaximumFractionDigits:number];
}
void* NSNumberFormatter_minimum(void* goobj) {
  return [(NSNumberFormatter*)goobj minimum];
}
void NSNumberFormatter_setMinimum(void* goobj, void* number) {
  [(NSNumberFormatter*)goobj setMinimum:(NSNumber*)number];
}
void* NSNumberFormatter_maximum(void* goobj) {
  return [(NSNumberFormatter*)goobj maximum];
}
void NSNumberFormatter_setMaximum(void* goobj, void* number) {
  [(NSNumberFormatter*)goobj setMaximum:(NSNumber*)number];
}
void* NSNumberFormatter_currencyGroupingSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj currencyGroupingSeparator];
}
void NSNumberFormatter_setCurrencyGroupingSeparator(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setCurrencyGroupingSeparator:(NSString*)string];
}
bool NSNumberFormatter_isLenient(void* goobj) {
  return [(NSNumberFormatter*)goobj isLenient];
}
void NSNumberFormatter_setLenient(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setLenient:b];
}
bool NSNumberFormatter_usesSignificantDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj usesSignificantDigits];
}
void NSNumberFormatter_setUsesSignificantDigits(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setUsesSignificantDigits:b];
}
uint NSNumberFormatter_minimumSignificantDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj minimumSignificantDigits];
}
void NSNumberFormatter_setMinimumSignificantDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMinimumSignificantDigits:number];
}
uint NSNumberFormatter_maximumSignificantDigits(void* goobj) {
  return [(NSNumberFormatter*)goobj maximumSignificantDigits];
}
void NSNumberFormatter_setMaximumSignificantDigits(void* goobj, uint number) {
  [(NSNumberFormatter*)goobj setMaximumSignificantDigits:number];
}
bool NSNumberFormatter_isPartialStringValidationEnabled(void* goobj) {
  return [(NSNumberFormatter*)goobj isPartialStringValidationEnabled];
}
void NSNumberFormatter_setPartialStringValidationEnabled(void* goobj, bool b) {
  [(NSNumberFormatter*)goobj setPartialStringValidationEnabled:b];
}
bool NSNumberFormatter_hasThousandSeparators(void* goobj) {
  return [(NSNumberFormatter*)goobj hasThousandSeparators];
}
void NSNumberFormatter_setHasThousandSeparators(void* goobj, bool flag) {
  [(NSNumberFormatter*)goobj setHasThousandSeparators:flag];
}
void* NSNumberFormatter_thousandSeparator(void* goobj) {
  return [(NSNumberFormatter*)goobj thousandSeparator];
}
void NSNumberFormatter_setThousandSeparator(void* goobj, void* newSeparator) {
  [(NSNumberFormatter*)goobj setThousandSeparator:(NSString*)newSeparator];
}
bool NSNumberFormatter_localizesFormat(void* goobj) {
  return [(NSNumberFormatter*)goobj localizesFormat];
}
void NSNumberFormatter_setLocalizesFormat(void* goobj, bool flag) {
  [(NSNumberFormatter*)goobj setLocalizesFormat:flag];
}
void* NSNumberFormatter_format(void* goobj) {
  return [(NSNumberFormatter*)goobj format];
}
void NSNumberFormatter_setFormat(void* goobj, void* string) {
  [(NSNumberFormatter*)goobj setFormat:(NSString*)string];
}
void* NSNumberFormatter_attributedStringForZero(void* goobj) {
  return [(NSNumberFormatter*)goobj attributedStringForZero];
}
void NSNumberFormatter_setAttributedStringForZero(void* goobj, void* newAttributedString) {
  [(NSNumberFormatter*)goobj setAttributedStringForZero:(NSAttributedString*)newAttributedString];
}
void* NSNumberFormatter_attributedStringForNil(void* goobj) {
  return [(NSNumberFormatter*)goobj attributedStringForNil];
}
void NSNumberFormatter_setAttributedStringForNil(void* goobj, void* newAttributedString) {
  [(NSNumberFormatter*)goobj setAttributedStringForNil:(NSAttributedString*)newAttributedString];
}
void* NSNumberFormatter_attributedStringForNotANumber(void* goobj) {
  return [(NSNumberFormatter*)goobj attributedStringForNotANumber];
}
void NSNumberFormatter_setAttributedStringForNotANumber(void* goobj, void* newAttributedString) {
  [(NSNumberFormatter*)goobj setAttributedStringForNotANumber:(NSAttributedString*)newAttributedString];
}
void* NSNumberFormatter_roundingBehavior(void* goobj) {
  return [(NSNumberFormatter*)goobj roundingBehavior];
}
void NSNumberFormatter_setRoundingBehavior(void* goobj, void* newRoundingBehavior) {
  [(NSNumberFormatter*)goobj setRoundingBehavior:(NSDecimalNumberHandler*)newRoundingBehavior];
}
void* NSNumberFormatter__localizedStringFromNumberNumberStyle(void* num, NSNumberFormatterStyle nstyle) {
  return [NSNumberFormatter localizedStringFromNumber:(NSNumber*)num numberStyle:nstyle];
}
NSNumberFormatterBehavior NSNumberFormatter__defaultFormatterBehavior() {
  return [NSNumberFormatter defaultFormatterBehavior];
}
void NSNumberFormatter__setDefaultFormatterBehavior(NSNumberFormatterBehavior behavior) {
  [NSNumberFormatter setDefaultFormatterBehavior:behavior];
}

////NSOperation
void* NSOperation_init() {
  return [[NSOperation alloc] init];
}
void NSOperation_start(void* goobj) {
  [(NSOperation*)goobj start];
}
void NSOperation_main(void* goobj) {
  [(NSOperation*)goobj main];
}
bool NSOperation_isCancelled(void* goobj) {
  return [(NSOperation*)goobj isCancelled];
}
void NSOperation_cancel(void* goobj) {
  [(NSOperation*)goobj cancel];
}
bool NSOperation_isExecuting(void* goobj) {
  return [(NSOperation*)goobj isExecuting];
}
bool NSOperation_isFinished(void* goobj) {
  return [(NSOperation*)goobj isFinished];
}
bool NSOperation_isConcurrent(void* goobj) {
  return [(NSOperation*)goobj isConcurrent];
}
bool NSOperation_isReady(void* goobj) {
  return [(NSOperation*)goobj isReady];
}
void NSOperation_addDependency(void* goobj, void* op) {
  [(NSOperation*)goobj addDependency:(NSOperation*)op];
}
void NSOperation_removeDependency(void* goobj, void* op) {
  [(NSOperation*)goobj removeDependency:(NSOperation*)op];
}
void* NSOperation_dependencies(void* goobj) {
  return [(NSOperation*)goobj dependencies];
}
NSOperationQueuePriority NSOperation_queuePriority(void* goobj) {
  return [(NSOperation*)goobj queuePriority];
}
void NSOperation_setQueuePriority(void* goobj, NSOperationQueuePriority p) {
  [(NSOperation*)goobj setQueuePriority:p];
}
void NSOperation_completionBlock(void* goobj) {
  [(NSOperation*)goobj completionBlock];
}
//REJECT: block
//void NSOperation_setCompletionBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSOperation*)goobj setCompletionBlock:block];
//}
void NSOperation_waitUntilFinished(void* goobj) {
  [(NSOperation*)goobj waitUntilFinished];
}
double NSOperation_threadPriority(void* goobj) {
  return [(NSOperation*)goobj threadPriority];
}
void NSOperation_setThreadPriority(void* goobj, double p) {
  [(NSOperation*)goobj setThreadPriority:p];
}


////NSBlockOperation
void* NSBlockOperation_init() {
  return [[NSBlockOperation alloc] init];
}
//REJECT: block
//void NSBlockOperation_addExecutionBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSBlockOperation*)goobj addExecutionBlock:block];
//}
void* NSBlockOperation_executionBlocks(void* goobj) {
  return [(NSBlockOperation*)goobj executionBlocks];
}
//REJECT: block
//void* NSBlockOperation__blockOperationWithBlock(*INVALID TYPE* block) {
//  return [NSBlockOperation blockOperationWithBlock:block];
//}

////NSInvocationOperation
void* NSInvocationOperation_init() {
  return [[NSInvocationOperation alloc] init];
}
//REJECT: sel
//void* NSInvocationOperation_initWithTargetSelectorObject(void* target, SEL sel, void* arg) {
//  return [[NSInvocationOperation alloc] initWithTarget:target selector:sel object:arg];
//}
//REJECT: inv
//void* NSInvocationOperation_initWithInvocation(void* inv) {
//  return [[NSInvocationOperation alloc] initWithInvocation:(NSInvocation*)inv];
//}
//REJECT: NSInvocation
//void* NSInvocationOperation_invocation(void* goobj) {
//  return [(NSInvocationOperation*)goobj invocation];
//}
void* NSInvocationOperation_result(void* goobj) {
  return [(NSInvocationOperation*)goobj result];
}


////NSOperationQueue
void* NSOperationQueue_init() {
  return [[NSOperationQueue alloc] init];
}
void NSOperationQueue_addOperation(void* goobj, void* op) {
  [(NSOperationQueue*)goobj addOperation:(NSOperation*)op];
}
void NSOperationQueue_addOperationsWaitUntilFinished(void* goobj, void* ops, bool wait) {
  [(NSOperationQueue*)goobj addOperations:(NSArray*)ops waitUntilFinished:wait];
}
//REJECT: block
//void NSOperationQueue_addOperationWithBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSOperationQueue*)goobj addOperationWithBlock:block];
//}
void* NSOperationQueue_operations(void* goobj) {
  return [(NSOperationQueue*)goobj operations];
}
uint NSOperationQueue_operationCount(void* goobj) {
  return [(NSOperationQueue*)goobj operationCount];
}
//REJECT: NSInteger
//NSInteger NSOperationQueue_maxConcurrentOperationCount(void* goobj) {
//  return [(NSOperationQueue*)goobj maxConcurrentOperationCount];
//}
//REJECT: cnt
//void NSOperationQueue_setMaxConcurrentOperationCount(void* goobj, NSInteger cnt) {
//  [(NSOperationQueue*)goobj setMaxConcurrentOperationCount:cnt];
//}
void NSOperationQueue_setSuspended(void* goobj, bool b) {
  [(NSOperationQueue*)goobj setSuspended:b];
}
bool NSOperationQueue_isSuspended(void* goobj) {
  return [(NSOperationQueue*)goobj isSuspended];
}
void NSOperationQueue_setName(void* goobj, void* n) {
  [(NSOperationQueue*)goobj setName:(NSString*)n];
}
void* NSOperationQueue_name(void* goobj) {
  return [(NSOperationQueue*)goobj name];
}
void NSOperationQueue_cancelAllOperations(void* goobj) {
  [(NSOperationQueue*)goobj cancelAllOperations];
}
void NSOperationQueue_waitUntilAllOperationsAreFinished(void* goobj) {
  [(NSOperationQueue*)goobj waitUntilAllOperationsAreFinished];
}
void* NSOperationQueue__currentQueue() {
  return [NSOperationQueue currentQueue];
}
void* NSOperationQueue__mainQueue() {
  return [NSOperationQueue mainQueue];
}

////NSOrthography
void* NSOrthography_init() {
  return [[NSOrthography alloc] init];
}
void* NSOrthography_dominantScript(void* goobj) {
  return [(NSOrthography*)goobj dominantScript];
}
void* NSOrthography_languageMap(void* goobj) {
  return [(NSOrthography*)goobj languageMap];
}
void* NSOrthography_languagesForScript(void* goobj, void* script) {
  return [(NSOrthography*)goobj languagesForScript:(NSString*)script];
}
void* NSOrthography_dominantLanguageForScript(void* goobj, void* script) {
  return [(NSOrthography*)goobj dominantLanguageForScript:(NSString*)script];
}
void* NSOrthography_dominantLanguage(void* goobj) {
  return [(NSOrthography*)goobj dominantLanguage];
}
void* NSOrthography_allScripts(void* goobj) {
  return [(NSOrthography*)goobj allScripts];
}
void* NSOrthography_allLanguages(void* goobj) {
  return [(NSOrthography*)goobj allLanguages];
}
void* NSOrthography_initWithDominantScriptLanguageMap(void* script, void* map) {
  return [[NSOrthography alloc] initWithDominantScript:(NSString*)script languageMap:(NSDictionary*)map];
}


////NSPointerArray
void* NSPointerArray_init() {
  return [[NSPointerArray alloc] init];
}
//REJECT: options
//void* NSPointerArray_initWithOptions(NSPointerFunctionsOptions options) {
//  return [[NSPointerArray alloc] initWithOptions:options];
//}
void* NSPointerArray_initWithPointerFunctions(void* functions) {
  return [[NSPointerArray alloc] initWithPointerFunctions:(NSPointerFunctions*)functions];
}
void* NSPointerArray_pointerFunctions(void* goobj) {
  return [(NSPointerArray*)goobj pointerFunctions];
}
void* NSPointerArray_pointerAtIndex(void* goobj, uint index) {
  return [(NSPointerArray*)goobj pointerAtIndex:index];
}
void NSPointerArray_addPointer(void* goobj, void* pointer) {
  [(NSPointerArray*)goobj addPointer:pointer];
}
void NSPointerArray_removePointerAtIndex(void* goobj, uint index) {
  [(NSPointerArray*)goobj removePointerAtIndex:index];
}
void NSPointerArray_insertPointerAtIndex(void* goobj, void* item, uint index) {
  [(NSPointerArray*)goobj insertPointer:item atIndex:index];
}
void NSPointerArray_replacePointerAtIndexWithPointer(void* goobj, uint index, void* item) {
  [(NSPointerArray*)goobj replacePointerAtIndex:index withPointer:item];
}
void NSPointerArray_compact(void* goobj) {
  [(NSPointerArray*)goobj compact];
}
uint NSPointerArray_count(void* goobj) {
  return [(NSPointerArray*)goobj count];
}
void NSPointerArray_setCount(void* goobj, uint count) {
  [(NSPointerArray*)goobj setCount:count];
}
void* NSPointerArray_allObjects(void* goobj) {
  return [(NSPointerArray*)goobj allObjects];
}
//REJECT: options
//void NSPointerArray__pointerArrayWithOptions(NSPointerFunctionsOptions options) {
//  [NSPointerArray pointerArrayWithOptions:options];
//}
void NSPointerArray__pointerArrayWithPointerFunctions(void* functions) {
  [NSPointerArray pointerArrayWithPointerFunctions:(NSPointerFunctions*)functions];
}

////NSPort
void* NSPort_init() {
  return [[NSPort alloc] init];
}
void NSPort_invalidate(void* goobj) {
  [(NSPort*)goobj invalidate];
}
bool NSPort_isValid(void* goobj) {
  return [(NSPort*)goobj isValid];
}
void NSPort_setDelegate(void* goobj, void* anObject) {
  [(NSPort*)goobj setDelegate:anObject];
}
void* NSPort_delegate(void* goobj) {
  return [(NSPort*)goobj delegate];
}
void NSPort_scheduleInRunLoopForMode(void* goobj, void* runLoop, void* mode) {
  [(NSPort*)goobj scheduleInRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
void NSPort_removeFromRunLoopForMode(void* goobj, void* runLoop, void* mode) {
  [(NSPort*)goobj removeFromRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
uint NSPort_reservedSpaceLength(void* goobj) {
  return [(NSPort*)goobj reservedSpaceLength];
}
bool NSPort_sendBeforeDateComponentsFromReserved(void* goobj, void* limitDate, void* components, void* receivePort, uint headerSpaceReserved) {
  return [(NSPort*)goobj sendBeforeDate:(NSDate*)limitDate components:(NSMutableArray*)components from:(NSPort*)receivePort reserved:headerSpaceReserved];
}
bool NSPort_sendBeforeDateMsgidComponentsFromReserved(void* goobj, void* limitDate, uint msgID, void* components, void* receivePort, uint headerSpaceReserved) {
  return [(NSPort*)goobj sendBeforeDate:(NSDate*)limitDate msgid:msgID components:(NSMutableArray*)components from:(NSPort*)receivePort reserved:headerSpaceReserved];
}
void NSPort_addConnectionToRunLoopForMode(void* goobj, void* conn, void* runLoop, void* mode) {
  [(NSPort*)goobj addConnection:(NSConnection*)conn toRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
void NSPort_removeConnectionFromRunLoopForMode(void* goobj, void* conn, void* runLoop, void* mode) {
  [(NSPort*)goobj removeConnection:(NSConnection*)conn fromRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
void* NSPort__port() {
  return [NSPort port];
}

////NSMachPort
void* NSMachPort_init() {
  return [[NSMachPort alloc] init];
}
void* NSMachPort_initWithMachPort(uint32_t machPort) {
  return [[NSMachPort alloc] initWithMachPort:machPort];
}
void NSMachPort_setDelegate(void* goobj, void* anObject) {
  [(NSMachPort*)goobj setDelegate:anObject];
}
void* NSMachPort_delegate(void* goobj) {
  return [(NSMachPort*)goobj delegate];
}
void* NSMachPort_initWithMachPortOptions(uint32_t machPort, uint f) {
  return [[NSMachPort alloc] initWithMachPort:machPort options:f];
}
uint32_t NSMachPort_machPort(void* goobj) {
  return [(NSMachPort*)goobj machPort];
}
void NSMachPort_scheduleInRunLoopForMode(void* goobj, void* runLoop, void* mode) {
  [(NSMachPort*)goobj scheduleInRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
void NSMachPort_removeFromRunLoopForMode(void* goobj, void* runLoop, void* mode) {
  [(NSMachPort*)goobj removeFromRunLoop:(NSRunLoop*)runLoop forMode:(NSString*)mode];
}
void* NSMachPort__portWithMachPort(uint32_t machPort) {
  return [NSMachPort portWithMachPort:machPort];
}
void* NSMachPort__portWithMachPortOptions(uint32_t machPort, uint f) {
  return [NSMachPort portWithMachPort:machPort options:f];
}

////NSMessagePort
void* NSMessagePort_init() {
  return [[NSMessagePort alloc] init];
}



////NSSocketPort
void* NSSocketPort_init() {
  return [[NSSocketPort alloc] init];
}
void* NSSocketPort_initWithTCPPort(unsigned short port) {
  return [[NSSocketPort alloc] initWithTCPPort:port];
}
void* NSSocketPort_initWithProtocolFamilySocketTypeProtocolAddress(int family, int type, int protocol, void* address) {
  return [[NSSocketPort alloc] initWithProtocolFamily:family socketType:type protocol:protocol address:(NSData*)address];
}
void* NSSocketPort_initWithProtocolFamilySocketTypeProtocolSocket(int family, int type, int protocol, NSSocketNativeHandle sock) {
  return [[NSSocketPort alloc] initWithProtocolFamily:family socketType:type protocol:protocol socket:sock];
}
void* NSSocketPort_initRemoteWithTCPPortHost(void* goobj, unsigned short port, void* hostName) {
  return [(NSSocketPort*)goobj initRemoteWithTCPPort:port host:(NSString*)hostName];
}
void* NSSocketPort_initRemoteWithProtocolFamilySocketTypeProtocolAddress(void* goobj, int family, int type, int protocol, void* address) {
  return [(NSSocketPort*)goobj initRemoteWithProtocolFamily:family socketType:type protocol:protocol address:(NSData*)address];
}
int NSSocketPort_protocolFamily(void* goobj) {
  return [(NSSocketPort*)goobj protocolFamily];
}
int NSSocketPort_socketType(void* goobj) {
  return [(NSSocketPort*)goobj socketType];
}
int NSSocketPort_protocol(void* goobj) {
  return [(NSSocketPort*)goobj protocol];
}
void* NSSocketPort_address(void* goobj) {
  return [(NSSocketPort*)goobj address];
}
NSSocketNativeHandle NSSocketPort_socket(void* goobj) {
  return [(NSSocketPort*)goobj socket];
}


////NSProcessInfo
void* NSProcessInfo_init() {
  return [[NSProcessInfo alloc] init];
}
void* NSProcessInfo_environment(void* goobj) {
  return [(NSProcessInfo*)goobj environment];
}
void* NSProcessInfo_arguments(void* goobj) {
  return [(NSProcessInfo*)goobj arguments];
}
void* NSProcessInfo_hostName(void* goobj) {
  return [(NSProcessInfo*)goobj hostName];
}
void* NSProcessInfo_processName(void* goobj) {
  return [(NSProcessInfo*)goobj processName];
}
int NSProcessInfo_processIdentifier(void* goobj) {
  return [(NSProcessInfo*)goobj processIdentifier];
}
void NSProcessInfo_setProcessName(void* goobj, void* newName) {
  [(NSProcessInfo*)goobj setProcessName:(NSString*)newName];
}
void* NSProcessInfo_globallyUniqueString(void* goobj) {
  return [(NSProcessInfo*)goobj globallyUniqueString];
}
uint NSProcessInfo_operatingSystem(void* goobj) {
  return [(NSProcessInfo*)goobj operatingSystem];
}
void* NSProcessInfo_operatingSystemName(void* goobj) {
  return [(NSProcessInfo*)goobj operatingSystemName];
}
void* NSProcessInfo_operatingSystemVersionString(void* goobj) {
  return [(NSProcessInfo*)goobj operatingSystemVersionString];
}
uint NSProcessInfo_processorCount(void* goobj) {
  return [(NSProcessInfo*)goobj processorCount];
}
uint NSProcessInfo_activeProcessorCount(void* goobj) {
  return [(NSProcessInfo*)goobj activeProcessorCount];
}
unsigned long long NSProcessInfo_physicalMemory(void* goobj) {
  return [(NSProcessInfo*)goobj physicalMemory];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSProcessInfo_systemUptime(void* goobj) {
//  return [(NSProcessInfo*)goobj systemUptime];
//}
void NSProcessInfo_disableSuddenTermination(void* goobj) {
  [(NSProcessInfo*)goobj disableSuddenTermination];
}
void NSProcessInfo_enableSuddenTermination(void* goobj) {
  [(NSProcessInfo*)goobj enableSuddenTermination];
}
void NSProcessInfo_disableAutomaticTermination(void* goobj, void* reason) {
  [(NSProcessInfo*)goobj disableAutomaticTermination:(NSString*)reason];
}
void NSProcessInfo_enableAutomaticTermination(void* goobj, void* reason) {
  [(NSProcessInfo*)goobj enableAutomaticTermination:(NSString*)reason];
}
void NSProcessInfo_setAutomaticTerminationSupportEnabled(void* goobj, bool flag) {
  [(NSProcessInfo*)goobj setAutomaticTerminationSupportEnabled:flag];
}
bool NSProcessInfo_automaticTerminationSupportEnabled(void* goobj) {
  return [(NSProcessInfo*)goobj automaticTerminationSupportEnabled];
}
void* NSProcessInfo_beginActivityWithOptionsReason(void* goobj, NSActivityOptions options, void* reason) {
  return [(NSProcessInfo*)goobj beginActivityWithOptions:options reason:(NSString*)reason];
}
void NSProcessInfo_endActivity(void* goobj, void* activity) {
  [(NSProcessInfo*)goobj endActivity:activity];
}
//REJECT: block
//void NSProcessInfo_performActivityWithOptionsReasonUsingBlock(void* goobj, NSActivityOptions options, void* reason, *INVALID TYPE* block) {
//  [(NSProcessInfo*)goobj performActivityWithOptions:options reason:(NSString*)reason usingBlock:block];
//}
void* NSProcessInfo__processInfo() {
  return [NSProcessInfo processInfo];
}

// NSProxy


////NSTextCheckingResult
void* NSTextCheckingResult_init() {
  return [[NSTextCheckingResult alloc] init];
}
NSTextCheckingType NSTextCheckingResult_resultType(void* goobj) {
  return [(NSTextCheckingResult*)goobj resultType];
}
//REJECT: NSRange
//NSRange NSTextCheckingResult_range(void* goobj) {
//  return [(NSTextCheckingResult*)goobj range];
//}
//REJECT: NSRange
//NSRange NSTextCheckingResult_rangeAtIndex(void* goobj, uint idx) {
//  return [(NSTextCheckingResult*)goobj rangeAtIndex:idx];
//}
//REJECT: offset
//void* NSTextCheckingResult_resultByAdjustingRangesWithOffset(void* goobj, NSInteger offset) {
//  return [(NSTextCheckingResult*)goobj resultByAdjustingRangesWithOffset:offset];
//}
void* NSTextCheckingResult_orthography(void* goobj) {
  return [(NSTextCheckingResult*)goobj orthography];
}
void* NSTextCheckingResult_grammarDetails(void* goobj) {
  return [(NSTextCheckingResult*)goobj grammarDetails];
}
void* NSTextCheckingResult_date(void* goobj) {
  return [(NSTextCheckingResult*)goobj date];
}
void* NSTextCheckingResult_timeZone(void* goobj) {
  return [(NSTextCheckingResult*)goobj timeZone];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSTextCheckingResult_duration(void* goobj) {
//  return [(NSTextCheckingResult*)goobj duration];
//}
void* NSTextCheckingResult_components(void* goobj) {
  return [(NSTextCheckingResult*)goobj components];
}
void* NSTextCheckingResult_URL(void* goobj) {
  return [(NSTextCheckingResult*)goobj URL];
}
void* NSTextCheckingResult_replacementString(void* goobj) {
  return [(NSTextCheckingResult*)goobj replacementString];
}
void* NSTextCheckingResult_alternativeStrings(void* goobj) {
  return [(NSTextCheckingResult*)goobj alternativeStrings];
}
void* NSTextCheckingResult_regularExpression(void* goobj) {
  return [(NSTextCheckingResult*)goobj regularExpression];
}
void* NSTextCheckingResult_phoneNumber(void* goobj) {
  return [(NSTextCheckingResult*)goobj phoneNumber];
}
void* NSTextCheckingResult_addressComponents(void* goobj) {
  return [(NSTextCheckingResult*)goobj addressComponents];
}
uint NSTextCheckingResult_numberOfRanges(void* goobj) {
  return [(NSTextCheckingResult*)goobj numberOfRanges];
}


////NSRegularExpression
void* NSRegularExpression_init() {
  return [[NSRegularExpression alloc] init];
}
void* NSRegularExpression_initWithPatternOptionsError(void* pattern, NSRegularExpressionOptions options, void* error) {
  return [[NSRegularExpression alloc] initWithPattern:(NSString*)pattern options:options error:(NSError**)&error];
}
void* NSRegularExpression_pattern(void* goobj) {
  return [(NSRegularExpression*)goobj pattern];
}
NSRegularExpressionOptions NSRegularExpression_options(void* goobj) {
  return [(NSRegularExpression*)goobj options];
}
uint NSRegularExpression_numberOfCaptureGroups(void* goobj) {
  return [(NSRegularExpression*)goobj numberOfCaptureGroups];
}
//REJECT: range block
//void NSRegularExpression_enumerateMatchesInStringOptionsRangeUsingBlock(void* goobj, void* string, NSMatchingOptions options, NSRange range, *INVALID TYPE* block) {
//  [(NSRegularExpression*)goobj enumerateMatchesInString:(NSString*)string options:options range:range usingBlock:block];
//}
//REJECT: range
//void* NSRegularExpression_matchesInStringOptionsRange(void* goobj, void* string, NSMatchingOptions options, NSRange range) {
//  return [(NSRegularExpression*)goobj matchesInString:(NSString*)string options:options range:range];
//}
//REJECT: range
//uint NSRegularExpression_numberOfMatchesInStringOptionsRange(void* goobj, void* string, NSMatchingOptions options, NSRange range) {
//  return [(NSRegularExpression*)goobj numberOfMatchesInString:(NSString*)string options:options range:range];
//}
//REJECT: range
//void* NSRegularExpression_firstMatchInStringOptionsRange(void* goobj, void* string, NSMatchingOptions options, NSRange range) {
//  return [(NSRegularExpression*)goobj firstMatchInString:(NSString*)string options:options range:range];
//}
//REJECT: NSRange range
//NSRange NSRegularExpression_rangeOfFirstMatchInStringOptionsRange(void* goobj, void* string, NSMatchingOptions options, NSRange range) {
//  return [(NSRegularExpression*)goobj rangeOfFirstMatchInString:(NSString*)string options:options range:range];
//}
//REJECT: range
//void* NSRegularExpression_stringByReplacingMatchesInStringOptionsRangeWithTemplate(void* goobj, void* string, NSMatchingOptions options, NSRange range, void* templ) {
//  return [(NSRegularExpression*)goobj stringByReplacingMatchesInString:(NSString*)string options:options range:range withTemplate:(NSString*)templ];
//}
//REJECT: range
//uint NSRegularExpression_replaceMatchesInStringOptionsRangeWithTemplate(void* goobj, void* string, NSMatchingOptions options, NSRange range, void* templ) {
//  return [(NSRegularExpression*)goobj replaceMatchesInString:(NSMutableString*)string options:options range:range withTemplate:(NSString*)templ];
//}
//REJECT: offset
//void* NSRegularExpression_replacementStringForResultInStringOffsetTemplate(void* goobj, void* result, void* string, NSInteger offset, void* templ) {
//  return [(NSRegularExpression*)goobj replacementStringForResult:(NSTextCheckingResult*)result inString:(NSString*)string offset:offset template:(NSString*)templ];
//}
void* NSRegularExpression__regularExpressionWithPatternOptionsError(void* pattern, NSRegularExpressionOptions options, void* error) {
  return [NSRegularExpression regularExpressionWithPattern:(NSString*)pattern options:options error:(NSError**)&error];
}
void* NSRegularExpression__escapedPatternForString(void* string) {
  return [NSRegularExpression escapedPatternForString:(NSString*)string];
}

////NSDataDetector
void* NSDataDetector_init() {
  return [[NSDataDetector alloc] init];
}
//REJECT: checkingTypes
//void* NSDataDetector_initWithTypesError(NSTextCheckingTypes checkingTypes, void* error) {
//  return [[NSDataDetector alloc] initWithTypes:checkingTypes error:(NSError**)&error];
//}
//REJECT: NSTextCheckingTypes
//NSTextCheckingTypes NSDataDetector_checkingTypes(void* goobj) {
//  return [(NSDataDetector*)goobj checkingTypes];
//}
//REJECT: checkingTypes
//void* NSDataDetector__dataDetectorWithTypesError(NSTextCheckingTypes checkingTypes, void* error) {
//  return [NSDataDetector dataDetectorWithTypes:checkingTypes error:(NSError**)&error];
//}

////NSRunLoop
void* NSRunLoop_init() {
  return [[NSRunLoop alloc] init];
}
void* NSRunLoop_currentMode(void* goobj) {
  return [(NSRunLoop*)goobj currentMode];
}
//REJECT: CFRunLoopRef
//CFRunLoopRef NSRunLoop_getCFRunLoop(void* goobj) {
//  return [(NSRunLoop*)goobj getCFRunLoop];
//}
void NSRunLoop_addTimerForMode(void* goobj, void* timer, void* mode) {
  [(NSRunLoop*)goobj addTimer:(NSTimer*)timer forMode:(NSString*)mode];
}
void NSRunLoop_addPortForMode(void* goobj, void* aPort, void* mode) {
  [(NSRunLoop*)goobj addPort:(NSPort*)aPort forMode:(NSString*)mode];
}
void NSRunLoop_removePortForMode(void* goobj, void* aPort, void* mode) {
  [(NSRunLoop*)goobj removePort:(NSPort*)aPort forMode:(NSString*)mode];
}
void* NSRunLoop_limitDateForMode(void* goobj, void* mode) {
  return [(NSRunLoop*)goobj limitDateForMode:(NSString*)mode];
}
void NSRunLoop_acceptInputForModeBeforeDate(void* goobj, void* mode, void* limitDate) {
  [(NSRunLoop*)goobj acceptInputForMode:(NSString*)mode beforeDate:(NSDate*)limitDate];
}
void NSRunLoop_run(void* goobj) {
  [(NSRunLoop*)goobj run];
}
void NSRunLoop_runUntilDate(void* goobj, void* limitDate) {
  [(NSRunLoop*)goobj runUntilDate:(NSDate*)limitDate];
}
bool NSRunLoop_runModeBeforeDate(void* goobj, void* mode, void* limitDate) {
  return [(NSRunLoop*)goobj runMode:(NSString*)mode beforeDate:(NSDate*)limitDate];
}
void NSRunLoop_configureAsServer(void* goobj) {
  [(NSRunLoop*)goobj configureAsServer];
}
//REJECT: aSelector
//void NSRunLoop_performSelectorTargetArgumentOrderModes(void* goobj, SEL aSelector, void* target, void* arg, uint order, void* modes) {
//  [(NSRunLoop*)goobj performSelector:aSelector target:target argument:arg order:order modes:(NSArray*)modes];
//}
//REJECT: aSelector
//void NSRunLoop_cancelPerformSelectorTargetArgument(void* goobj, SEL aSelector, void* target, void* arg) {
//  [(NSRunLoop*)goobj cancelPerformSelector:aSelector target:target argument:arg];
//}
void NSRunLoop_cancelPerformSelectorsWithTarget(void* goobj, void* target) {
  [(NSRunLoop*)goobj cancelPerformSelectorsWithTarget:target];
}
void* NSRunLoop__currentRunLoop() {
  return [NSRunLoop currentRunLoop];
}
void* NSRunLoop__mainRunLoop() {
  return [NSRunLoop mainRunLoop];
}

////NSSortDescriptor
void* NSSortDescriptor_init() {
  return [[NSSortDescriptor alloc] init];
}
void* NSSortDescriptor_initWithKeyAscending(void* key, bool ascending) {
  return [[NSSortDescriptor alloc] initWithKey:(NSString*)key ascending:ascending];
}
//REJECT: selector
//void* NSSortDescriptor_initWithKeyAscendingSelector(void* key, bool ascending, SEL selector) {
//  return [[NSSortDescriptor alloc] initWithKey:(NSString*)key ascending:ascending selector:selector];
//}
void* NSSortDescriptor_key(void* goobj) {
  return [(NSSortDescriptor*)goobj key];
}
bool NSSortDescriptor_ascending(void* goobj) {
  return [(NSSortDescriptor*)goobj ascending];
}
//REJECT: SEL
//SEL NSSortDescriptor_selector(void* goobj) {
//  return [(NSSortDescriptor*)goobj selector];
//}
void NSSortDescriptor_allowEvaluation(void* goobj) {
  [(NSSortDescriptor*)goobj allowEvaluation];
}
//REJECT: cmptr
//void* NSSortDescriptor_initWithKeyAscendingComparator(void* key, bool ascending, NSComparator cmptr) {
//  return [[NSSortDescriptor alloc] initWithKey:(NSString*)key ascending:ascending comparator:cmptr];
//}
//REJECT: NSComparator
//NSComparator NSSortDescriptor_comparator(void* goobj) {
//  return [(NSSortDescriptor*)goobj comparator];
//}
//REJECT: NSComparisonResult
//NSComparisonResult NSSortDescriptor_compareObjectToObject(void* goobj, void* object1, void* object2) {
//  return [(NSSortDescriptor*)goobj compareObject:object1 toObject:object2];
//}
void* NSSortDescriptor_reversedSortDescriptor(void* goobj) {
  return [(NSSortDescriptor*)goobj reversedSortDescriptor];
}
void* NSSortDescriptor__sortDescriptorWithKeyAscending(void* key, bool ascending) {
  return [NSSortDescriptor sortDescriptorWithKey:(NSString*)key ascending:ascending];
}
//REJECT: selector
//void* NSSortDescriptor__sortDescriptorWithKeyAscendingSelector(void* key, bool ascending, SEL selector) {
//  return [NSSortDescriptor sortDescriptorWithKey:(NSString*)key ascending:ascending selector:selector];
//}
//REJECT: cmptr
//void* NSSortDescriptor__sortDescriptorWithKeyAscendingComparator(void* key, bool ascending, NSComparator cmptr) {
//  return [NSSortDescriptor sortDescriptorWithKey:(NSString*)key ascending:ascending comparator:cmptr];
//}

////NSStream
void* NSStream_init() {
  return [[NSStream alloc] init];
}
void NSStream_open(void* goobj) {
  [(NSStream*)goobj open];
}
void NSStream_close(void* goobj) {
  [(NSStream*)goobj close];
}
void* NSStream_delegate(void* goobj) {
  return [(NSStream*)goobj delegate];
}
void NSStream_setDelegate(void* goobj, void* delegate) {
  [(NSStream*)goobj setDelegate:delegate];
}
void* NSStream_propertyForKey(void* goobj, void* key) {
  return [(NSStream*)goobj propertyForKey:(NSString*)key];
}
bool NSStream_setPropertyForKey(void* goobj, void* property, void* key) {
  return [(NSStream*)goobj setProperty:property forKey:(NSString*)key];
}
void NSStream_scheduleInRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSStream*)goobj scheduleInRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSStream_removeFromRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSStream*)goobj removeFromRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
NSStreamStatus NSStream_streamStatus(void* goobj) {
  return [(NSStream*)goobj streamStatus];
}
void* NSStream_streamError(void* goobj) {
  return [(NSStream*)goobj streamError];
}


////NSInputStream
void* NSInputStream_init() {
  return [[NSInputStream alloc] init];
}
//REJECT: NSInteger
//NSInteger NSInputStream_readMaxLength(void* goobj, uint8_t buffer, uint len) {
//  return [(NSInputStream*)goobj read:buffer maxLength:len];
//}
bool NSInputStream_getBufferLength(void* goobj, uint8_t buffer, uint len) {
  return [(NSInputStream*)goobj getBuffer:buffer length:len];
}
bool NSInputStream_hasBytesAvailable(void* goobj) {
  return [(NSInputStream*)goobj hasBytesAvailable];
}
void* NSInputStream_initWithData(void* data) {
  return [[NSInputStream alloc] initWithData:(NSData*)data];
}
void* NSInputStream_initWithFileAtPath(void* path) {
  return [[NSInputStream alloc] initWithFileAtPath:(NSString*)path];
}
void* NSInputStream_initWithURL(void* url) {
  return [[NSInputStream alloc] initWithURL:(NSURL*)url];
}


////NSOutputStream
void* NSOutputStream_init() {
  return [[NSOutputStream alloc] init];
}
//REJECT: NSInteger
//NSInteger NSOutputStream_writeMaxLength(void* goobj, uint8_t buffer, uint len) {
//  return [(NSOutputStream*)goobj write:buffer maxLength:len];
//}
bool NSOutputStream_hasSpaceAvailable(void* goobj) {
  return [(NSOutputStream*)goobj hasSpaceAvailable];
}
void* NSOutputStream_initToMemory(void* goobj) {
  return [(NSOutputStream*)goobj initToMemory];
}
void* NSOutputStream_initToBufferCapacity(void* goobj, uint8_t buffer, uint capacity) {
  return [(NSOutputStream*)goobj initToBuffer:buffer capacity:capacity];
}
void* NSOutputStream_initToFileAtPathAppend(void* goobj, void* path, bool shouldAppend) {
  return [(NSOutputStream*)goobj initToFileAtPath:(NSString*)path append:shouldAppend];
}
void* NSOutputStream_initWithURLAppend(void* url, bool shouldAppend) {
  return [[NSOutputStream alloc] initWithURL:(NSURL*)url append:shouldAppend];
}


////NSThread
void* NSThread_threadDictionary(void* goobj) {
  return [(NSThread*)goobj threadDictionary];
}
double NSThread_threadPriority(void* goobj) {
  return [(NSThread*)goobj threadPriority];
}
void NSThread_setThreadPriority(void* goobj, double p) {
  [(NSThread*)goobj setThreadPriority:p];
}
void NSThread_setName(void* goobj, void* n) {
  [(NSThread*)goobj setName:(NSString*)n];
}
void* NSThread_name(void* goobj) {
  return [(NSThread*)goobj name];
}
uint NSThread_stackSize(void* goobj) {
  return [(NSThread*)goobj stackSize];
}
void NSThread_setStackSize(void* goobj, uint s) {
  [(NSThread*)goobj setStackSize:s];
}
bool NSThread_isMainThread(void* goobj) {
  return [(NSThread*)goobj isMainThread];
}
void* NSThread_init() {
  return [[NSThread alloc] init];
}
//REJECT: selector
//void* NSThread_initWithTargetSelectorObject(void* target, SEL selector, void* argument) {
//  return [[NSThread alloc] initWithTarget:target selector:selector object:argument];
//}
bool NSThread_isExecuting(void* goobj) {
  return [(NSThread*)goobj isExecuting];
}
bool NSThread_isFinished(void* goobj) {
  return [(NSThread*)goobj isFinished];
}
bool NSThread_isCancelled(void* goobj) {
  return [(NSThread*)goobj isCancelled];
}
void NSThread_cancel(void* goobj) {
  [(NSThread*)goobj cancel];
}
void NSThread_start(void* goobj) {
  [(NSThread*)goobj start];
}
void NSThread_main(void* goobj) {
  [(NSThread*)goobj main];
}
void* NSThread__currentThread() {
  return [NSThread currentThread];
}
//REJECT: selector
//void NSThread__detachNewThreadSelectorToTargetWithObject(SEL selector, void* target, void* argument) {
//  [NSThread detachNewThreadSelector:selector toTarget:target withObject:argument];
//}
bool NSThread__isMultiThreaded() {
  return [NSThread isMultiThreaded];
}
void NSThread__sleepUntilDate(void* date) {
  [NSThread sleepUntilDate:(NSDate*)date];
}
//REJECT: ti
//void NSThread__sleepForTimeInterval(NSTimeInterval ti) {
//  [NSThread sleepForTimeInterval:ti];
//}
void NSThread__exit() {
  [NSThread exit];
}
void NSThread__threadPriority() {
  [NSThread threadPriority];
}
bool NSThread__setThreadPriority(double p) {
  return [NSThread setThreadPriority:p];
}
void* NSThread__callStackReturnAddresses() {
  return [NSThread callStackReturnAddresses];
}
void* NSThread__callStackSymbols() {
  return [NSThread callStackSymbols];
}
bool NSThread__isMainThread() {
  return [NSThread isMainThread];
}
void* NSThread__mainThread() {
  return [NSThread mainThread];
}

////NSTimeZone
void* NSTimeZone_init() {
  return [[NSTimeZone alloc] init];
}
void* NSTimeZone_name(void* goobj) {
  return [(NSTimeZone*)goobj name];
}
void* NSTimeZone_data(void* goobj) {
  return [(NSTimeZone*)goobj data];
}
//REJECT: NSInteger
//NSInteger NSTimeZone_secondsFromGMTForDate(void* goobj, void* aDate) {
//  return [(NSTimeZone*)goobj secondsFromGMTForDate:(NSDate*)aDate];
//}
void* NSTimeZone_abbreviationForDate(void* goobj, void* aDate) {
  return [(NSTimeZone*)goobj abbreviationForDate:(NSDate*)aDate];
}
bool NSTimeZone_isDaylightSavingTimeForDate(void* goobj, void* aDate) {
  return [(NSTimeZone*)goobj isDaylightSavingTimeForDate:(NSDate*)aDate];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSTimeZone_daylightSavingTimeOffsetForDate(void* goobj, void* aDate) {
//  return [(NSTimeZone*)goobj daylightSavingTimeOffsetForDate:(NSDate*)aDate];
//}
void* NSTimeZone_nextDaylightSavingTimeTransitionAfterDate(void* goobj, void* aDate) {
  return [(NSTimeZone*)goobj nextDaylightSavingTimeTransitionAfterDate:(NSDate*)aDate];
}
//REJECT: NSInteger
//NSInteger NSTimeZone_secondsFromGMT(void* goobj) {
//  return [(NSTimeZone*)goobj secondsFromGMT];
//}
void* NSTimeZone_abbreviation(void* goobj) {
  return [(NSTimeZone*)goobj abbreviation];
}
bool NSTimeZone_isDaylightSavingTime(void* goobj) {
  return [(NSTimeZone*)goobj isDaylightSavingTime];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSTimeZone_daylightSavingTimeOffset(void* goobj) {
//  return [(NSTimeZone*)goobj daylightSavingTimeOffset];
//}
void* NSTimeZone_nextDaylightSavingTimeTransition(void* goobj) {
  return [(NSTimeZone*)goobj nextDaylightSavingTimeTransition];
}
void* NSTimeZone_description(void* goobj) {
  return [(NSTimeZone*)goobj description];
}
bool NSTimeZone_isEqualToTimeZone(void* goobj, void* aTimeZone) {
  return [(NSTimeZone*)goobj isEqualToTimeZone:(NSTimeZone*)aTimeZone];
}
//REJECT: locale
//void* NSTimeZone_localizedNameLocale(void* goobj, NSTimeZoneNameStyle style, void* locale) {
//  return [(NSTimeZone*)goobj localizedName:style locale:(NSLocale*)locale];
//}
void* NSTimeZone_initWithName(void* tzName) {
  return [[NSTimeZone alloc] initWithName:(NSString*)tzName];
}
void* NSTimeZone_initWithNameData(void* tzName, void* aData) {
  return [[NSTimeZone alloc] initWithName:(NSString*)tzName data:(NSData*)aData];
}


////NSTimer
void* NSTimer_init() {
  return [[NSTimer alloc] init];
}
//REJECT: ti s
//void* NSTimer_initWithFireDateIntervalTargetSelectorUserInfoRepeats(void* date, NSTimeInterval ti, void* t, SEL s, void* ui, bool rep) {
//  return [[NSTimer alloc] initWithFireDate:(NSDate*)date interval:ti target:t selector:s userInfo:ui repeats:rep];
//}
void NSTimer_fire(void* goobj) {
  [(NSTimer*)goobj fire];
}
void* NSTimer_fireDate(void* goobj) {
  return [(NSTimer*)goobj fireDate];
}
void NSTimer_setFireDate(void* goobj, void* date) {
  [(NSTimer*)goobj setFireDate:(NSDate*)date];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSTimer_timeInterval(void* goobj) {
//  return [(NSTimer*)goobj timeInterval];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSTimer_tolerance(void* goobj) {
//  return [(NSTimer*)goobj tolerance];
//}
//REJECT: tolerance
//void NSTimer_setTolerance(void* goobj, NSTimeInterval tolerance) {
//  [(NSTimer*)goobj setTolerance:tolerance];
//}
void NSTimer_invalidate(void* goobj) {
  [(NSTimer*)goobj invalidate];
}
bool NSTimer_isValid(void* goobj) {
  return [(NSTimer*)goobj isValid];
}
void* NSTimer_userInfo(void* goobj) {
  return [(NSTimer*)goobj userInfo];
}
//REJECT: ti invocation
//void* NSTimer__timerWithTimeIntervalInvocationRepeats(NSTimeInterval ti, void* invocation, bool yesOrNo) {
//  return [NSTimer timerWithTimeInterval:ti invocation:(NSInvocation*)invocation repeats:yesOrNo];
//}
//REJECT: ti invocation
//void* NSTimer__scheduledTimerWithTimeIntervalInvocationRepeats(NSTimeInterval ti, void* invocation, bool yesOrNo) {
//  return [NSTimer scheduledTimerWithTimeInterval:ti invocation:(NSInvocation*)invocation repeats:yesOrNo];
//}
//REJECT: ti aSelector
//void* NSTimer__timerWithTimeIntervalTargetSelectorUserInfoRepeats(NSTimeInterval ti, void* aTarget, SEL aSelector, void* userInfo, bool yesOrNo) {
//  return [NSTimer timerWithTimeInterval:ti target:aTarget selector:aSelector userInfo:userInfo repeats:yesOrNo];
//}
//REJECT: ti aSelector
//void* NSTimer__scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(NSTimeInterval ti, void* aTarget, SEL aSelector, void* userInfo, bool yesOrNo) {
//  return [NSTimer scheduledTimerWithTimeInterval:ti target:aTarget selector:aSelector userInfo:userInfo repeats:yesOrNo];
//}

// NSURLHandle


////NSURL
void* NSURL_init() {
  return [[NSURL alloc] init];
}
void* NSURL_initWithSchemeHostPath(void* scheme, void* host, void* path) {
  return [[NSURL alloc] initWithScheme:(NSString*)scheme host:(NSString*)host path:(NSString*)path];
}
void* NSURL_initFileURLWithPathIsDirectory(void* goobj, void* path, bool isDir) {
  return [(NSURL*)goobj initFileURLWithPath:(NSString*)path isDirectory:isDir];
}
void* NSURL_initFileURLWithPath(void* goobj, void* path) {
  return [(NSURL*)goobj initFileURLWithPath:(NSString*)path];
}
void* NSURL_initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(void* goobj, const char* path, bool isDir, void* baseURL) {
  return [(NSURL*)goobj initFileURLWithFileSystemRepresentation:path isDirectory:isDir relativeToURL:(NSURL*)baseURL];
}
void* NSURL_initWithString(void* URLString) {
  return [[NSURL alloc] initWithString:(NSString*)URLString];
}
void* NSURL_initWithStringRelativeToURL(void* URLString, void* baseURL) {
  return [[NSURL alloc] initWithString:(NSString*)URLString relativeToURL:(NSURL*)baseURL];
}
void* NSURL_absoluteString(void* goobj) {
  return [(NSURL*)goobj absoluteString];
}
void* NSURL_relativeString(void* goobj) {
  return [(NSURL*)goobj relativeString];
}
void* NSURL_baseURL(void* goobj) {
  return [(NSURL*)goobj baseURL];
}
void* NSURL_absoluteURL(void* goobj) {
  return [(NSURL*)goobj absoluteURL];
}
void* NSURL_scheme(void* goobj) {
  return [(NSURL*)goobj scheme];
}
void* NSURL_resourceSpecifier(void* goobj) {
  return [(NSURL*)goobj resourceSpecifier];
}
void* NSURL_host(void* goobj) {
  return [(NSURL*)goobj host];
}
void* NSURL_port(void* goobj) {
  return [(NSURL*)goobj port];
}
void* NSURL_user(void* goobj) {
  return [(NSURL*)goobj user];
}
void* NSURL_password(void* goobj) {
  return [(NSURL*)goobj password];
}
void* NSURL_path(void* goobj) {
  return [(NSURL*)goobj path];
}
void* NSURL_fragment(void* goobj) {
  return [(NSURL*)goobj fragment];
}
void* NSURL_parameterString(void* goobj) {
  return [(NSURL*)goobj parameterString];
}
void* NSURL_query(void* goobj) {
  return [(NSURL*)goobj query];
}
void* NSURL_relativePath(void* goobj) {
  return [(NSURL*)goobj relativePath];
}
bool NSURL_getFileSystemRepresentationMaxLength(void* goobj, char* buffer, uint maxBufferLength) {
  return [(NSURL*)goobj getFileSystemRepresentation:buffer maxLength:maxBufferLength];
}
const char* NSURL_fileSystemRepresentation(void* goobj) {
  return [(NSURL*)goobj fileSystemRepresentation];
}
bool NSURL_isFileURL(void* goobj) {
  return [(NSURL*)goobj isFileURL];
}
void* NSURL_standardizedURL(void* goobj) {
  return [(NSURL*)goobj standardizedURL];
}
bool NSURL_checkResourceIsReachableAndReturnError(void* goobj, void* error) {
  return [(NSURL*)goobj checkResourceIsReachableAndReturnError:(NSError**)&error];
}
bool NSURL_isFileReferenceURL(void* goobj) {
  return [(NSURL*)goobj isFileReferenceURL];
}
void* NSURL_fileReferenceURL(void* goobj) {
  return [(NSURL*)goobj fileReferenceURL];
}
void* NSURL_filePathURL(void* goobj) {
  return [(NSURL*)goobj filePathURL];
}
bool NSURL_getResourceValueForKeyError(void* goobj, void* value, void* key, void* error) {
  return [(NSURL*)goobj getResourceValue:value forKey:(NSString*)key error:(NSError**)&error];
}
void* NSURL_resourceValuesForKeysError(void* goobj, void* keys, void* error) {
  return [(NSURL*)goobj resourceValuesForKeys:(NSArray*)keys error:(NSError**)&error];
}
bool NSURL_setResourceValueForKeyError(void* goobj, void* value, void* key, void* error) {
  return [(NSURL*)goobj setResourceValue:value forKey:(NSString*)key error:(NSError**)&error];
}
bool NSURL_setResourceValuesError(void* goobj, void* keyedValues, void* error) {
  return [(NSURL*)goobj setResourceValues:(NSDictionary*)keyedValues error:(NSError**)&error];
}
void NSURL_removeCachedResourceValueForKey(void* goobj, void* key) {
  [(NSURL*)goobj removeCachedResourceValueForKey:(NSString*)key];
}
void NSURL_removeAllCachedResourceValues(void* goobj) {
  [(NSURL*)goobj removeAllCachedResourceValues];
}
void NSURL_setTemporaryResourceValueForKey(void* goobj, void* value, void* key) {
  [(NSURL*)goobj setTemporaryResourceValue:value forKey:(NSString*)key];
}
//REJECT: options
//void* NSURL_bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(void* goobj, NSURLBookmarkCreationOptions options, void* keys, void* relativeURL, void* error) {
//  return [(NSURL*)goobj bookmarkDataWithOptions:options includingResourceValuesForKeys:(NSArray*)keys relativeToURL:(NSURL*)relativeURL error:(NSError**)&error];
//}
void* NSURL_initByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(void* goobj, void* bookmarkData, NSURLBookmarkResolutionOptions options, void* relativeURL, bool isStale, void* error) {
  return [(NSURL*)goobj initByResolvingBookmarkData:(NSData*)bookmarkData options:options relativeToURL:(NSURL*)relativeURL bookmarkDataIsStale:isStale error:(NSError**)&error];
}
bool NSURL_startAccessingSecurityScopedResource(void* goobj) {
  return [(NSURL*)goobj startAccessingSecurityScopedResource];
}
void NSURL_stopAccessingSecurityScopedResource(void* goobj) {
  [(NSURL*)goobj stopAccessingSecurityScopedResource];
}
void* NSURL_pathComponents(void* goobj) {
  return [(NSURL*)goobj pathComponents];
}
void* NSURL_lastPathComponent(void* goobj) {
  return [(NSURL*)goobj lastPathComponent];
}
void* NSURL_pathExtension(void* goobj) {
  return [(NSURL*)goobj pathExtension];
}
void* NSURL_URLByAppendingPathComponent(void* goobj, void* pathComponent) {
  return [(NSURL*)goobj URLByAppendingPathComponent:(NSString*)pathComponent];
}
void* NSURL_URLByAppendingPathComponentIsDirectory(void* goobj, void* pathComponent, bool isDirectory) {
  return [(NSURL*)goobj URLByAppendingPathComponent:(NSString*)pathComponent isDirectory:isDirectory];
}
void* NSURL_URLByDeletingLastPathComponent(void* goobj) {
  return [(NSURL*)goobj URLByDeletingLastPathComponent];
}
void* NSURL_URLByAppendingPathExtension(void* goobj, void* pathExtension) {
  return [(NSURL*)goobj URLByAppendingPathExtension:(NSString*)pathExtension];
}
void* NSURL_URLByDeletingPathExtension(void* goobj) {
  return [(NSURL*)goobj URLByDeletingPathExtension];
}
void* NSURL_URLByStandardizingPath(void* goobj) {
  return [(NSURL*)goobj URLByStandardizingPath];
}
void* NSURL_URLByResolvingSymlinksInPath(void* goobj) {
  return [(NSURL*)goobj URLByResolvingSymlinksInPath];
}
void* NSURL_resourceDataUsingCache(void* goobj, bool shouldUseCache) {
  return [(NSURL*)goobj resourceDataUsingCache:shouldUseCache];
}
void NSURL_loadResourceDataNotifyingClientUsingCache(void* goobj, void* client, bool shouldUseCache) {
  [(NSURL*)goobj loadResourceDataNotifyingClient:client usingCache:shouldUseCache];
}
void* NSURL_propertyForKey(void* goobj, void* propertyKey) {
  return [(NSURL*)goobj propertyForKey:(NSString*)propertyKey];
}
bool NSURL_setResourceData(void* goobj, void* data) {
  return [(NSURL*)goobj setResourceData:(NSData*)data];
}
bool NSURL_setPropertyForKey(void* goobj, void* property, void* propertyKey) {
  return [(NSURL*)goobj setProperty:property forKey:(NSString*)propertyKey];
}
//REJECT: NSURLHandle
//void* NSURL_URLHandleUsingCache(void* goobj, bool shouldUseCache) {
//  return [(NSURL*)goobj URLHandleUsingCache:shouldUseCache];
//}
void* NSURL__fileURLWithPathIsDirectory(void* path, bool isDir) {
  return [NSURL fileURLWithPath:(NSString*)path isDirectory:isDir];
}
void* NSURL__fileURLWithPath(void* path) {
  return [NSURL fileURLWithPath:(NSString*)path];
}
void* NSURL__fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(const char* path, bool isDir, void* baseURL) {
  return [NSURL fileURLWithFileSystemRepresentation:path isDirectory:isDir relativeToURL:(NSURL*)baseURL];
}
void* NSURL__URLWithString(void* URLString) {
  return [NSURL URLWithString:(NSString*)URLString];
}
void* NSURL__URLWithStringRelativeToURL(void* URLString, void* baseURL) {
  return [NSURL URLWithString:(NSString*)URLString relativeToURL:(NSURL*)baseURL];
}
void* NSURL__URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(void* bookmarkData, NSURLBookmarkResolutionOptions options, void* relativeURL, bool isStale, void* error) {
  return [NSURL URLByResolvingBookmarkData:(NSData*)bookmarkData options:options relativeToURL:(NSURL*)relativeURL bookmarkDataIsStale:isStale error:(NSError**)&error];
}
void* NSURL__resourceValuesForKeysFromBookmarkData(void* keys, void* bookmarkData) {
  return [NSURL resourceValuesForKeys:(NSArray*)keys fromBookmarkData:(NSData*)bookmarkData];
}
//REJECT: options
//bool NSURL__writeBookmarkDataToURLOptionsError(void* bookmarkData, void* bookmarkFileURL, NSURLBookmarkFileCreationOptions options, void* error) {
//  return [NSURL writeBookmarkData:(NSData*)bookmarkData toURL:(NSURL*)bookmarkFileURL options:options error:(NSError**)&error];
//}
void* NSURL__bookmarkDataWithContentsOfURLError(void* bookmarkFileURL, void* error) {
  return [NSURL bookmarkDataWithContentsOfURL:(NSURL*)bookmarkFileURL error:(NSError**)&error];
}

////NSURLComponents
void* NSURLComponents_init() {
  return [[NSURLComponents alloc] init];
}
void* NSURLComponents_initWithURLResolvingAgainstBaseURL(void* url, bool resolve) {
  return [[NSURLComponents alloc] initWithURL:(NSURL*)url resolvingAgainstBaseURL:resolve];
}
void* NSURLComponents_initWithString(void* URLString) {
  return [[NSURLComponents alloc] initWithString:(NSString*)URLString];
}
void* NSURLComponents_URL(void* goobj) {
  return [(NSURLComponents*)goobj URL];
}
void* NSURLComponents_URLRelativeToURL(void* goobj, void* baseURL) {
  return [(NSURLComponents*)goobj URLRelativeToURL:(NSURL*)baseURL];
}
void* NSURLComponents_scheme(void* goobj) {
  return [(NSURLComponents*)goobj scheme];
}
void NSURLComponents_setScheme(void* goobj, void* scheme) {
  [(NSURLComponents*)goobj setScheme:(NSString*)scheme];
}
void* NSURLComponents_user(void* goobj) {
  return [(NSURLComponents*)goobj user];
}
void NSURLComponents_setUser(void* goobj, void* user) {
  [(NSURLComponents*)goobj setUser:(NSString*)user];
}
void* NSURLComponents_password(void* goobj) {
  return [(NSURLComponents*)goobj password];
}
void NSURLComponents_setPassword(void* goobj, void* password) {
  [(NSURLComponents*)goobj setPassword:(NSString*)password];
}
void* NSURLComponents_host(void* goobj) {
  return [(NSURLComponents*)goobj host];
}
void NSURLComponents_setHost(void* goobj, void* host) {
  [(NSURLComponents*)goobj setHost:(NSString*)host];
}
void* NSURLComponents_port(void* goobj) {
  return [(NSURLComponents*)goobj port];
}
void NSURLComponents_setPort(void* goobj, void* port) {
  [(NSURLComponents*)goobj setPort:(NSNumber*)port];
}
void* NSURLComponents_path(void* goobj) {
  return [(NSURLComponents*)goobj path];
}
void NSURLComponents_setPath(void* goobj, void* path) {
  [(NSURLComponents*)goobj setPath:(NSString*)path];
}
void* NSURLComponents_query(void* goobj) {
  return [(NSURLComponents*)goobj query];
}
void NSURLComponents_setQuery(void* goobj, void* query) {
  [(NSURLComponents*)goobj setQuery:(NSString*)query];
}
void* NSURLComponents_fragment(void* goobj) {
  return [(NSURLComponents*)goobj fragment];
}
void NSURLComponents_setFragment(void* goobj, void* fragment) {
  [(NSURLComponents*)goobj setFragment:(NSString*)fragment];
}
void* NSURLComponents_percentEncodedUser(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedUser];
}
void NSURLComponents_setPercentEncodedUser(void* goobj, void* percentEncodedUser) {
  [(NSURLComponents*)goobj setPercentEncodedUser:(NSString*)percentEncodedUser];
}
void* NSURLComponents_percentEncodedPassword(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedPassword];
}
void NSURLComponents_setPercentEncodedPassword(void* goobj, void* percentEncodedPassword) {
  [(NSURLComponents*)goobj setPercentEncodedPassword:(NSString*)percentEncodedPassword];
}
void* NSURLComponents_percentEncodedHost(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedHost];
}
void NSURLComponents_setPercentEncodedHost(void* goobj, void* percentEncodedHost) {
  [(NSURLComponents*)goobj setPercentEncodedHost:(NSString*)percentEncodedHost];
}
void* NSURLComponents_percentEncodedPath(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedPath];
}
void NSURLComponents_setPercentEncodedPath(void* goobj, void* percentEncodedPath) {
  [(NSURLComponents*)goobj setPercentEncodedPath:(NSString*)percentEncodedPath];
}
void* NSURLComponents_percentEncodedQuery(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedQuery];
}
void NSURLComponents_setPercentEncodedQuery(void* goobj, void* percentEncodedQuery) {
  [(NSURLComponents*)goobj setPercentEncodedQuery:(NSString*)percentEncodedQuery];
}
void* NSURLComponents_percentEncodedFragment(void* goobj) {
  return [(NSURLComponents*)goobj percentEncodedFragment];
}
void NSURLComponents_setPercentEncodedFragment(void* goobj, void* percentEncodedFragment) {
  [(NSURLComponents*)goobj setPercentEncodedFragment:(NSString*)percentEncodedFragment];
}
void* NSURLComponents__componentsWithURLResolvingAgainstBaseURL(void* url, bool resolve) {
  return [NSURLComponents componentsWithURL:(NSURL*)url resolvingAgainstBaseURL:resolve];
}
void* NSURLComponents__componentsWithString(void* URLString) {
  return [NSURLComponents componentsWithString:(NSString*)URLString];
}

////NSFileSecurity
void* NSFileSecurity_init() {
  return [[NSFileSecurity alloc] init];
}



////NSURLAuthenticationChallenge
void* NSURLAuthenticationChallenge_init() {
  return [[NSURLAuthenticationChallenge alloc] init];
}
//REJECT: previousFailureCount
//void* NSURLAuthenticationChallenge_initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(void* space, void* credential, NSInteger previousFailureCount, void* response, void* error, void* sender) {
//  return [[NSURLAuthenticationChallenge alloc] initWithProtectionSpace:(NSURLProtectionSpace*)space proposedCredential:(NSURLCredential*)credential previousFailureCount:previousFailureCount failureResponse:(NSURLResponse*)response error:(NSError**)&error sender:sender];
//}
void* NSURLAuthenticationChallenge_initWithAuthenticationChallengeSender(void* challenge, void* sender) {
  return [[NSURLAuthenticationChallenge alloc] initWithAuthenticationChallenge:(NSURLAuthenticationChallenge*)challenge sender:sender];
}
void* NSURLAuthenticationChallenge_protectionSpace(void* goobj) {
  return [(NSURLAuthenticationChallenge*)goobj protectionSpace];
}
void* NSURLAuthenticationChallenge_proposedCredential(void* goobj) {
  return [(NSURLAuthenticationChallenge*)goobj proposedCredential];
}
//REJECT: NSInteger
//NSInteger NSURLAuthenticationChallenge_previousFailureCount(void* goobj) {
//  return [(NSURLAuthenticationChallenge*)goobj previousFailureCount];
//}
void* NSURLAuthenticationChallenge_failureResponse(void* goobj) {
  return [(NSURLAuthenticationChallenge*)goobj failureResponse];
}
void* NSURLAuthenticationChallenge_error(void* goobj) {
  return [(NSURLAuthenticationChallenge*)goobj error];
}
void* NSURLAuthenticationChallenge_sender(void* goobj) {
  return [(NSURLAuthenticationChallenge*)goobj sender];
}


////NSCachedURLResponse
void* NSCachedURLResponse_init() {
  return [[NSCachedURLResponse alloc] init];
}
void* NSCachedURLResponse_initWithResponseData(void* response, void* data) {
  return [[NSCachedURLResponse alloc] initWithResponse:(NSURLResponse*)response data:(NSData*)data];
}
//REJECT: storagePolicy
//void* NSCachedURLResponse_initWithResponseDataUserInfoStoragePolicy(void* response, void* data, void* userInfo, NSURLCacheStoragePolicy storagePolicy) {
//  return [[NSCachedURLResponse alloc] initWithResponse:(NSURLResponse*)response data:(NSData*)data userInfo:(NSDictionary*)userInfo storagePolicy:storagePolicy];
//}
void* NSCachedURLResponse_response(void* goobj) {
  return [(NSCachedURLResponse*)goobj response];
}
void* NSCachedURLResponse_data(void* goobj) {
  return [(NSCachedURLResponse*)goobj data];
}
void* NSCachedURLResponse_userInfo(void* goobj) {
  return [(NSCachedURLResponse*)goobj userInfo];
}
//REJECT: NSURLCacheStoragePolicy
//NSURLCacheStoragePolicy NSCachedURLResponse_storagePolicy(void* goobj) {
//  return [(NSCachedURLResponse*)goobj storagePolicy];
//}


////NSURLCache
void* NSURLCache_init() {
  return [[NSURLCache alloc] init];
}
void* NSURLCache_initWithMemoryCapacityDiskCapacityDiskPath(uint memoryCapacity, uint diskCapacity, void* path) {
  return [[NSURLCache alloc] initWithMemoryCapacity:memoryCapacity diskCapacity:diskCapacity diskPath:(NSString*)path];
}
void* NSURLCache_cachedResponseForRequest(void* goobj, void* request) {
  return [(NSURLCache*)goobj cachedResponseForRequest:(NSURLRequest*)request];
}
void NSURLCache_storeCachedResponseForRequest(void* goobj, void* cachedResponse, void* request) {
  [(NSURLCache*)goobj storeCachedResponse:(NSCachedURLResponse*)cachedResponse forRequest:(NSURLRequest*)request];
}
void NSURLCache_removeCachedResponseForRequest(void* goobj, void* request) {
  [(NSURLCache*)goobj removeCachedResponseForRequest:(NSURLRequest*)request];
}
void NSURLCache_removeAllCachedResponses(void* goobj) {
  [(NSURLCache*)goobj removeAllCachedResponses];
}
uint NSURLCache_memoryCapacity(void* goobj) {
  return [(NSURLCache*)goobj memoryCapacity];
}
uint NSURLCache_diskCapacity(void* goobj) {
  return [(NSURLCache*)goobj diskCapacity];
}
void NSURLCache_setMemoryCapacity(void* goobj, uint memoryCapacity) {
  [(NSURLCache*)goobj setMemoryCapacity:memoryCapacity];
}
void NSURLCache_setDiskCapacity(void* goobj, uint diskCapacity) {
  [(NSURLCache*)goobj setDiskCapacity:diskCapacity];
}
uint NSURLCache_currentMemoryUsage(void* goobj) {
  return [(NSURLCache*)goobj currentMemoryUsage];
}
uint NSURLCache_currentDiskUsage(void* goobj) {
  return [(NSURLCache*)goobj currentDiskUsage];
}
void* NSURLCache__sharedURLCache() {
  return [NSURLCache sharedURLCache];
}
void NSURLCache__setSharedURLCache(void* cache) {
  [NSURLCache setSharedURLCache:(NSURLCache*)cache];
}

////NSURLConnection
void* NSURLConnection_init() {
  return [[NSURLConnection alloc] init];
}
void* NSURLConnection_initWithRequestDelegateStartImmediately(void* request, void* delegate, bool startImmediately) {
  return [[NSURLConnection alloc] initWithRequest:(NSURLRequest*)request delegate:delegate startImmediately:startImmediately];
}
void* NSURLConnection_initWithRequestDelegate(void* request, void* delegate) {
  return [[NSURLConnection alloc] initWithRequest:(NSURLRequest*)request delegate:delegate];
}
void* NSURLConnection_originalRequest(void* goobj) {
  return [(NSURLConnection*)goobj originalRequest];
}
void* NSURLConnection_currentRequest(void* goobj) {
  return [(NSURLConnection*)goobj currentRequest];
}
void NSURLConnection_start(void* goobj) {
  [(NSURLConnection*)goobj start];
}
void NSURLConnection_cancel(void* goobj) {
  [(NSURLConnection*)goobj cancel];
}
void NSURLConnection_scheduleInRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSURLConnection*)goobj scheduleInRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSURLConnection_unscheduleFromRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSURLConnection*)goobj unscheduleFromRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSURLConnection_setDelegateQueue(void* goobj, void* queue) {
  [(NSURLConnection*)goobj setDelegateQueue:(NSOperationQueue*)queue];
}
void* NSURLConnection__connectionWithRequestDelegate(void* request, void* delegate) {
  return [NSURLConnection connectionWithRequest:(NSURLRequest*)request delegate:delegate];
}
bool NSURLConnection__canHandleRequest(void* request) {
  return [NSURLConnection canHandleRequest:(NSURLRequest*)request];
}

////NSURLCredential
void* NSURLCredential_init() {
  return [[NSURLCredential alloc] init];
}
NSURLCredentialPersistence NSURLCredential_persistence(void* goobj) {
  return [(NSURLCredential*)goobj persistence];
}
void* NSURLCredential_initWithUserPasswordPersistence(void* user, void* password, NSURLCredentialPersistence persistence) {
  return [[NSURLCredential alloc] initWithUser:(NSString*)user password:(NSString*)password persistence:persistence];
}
void* NSURLCredential_user(void* goobj) {
  return [(NSURLCredential*)goobj user];
}
void* NSURLCredential_password(void* goobj) {
  return [(NSURLCredential*)goobj password];
}
bool NSURLCredential_hasPassword(void* goobj) {
  return [(NSURLCredential*)goobj hasPassword];
}
//REJECT: identity
//void* NSURLCredential_initWithIdentityCertificatesPersistence(SecIdentityRef identity, void* certArray, NSURLCredentialPersistence persistence) {
//  return [[NSURLCredential alloc] initWithIdentity:identity certificates:(NSArray*)certArray persistence:persistence];
//}
//REJECT: SecIdentityRef
//SecIdentityRef NSURLCredential_identity(void* goobj) {
//  return [(NSURLCredential*)goobj identity];
//}
void* NSURLCredential_certificates(void* goobj) {
  return [(NSURLCredential*)goobj certificates];
}
//REJECT: trust
//void* NSURLCredential_initWithTrust(SecTrustRef trust) {
//  return [[NSURLCredential alloc] initWithTrust:trust];
//}


////NSURLCredentialStorage
void* NSURLCredentialStorage_init() {
  return [[NSURLCredentialStorage alloc] init];
}
void* NSURLCredentialStorage_credentialsForProtectionSpace(void* goobj, void* space) {
  return [(NSURLCredentialStorage*)goobj credentialsForProtectionSpace:(NSURLProtectionSpace*)space];
}
void* NSURLCredentialStorage_allCredentials(void* goobj) {
  return [(NSURLCredentialStorage*)goobj allCredentials];
}
void NSURLCredentialStorage_setCredentialForProtectionSpace(void* goobj, void* credential, void* space) {
  [(NSURLCredentialStorage*)goobj setCredential:(NSURLCredential*)credential forProtectionSpace:(NSURLProtectionSpace*)space];
}
void NSURLCredentialStorage_removeCredentialForProtectionSpace(void* goobj, void* credential, void* space) {
  [(NSURLCredentialStorage*)goobj removeCredential:(NSURLCredential*)credential forProtectionSpace:(NSURLProtectionSpace*)space];
}
void NSURLCredentialStorage_removeCredentialForProtectionSpaceOptions(void* goobj, void* credential, void* space, void* options) {
  [(NSURLCredentialStorage*)goobj removeCredential:(NSURLCredential*)credential forProtectionSpace:(NSURLProtectionSpace*)space options:(NSDictionary*)options];
}
void* NSURLCredentialStorage_defaultCredentialForProtectionSpace(void* goobj, void* space) {
  return [(NSURLCredentialStorage*)goobj defaultCredentialForProtectionSpace:(NSURLProtectionSpace*)space];
}
void NSURLCredentialStorage_setDefaultCredentialForProtectionSpace(void* goobj, void* credential, void* space) {
  [(NSURLCredentialStorage*)goobj setDefaultCredential:(NSURLCredential*)credential forProtectionSpace:(NSURLProtectionSpace*)space];
}
void* NSURLCredentialStorage__sharedCredentialStorage() {
  return [NSURLCredentialStorage sharedCredentialStorage];
}

////NSURLProtectionSpace
void* NSURLProtectionSpace_init() {
  return [[NSURLProtectionSpace alloc] init];
}
//REJECT: port
//void* NSURLProtectionSpace_initWithHostPortProtocolRealmAuthenticationMethod(void* host, NSInteger port, void* protocol, void* realm, void* authenticationMethod) {
//  return [[NSURLProtectionSpace alloc] initWithHost:(NSString*)host port:port protocol:(NSString*)protocol realm:(NSString*)realm authenticationMethod:(NSString*)authenticationMethod];
//}
//REJECT: port
//void* NSURLProtectionSpace_initWithProxyHostPortTypeRealmAuthenticationMethod(void* host, NSInteger port, void* type, void* realm, void* authenticationMethod) {
//  return [[NSURLProtectionSpace alloc] initWithProxyHost:(NSString*)host port:port type:(NSString*)type realm:(NSString*)realm authenticationMethod:(NSString*)authenticationMethod];
//}
void* NSURLProtectionSpace_realm(void* goobj) {
  return [(NSURLProtectionSpace*)goobj realm];
}
bool NSURLProtectionSpace_receivesCredentialSecurely(void* goobj) {
  return [(NSURLProtectionSpace*)goobj receivesCredentialSecurely];
}
bool NSURLProtectionSpace_isProxy(void* goobj) {
  return [(NSURLProtectionSpace*)goobj isProxy];
}
void* NSURLProtectionSpace_host(void* goobj) {
  return [(NSURLProtectionSpace*)goobj host];
}
//REJECT: NSInteger
//NSInteger NSURLProtectionSpace_port(void* goobj) {
//  return [(NSURLProtectionSpace*)goobj port];
//}
void* NSURLProtectionSpace_proxyType(void* goobj) {
  return [(NSURLProtectionSpace*)goobj proxyType];
}
void* NSURLProtectionSpace_protocol(void* goobj) {
  return [(NSURLProtectionSpace*)goobj protocol];
}
void* NSURLProtectionSpace_authenticationMethod(void* goobj) {
  return [(NSURLProtectionSpace*)goobj authenticationMethod];
}
void* NSURLProtectionSpace_distinguishedNames(void* goobj) {
  return [(NSURLProtectionSpace*)goobj distinguishedNames];
}
//REJECT: SecTrustRef
//SecTrustRef NSURLProtectionSpace_serverTrust(void* goobj) {
//  return [(NSURLProtectionSpace*)goobj serverTrust];
//}


////NSURLProtocol
void* NSURLProtocol_init() {
  return [[NSURLProtocol alloc] init];
}
void* NSURLProtocol_initWithRequestCachedResponseClient(void* request, void* cachedResponse, void* client) {
  return [[NSURLProtocol alloc] initWithRequest:(NSURLRequest*)request cachedResponse:(NSCachedURLResponse*)cachedResponse client:client];
}
void* NSURLProtocol_client(void* goobj) {
  return [(NSURLProtocol*)goobj client];
}
void* NSURLProtocol_request(void* goobj) {
  return [(NSURLProtocol*)goobj request];
}
void* NSURLProtocol_cachedResponse(void* goobj) {
  return [(NSURLProtocol*)goobj cachedResponse];
}
void NSURLProtocol_startLoading(void* goobj) {
  [(NSURLProtocol*)goobj startLoading];
}
void NSURLProtocol_stopLoading(void* goobj) {
  [(NSURLProtocol*)goobj stopLoading];
}
bool NSURLProtocol__canInitWithRequest(void* request) {
  return [NSURLProtocol canInitWithRequest:(NSURLRequest*)request];
}
void* NSURLProtocol__canonicalRequestForRequest(void* request) {
  return [NSURLProtocol canonicalRequestForRequest:(NSURLRequest*)request];
}
bool NSURLProtocol__requestIsCacheEquivalentToRequest(void* a, void* b) {
  return [NSURLProtocol requestIsCacheEquivalent:(NSURLRequest*)a toRequest:(NSURLRequest*)b];
}
void* NSURLProtocol__propertyForKeyInRequest(void* key, void* request) {
  return [NSURLProtocol propertyForKey:(NSString*)key inRequest:(NSURLRequest*)request];
}
void NSURLProtocol__setPropertyForKeyInRequest(void* value, void* key, void* request) {
  [NSURLProtocol setProperty:value forKey:(NSString*)key inRequest:(NSMutableURLRequest*)request];
}
void NSURLProtocol__removePropertyForKeyInRequest(void* key, void* request) {
  [NSURLProtocol removePropertyForKey:(NSString*)key inRequest:(NSMutableURLRequest*)request];
}
//REJECT: protocolClass
//bool NSURLProtocol__registerClass(Class protocolClass) {
//  return [NSURLProtocol registerClass:protocolClass];
//}
//REJECT: protocolClass
//void NSURLProtocol__unregisterClass(Class protocolClass) {
//  [NSURLProtocol unregisterClass:protocolClass];
//}

////NSURLRequest
void* NSURLRequest_init() {
  return [[NSURLRequest alloc] init];
}
void* NSURLRequest_initWithURL(void* URL) {
  return [[NSURLRequest alloc] initWithURL:(NSURL*)URL];
}
//REJECT: cachePolicy timeoutInterval
//void* NSURLRequest_initWithURLCachePolicyTimeoutInterval(void* URL, NSURLRequestCachePolicy cachePolicy, NSTimeInterval timeoutInterval) {
//  return [[NSURLRequest alloc] initWithURL:(NSURL*)URL cachePolicy:cachePolicy timeoutInterval:timeoutInterval];
//}
void* NSURLRequest_URL(void* goobj) {
  return [(NSURLRequest*)goobj URL];
}
//REJECT: NSURLRequestCachePolicy
//NSURLRequestCachePolicy NSURLRequest_cachePolicy(void* goobj) {
//  return [(NSURLRequest*)goobj cachePolicy];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSURLRequest_timeoutInterval(void* goobj) {
//  return [(NSURLRequest*)goobj timeoutInterval];
//}
void* NSURLRequest_mainDocumentURL(void* goobj) {
  return [(NSURLRequest*)goobj mainDocumentURL];
}
//REJECT: NSURLRequestNetworkServiceType
//NSURLRequestNetworkServiceType NSURLRequest_networkServiceType(void* goobj) {
//  return [(NSURLRequest*)goobj networkServiceType];
//}
bool NSURLRequest_allowsCellularAccess(void* goobj) {
  return [(NSURLRequest*)goobj allowsCellularAccess];
}
void* NSURLRequest_HTTPMethod(void* goobj) {
  return [(NSURLRequest*)goobj HTTPMethod];
}
void* NSURLRequest_allHTTPHeaderFields(void* goobj) {
  return [(NSURLRequest*)goobj allHTTPHeaderFields];
}
void* NSURLRequest_valueForHTTPHeaderField(void* goobj, void* field) {
  return [(NSURLRequest*)goobj valueForHTTPHeaderField:(NSString*)field];
}
void* NSURLRequest_HTTPBody(void* goobj) {
  return [(NSURLRequest*)goobj HTTPBody];
}
void* NSURLRequest_HTTPBodyStream(void* goobj) {
  return [(NSURLRequest*)goobj HTTPBodyStream];
}
bool NSURLRequest_HTTPShouldHandleCookies(void* goobj) {
  return [(NSURLRequest*)goobj HTTPShouldHandleCookies];
}
bool NSURLRequest_HTTPShouldUsePipelining(void* goobj) {
  return [(NSURLRequest*)goobj HTTPShouldUsePipelining];
}
void* NSURLRequest__requestWithURL(void* URL) {
  return [NSURLRequest requestWithURL:(NSURL*)URL];
}
bool NSURLRequest__supportsSecureCoding() {
  return [NSURLRequest supportsSecureCoding];
}
//REJECT: cachePolicy timeoutInterval
//void* NSURLRequest__requestWithURLCachePolicyTimeoutInterval(void* URL, NSURLRequestCachePolicy cachePolicy, NSTimeInterval timeoutInterval) {
//  return [NSURLRequest requestWithURL:(NSURL*)URL cachePolicy:cachePolicy timeoutInterval:timeoutInterval];
//}

////NSMutableURLRequest
void* NSMutableURLRequest_init() {
  return [[NSMutableURLRequest alloc] init];
}
void NSMutableURLRequest_setURL(void* goobj, void* URL) {
  [(NSMutableURLRequest*)goobj setURL:(NSURL*)URL];
}
//REJECT: policy
//void NSMutableURLRequest_setCachePolicy(void* goobj, NSURLRequestCachePolicy policy) {
//  [(NSMutableURLRequest*)goobj setCachePolicy:policy];
//}
//REJECT: seconds
//void NSMutableURLRequest_setTimeoutInterval(void* goobj, NSTimeInterval seconds) {
//  [(NSMutableURLRequest*)goobj setTimeoutInterval:seconds];
//}
void NSMutableURLRequest_setMainDocumentURL(void* goobj, void* URL) {
  [(NSMutableURLRequest*)goobj setMainDocumentURL:(NSURL*)URL];
}
//REJECT: networkServiceType
//void NSMutableURLRequest_setNetworkServiceType(void* goobj, NSURLRequestNetworkServiceType networkServiceType) {
//  [(NSMutableURLRequest*)goobj setNetworkServiceType:networkServiceType];
//}
void NSMutableURLRequest_setAllowsCellularAccess(void* goobj, bool allow) {
  [(NSMutableURLRequest*)goobj setAllowsCellularAccess:allow];
}
void NSMutableURLRequest_setHTTPMethod(void* goobj, void* method) {
  [(NSMutableURLRequest*)goobj setHTTPMethod:(NSString*)method];
}
void NSMutableURLRequest_setAllHTTPHeaderFields(void* goobj, void* headerFields) {
  [(NSMutableURLRequest*)goobj setAllHTTPHeaderFields:(NSDictionary*)headerFields];
}
void NSMutableURLRequest_setValueForHTTPHeaderField(void* goobj, void* value, void* field) {
  [(NSMutableURLRequest*)goobj setValue:(NSString*)value forHTTPHeaderField:(NSString*)field];
}
void NSMutableURLRequest_addValueForHTTPHeaderField(void* goobj, void* value, void* field) {
  [(NSMutableURLRequest*)goobj addValue:(NSString*)value forHTTPHeaderField:(NSString*)field];
}
void NSMutableURLRequest_setHTTPBody(void* goobj, void* data) {
  [(NSMutableURLRequest*)goobj setHTTPBody:(NSData*)data];
}
void NSMutableURLRequest_setHTTPBodyStream(void* goobj, void* inputStream) {
  [(NSMutableURLRequest*)goobj setHTTPBodyStream:(NSInputStream*)inputStream];
}
void NSMutableURLRequest_setHTTPShouldHandleCookies(void* goobj, bool should) {
  [(NSMutableURLRequest*)goobj setHTTPShouldHandleCookies:should];
}
void NSMutableURLRequest_setHTTPShouldUsePipelining(void* goobj, bool shouldUsePipelining) {
  [(NSMutableURLRequest*)goobj setHTTPShouldUsePipelining:shouldUsePipelining];
}


////NSURLResponse
void* NSURLResponse_init() {
  return [[NSURLResponse alloc] init];
}
//REJECT: length
//void* NSURLResponse_initWithURLMIMETypeExpectedContentLengthTextEncodingName(void* URL, void* MIMEType, NSInteger length, void* name) {
//  return [[NSURLResponse alloc] initWithURL:(NSURL*)URL MIMEType:(NSString*)MIMEType expectedContentLength:length textEncodingName:(NSString*)name];
//}
void* NSURLResponse_URL(void* goobj) {
  return [(NSURLResponse*)goobj URL];
}
void* NSURLResponse_MIMEType(void* goobj) {
  return [(NSURLResponse*)goobj MIMEType];
}
long long NSURLResponse_expectedContentLength(void* goobj) {
  return [(NSURLResponse*)goobj expectedContentLength];
}
void* NSURLResponse_textEncodingName(void* goobj) {
  return [(NSURLResponse*)goobj textEncodingName];
}
void* NSURLResponse_suggestedFilename(void* goobj) {
  return [(NSURLResponse*)goobj suggestedFilename];
}


////NSHTTPURLResponse
void* NSHTTPURLResponse_init() {
  return [[NSHTTPURLResponse alloc] init];
}
//REJECT: statusCode
//void* NSHTTPURLResponse_initWithURLStatusCodeHTTPVersionHeaderFields(void* url, NSInteger statusCode, void* HTTPVersion, void* headerFields) {
//  return [[NSHTTPURLResponse alloc] initWithURL:(NSURL*)url statusCode:statusCode HTTPVersion:(NSString*)HTTPVersion headerFields:(NSDictionary*)headerFields];
//}
//REJECT: NSInteger
//NSInteger NSHTTPURLResponse_statusCode(void* goobj) {
//  return [(NSHTTPURLResponse*)goobj statusCode];
//}
void* NSHTTPURLResponse_allHeaderFields(void* goobj) {
  return [(NSHTTPURLResponse*)goobj allHeaderFields];
}
//REJECT: statusCode
//void* NSHTTPURLResponse__localizedStringForStatusCode(NSInteger statusCode) {
//  return [NSHTTPURLResponse localizedStringForStatusCode:statusCode];
//}

////NSUserDefaults
void* NSUserDefaults_init() {
  return [[NSUserDefaults alloc] init];
}
void* NSUserDefaults_initWithSuiteName(void* suitename) {
  return [[NSUserDefaults alloc] initWithSuiteName:(NSString*)suitename];
}
void* NSUserDefaults_initWithUser(void* username) {
  return [[NSUserDefaults alloc] initWithUser:(NSString*)username];
}
void* NSUserDefaults_objectForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj objectForKey:(NSString*)defaultName];
}
void NSUserDefaults_setObjectForKey(void* goobj, void* value, void* defaultName) {
  [(NSUserDefaults*)goobj setObject:value forKey:(NSString*)defaultName];
}
void NSUserDefaults_removeObjectForKey(void* goobj, void* defaultName) {
  [(NSUserDefaults*)goobj removeObjectForKey:(NSString*)defaultName];
}
void* NSUserDefaults_stringForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj stringForKey:(NSString*)defaultName];
}
void* NSUserDefaults_arrayForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj arrayForKey:(NSString*)defaultName];
}
void* NSUserDefaults_dictionaryForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj dictionaryForKey:(NSString*)defaultName];
}
void* NSUserDefaults_dataForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj dataForKey:(NSString*)defaultName];
}
void* NSUserDefaults_stringArrayForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj stringArrayForKey:(NSString*)defaultName];
}
//REJECT: NSInteger
//NSInteger NSUserDefaults_integerForKey(void* goobj, void* defaultName) {
//  return [(NSUserDefaults*)goobj integerForKey:(NSString*)defaultName];
//}
float NSUserDefaults_floatForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj floatForKey:(NSString*)defaultName];
}
double NSUserDefaults_doubleForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj doubleForKey:(NSString*)defaultName];
}
bool NSUserDefaults_boolForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj boolForKey:(NSString*)defaultName];
}
void* NSUserDefaults_URLForKey(void* goobj, void* defaultName) {
  return [(NSUserDefaults*)goobj URLForKey:(NSString*)defaultName];
}
//REJECT: value
//void NSUserDefaults_setIntegerForKey(void* goobj, NSInteger value, void* defaultName) {
//  [(NSUserDefaults*)goobj setInteger:value forKey:(NSString*)defaultName];
//}
void NSUserDefaults_setFloatForKey(void* goobj, float value, void* defaultName) {
  [(NSUserDefaults*)goobj setFloat:value forKey:(NSString*)defaultName];
}
void NSUserDefaults_setDoubleForKey(void* goobj, double value, void* defaultName) {
  [(NSUserDefaults*)goobj setDouble:value forKey:(NSString*)defaultName];
}
void NSUserDefaults_setBoolForKey(void* goobj, bool value, void* defaultName) {
  [(NSUserDefaults*)goobj setBool:value forKey:(NSString*)defaultName];
}
void NSUserDefaults_setURLForKey(void* goobj, void* url, void* defaultName) {
  [(NSUserDefaults*)goobj setURL:(NSURL*)url forKey:(NSString*)defaultName];
}
void NSUserDefaults_registerDefaults(void* goobj, void* registrationDictionary) {
  [(NSUserDefaults*)goobj registerDefaults:(NSDictionary*)registrationDictionary];
}
void NSUserDefaults_addSuiteNamed(void* goobj, void* suiteName) {
  [(NSUserDefaults*)goobj addSuiteNamed:(NSString*)suiteName];
}
void NSUserDefaults_removeSuiteNamed(void* goobj, void* suiteName) {
  [(NSUserDefaults*)goobj removeSuiteNamed:(NSString*)suiteName];
}
void* NSUserDefaults_dictionaryRepresentation(void* goobj) {
  return [(NSUserDefaults*)goobj dictionaryRepresentation];
}
void* NSUserDefaults_volatileDomainNames(void* goobj) {
  return [(NSUserDefaults*)goobj volatileDomainNames];
}
void* NSUserDefaults_volatileDomainForName(void* goobj, void* domainName) {
  return [(NSUserDefaults*)goobj volatileDomainForName:(NSString*)domainName];
}
void NSUserDefaults_setVolatileDomainForName(void* goobj, void* domain, void* domainName) {
  [(NSUserDefaults*)goobj setVolatileDomain:(NSDictionary*)domain forName:(NSString*)domainName];
}
void NSUserDefaults_removeVolatileDomainForName(void* goobj, void* domainName) {
  [(NSUserDefaults*)goobj removeVolatileDomainForName:(NSString*)domainName];
}
void* NSUserDefaults_persistentDomainNames(void* goobj) {
  return [(NSUserDefaults*)goobj persistentDomainNames];
}
void* NSUserDefaults_persistentDomainForName(void* goobj, void* domainName) {
  return [(NSUserDefaults*)goobj persistentDomainForName:(NSString*)domainName];
}
void NSUserDefaults_setPersistentDomainForName(void* goobj, void* domain, void* domainName) {
  [(NSUserDefaults*)goobj setPersistentDomain:(NSDictionary*)domain forName:(NSString*)domainName];
}
void NSUserDefaults_removePersistentDomainForName(void* goobj, void* domainName) {
  [(NSUserDefaults*)goobj removePersistentDomainForName:(NSString*)domainName];
}
bool NSUserDefaults_synchronize(void* goobj) {
  return [(NSUserDefaults*)goobj synchronize];
}
bool NSUserDefaults_objectIsForcedForKey(void* goobj, void* key) {
  return [(NSUserDefaults*)goobj objectIsForcedForKey:(NSString*)key];
}
bool NSUserDefaults_objectIsForcedForKeyInDomain(void* goobj, void* key, void* domain) {
  return [(NSUserDefaults*)goobj objectIsForcedForKey:(NSString*)key inDomain:(NSString*)domain];
}
void* NSUserDefaults__standardUserDefaults() {
  return [NSUserDefaults standardUserDefaults];
}
void NSUserDefaults__resetStandardUserDefaults() {
  [NSUserDefaults resetStandardUserDefaults];
}

////NSValueTransformer
void* NSValueTransformer_init() {
  return [[NSValueTransformer alloc] init];
}
void* NSValueTransformer_transformedValue(void* goobj, void* value) {
  return [(NSValueTransformer*)goobj transformedValue:value];
}
void* NSValueTransformer_reverseTransformedValue(void* goobj, void* value) {
  return [(NSValueTransformer*)goobj reverseTransformedValue:value];
}
void NSValueTransformer__setValueTransformerForName(void* transformer, void* name) {
  [NSValueTransformer setValueTransformer:(NSValueTransformer*)transformer forName:(NSString*)name];
}
void* NSValueTransformer__valueTransformerForName(void* name) {
  return [NSValueTransformer valueTransformerForName:(NSString*)name];
}
void* NSValueTransformer__valueTransformerNames() {
  return [NSValueTransformer valueTransformerNames];
}
//REJECT: Class
//Class NSValueTransformer__transformedValueClass() {
//  return [NSValueTransformer transformedValueClass];
//}
bool NSValueTransformer__allowsReverseTransformation() {
  return [NSValueTransformer allowsReverseTransformation];
}

////NSXMLParser
void* NSXMLParser_init() {
  return [[NSXMLParser alloc] init];
}
void* NSXMLParser_initWithContentsOfURL(void* url) {
  return [[NSXMLParser alloc] initWithContentsOfURL:(NSURL*)url];
}
void* NSXMLParser_initWithData(void* data) {
  return [[NSXMLParser alloc] initWithData:(NSData*)data];
}
void* NSXMLParser_initWithStream(void* stream) {
  return [[NSXMLParser alloc] initWithStream:(NSInputStream*)stream];
}
void* NSXMLParser_delegate(void* goobj) {
  return [(NSXMLParser*)goobj delegate];
}
void NSXMLParser_setDelegate(void* goobj, void* delegate) {
  [(NSXMLParser*)goobj setDelegate:delegate];
}
void NSXMLParser_setShouldProcessNamespaces(void* goobj, bool shouldProcessNamespaces) {
  [(NSXMLParser*)goobj setShouldProcessNamespaces:shouldProcessNamespaces];
}
void NSXMLParser_setShouldReportNamespacePrefixes(void* goobj, bool shouldReportNamespacePrefixes) {
  [(NSXMLParser*)goobj setShouldReportNamespacePrefixes:shouldReportNamespacePrefixes];
}
void NSXMLParser_setShouldResolveExternalEntities(void* goobj, bool shouldResolveExternalEntities) {
  [(NSXMLParser*)goobj setShouldResolveExternalEntities:shouldResolveExternalEntities];
}
bool NSXMLParser_shouldProcessNamespaces(void* goobj) {
  return [(NSXMLParser*)goobj shouldProcessNamespaces];
}
bool NSXMLParser_shouldReportNamespacePrefixes(void* goobj) {
  return [(NSXMLParser*)goobj shouldReportNamespacePrefixes];
}
bool NSXMLParser_shouldResolveExternalEntities(void* goobj) {
  return [(NSXMLParser*)goobj shouldResolveExternalEntities];
}
bool NSXMLParser_parse(void* goobj) {
  return [(NSXMLParser*)goobj parse];
}
void NSXMLParser_abortParsing(void* goobj) {
  [(NSXMLParser*)goobj abortParsing];
}
void* NSXMLParser_parserError(void* goobj) {
  return [(NSXMLParser*)goobj parserError];
}
void* NSXMLParser_publicID(void* goobj) {
  return [(NSXMLParser*)goobj publicID];
}
void* NSXMLParser_systemID(void* goobj) {
  return [(NSXMLParser*)goobj systemID];
}
//REJECT: NSInteger
//NSInteger NSXMLParser_lineNumber(void* goobj) {
//  return [(NSXMLParser*)goobj lineNumber];
//}
//REJECT: NSInteger
//NSInteger NSXMLParser_columnNumber(void* goobj) {
//  return [(NSXMLParser*)goobj columnNumber];
//}


////NSAttributedString
void* NSAttributedString_init() {
  return [[NSAttributedString alloc] init];
}
void* NSAttributedString_string(void* goobj) {
  return [(NSAttributedString*)goobj string];
}
//REJECT: range
//void* NSAttributedString_attributesAtIndexEffectiveRange(void* goobj, uint location, NSRangePointer range) {
//  return [(NSAttributedString*)goobj attributesAtIndex:location effectiveRange:range];
//}
uint NSAttributedString_length(void* goobj) {
  return [(NSAttributedString*)goobj length];
}
//REJECT: range
//void* NSAttributedString_attributeAtIndexEffectiveRange(void* goobj, void* attrName, uint location, NSRangePointer range) {
//  return [(NSAttributedString*)goobj attribute:(NSString*)attrName atIndex:location effectiveRange:range];
//}
//REJECT: range
//void* NSAttributedString_attributedSubstringFromRange(void* goobj, NSRange range) {
//  return [(NSAttributedString*)goobj attributedSubstringFromRange:range];
//}
//REJECT: range rangeLimit
//void* NSAttributedString_attributesAtIndexLongestEffectiveRangeInRange(void* goobj, uint location, NSRangePointer range, NSRange rangeLimit) {
//  return [(NSAttributedString*)goobj attributesAtIndex:location longestEffectiveRange:range inRange:rangeLimit];
//}
//REJECT: range rangeLimit
//void* NSAttributedString_attributeAtIndexLongestEffectiveRangeInRange(void* goobj, void* attrName, uint location, NSRangePointer range, NSRange rangeLimit) {
//  return [(NSAttributedString*)goobj attribute:(NSString*)attrName atIndex:location longestEffectiveRange:range inRange:rangeLimit];
//}
bool NSAttributedString_isEqualToAttributedString(void* goobj, void* other) {
  return [(NSAttributedString*)goobj isEqualToAttributedString:(NSAttributedString*)other];
}
void* NSAttributedString_initWithString(void* str) {
  return [[NSAttributedString alloc] initWithString:(NSString*)str];
}
void* NSAttributedString_initWithStringAttributes(void* str, void* attrs) {
  return [[NSAttributedString alloc] initWithString:(NSString*)str attributes:(NSDictionary*)attrs];
}
void* NSAttributedString_initWithAttributedString(void* attrStr) {
  return [[NSAttributedString alloc] initWithAttributedString:(NSAttributedString*)attrStr];
}
//REJECT: enumerationRange block
//void NSAttributedString_enumerateAttributesInRangeOptionsUsingBlock(void* goobj, NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSAttributedString*)goobj enumerateAttributesInRange:enumerationRange options:opts usingBlock:block];
//}
//REJECT: enumerationRange block
//void NSAttributedString_enumerateAttributeInRangeOptionsUsingBlock(void* goobj, void* attrName, NSRange enumerationRange, NSAttributedStringEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSAttributedString*)goobj enumerateAttribute:(NSString*)attrName inRange:enumerationRange options:opts usingBlock:block];
//}


////NSMutableAttributedString
void* NSMutableAttributedString_init() {
  return [[NSMutableAttributedString alloc] init];
}
//REJECT: range
//void NSMutableAttributedString_replaceCharactersInRangeWithString(void* goobj, NSRange range, void* str) {
//  [(NSMutableAttributedString*)goobj replaceCharactersInRange:range withString:(NSString*)str];
//}
//REJECT: range
//void NSMutableAttributedString_setAttributesRange(void* goobj, void* attrs, NSRange range) {
//  [(NSMutableAttributedString*)goobj setAttributes:(NSDictionary*)attrs range:range];
//}
void* NSMutableAttributedString_mutableString(void* goobj) {
  return [(NSMutableAttributedString*)goobj mutableString];
}
//REJECT: range
//void NSMutableAttributedString_addAttributeValueRange(void* goobj, void* name, void* value, NSRange range) {
//  [(NSMutableAttributedString*)goobj addAttribute:(NSString*)name value:value range:range];
//}
//REJECT: range
//void NSMutableAttributedString_addAttributesRange(void* goobj, void* attrs, NSRange range) {
//  [(NSMutableAttributedString*)goobj addAttributes:(NSDictionary*)attrs range:range];
//}
//REJECT: range
//void NSMutableAttributedString_removeAttributeRange(void* goobj, void* name, NSRange range) {
//  [(NSMutableAttributedString*)goobj removeAttribute:(NSString*)name range:range];
//}
//REJECT: range
//void NSMutableAttributedString_replaceCharactersInRangeWithAttributedString(void* goobj, NSRange range, void* attrString) {
//  [(NSMutableAttributedString*)goobj replaceCharactersInRange:range withAttributedString:(NSAttributedString*)attrString];
//}
void NSMutableAttributedString_insertAttributedStringAtIndex(void* goobj, void* attrString, uint loc) {
  [(NSMutableAttributedString*)goobj insertAttributedString:(NSAttributedString*)attrString atIndex:loc];
}
void NSMutableAttributedString_appendAttributedString(void* goobj, void* attrString) {
  [(NSMutableAttributedString*)goobj appendAttributedString:(NSAttributedString*)attrString];
}
//REJECT: range
//void NSMutableAttributedString_deleteCharactersInRange(void* goobj, NSRange range) {
//  [(NSMutableAttributedString*)goobj deleteCharactersInRange:range];
//}
void NSMutableAttributedString_setAttributedString(void* goobj, void* attrString) {
  [(NSMutableAttributedString*)goobj setAttributedString:(NSAttributedString*)attrString];
}
void NSMutableAttributedString_beginEditing(void* goobj) {
  [(NSMutableAttributedString*)goobj beginEditing];
}
void NSMutableAttributedString_endEditing(void* goobj) {
  [(NSMutableAttributedString*)goobj endEditing];
}


////NSByteCountFormatter
void* NSByteCountFormatter_init() {
  return [[NSByteCountFormatter alloc] init];
}
void* NSByteCountFormatter_stringFromByteCount(void* goobj, long long byteCount) {
  return [(NSByteCountFormatter*)goobj stringFromByteCount:byteCount];
}
NSByteCountFormatterUnits NSByteCountFormatter_allowedUnits(void* goobj) {
  return [(NSByteCountFormatter*)goobj allowedUnits];
}
void NSByteCountFormatter_setAllowedUnits(void* goobj, NSByteCountFormatterUnits allowedUnits) {
  [(NSByteCountFormatter*)goobj setAllowedUnits:allowedUnits];
}
NSByteCountFormatterCountStyle NSByteCountFormatter_countStyle(void* goobj) {
  return [(NSByteCountFormatter*)goobj countStyle];
}
void NSByteCountFormatter_setCountStyle(void* goobj, NSByteCountFormatterCountStyle countStyle) {
  [(NSByteCountFormatter*)goobj setCountStyle:countStyle];
}
bool NSByteCountFormatter_allowsNonnumericFormatting(void* goobj) {
  return [(NSByteCountFormatter*)goobj allowsNonnumericFormatting];
}
void NSByteCountFormatter_setAllowsNonnumericFormatting(void* goobj, bool allowsNonnumericFormatting) {
  [(NSByteCountFormatter*)goobj setAllowsNonnumericFormatting:allowsNonnumericFormatting];
}
bool NSByteCountFormatter_includesUnit(void* goobj) {
  return [(NSByteCountFormatter*)goobj includesUnit];
}
void NSByteCountFormatter_setIncludesUnit(void* goobj, bool includesUnit) {
  [(NSByteCountFormatter*)goobj setIncludesUnit:includesUnit];
}
bool NSByteCountFormatter_includesCount(void* goobj) {
  return [(NSByteCountFormatter*)goobj includesCount];
}
void NSByteCountFormatter_setIncludesCount(void* goobj, bool includesCount) {
  [(NSByteCountFormatter*)goobj setIncludesCount:includesCount];
}
bool NSByteCountFormatter_includesActualByteCount(void* goobj) {
  return [(NSByteCountFormatter*)goobj includesActualByteCount];
}
void NSByteCountFormatter_setIncludesActualByteCount(void* goobj, bool includesActualByteCount) {
  [(NSByteCountFormatter*)goobj setIncludesActualByteCount:includesActualByteCount];
}
char NSByteCountFormatter_isAdaptive(void* goobj) {
  return [(NSByteCountFormatter*)goobj isAdaptive];
}
void NSByteCountFormatter_setAdaptive(void* goobj, bool adaptive) {
  [(NSByteCountFormatter*)goobj setAdaptive:adaptive];
}
bool NSByteCountFormatter_zeroPadsFractionDigits(void* goobj) {
  return [(NSByteCountFormatter*)goobj zeroPadsFractionDigits];
}
void NSByteCountFormatter_setZeroPadsFractionDigits(void* goobj, bool zeroPadsFractionDigits) {
  [(NSByteCountFormatter*)goobj setZeroPadsFractionDigits:zeroPadsFractionDigits];
}
void* NSByteCountFormatter__stringFromByteCountCountStyle(long long byteCount, NSByteCountFormatterCountStyle countStyle) {
  return [NSByteCountFormatter stringFromByteCount:byteCount countStyle:countStyle];
}

////NSCache
void* NSCache_init() {
  return [[NSCache alloc] init];
}
void NSCache_setName(void* goobj, void* n) {
  [(NSCache*)goobj setName:(NSString*)n];
}
void* NSCache_name(void* goobj) {
  return [(NSCache*)goobj name];
}
void NSCache_setDelegate(void* goobj, void* d) {
  [(NSCache*)goobj setDelegate:d];
}
void* NSCache_delegate(void* goobj) {
  return [(NSCache*)goobj delegate];
}
void* NSCache_objectForKey(void* goobj, void* key) {
  return [(NSCache*)goobj objectForKey:key];
}
void NSCache_setObjectForKey(void* goobj, void* obj, void* key) {
  [(NSCache*)goobj setObject:obj forKey:key];
}
void NSCache_setObjectForKeyCost(void* goobj, void* obj, void* key, uint g) {
  [(NSCache*)goobj setObject:obj forKey:key cost:g];
}
void NSCache_removeObjectForKey(void* goobj, void* key) {
  [(NSCache*)goobj removeObjectForKey:key];
}
void NSCache_removeAllObjects(void* goobj) {
  [(NSCache*)goobj removeAllObjects];
}
void NSCache_setTotalCostLimit(void* goobj, uint lim) {
  [(NSCache*)goobj setTotalCostLimit:lim];
}
uint NSCache_totalCostLimit(void* goobj) {
  return [(NSCache*)goobj totalCostLimit];
}
void NSCache_setCountLimit(void* goobj, uint lim) {
  [(NSCache*)goobj setCountLimit:lim];
}
uint NSCache_countLimit(void* goobj) {
  return [(NSCache*)goobj countLimit];
}
bool NSCache_evictsObjectsWithDiscardedContent(void* goobj) {
  return [(NSCache*)goobj evictsObjectsWithDiscardedContent];
}
void NSCache_setEvictsObjectsWithDiscardedContent(void* goobj, bool b) {
  [(NSCache*)goobj setEvictsObjectsWithDiscardedContent:b];
}


////NSPredicate
void* NSPredicate_init() {
  return [[NSPredicate alloc] init];
}
void* NSPredicate_predicateFormat(void* goobj) {
  return [(NSPredicate*)goobj predicateFormat];
}
void* NSPredicate_predicateWithSubstitutionVariables(void* goobj, void* variables) {
  return [(NSPredicate*)goobj predicateWithSubstitutionVariables:(NSDictionary*)variables];
}
bool NSPredicate_evaluateWithObject(void* goobj, void* object) {
  return [(NSPredicate*)goobj evaluateWithObject:object];
}
bool NSPredicate_evaluateWithObjectSubstitutionVariables(void* goobj, void* object, void* bindings) {
  return [(NSPredicate*)goobj evaluateWithObject:object substitutionVariables:(NSDictionary*)bindings];
}
void NSPredicate_allowEvaluation(void* goobj) {
  [(NSPredicate*)goobj allowEvaluation];
}
void* NSPredicate__predicateWithFormatArgumentArray(void* predicateFormat, void* arguments) {
  return [NSPredicate predicateWithFormat:(NSString*)predicateFormat argumentArray:(NSArray*)arguments];
}
void* NSPredicate__predicateWithFormat(void* predicateFormat) {
  return [NSPredicate predicateWithFormat:(NSString*)predicateFormat];
}
//REJECT: argList
//void* NSPredicate__predicateWithFormatArguments(void* predicateFormat, va_list argList) {
//  return [NSPredicate predicateWithFormat:(NSString*)predicateFormat arguments:argList];
//}
void* NSPredicate__predicateFromMetadataQueryString(void* queryString) {
  return [NSPredicate predicateFromMetadataQueryString:(NSString*)queryString];
}
void* NSPredicate__predicateWithValue(bool value) {
  return [NSPredicate predicateWithValue:value];
}
//unacceptalble-method
//void* NSPredicate__predicateWithBlock(bool block) {
//  return [NSPredicate predicateWithBlock:block];
//}

////NSComparisonPredicate
void* NSComparisonPredicate_init() {
  return [[NSComparisonPredicate alloc] init];
}
void* NSComparisonPredicate_initWithLeftExpressionRightExpressionModifierTypeOptions(void* lhs, void* rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options) {
  return [[NSComparisonPredicate alloc] initWithLeftExpression:(NSExpression*)lhs rightExpression:(NSExpression*)rhs modifier:modifier type:type options:options];
}
//REJECT: selector
//void* NSComparisonPredicate_initWithLeftExpressionRightExpressionCustomSelector(void* lhs, void* rhs, SEL selector) {
//  return [[NSComparisonPredicate alloc] initWithLeftExpression:(NSExpression*)lhs rightExpression:(NSExpression*)rhs customSelector:selector];
//}
NSPredicateOperatorType NSComparisonPredicate_predicateOperatorType(void* goobj) {
  return [(NSComparisonPredicate*)goobj predicateOperatorType];
}
NSComparisonPredicateModifier NSComparisonPredicate_comparisonPredicateModifier(void* goobj) {
  return [(NSComparisonPredicate*)goobj comparisonPredicateModifier];
}
void* NSComparisonPredicate_leftExpression(void* goobj) {
  return [(NSComparisonPredicate*)goobj leftExpression];
}
void* NSComparisonPredicate_rightExpression(void* goobj) {
  return [(NSComparisonPredicate*)goobj rightExpression];
}
//REJECT: SEL
//SEL NSComparisonPredicate_customSelector(void* goobj) {
//  return [(NSComparisonPredicate*)goobj customSelector];
//}
NSComparisonPredicateOptions NSComparisonPredicate_options(void* goobj) {
  return [(NSComparisonPredicate*)goobj options];
}
void* NSComparisonPredicate__predicateWithLeftExpressionRightExpressionModifierTypeOptions(void* lhs, void* rhs, NSComparisonPredicateModifier modifier, NSPredicateOperatorType type, NSComparisonPredicateOptions options) {
  return [NSComparisonPredicate predicateWithLeftExpression:(NSExpression*)lhs rightExpression:(NSExpression*)rhs modifier:modifier type:type options:options];
}
//REJECT: selector
//void* NSComparisonPredicate__predicateWithLeftExpressionRightExpressionCustomSelector(void* lhs, void* rhs, SEL selector) {
//  return [NSComparisonPredicate predicateWithLeftExpression:(NSExpression*)lhs rightExpression:(NSExpression*)rhs customSelector:selector];
//}

////NSCompoundPredicate
void* NSCompoundPredicate_init() {
  return [[NSCompoundPredicate alloc] init];
}
void* NSCompoundPredicate_initWithTypeSubpredicates(NSCompoundPredicateType type, void* subpredicates) {
  return [[NSCompoundPredicate alloc] initWithType:type subpredicates:(NSArray*)subpredicates];
}
NSCompoundPredicateType NSCompoundPredicate_compoundPredicateType(void* goobj) {
  return [(NSCompoundPredicate*)goobj compoundPredicateType];
}
void* NSCompoundPredicate_subpredicates(void* goobj) {
  return [(NSCompoundPredicate*)goobj subpredicates];
}
void* NSCompoundPredicate__andPredicateWithSubpredicates(void* subpredicates) {
  return [NSCompoundPredicate andPredicateWithSubpredicates:(NSArray*)subpredicates];
}
void* NSCompoundPredicate__orPredicateWithSubpredicates(void* subpredicates) {
  return [NSCompoundPredicate orPredicateWithSubpredicates:(NSArray*)subpredicates];
}
void* NSCompoundPredicate__notPredicateWithSubpredicate(void* predicate) {
  return [NSCompoundPredicate notPredicateWithSubpredicate:(NSPredicate*)predicate];
}

////NSExpression
void* NSExpression_init() {
  return [[NSExpression alloc] init];
}
void* NSExpression_initWithExpressionType(NSExpressionType type) {
  return [[NSExpression alloc] initWithExpressionType:type];
}
NSExpressionType NSExpression_expressionType(void* goobj) {
  return [(NSExpression*)goobj expressionType];
}
void* NSExpression_constantValue(void* goobj) {
  return [(NSExpression*)goobj constantValue];
}
void* NSExpression_keyPath(void* goobj) {
  return [(NSExpression*)goobj keyPath];
}
void* NSExpression_function(void* goobj) {
  return [(NSExpression*)goobj function];
}
void* NSExpression_variable(void* goobj) {
  return [(NSExpression*)goobj variable];
}
void* NSExpression_operand(void* goobj) {
  return [(NSExpression*)goobj operand];
}
void* NSExpression_arguments(void* goobj) {
  return [(NSExpression*)goobj arguments];
}
void* NSExpression_collection(void* goobj) {
  return [(NSExpression*)goobj collection];
}
void* NSExpression_predicate(void* goobj) {
  return [(NSExpression*)goobj predicate];
}
void* NSExpression_leftExpression(void* goobj) {
  return [(NSExpression*)goobj leftExpression];
}
void* NSExpression_rightExpression(void* goobj) {
  return [(NSExpression*)goobj rightExpression];
}
//unacceptalble-method
//void* NSExpression_expressionBlock(void* goobj, void* , void* , void* ) {
//  return [(NSExpression*)goobj expressionBlock];
//}
void* NSExpression_expressionValueWithObjectContext(void* goobj, void* object, void* context) {
  return [(NSExpression*)goobj expressionValueWithObject:object context:(NSMutableDictionary*)context];
}
void NSExpression_allowEvaluation(void* goobj) {
  [(NSExpression*)goobj allowEvaluation];
}
void* NSExpression__expressionWithFormatArgumentArray(void* expressionFormat, void* arguments) {
  return [NSExpression expressionWithFormat:(NSString*)expressionFormat argumentArray:(NSArray*)arguments];
}
void* NSExpression__expressionWithFormat(void* expressionFormat) {
  return [NSExpression expressionWithFormat:(NSString*)expressionFormat];
}
//REJECT: argList
//void* NSExpression__expressionWithFormatArguments(void* expressionFormat, va_list argList) {
//  return [NSExpression expressionWithFormat:(NSString*)expressionFormat arguments:argList];
//}
void* NSExpression__expressionForConstantValue(void* obj) {
  return [NSExpression expressionForConstantValue:obj];
}
void* NSExpression__expressionForEvaluatedObject() {
  return [NSExpression expressionForEvaluatedObject];
}
void* NSExpression__expressionForVariable(void* string) {
  return [NSExpression expressionForVariable:(NSString*)string];
}
void* NSExpression__expressionForKeyPath(void* keyPath) {
  return [NSExpression expressionForKeyPath:(NSString*)keyPath];
}
void* NSExpression__expressionForFunctionArguments(void* name, void* parameters) {
  return [NSExpression expressionForFunction:(NSString*)name arguments:(NSArray*)parameters];
}
void* NSExpression__expressionForAggregate(void* subexpressions) {
  return [NSExpression expressionForAggregate:(NSArray*)subexpressions];
}
void* NSExpression__expressionForUnionSetWith(void* left, void* right) {
  return [NSExpression expressionForUnionSet:(NSExpression*)left with:(NSExpression*)right];
}
void* NSExpression__expressionForIntersectSetWith(void* left, void* right) {
  return [NSExpression expressionForIntersectSet:(NSExpression*)left with:(NSExpression*)right];
}
void* NSExpression__expressionForMinusSetWith(void* left, void* right) {
  return [NSExpression expressionForMinusSet:(NSExpression*)left with:(NSExpression*)right];
}
void* NSExpression__expressionForSubqueryUsingIteratorVariablePredicate(void* expression, void* variable, void* predicate) {
  return [NSExpression expressionForSubquery:(NSExpression*)expression usingIteratorVariable:(NSString*)variable predicate:predicate];
}
void* NSExpression__expressionForFunctionSelectorNameArguments(void* target, void* name, void* parameters) {
  return [NSExpression expressionForFunction:(NSExpression*)target selectorName:(NSString*)name arguments:(NSArray*)parameters];
}
void* NSExpression__expressionForAnyKey() {
  return [NSExpression expressionForAnyKey];
}
void* NSExpression__expressionForBlockArguments(void* block, void* arguments) {
  return [NSExpression expressionForBlock:block arguments:(NSArray*)arguments];
}

////NSFileCoordinator
void* NSFileCoordinator_init() {
  return [[NSFileCoordinator alloc] init];
}
void* NSFileCoordinator_initWithFilePresenter(void* filePresenterOrNil) {
  return [[NSFileCoordinator alloc] initWithFilePresenter:filePresenterOrNil];
}
//REJECT: reader
//void NSFileCoordinator_coordinateReadingItemAtURLOptionsErrorByAccessor(void* goobj, void* url, NSFileCoordinatorReadingOptions options, void* outError, *INVALID TYPE* reader) {
//  [(NSFileCoordinator*)goobj coordinateReadingItemAtURL:(NSURL*)url options:options error:(NSError**)&outError byAccessor:reader];
//}
//REJECT: writer
//void NSFileCoordinator_coordinateWritingItemAtURLOptionsErrorByAccessor(void* goobj, void* url, NSFileCoordinatorWritingOptions options, void* outError, *INVALID TYPE* writer) {
//  [(NSFileCoordinator*)goobj coordinateWritingItemAtURL:(NSURL*)url options:options error:(NSError**)&outError byAccessor:writer];
//}
//REJECT: readerWriter
//void NSFileCoordinator_coordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(void* goobj, void* readingURL, NSFileCoordinatorReadingOptions readingOptions, void* writingURL, NSFileCoordinatorWritingOptions writingOptions, void* outError, *INVALID TYPE* readerWriter) {
//  [(NSFileCoordinator*)goobj coordinateReadingItemAtURL:(NSURL*)readingURL options:readingOptions writingItemAtURL:(NSURL*)writingURL options:writingOptions error:(NSError**)&outError byAccessor:readerWriter];
//}
//REJECT: writer
//void NSFileCoordinator_coordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(void* goobj, void* url1, NSFileCoordinatorWritingOptions options1, void* url2, NSFileCoordinatorWritingOptions options2, void* outError, *INVALID TYPE* writer) {
//  [(NSFileCoordinator*)goobj coordinateWritingItemAtURL:(NSURL*)url1 options:options1 writingItemAtURL:(NSURL*)url2 options:options2 error:(NSError**)&outError byAccessor:writer];
//}
//REJECT: batchAccessor
//void NSFileCoordinator_prepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(void* goobj, void* readingURLs, NSFileCoordinatorReadingOptions readingOptions, void* writingURLs, NSFileCoordinatorWritingOptions writingOptions, void* outError, *INVALID TYPE* batchAccessor) {
//  [(NSFileCoordinator*)goobj prepareForReadingItemsAtURLs:(NSArray*)readingURLs options:readingOptions writingItemsAtURLs:(NSArray*)writingURLs options:writingOptions error:(NSError**)&outError byAccessor:batchAccessor];
//}
void NSFileCoordinator_itemAtURLWillMoveToURL(void* goobj, void* oldURL, void* newURL) {
  [(NSFileCoordinator*)goobj itemAtURL:(NSURL*)oldURL willMoveToURL:(NSURL*)newURL];
}
void NSFileCoordinator_itemAtURLDidMoveToURL(void* goobj, void* oldURL, void* newURL) {
  [(NSFileCoordinator*)goobj itemAtURL:(NSURL*)oldURL didMoveToURL:(NSURL*)newURL];
}
void NSFileCoordinator_cancel(void* goobj) {
  [(NSFileCoordinator*)goobj cancel];
}
void NSFileCoordinator__addFilePresenter(void* filePresenter) {
  [NSFileCoordinator addFilePresenter:filePresenter];
}
void NSFileCoordinator__removeFilePresenter(void* filePresenter) {
  [NSFileCoordinator removeFilePresenter:filePresenter];
}
void* NSFileCoordinator__filePresenters() {
  return [NSFileCoordinator filePresenters];
}

////NSFileVersion
void* NSFileVersion_init() {
  return [[NSFileVersion alloc] init];
}
void* NSFileVersion_replaceItemAtURLOptionsError(void* goobj, void* url, NSFileVersionReplacingOptions options, void* error) {
  return [(NSFileVersion*)goobj replaceItemAtURL:(NSURL*)url options:options error:(NSError**)&error];
}
bool NSFileVersion_removeAndReturnError(void* goobj, void* outError) {
  return [(NSFileVersion*)goobj removeAndReturnError:(NSError**)&outError];
}
void* NSFileVersion_URL(void* goobj) {
  return [(NSFileVersion*)goobj URL];
}
void* NSFileVersion_localizedName(void* goobj) {
  return [(NSFileVersion*)goobj localizedName];
}
void* NSFileVersion_localizedNameOfSavingComputer(void* goobj) {
  return [(NSFileVersion*)goobj localizedNameOfSavingComputer];
}
void* NSFileVersion_modificationDate(void* goobj) {
  return [(NSFileVersion*)goobj modificationDate];
}
void* NSFileVersion_persistentIdentifier(void* goobj) {
  return [(NSFileVersion*)goobj persistentIdentifier];
}
char NSFileVersion_isConflict(void* goobj) {
  return [(NSFileVersion*)goobj isConflict];
}
char NSFileVersion_isResolved(void* goobj) {
  return [(NSFileVersion*)goobj isResolved];
}
void NSFileVersion_setResolved(void* goobj, bool resolved) {
  [(NSFileVersion*)goobj setResolved:resolved];
}
char NSFileVersion_isDiscardable(void* goobj) {
  return [(NSFileVersion*)goobj isDiscardable];
}
void NSFileVersion_setDiscardable(void* goobj, bool discardable) {
  [(NSFileVersion*)goobj setDiscardable:discardable];
}
void* NSFileVersion__currentVersionOfItemAtURL(void* url) {
  return [NSFileVersion currentVersionOfItemAtURL:(NSURL*)url];
}
void* NSFileVersion__otherVersionsOfItemAtURL(void* url) {
  return [NSFileVersion otherVersionsOfItemAtURL:(NSURL*)url];
}
void* NSFileVersion__unresolvedConflictVersionsOfItemAtURL(void* url) {
  return [NSFileVersion unresolvedConflictVersionsOfItemAtURL:(NSURL*)url];
}
void* NSFileVersion__versionOfItemAtURLForPersistentIdentifier(void* url, void* persistentIdentifier) {
  return [NSFileVersion versionOfItemAtURL:(NSURL*)url forPersistentIdentifier:persistentIdentifier];
}
void* NSFileVersion__addVersionOfItemAtURLWithContentsOfURLOptionsError(void* url, void* contentsURL, NSFileVersionAddingOptions options, void* outError) {
  return [NSFileVersion addVersionOfItemAtURL:(NSURL*)url withContentsOfURL:(NSURL*)contentsURL options:options error:(NSError**)&outError];
}
void* NSFileVersion__temporaryDirectoryURLForNewVersionOfItemAtURL(void* url) {
  return [NSFileVersion temporaryDirectoryURLForNewVersionOfItemAtURL:(NSURL*)url];
}
bool NSFileVersion__removeOtherVersionsOfItemAtURLError(void* url, void* outError) {
  return [NSFileVersion removeOtherVersionsOfItemAtURL:(NSURL*)url error:(NSError**)&outError];
}

////NSFileWrapper
void* NSFileWrapper_init() {
  return [[NSFileWrapper alloc] init];
}
void* NSFileWrapper_initWithURLOptionsError(void* url, NSFileWrapperReadingOptions options, void* outError) {
  return [[NSFileWrapper alloc] initWithURL:(NSURL*)url options:options error:(NSError**)&outError];
}
void* NSFileWrapper_initDirectoryWithFileWrappers(void* goobj, void* childrenByPreferredName) {
  return [(NSFileWrapper*)goobj initDirectoryWithFileWrappers:(NSDictionary*)childrenByPreferredName];
}
void* NSFileWrapper_initRegularFileWithContents(void* goobj, void* contents) {
  return [(NSFileWrapper*)goobj initRegularFileWithContents:(NSData*)contents];
}
void* NSFileWrapper_initSymbolicLinkWithDestinationURL(void* goobj, void* url) {
  return [(NSFileWrapper*)goobj initSymbolicLinkWithDestinationURL:(NSURL*)url];
}
void* NSFileWrapper_initWithSerializedRepresentation(void* serializeRepresentation) {
  return [[NSFileWrapper alloc] initWithSerializedRepresentation:(NSData*)serializeRepresentation];
}
bool NSFileWrapper_isDirectory(void* goobj) {
  return [(NSFileWrapper*)goobj isDirectory];
}
bool NSFileWrapper_isRegularFile(void* goobj) {
  return [(NSFileWrapper*)goobj isRegularFile];
}
bool NSFileWrapper_isSymbolicLink(void* goobj) {
  return [(NSFileWrapper*)goobj isSymbolicLink];
}
void NSFileWrapper_setPreferredFilename(void* goobj, void* fileName) {
  [(NSFileWrapper*)goobj setPreferredFilename:(NSString*)fileName];
}
void* NSFileWrapper_preferredFilename(void* goobj) {
  return [(NSFileWrapper*)goobj preferredFilename];
}
void NSFileWrapper_setFilename(void* goobj, void* fileName) {
  [(NSFileWrapper*)goobj setFilename:(NSString*)fileName];
}
void* NSFileWrapper_filename(void* goobj) {
  return [(NSFileWrapper*)goobj filename];
}
void NSFileWrapper_setFileAttributes(void* goobj, void* fileAttributes) {
  [(NSFileWrapper*)goobj setFileAttributes:(NSDictionary*)fileAttributes];
}
void* NSFileWrapper_fileAttributes(void* goobj) {
  return [(NSFileWrapper*)goobj fileAttributes];
}
bool NSFileWrapper_matchesContentsOfURL(void* goobj, void* url) {
  return [(NSFileWrapper*)goobj matchesContentsOfURL:(NSURL*)url];
}
bool NSFileWrapper_readFromURLOptionsError(void* goobj, void* url, NSFileWrapperReadingOptions options, void* outError) {
  return [(NSFileWrapper*)goobj readFromURL:(NSURL*)url options:options error:(NSError**)&outError];
}
bool NSFileWrapper_writeToURLOptionsOriginalContentsURLError(void* goobj, void* url, NSFileWrapperWritingOptions options, void* originalContentsURL, void* outError) {
  return [(NSFileWrapper*)goobj writeToURL:(NSURL*)url options:options originalContentsURL:(NSURL*)originalContentsURL error:(NSError**)&outError];
}
void* NSFileWrapper_serializedRepresentation(void* goobj) {
  return [(NSFileWrapper*)goobj serializedRepresentation];
}
void* NSFileWrapper_addFileWrapper(void* goobj, void* child) {
  return [(NSFileWrapper*)goobj addFileWrapper:(NSFileWrapper*)child];
}
void* NSFileWrapper_addRegularFileWithContentsPreferredFilename(void* goobj, void* data, void* fileName) {
  return [(NSFileWrapper*)goobj addRegularFileWithContents:(NSData*)data preferredFilename:(NSString*)fileName];
}
void NSFileWrapper_removeFileWrapper(void* goobj, void* child) {
  [(NSFileWrapper*)goobj removeFileWrapper:(NSFileWrapper*)child];
}
void* NSFileWrapper_fileWrappers(void* goobj) {
  return [(NSFileWrapper*)goobj fileWrappers];
}
void* NSFileWrapper_keyForFileWrapper(void* goobj, void* child) {
  return [(NSFileWrapper*)goobj keyForFileWrapper:(NSFileWrapper*)child];
}
void* NSFileWrapper_regularFileContents(void* goobj) {
  return [(NSFileWrapper*)goobj regularFileContents];
}
void* NSFileWrapper_symbolicLinkDestinationURL(void* goobj) {
  return [(NSFileWrapper*)goobj symbolicLinkDestinationURL];
}


////NSLinguisticTagger
void* NSLinguisticTagger_init() {
  return [[NSLinguisticTagger alloc] init];
}
void* NSLinguisticTagger_initWithTagSchemesOptions(void* tagSchemes, uint opts) {
  return [[NSLinguisticTagger alloc] initWithTagSchemes:(NSArray*)tagSchemes options:opts];
}
void* NSLinguisticTagger_tagSchemes(void* goobj) {
  return [(NSLinguisticTagger*)goobj tagSchemes];
}
void NSLinguisticTagger_setString(void* goobj, void* string) {
  [(NSLinguisticTagger*)goobj setString:(NSString*)string];
}
void* NSLinguisticTagger_string(void* goobj) {
  return [(NSLinguisticTagger*)goobj string];
}
//REJECT: range
//void NSLinguisticTagger_setOrthographyRange(void* goobj, void* orthography, NSRange range) {
//  [(NSLinguisticTagger*)goobj setOrthography:(NSOrthography*)orthography range:range];
//}
//REJECT: effectiveRange
//void* NSLinguisticTagger_orthographyAtIndexEffectiveRange(void* goobj, uint charIndex, NSRangePointer effectiveRange) {
//  return [(NSLinguisticTagger*)goobj orthographyAtIndex:charIndex effectiveRange:effectiveRange];
//}
//REJECT: newRange delta
//void NSLinguisticTagger_stringEditedInRangeChangeInLength(void* goobj, NSRange newRange, NSInteger delta) {
//  [(NSLinguisticTagger*)goobj stringEditedInRange:newRange changeInLength:delta];
//}
//REJECT: range block
//void NSLinguisticTagger_enumerateTagsInRangeSchemeOptionsUsingBlock(void* goobj, NSRange range, void* tagScheme, NSLinguisticTaggerOptions opts, *INVALID TYPE* block) {
//  [(NSLinguisticTagger*)goobj enumerateTagsInRange:range scheme:(NSString*)tagScheme options:opts usingBlock:block];
//}
//REJECT: NSRange range
//NSRange NSLinguisticTagger_sentenceRangeForRange(void* goobj, NSRange range) {
//  return [(NSLinguisticTagger*)goobj sentenceRangeForRange:range];
//}
//REJECT: tokenRange sentenceRange
//void* NSLinguisticTagger_tagAtIndexSchemeTokenRangeSentenceRange(void* goobj, uint charIndex, void* tagScheme, NSRangePointer tokenRange, NSRangePointer sentenceRange) {
//  return [(NSLinguisticTagger*)goobj tagAtIndex:charIndex scheme:(NSString*)tagScheme tokenRange:tokenRange sentenceRange:sentenceRange];
//}
//REJECT: range
//void* NSLinguisticTagger_tagsInRangeSchemeOptionsTokenRanges(void* goobj, NSRange range, void* tagScheme, NSLinguisticTaggerOptions opts, void* tokenRanges) {
//  return [(NSLinguisticTagger*)goobj tagsInRange:range scheme:(NSString*)tagScheme options:opts tokenRanges:(NSArray*)tokenRanges];
//}
//REJECT: tokenRange sentenceRange
//void* NSLinguisticTagger_possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(void* goobj, uint charIndex, void* tagScheme, NSRangePointer tokenRange, NSRangePointer sentenceRange, void* scores) {
//  return [(NSLinguisticTagger*)goobj possibleTagsAtIndex:charIndex scheme:(NSString*)tagScheme tokenRange:tokenRange sentenceRange:sentenceRange scores:(NSArray*)scores];
//}
void* NSLinguisticTagger__availableTagSchemesForLanguage(void* language) {
  return [NSLinguisticTagger availableTagSchemesForLanguage:(NSString*)language];
}

////NSMetadataQuery
void* NSMetadataQuery_init() {
  return [[NSMetadataQuery alloc] init];
}
void* NSMetadataQuery_delegate(void* goobj) {
  return [(NSMetadataQuery*)goobj delegate];
}
void NSMetadataQuery_setDelegate(void* goobj, void* delegate) {
  [(NSMetadataQuery*)goobj setDelegate:delegate];
}
void* NSMetadataQuery_predicate(void* goobj) {
  return [(NSMetadataQuery*)goobj predicate];
}
void NSMetadataQuery_setPredicate(void* goobj, void* predicate) {
  [(NSMetadataQuery*)goobj setPredicate:(NSPredicate*)predicate];
}
void* NSMetadataQuery_sortDescriptors(void* goobj) {
  return [(NSMetadataQuery*)goobj sortDescriptors];
}
void NSMetadataQuery_setSortDescriptors(void* goobj, void* descriptors) {
  [(NSMetadataQuery*)goobj setSortDescriptors:(NSArray*)descriptors];
}
void* NSMetadataQuery_valueListAttributes(void* goobj) {
  return [(NSMetadataQuery*)goobj valueListAttributes];
}
void NSMetadataQuery_setValueListAttributes(void* goobj, void* attrs) {
  [(NSMetadataQuery*)goobj setValueListAttributes:(NSArray*)attrs];
}
void* NSMetadataQuery_groupingAttributes(void* goobj) {
  return [(NSMetadataQuery*)goobj groupingAttributes];
}
void NSMetadataQuery_setGroupingAttributes(void* goobj, void* attrs) {
  [(NSMetadataQuery*)goobj setGroupingAttributes:(NSArray*)attrs];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSMetadataQuery_notificationBatchingInterval(void* goobj) {
//  return [(NSMetadataQuery*)goobj notificationBatchingInterval];
//}
//REJECT: ti
//void NSMetadataQuery_setNotificationBatchingInterval(void* goobj, NSTimeInterval ti) {
//  [(NSMetadataQuery*)goobj setNotificationBatchingInterval:ti];
//}
void* NSMetadataQuery_searchScopes(void* goobj) {
  return [(NSMetadataQuery*)goobj searchScopes];
}
void NSMetadataQuery_setSearchScopes(void* goobj, void* scopes) {
  [(NSMetadataQuery*)goobj setSearchScopes:(NSArray*)scopes];
}
void* NSMetadataQuery_searchItems(void* goobj) {
  return [(NSMetadataQuery*)goobj searchItems];
}
void NSMetadataQuery_setSearchItems(void* goobj, void* items) {
  [(NSMetadataQuery*)goobj setSearchItems:(NSArray*)items];
}
void* NSMetadataQuery_operationQueue(void* goobj) {
  return [(NSMetadataQuery*)goobj operationQueue];
}
void NSMetadataQuery_setOperationQueue(void* goobj, void* operationQueue) {
  [(NSMetadataQuery*)goobj setOperationQueue:(NSOperationQueue*)operationQueue];
}
bool NSMetadataQuery_startQuery(void* goobj) {
  return [(NSMetadataQuery*)goobj startQuery];
}
void NSMetadataQuery_stopQuery(void* goobj) {
  [(NSMetadataQuery*)goobj stopQuery];
}
bool NSMetadataQuery_isStarted(void* goobj) {
  return [(NSMetadataQuery*)goobj isStarted];
}
bool NSMetadataQuery_isGathering(void* goobj) {
  return [(NSMetadataQuery*)goobj isGathering];
}
bool NSMetadataQuery_isStopped(void* goobj) {
  return [(NSMetadataQuery*)goobj isStopped];
}
void NSMetadataQuery_disableUpdates(void* goobj) {
  [(NSMetadataQuery*)goobj disableUpdates];
}
void NSMetadataQuery_enableUpdates(void* goobj) {
  [(NSMetadataQuery*)goobj enableUpdates];
}
uint NSMetadataQuery_resultCount(void* goobj) {
  return [(NSMetadataQuery*)goobj resultCount];
}
void* NSMetadataQuery_resultAtIndex(void* goobj, uint idx) {
  return [(NSMetadataQuery*)goobj resultAtIndex:idx];
}
//REJECT: block
//void NSMetadataQuery_enumerateResultsUsingBlock(void* goobj, *INVALID TYPE* block) {
//  [(NSMetadataQuery*)goobj enumerateResultsUsingBlock:block];
//}
//REJECT: opts block
//void NSMetadataQuery_enumerateResultsWithOptionsUsingBlock(void* goobj, NSEnumerationOptions opts, *INVALID TYPE* block) {
//  [(NSMetadataQuery*)goobj enumerateResultsWithOptions:opts usingBlock:block];
//}
void* NSMetadataQuery_results(void* goobj) {
  return [(NSMetadataQuery*)goobj results];
}
uint NSMetadataQuery_indexOfResult(void* goobj, void* result) {
  return [(NSMetadataQuery*)goobj indexOfResult:result];
}
void* NSMetadataQuery_valueLists(void* goobj) {
  return [(NSMetadataQuery*)goobj valueLists];
}
void* NSMetadataQuery_groupedResults(void* goobj) {
  return [(NSMetadataQuery*)goobj groupedResults];
}
void* NSMetadataQuery_valueOfAttributeForResultAtIndex(void* goobj, void* attrName, uint idx) {
  return [(NSMetadataQuery*)goobj valueOfAttribute:(NSString*)attrName forResultAtIndex:idx];
}


////NSMetadataItem
void* NSMetadataItem_init() {
  return [[NSMetadataItem alloc] init];
}
void* NSMetadataItem_initWithURL(void* url) {
  return [[NSMetadataItem alloc] initWithURL:(NSURL*)url];
}
void* NSMetadataItem_valueForAttribute(void* goobj, void* key) {
  return [(NSMetadataItem*)goobj valueForAttribute:(NSString*)key];
}
void* NSMetadataItem_valuesForAttributes(void* goobj, void* keys) {
  return [(NSMetadataItem*)goobj valuesForAttributes:(NSArray*)keys];
}
void* NSMetadataItem_attributes(void* goobj) {
  return [(NSMetadataItem*)goobj attributes];
}


////NSMetadataQueryAttributeValueTuple
void* NSMetadataQueryAttributeValueTuple_init() {
  return [[NSMetadataQueryAttributeValueTuple alloc] init];
}
void* NSMetadataQueryAttributeValueTuple_attribute(void* goobj) {
  return [(NSMetadataQueryAttributeValueTuple*)goobj attribute];
}
void* NSMetadataQueryAttributeValueTuple_value(void* goobj) {
  return [(NSMetadataQueryAttributeValueTuple*)goobj value];
}
uint NSMetadataQueryAttributeValueTuple_count(void* goobj) {
  return [(NSMetadataQueryAttributeValueTuple*)goobj count];
}


////NSMetadataQueryResultGroup
void* NSMetadataQueryResultGroup_init() {
  return [[NSMetadataQueryResultGroup alloc] init];
}
void* NSMetadataQueryResultGroup_attribute(void* goobj) {
  return [(NSMetadataQueryResultGroup*)goobj attribute];
}
void* NSMetadataQueryResultGroup_value(void* goobj) {
  return [(NSMetadataQueryResultGroup*)goobj value];
}
void* NSMetadataQueryResultGroup_subgroups(void* goobj) {
  return [(NSMetadataQueryResultGroup*)goobj subgroups];
}
uint NSMetadataQueryResultGroup_resultCount(void* goobj) {
  return [(NSMetadataQueryResultGroup*)goobj resultCount];
}
void* NSMetadataQueryResultGroup_resultAtIndex(void* goobj, uint idx) {
  return [(NSMetadataQueryResultGroup*)goobj resultAtIndex:idx];
}
void* NSMetadataQueryResultGroup_results(void* goobj) {
  return [(NSMetadataQueryResultGroup*)goobj results];
}


////NSNetService
void* NSNetService_init() {
  return [[NSNetService alloc] init];
}
void* NSNetService_initWithDomainTypeNamePort(void* domain, void* type, void* name, int port) {
  return [[NSNetService alloc] initWithDomain:(NSString*)domain type:(NSString*)type name:(NSString*)name port:port];
}
void* NSNetService_initWithDomainTypeName(void* domain, void* type, void* name) {
  return [[NSNetService alloc] initWithDomain:(NSString*)domain type:(NSString*)type name:(NSString*)name];
}
void NSNetService_scheduleInRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSNetService*)goobj scheduleInRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSNetService_removeFromRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSNetService*)goobj removeFromRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSNetService_publish(void* goobj) {
  [(NSNetService*)goobj publish];
}
void NSNetService_publishWithOptions(void* goobj, NSNetServiceOptions options) {
  [(NSNetService*)goobj publishWithOptions:options];
}
void NSNetService_resolve(void* goobj) {
  [(NSNetService*)goobj resolve];
}
void NSNetService_stop(void* goobj) {
  [(NSNetService*)goobj stop];
}
//REJECT: timeout
//void NSNetService_resolveWithTimeout(void* goobj, NSTimeInterval timeout) {
//  [(NSNetService*)goobj resolveWithTimeout:timeout];
//}
bool NSNetService_getInputStreamOutputStream(void* goobj, void* inputStream, void* outputStream) {
  return [(NSNetService*)goobj getInputStream:(NSInputStream*)inputStream outputStream:(NSOutputStream*)outputStream];
}
bool NSNetService_setTXTRecordData(void* goobj, void* recordData) {
  return [(NSNetService*)goobj setTXTRecordData:(NSData*)recordData];
}
void* NSNetService_TXTRecordData(void* goobj) {
  return [(NSNetService*)goobj TXTRecordData];
}
void NSNetService_startMonitoring(void* goobj) {
  [(NSNetService*)goobj startMonitoring];
}
void NSNetService_stopMonitoring(void* goobj) {
  [(NSNetService*)goobj stopMonitoring];
}
void* NSNetService_delegate(void* goobj) {
  return [(NSNetService*)goobj delegate];
}
void NSNetService_setDelegate(void* goobj, void* delegate) {
  [(NSNetService*)goobj setDelegate:delegate];
}
//unacceptalble-method
//bool NSNetService_includesPeerToPeer(void* goobj) {
//  return [(NSNetService*)goobj includesPeerToPeer];
//}
//unacceptalble-method
//void NSNetService_setIncludesPeerToPeer(void* goobj, bool includesPeerToPeer) {
//  [(NSNetService*)goobj setIncludesPeerToPeer:includesPeerToPeer];
//}
void* NSNetService_name(void* goobj) {
  return [(NSNetService*)goobj name];
}
void* NSNetService_type(void* goobj) {
  return [(NSNetService*)goobj type];
}
void* NSNetService_domain(void* goobj) {
  return [(NSNetService*)goobj domain];
}
void* NSNetService_hostName(void* goobj) {
  return [(NSNetService*)goobj hostName];
}
void* NSNetService_addresses(void* goobj) {
  return [(NSNetService*)goobj addresses];
}
//REJECT: NSInteger
//NSInteger NSNetService_port(void* goobj) {
//  return [(NSNetService*)goobj port];
//}
void* NSNetService__dictionaryFromTXTRecordData(void* txtData) {
  return [NSNetService dictionaryFromTXTRecordData:(NSData*)txtData];
}
void* NSNetService__dataFromTXTRecordDictionary(void* txtDictionary) {
  return [NSNetService dataFromTXTRecordDictionary:(NSDictionary*)txtDictionary];
}

////NSNetServiceBrowser
void* NSNetServiceBrowser_init() {
  return [[NSNetServiceBrowser alloc] init];
}
void NSNetServiceBrowser_scheduleInRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSNetServiceBrowser*)goobj scheduleInRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSNetServiceBrowser_removeFromRunLoopForMode(void* goobj, void* aRunLoop, void* mode) {
  [(NSNetServiceBrowser*)goobj removeFromRunLoop:(NSRunLoop*)aRunLoop forMode:(NSString*)mode];
}
void NSNetServiceBrowser_searchForBrowsableDomains(void* goobj) {
  [(NSNetServiceBrowser*)goobj searchForBrowsableDomains];
}
void NSNetServiceBrowser_searchForRegistrationDomains(void* goobj) {
  [(NSNetServiceBrowser*)goobj searchForRegistrationDomains];
}
void NSNetServiceBrowser_searchForServicesOfTypeInDomain(void* goobj, void* type, void* domainString) {
  [(NSNetServiceBrowser*)goobj searchForServicesOfType:(NSString*)type inDomain:(NSString*)domainString];
}
void NSNetServiceBrowser_stop(void* goobj) {
  [(NSNetServiceBrowser*)goobj stop];
}
void* NSNetServiceBrowser_delegate(void* goobj) {
  return [(NSNetServiceBrowser*)goobj delegate];
}
void NSNetServiceBrowser_setDelegate(void* goobj, void* delegate) {
  [(NSNetServiceBrowser*)goobj setDelegate:delegate];
}
//unacceptalble-method
//bool NSNetServiceBrowser_includesPeerToPeer(void* goobj) {
//  return [(NSNetServiceBrowser*)goobj includesPeerToPeer];
//}
//unacceptalble-method
//void NSNetServiceBrowser_setIncludesPeerToPeer(void* goobj, bool includesPeerToPeer) {
//  [(NSNetServiceBrowser*)goobj setIncludesPeerToPeer:includesPeerToPeer];
//}


////NSProgress
void* NSProgress_init() {
  return [[NSProgress alloc] init];
}
void* NSProgress_initWithParentUserInfo(void* parentProgressOrNil, void* userInfoOrNil) {
  return [[NSProgress alloc] initWithParent:(NSProgress*)parentProgressOrNil userInfo:(NSDictionary*)userInfoOrNil];
}
void NSProgress_becomeCurrentWithPendingUnitCount(void* goobj, int64_t unitCount) {
  [(NSProgress*)goobj becomeCurrentWithPendingUnitCount:unitCount];
}
void NSProgress_resignCurrent(void* goobj) {
  [(NSProgress*)goobj resignCurrent];
}
void NSProgress_setUserInfoObjectForKey(void* goobj, void* objectOrNil, void* key) {
  [(NSProgress*)goobj setUserInfoObject:objectOrNil forKey:(NSString*)key];
}
void NSProgress_cancel(void* goobj) {
  [(NSProgress*)goobj cancel];
}
void NSProgress_pause(void* goobj) {
  [(NSProgress*)goobj pause];
}
void* NSProgress_userInfo(void* goobj) {
  return [(NSProgress*)goobj userInfo];
}
void NSProgress_publish(void* goobj) {
  [(NSProgress*)goobj publish];
}
void NSProgress_unpublish(void* goobj) {
  [(NSProgress*)goobj unpublish];
}
int64_t NSProgress_totalUnitCount(void* goobj) {
  return [(NSProgress*)goobj totalUnitCount];
}
void NSProgress_setTotalUnitCount(void* goobj, int64_t totalUnitCount) {
  [(NSProgress*)goobj setTotalUnitCount:totalUnitCount];
}
int64_t NSProgress_completedUnitCount(void* goobj) {
  return [(NSProgress*)goobj completedUnitCount];
}
void NSProgress_setCompletedUnitCount(void* goobj, int64_t completedUnitCount) {
  [(NSProgress*)goobj setCompletedUnitCount:completedUnitCount];
}
void* NSProgress_localizedDescription(void* goobj) {
  return [(NSProgress*)goobj localizedDescription];
}
void NSProgress_setLocalizedDescription(void* goobj, void* localizedDescription) {
  [(NSProgress*)goobj setLocalizedDescription:(NSString*)localizedDescription];
}
void* NSProgress_localizedAdditionalDescription(void* goobj) {
  return [(NSProgress*)goobj localizedAdditionalDescription];
}
void NSProgress_setLocalizedAdditionalDescription(void* goobj, void* localizedAdditionalDescription) {
  [(NSProgress*)goobj setLocalizedAdditionalDescription:(NSString*)localizedAdditionalDescription];
}
char NSProgress_isCancellable(void* goobj) {
  return [(NSProgress*)goobj isCancellable];
}
void NSProgress_setCancellable(void* goobj, bool cancellable) {
  [(NSProgress*)goobj setCancellable:cancellable];
}
char NSProgress_isPausable(void* goobj) {
  return [(NSProgress*)goobj isPausable];
}
void NSProgress_setPausable(void* goobj, bool pausable) {
  [(NSProgress*)goobj setPausable:pausable];
}
char NSProgress_isCancelled(void* goobj) {
  return [(NSProgress*)goobj isCancelled];
}
char NSProgress_isPaused(void* goobj) {
  return [(NSProgress*)goobj isPaused];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSProgress_cancellationHandler(void* goobj) {
//  return [(NSProgress*)goobj cancellationHandler];
//}
//REJECT: cancellationHandler
//void NSProgress_setCancellationHandler(void* goobj, *INVALID TYPE* cancellationHandler) {
//  [(NSProgress*)goobj setCancellationHandler:cancellationHandler];
//}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSProgress_pausingHandler(void* goobj) {
//  return [(NSProgress*)goobj pausingHandler];
//}
//REJECT: pausingHandler
//void NSProgress_setPausingHandler(void* goobj, *INVALID TYPE* pausingHandler) {
//  [(NSProgress*)goobj setPausingHandler:pausingHandler];
//}
char NSProgress_isIndeterminate(void* goobj) {
  return [(NSProgress*)goobj isIndeterminate];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSProgress_fractionCompleted(void* goobj) {
//  return [(NSProgress*)goobj fractionCompleted];
//}
void* NSProgress_kind(void* goobj) {
  return [(NSProgress*)goobj kind];
}
void NSProgress_setKind(void* goobj, void* kind) {
  [(NSProgress*)goobj setKind:(NSString*)kind];
}
char NSProgress_isOld(void* goobj) {
  return [(NSProgress*)goobj isOld];
}
void* NSProgress__currentProgress() {
  return [NSProgress currentProgress];
}
void* NSProgress__progressWithTotalUnitCount(int64_t unitCount) {
  return [NSProgress progressWithTotalUnitCount:unitCount];
}
//REJECT: publishingHandler
//void* NSProgress__addSubscriberForFileURLWithPublishingHandler(void* url, NSProgressPublishingHandler publishingHandler) {
//  return [NSProgress addSubscriberForFileURL:(NSURL*)url withPublishingHandler:publishingHandler];
//}
void NSProgress__removeSubscriber(void* subscriber) {
  [NSProgress removeSubscriber:subscriber];
}

////NSUbiquitousKeyValueStore
void* NSUbiquitousKeyValueStore_init() {
  return [[NSUbiquitousKeyValueStore alloc] init];
}
void* NSUbiquitousKeyValueStore_objectForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj objectForKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setObjectForKey(void* goobj, void* anObject, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setObject:anObject forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_removeObjectForKey(void* goobj, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj removeObjectForKey:(NSString*)aKey];
}
void* NSUbiquitousKeyValueStore_stringForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj stringForKey:(NSString*)aKey];
}
void* NSUbiquitousKeyValueStore_arrayForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj arrayForKey:(NSString*)aKey];
}
void* NSUbiquitousKeyValueStore_dictionaryForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj dictionaryForKey:(NSString*)aKey];
}
void* NSUbiquitousKeyValueStore_dataForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj dataForKey:(NSString*)aKey];
}
long long NSUbiquitousKeyValueStore_longLongForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj longLongForKey:(NSString*)aKey];
}
double NSUbiquitousKeyValueStore_doubleForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj doubleForKey:(NSString*)aKey];
}
bool NSUbiquitousKeyValueStore_boolForKey(void* goobj, void* aKey) {
  return [(NSUbiquitousKeyValueStore*)goobj boolForKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setStringForKey(void* goobj, void* aString, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setString:(NSString*)aString forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setDataForKey(void* goobj, void* aData, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setData:(NSData*)aData forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setArrayForKey(void* goobj, void* anArray, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setArray:(NSArray*)anArray forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setDictionaryForKey(void* goobj, void* aDictionary, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setDictionary:(NSDictionary*)aDictionary forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setLongLongForKey(void* goobj, long long value, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setLongLong:value forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setDoubleForKey(void* goobj, double value, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setDouble:value forKey:(NSString*)aKey];
}
void NSUbiquitousKeyValueStore_setBoolForKey(void* goobj, bool value, void* aKey) {
  [(NSUbiquitousKeyValueStore*)goobj setBool:value forKey:(NSString*)aKey];
}
void* NSUbiquitousKeyValueStore_dictionaryRepresentation(void* goobj) {
  return [(NSUbiquitousKeyValueStore*)goobj dictionaryRepresentation];
}
bool NSUbiquitousKeyValueStore_synchronize(void* goobj) {
  return [(NSUbiquitousKeyValueStore*)goobj synchronize];
}
void* NSUbiquitousKeyValueStore__defaultStore() {
  return [NSUbiquitousKeyValueStore defaultStore];
}

////NSUndoManager
void* NSUndoManager_init() {
  return [[NSUndoManager alloc] init];
}
void NSUndoManager_beginUndoGrouping(void* goobj) {
  [(NSUndoManager*)goobj beginUndoGrouping];
}
void NSUndoManager_endUndoGrouping(void* goobj) {
  [(NSUndoManager*)goobj endUndoGrouping];
}
//REJECT: NSInteger
//NSInteger NSUndoManager_groupingLevel(void* goobj) {
//  return [(NSUndoManager*)goobj groupingLevel];
//}
void NSUndoManager_disableUndoRegistration(void* goobj) {
  [(NSUndoManager*)goobj disableUndoRegistration];
}
void NSUndoManager_enableUndoRegistration(void* goobj) {
  [(NSUndoManager*)goobj enableUndoRegistration];
}
bool NSUndoManager_isUndoRegistrationEnabled(void* goobj) {
  return [(NSUndoManager*)goobj isUndoRegistrationEnabled];
}
bool NSUndoManager_groupsByEvent(void* goobj) {
  return [(NSUndoManager*)goobj groupsByEvent];
}
void NSUndoManager_setGroupsByEvent(void* goobj, bool groupsByEvent) {
  [(NSUndoManager*)goobj setGroupsByEvent:groupsByEvent];
}
void NSUndoManager_setLevelsOfUndo(void* goobj, uint levels) {
  [(NSUndoManager*)goobj setLevelsOfUndo:levels];
}
uint NSUndoManager_levelsOfUndo(void* goobj) {
  return [(NSUndoManager*)goobj levelsOfUndo];
}
void NSUndoManager_setRunLoopModes(void* goobj, void* runLoopModes) {
  [(NSUndoManager*)goobj setRunLoopModes:(NSArray*)runLoopModes];
}
void* NSUndoManager_runLoopModes(void* goobj) {
  return [(NSUndoManager*)goobj runLoopModes];
}
void NSUndoManager_undo(void* goobj) {
  [(NSUndoManager*)goobj undo];
}
void NSUndoManager_redo(void* goobj) {
  [(NSUndoManager*)goobj redo];
}
void NSUndoManager_undoNestedGroup(void* goobj) {
  [(NSUndoManager*)goobj undoNestedGroup];
}
bool NSUndoManager_canUndo(void* goobj) {
  return [(NSUndoManager*)goobj canUndo];
}
bool NSUndoManager_canRedo(void* goobj) {
  return [(NSUndoManager*)goobj canRedo];
}
bool NSUndoManager_isUndoing(void* goobj) {
  return [(NSUndoManager*)goobj isUndoing];
}
bool NSUndoManager_isRedoing(void* goobj) {
  return [(NSUndoManager*)goobj isRedoing];
}
void NSUndoManager_removeAllActions(void* goobj) {
  [(NSUndoManager*)goobj removeAllActions];
}
void NSUndoManager_removeAllActionsWithTarget(void* goobj, void* target) {
  [(NSUndoManager*)goobj removeAllActionsWithTarget:target];
}
//REJECT: selector
//void NSUndoManager_registerUndoWithTargetSelectorObject(void* goobj, void* target, SEL selector, void* anObject) {
//  [(NSUndoManager*)goobj registerUndoWithTarget:target selector:selector object:anObject];
//}
void* NSUndoManager_prepareWithInvocationTarget(void* goobj, void* target) {
  return [(NSUndoManager*)goobj prepareWithInvocationTarget:target];
}
void NSUndoManager_setActionIsDiscardable(void* goobj, bool discardable) {
  [(NSUndoManager*)goobj setActionIsDiscardable:discardable];
}
bool NSUndoManager_undoActionIsDiscardable(void* goobj) {
  return [(NSUndoManager*)goobj undoActionIsDiscardable];
}
bool NSUndoManager_redoActionIsDiscardable(void* goobj) {
  return [(NSUndoManager*)goobj redoActionIsDiscardable];
}
void* NSUndoManager_undoActionName(void* goobj) {
  return [(NSUndoManager*)goobj undoActionName];
}
void* NSUndoManager_redoActionName(void* goobj) {
  return [(NSUndoManager*)goobj redoActionName];
}
void NSUndoManager_setActionName(void* goobj, void* actionName) {
  [(NSUndoManager*)goobj setActionName:(NSString*)actionName];
}
void* NSUndoManager_undoMenuItemTitle(void* goobj) {
  return [(NSUndoManager*)goobj undoMenuItemTitle];
}
void* NSUndoManager_redoMenuItemTitle(void* goobj) {
  return [(NSUndoManager*)goobj redoMenuItemTitle];
}
void* NSUndoManager_undoMenuTitleForUndoActionName(void* goobj, void* actionName) {
  return [(NSUndoManager*)goobj undoMenuTitleForUndoActionName:(NSString*)actionName];
}
void* NSUndoManager_redoMenuTitleForUndoActionName(void* goobj, void* actionName) {
  return [(NSUndoManager*)goobj redoMenuTitleForUndoActionName:(NSString*)actionName];
}


////NSURLSession
void* NSURLSession_init() {
  return [[NSURLSession alloc] init];
}
void NSURLSession_finishTasksAndInvalidate(void* goobj) {
  [(NSURLSession*)goobj finishTasksAndInvalidate];
}
void NSURLSession_invalidateAndCancel(void* goobj) {
  [(NSURLSession*)goobj invalidateAndCancel];
}
//REJECT: completionHandler
//void NSURLSession_resetWithCompletionHandler(void* goobj, *INVALID TYPE* completionHandler) {
//  [(NSURLSession*)goobj resetWithCompletionHandler:completionHandler];
//}
//REJECT: completionHandler
//void NSURLSession_flushWithCompletionHandler(void* goobj, *INVALID TYPE* completionHandler) {
//  [(NSURLSession*)goobj flushWithCompletionHandler:completionHandler];
//}
//REJECT: completionHandler
//void NSURLSession_getTasksWithCompletionHandler(void* goobj, *INVALID TYPE* completionHandler) {
//  [(NSURLSession*)goobj getTasksWithCompletionHandler:completionHandler];
//}
void* NSURLSession_dataTaskWithRequest(void* goobj, void* request) {
  return [(NSURLSession*)goobj dataTaskWithRequest:(NSURLRequest*)request];
}
void* NSURLSession_dataTaskWithURL(void* goobj, void* url) {
  return [(NSURLSession*)goobj dataTaskWithURL:(NSURL*)url];
}
void* NSURLSession_uploadTaskWithRequestFromFile(void* goobj, void* request, void* fileURL) {
  return [(NSURLSession*)goobj uploadTaskWithRequest:(NSURLRequest*)request fromFile:(NSURL*)fileURL];
}
void* NSURLSession_uploadTaskWithRequestFromData(void* goobj, void* request, void* bodyData) {
  return [(NSURLSession*)goobj uploadTaskWithRequest:(NSURLRequest*)request fromData:(NSData*)bodyData];
}
void* NSURLSession_uploadTaskWithStreamedRequest(void* goobj, void* request) {
  return [(NSURLSession*)goobj uploadTaskWithStreamedRequest:(NSURLRequest*)request];
}
void* NSURLSession_downloadTaskWithRequest(void* goobj, void* request) {
  return [(NSURLSession*)goobj downloadTaskWithRequest:(NSURLRequest*)request];
}
void* NSURLSession_downloadTaskWithURL(void* goobj, void* url) {
  return [(NSURLSession*)goobj downloadTaskWithURL:(NSURL*)url];
}
void* NSURLSession_downloadTaskWithResumeData(void* goobj, void* resumeData) {
  return [(NSURLSession*)goobj downloadTaskWithResumeData:(NSData*)resumeData];
}
void* NSURLSession_delegateQueue(void* goobj) {
  return [(NSURLSession*)goobj delegateQueue];
}
void* NSURLSession_delegate(void* goobj) {
  return [(NSURLSession*)goobj delegate];
}
void* NSURLSession_configuration(void* goobj) {
  return [(NSURLSession*)goobj configuration];
}
void* NSURLSession_sessionDescription(void* goobj) {
  return [(NSURLSession*)goobj sessionDescription];
}
void NSURLSession_setSessionDescription(void* goobj, void* sessionDescription) {
  [(NSURLSession*)goobj setSessionDescription:(NSString*)sessionDescription];
}
//REJECT: completionHandler
//void* NSURLSession_dataTaskWithRequestCompletionHandler(void* goobj, void* request, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj dataTaskWithRequest:(NSURLRequest*)request completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_dataTaskWithURLCompletionHandler(void* goobj, void* url, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj dataTaskWithURL:(NSURL*)url completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_uploadTaskWithRequestFromFileCompletionHandler(void* goobj, void* request, void* fileURL, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj uploadTaskWithRequest:(NSURLRequest*)request fromFile:(NSURL*)fileURL completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_uploadTaskWithRequestFromDataCompletionHandler(void* goobj, void* request, void* bodyData, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj uploadTaskWithRequest:(NSURLRequest*)request fromData:(NSData*)bodyData completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_downloadTaskWithRequestCompletionHandler(void* goobj, void* request, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj downloadTaskWithRequest:(NSURLRequest*)request completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_downloadTaskWithURLCompletionHandler(void* goobj, void* url, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj downloadTaskWithURL:(NSURL*)url completionHandler:completionHandler];
//}
//REJECT: completionHandler
//void* NSURLSession_downloadTaskWithResumeDataCompletionHandler(void* goobj, void* resumeData, *INVALID TYPE* completionHandler) {
//  return [(NSURLSession*)goobj downloadTaskWithResumeData:(NSData*)resumeData completionHandler:completionHandler];
//}
void* NSURLSession__sharedSession() {
  return [NSURLSession sharedSession];
}
void* NSURLSession__sessionWithConfiguration(void* configuration) {
  return [NSURLSession sessionWithConfiguration:(NSURLSessionConfiguration*)configuration];
}
void* NSURLSession__sessionWithConfigurationDelegateDelegateQueue(void* configuration, void* delegate, void* queue) {
  return [NSURLSession sessionWithConfiguration:(NSURLSessionConfiguration*)configuration delegate:delegate delegateQueue:(NSOperationQueue*)queue];
}

////NSURLSessionTask
void* NSURLSessionTask_init() {
  return [[NSURLSessionTask alloc] init];
}
void NSURLSessionTask_cancel(void* goobj) {
  [(NSURLSessionTask*)goobj cancel];
}
void NSURLSessionTask_suspend(void* goobj) {
  [(NSURLSessionTask*)goobj suspend];
}
void NSURLSessionTask_resume(void* goobj) {
  [(NSURLSessionTask*)goobj resume];
}
uint NSURLSessionTask_taskIdentifier(void* goobj) {
  return [(NSURLSessionTask*)goobj taskIdentifier];
}
void* NSURLSessionTask_originalRequest(void* goobj) {
  return [(NSURLSessionTask*)goobj originalRequest];
}
void* NSURLSessionTask_currentRequest(void* goobj) {
  return [(NSURLSessionTask*)goobj currentRequest];
}
void* NSURLSessionTask_response(void* goobj) {
  return [(NSURLSessionTask*)goobj response];
}
int64_t NSURLSessionTask_countOfBytesReceived(void* goobj) {
  return [(NSURLSessionTask*)goobj countOfBytesReceived];
}
int64_t NSURLSessionTask_countOfBytesSent(void* goobj) {
  return [(NSURLSessionTask*)goobj countOfBytesSent];
}
int64_t NSURLSessionTask_countOfBytesExpectedToSend(void* goobj) {
  return [(NSURLSessionTask*)goobj countOfBytesExpectedToSend];
}
int64_t NSURLSessionTask_countOfBytesExpectedToReceive(void* goobj) {
  return [(NSURLSessionTask*)goobj countOfBytesExpectedToReceive];
}
void* NSURLSessionTask_taskDescription(void* goobj) {
  return [(NSURLSessionTask*)goobj taskDescription];
}
void NSURLSessionTask_setTaskDescription(void* goobj, void* taskDescription) {
  [(NSURLSessionTask*)goobj setTaskDescription:(NSString*)taskDescription];
}
NSURLSessionTaskState NSURLSessionTask_state(void* goobj) {
  return [(NSURLSessionTask*)goobj state];
}
void* NSURLSessionTask_error(void* goobj) {
  return [(NSURLSessionTask*)goobj error];
}


////NSURLSessionDataTask
void* NSURLSessionDataTask_init() {
  return [[NSURLSessionDataTask alloc] init];
}



////NSURLSessionUploadTask
void* NSURLSessionUploadTask_init() {
  return [[NSURLSessionUploadTask alloc] init];
}



////NSURLSessionDownloadTask
void* NSURLSessionDownloadTask_init() {
  return [[NSURLSessionDownloadTask alloc] init];
}
//REJECT: completionHandler
//void NSURLSessionDownloadTask_cancelByProducingResumeData(void* goobj, *INVALID TYPE* completionHandler) {
//  [(NSURLSessionDownloadTask*)goobj cancelByProducingResumeData:completionHandler];
//}


////NSURLSessionConfiguration
void* NSURLSessionConfiguration_init() {
  return [[NSURLSessionConfiguration alloc] init];
}
void* NSURLSessionConfiguration_identifier(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj identifier];
}
//REJECT: NSURLRequestCachePolicy
//NSURLRequestCachePolicy NSURLSessionConfiguration_requestCachePolicy(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj requestCachePolicy];
//}
//REJECT: requestCachePolicy
//void NSURLSessionConfiguration_setRequestCachePolicy(void* goobj, NSURLRequestCachePolicy requestCachePolicy) {
//  [(NSURLSessionConfiguration*)goobj setRequestCachePolicy:requestCachePolicy];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSURLSessionConfiguration_timeoutIntervalForRequest(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj timeoutIntervalForRequest];
//}
//REJECT: timeoutIntervalForRequest
//void NSURLSessionConfiguration_setTimeoutIntervalForRequest(void* goobj, NSTimeInterval timeoutIntervalForRequest) {
//  [(NSURLSessionConfiguration*)goobj setTimeoutIntervalForRequest:timeoutIntervalForRequest];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSURLSessionConfiguration_timeoutIntervalForResource(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj timeoutIntervalForResource];
//}
//REJECT: timeoutIntervalForResource
//void NSURLSessionConfiguration_setTimeoutIntervalForResource(void* goobj, NSTimeInterval timeoutIntervalForResource) {
//  [(NSURLSessionConfiguration*)goobj setTimeoutIntervalForResource:timeoutIntervalForResource];
//}
//REJECT: NSURLRequestNetworkServiceType
//NSURLRequestNetworkServiceType NSURLSessionConfiguration_networkServiceType(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj networkServiceType];
//}
//REJECT: networkServiceType
//void NSURLSessionConfiguration_setNetworkServiceType(void* goobj, NSURLRequestNetworkServiceType networkServiceType) {
//  [(NSURLSessionConfiguration*)goobj setNetworkServiceType:networkServiceType];
//}
bool NSURLSessionConfiguration_allowsCellularAccess(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj allowsCellularAccess];
}
void NSURLSessionConfiguration_setAllowsCellularAccess(void* goobj, bool allowsCellularAccess) {
  [(NSURLSessionConfiguration*)goobj setAllowsCellularAccess:allowsCellularAccess];
}
//unacceptalble-method
//char NSURLSessionConfiguration_isDiscretionary(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj isDiscretionary];
//}
//unacceptalble-method
//void NSURLSessionConfiguration_setDiscretionary(void* goobj, bool discretionary) {
//  [(NSURLSessionConfiguration*)goobj setDiscretionary:discretionary];
//}
//unacceptalble-method
//bool NSURLSessionConfiguration_sessionSendsLaunchEvents(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj sessionSendsLaunchEvents];
//}
//unacceptalble-method
//void NSURLSessionConfiguration_setSessionSendsLaunchEvents(void* goobj, bool sessionSendsLaunchEvents) {
//  [(NSURLSessionConfiguration*)goobj setSessionSendsLaunchEvents:sessionSendsLaunchEvents];
//}
void* NSURLSessionConfiguration_connectionProxyDictionary(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj connectionProxyDictionary];
}
void NSURLSessionConfiguration_setConnectionProxyDictionary(void* goobj, void* connectionProxyDictionary) {
  [(NSURLSessionConfiguration*)goobj setConnectionProxyDictionary:(NSDictionary*)connectionProxyDictionary];
}
SSLProtocol NSURLSessionConfiguration_TLSMinimumSupportedProtocol(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj TLSMinimumSupportedProtocol];
}
void NSURLSessionConfiguration_setTLSMinimumSupportedProtocol(void* goobj, SSLProtocol TLSMinimumSupportedProtocol) {
  [(NSURLSessionConfiguration*)goobj setTLSMinimumSupportedProtocol:TLSMinimumSupportedProtocol];
}
SSLProtocol NSURLSessionConfiguration_TLSMaximumSupportedProtocol(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj TLSMaximumSupportedProtocol];
}
void NSURLSessionConfiguration_setTLSMaximumSupportedProtocol(void* goobj, SSLProtocol TLSMaximumSupportedProtocol) {
  [(NSURLSessionConfiguration*)goobj setTLSMaximumSupportedProtocol:TLSMaximumSupportedProtocol];
}
bool NSURLSessionConfiguration_HTTPShouldUsePipelining(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj HTTPShouldUsePipelining];
}
void NSURLSessionConfiguration_setHTTPShouldUsePipelining(void* goobj, bool HTTPShouldUsePipelining) {
  [(NSURLSessionConfiguration*)goobj setHTTPShouldUsePipelining:HTTPShouldUsePipelining];
}
bool NSURLSessionConfiguration_HTTPShouldSetCookies(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj HTTPShouldSetCookies];
}
void NSURLSessionConfiguration_setHTTPShouldSetCookies(void* goobj, bool HTTPShouldSetCookies) {
  [(NSURLSessionConfiguration*)goobj setHTTPShouldSetCookies:HTTPShouldSetCookies];
}
NSHTTPCookieAcceptPolicy NSURLSessionConfiguration_HTTPCookieAcceptPolicy(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj HTTPCookieAcceptPolicy];
}
void NSURLSessionConfiguration_setHTTPCookieAcceptPolicy(void* goobj, NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy) {
  [(NSURLSessionConfiguration*)goobj setHTTPCookieAcceptPolicy:HTTPCookieAcceptPolicy];
}
void* NSURLSessionConfiguration_HTTPAdditionalHeaders(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj HTTPAdditionalHeaders];
}
void NSURLSessionConfiguration_setHTTPAdditionalHeaders(void* goobj, void* HTTPAdditionalHeaders) {
  [(NSURLSessionConfiguration*)goobj setHTTPAdditionalHeaders:(NSDictionary*)HTTPAdditionalHeaders];
}
//REJECT: NSInteger
//NSInteger NSURLSessionConfiguration_HTTPMaximumConnectionsPerHost(void* goobj) {
//  return [(NSURLSessionConfiguration*)goobj HTTPMaximumConnectionsPerHost];
//}
//REJECT: HTTPMaximumConnectionsPerHost
//void NSURLSessionConfiguration_setHTTPMaximumConnectionsPerHost(void* goobj, NSInteger HTTPMaximumConnectionsPerHost) {
//  [(NSURLSessionConfiguration*)goobj setHTTPMaximumConnectionsPerHost:HTTPMaximumConnectionsPerHost];
//}
void* NSURLSessionConfiguration_HTTPCookieStorage(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj HTTPCookieStorage];
}
void NSURLSessionConfiguration_setHTTPCookieStorage(void* goobj, void* HTTPCookieStorage) {
  [(NSURLSessionConfiguration*)goobj setHTTPCookieStorage:(NSHTTPCookieStorage*)HTTPCookieStorage];
}
void* NSURLSessionConfiguration_URLCredentialStorage(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj URLCredentialStorage];
}
void NSURLSessionConfiguration_setURLCredentialStorage(void* goobj, void* URLCredentialStorage) {
  [(NSURLSessionConfiguration*)goobj setURLCredentialStorage:(NSURLCredentialStorage*)URLCredentialStorage];
}
void* NSURLSessionConfiguration_URLCache(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj URLCache];
}
void NSURLSessionConfiguration_setURLCache(void* goobj, void* URLCache) {
  [(NSURLSessionConfiguration*)goobj setURLCache:(NSURLCache*)URLCache];
}
void* NSURLSessionConfiguration_protocolClasses(void* goobj) {
  return [(NSURLSessionConfiguration*)goobj protocolClasses];
}
void NSURLSessionConfiguration_setProtocolClasses(void* goobj, void* protocolClasses) {
  [(NSURLSessionConfiguration*)goobj setProtocolClasses:(NSArray*)protocolClasses];
}
void* NSURLSessionConfiguration__defaultSessionConfiguration() {
  return [NSURLSessionConfiguration defaultSessionConfiguration];
}
void* NSURLSessionConfiguration__ephemeralSessionConfiguration() {
  return [NSURLSessionConfiguration ephemeralSessionConfiguration];
}
void* NSURLSessionConfiguration__backgroundSessionConfiguration(void* identifier) {
  return [NSURLSessionConfiguration backgroundSessionConfiguration:(NSString*)identifier];
}

////NSUUID
void* NSUUID_init() {
  return [[NSUUID alloc] init];
}
void* NSUUID_initWithUUIDString(void* string) {
  return [[NSUUID alloc] initWithUUIDString:(NSString*)string];
}
//REJECT: bytes
//void* NSUUID_initWithUUIDBytes(uuid_t bytes) {
//  return [[NSUUID alloc] initWithUUIDBytes:bytes];
//}
//REJECT: uuid
//void NSUUID_getUUIDBytes(void* goobj, uuid_t uuid) {
//  [(NSUUID*)goobj getUUIDBytes:uuid];
//}
void* NSUUID_UUIDString(void* goobj) {
  return [(NSUUID*)goobj UUIDString];
}
void* NSUUID__UUID() {
  return [NSUUID UUID];
}

////NSArchiver
void* NSArchiver_init() {
  return [[NSArchiver alloc] init];
}
void* NSArchiver_initForWritingWithMutableData(void* goobj, void* mdata) {
  return [(NSArchiver*)goobj initForWritingWithMutableData:(NSMutableData*)mdata];
}
void* NSArchiver_archiverData(void* goobj) {
  return [(NSArchiver*)goobj archiverData];
}
void NSArchiver_encodeRootObject(void* goobj, void* rootObject) {
  [(NSArchiver*)goobj encodeRootObject:rootObject];
}
void NSArchiver_encodeConditionalObject(void* goobj, void* object) {
  [(NSArchiver*)goobj encodeConditionalObject:object];
}
void NSArchiver_encodeClassNameIntoClassName(void* goobj, void* trueName, void* inArchiveName) {
  [(NSArchiver*)goobj encodeClassName:(NSString*)trueName intoClassName:(NSString*)inArchiveName];
}
void* NSArchiver_classNameEncodedForTrueClassName(void* goobj, void* trueName) {
  return [(NSArchiver*)goobj classNameEncodedForTrueClassName:(NSString*)trueName];
}
void NSArchiver_replaceObjectWithObject(void* goobj, void* object, void* newObject) {
  [(NSArchiver*)goobj replaceObject:object withObject:newObject];
}
void* NSArchiver__archivedDataWithRootObject(void* rootObject) {
  return [NSArchiver archivedDataWithRootObject:rootObject];
}
bool NSArchiver__archiveRootObjectToFile(void* rootObject, void* path) {
  return [NSArchiver archiveRootObject:rootObject toFile:(NSString*)path];
}

////NSUnarchiver
void* NSUnarchiver_init() {
  return [[NSUnarchiver alloc] init];
}
void* NSUnarchiver_initForReadingWithData(void* goobj, void* data) {
  return [(NSUnarchiver*)goobj initForReadingWithData:(NSData*)data];
}
//REJECT: zone
//void NSUnarchiver_setObjectZone(void* goobj, NSZone zone) {
//  [(NSUnarchiver*)goobj setObjectZone:zone];
//}
//REJECT: NSZone
//NSZone NSUnarchiver_objectZone(void* goobj) {
//  return [(NSUnarchiver*)goobj objectZone];
//}
bool NSUnarchiver_isAtEnd(void* goobj) {
  return [(NSUnarchiver*)goobj isAtEnd];
}
unsigned int NSUnarchiver_systemVersion(void* goobj) {
  return [(NSUnarchiver*)goobj systemVersion];
}
void NSUnarchiver_decodeClassNameAsClassName(void* goobj, void* inArchiveName, void* trueName) {
  [(NSUnarchiver*)goobj decodeClassName:(NSString*)inArchiveName asClassName:(NSString*)trueName];
}
void* NSUnarchiver_classNameDecodedForArchiveClassName(void* goobj, void* inArchiveName) {
  return [(NSUnarchiver*)goobj classNameDecodedForArchiveClassName:(NSString*)inArchiveName];
}
void NSUnarchiver_replaceObjectWithObject(void* goobj, void* object, void* newObject) {
  [(NSUnarchiver*)goobj replaceObject:object withObject:newObject];
}
void* NSUnarchiver__unarchiveObjectWithData(void* data) {
  return [NSUnarchiver unarchiveObjectWithData:(NSData*)data];
}
void* NSUnarchiver__unarchiveObjectWithFile(void* path) {
  return [NSUnarchiver unarchiveObjectWithFile:(NSString*)path];
}
void NSUnarchiver__decodeClassNameAsClassName(void* inArchiveName, void* trueName) {
  [NSUnarchiver decodeClassName:(NSString*)inArchiveName asClassName:(NSString*)trueName];
}
void* NSUnarchiver__classNameDecodedForArchiveClassName(void* inArchiveName) {
  return [NSUnarchiver classNameDecodedForArchiveClassName:(NSString*)inArchiveName];
}

////NSCalendarDate
void* NSCalendarDate_init() {
  return [[NSCalendarDate alloc] init];
}
//REJECT: year month day hour minute second
//void* NSCalendarDate_dateByAddingYearsMonthsDaysHoursMinutesSeconds(void* goobj, NSInteger year, NSInteger month, NSInteger day, NSInteger hour, NSInteger minute, NSInteger second) {
//  return [(NSCalendarDate*)goobj dateByAddingYears:year months:month days:day hours:hour minutes:minute seconds:second];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_dayOfCommonEra(void* goobj) {
//  return [(NSCalendarDate*)goobj dayOfCommonEra];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_dayOfMonth(void* goobj) {
//  return [(NSCalendarDate*)goobj dayOfMonth];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_dayOfWeek(void* goobj) {
//  return [(NSCalendarDate*)goobj dayOfWeek];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_dayOfYear(void* goobj) {
//  return [(NSCalendarDate*)goobj dayOfYear];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_hourOfDay(void* goobj) {
//  return [(NSCalendarDate*)goobj hourOfDay];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_minuteOfHour(void* goobj) {
//  return [(NSCalendarDate*)goobj minuteOfHour];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_monthOfYear(void* goobj) {
//  return [(NSCalendarDate*)goobj monthOfYear];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_secondOfMinute(void* goobj) {
//  return [(NSCalendarDate*)goobj secondOfMinute];
//}
//REJECT: NSInteger
//NSInteger NSCalendarDate_yearOfCommonEra(void* goobj) {
//  return [(NSCalendarDate*)goobj yearOfCommonEra];
//}
void* NSCalendarDate_calendarFormat(void* goobj) {
  return [(NSCalendarDate*)goobj calendarFormat];
}
void* NSCalendarDate_descriptionWithCalendarFormatLocale(void* goobj, void* format, void* locale) {
  return [(NSCalendarDate*)goobj descriptionWithCalendarFormat:(NSString*)format locale:locale];
}
void* NSCalendarDate_descriptionWithCalendarFormat(void* goobj, void* format) {
  return [(NSCalendarDate*)goobj descriptionWithCalendarFormat:(NSString*)format];
}
void* NSCalendarDate_descriptionWithLocale(void* goobj, void* locale) {
  return [(NSCalendarDate*)goobj descriptionWithLocale:locale];
}
void* NSCalendarDate_timeZone(void* goobj) {
  return [(NSCalendarDate*)goobj timeZone];
}
void* NSCalendarDate_initWithStringCalendarFormatLocale(void* description, void* format, void* locale) {
  return [[NSCalendarDate alloc] initWithString:(NSString*)description calendarFormat:(NSString*)format locale:locale];
}
void* NSCalendarDate_initWithStringCalendarFormat(void* description, void* format) {
  return [[NSCalendarDate alloc] initWithString:(NSString*)description calendarFormat:(NSString*)format];
}
void* NSCalendarDate_initWithString(void* description) {
  return [[NSCalendarDate alloc] initWithString:(NSString*)description];
}
//REJECT: year
//void* NSCalendarDate_initWithYearMonthDayHourMinuteSecondTimeZone(NSInteger year, uint month, uint day, uint hour, uint minute, uint second, void* aTimeZone) {
//  return [[NSCalendarDate alloc] initWithYear:year month:month day:day hour:hour minute:minute second:second timeZone:(NSTimeZone*)aTimeZone];
//}
void NSCalendarDate_setCalendarFormat(void* goobj, void* format) {
  [(NSCalendarDate*)goobj setCalendarFormat:(NSString*)format];
}
void NSCalendarDate_setTimeZone(void* goobj, void* aTimeZone) {
  [(NSCalendarDate*)goobj setTimeZone:(NSTimeZone*)aTimeZone];
}
//REJECT: yp mop dp hp mip sp
//void NSCalendarDate_yearsMonthsDaysHoursMinutesSecondsSinceDate(void* goobj, NSInteger yp, NSInteger mop, NSInteger dp, NSInteger hp, NSInteger mip, NSInteger sp, void* date) {
//  [(NSCalendarDate*)goobj years:yp months:mop days:dp hours:hp minutes:mip seconds:sp sinceDate:(NSCalendarDate*)date];
//}
void* NSCalendarDate__calendarDate() {
  return [NSCalendarDate calendarDate];
}
void* NSCalendarDate__dateWithStringCalendarFormatLocale(void* description, void* format, void* locale) {
  return [NSCalendarDate dateWithString:(NSString*)description calendarFormat:(NSString*)format locale:locale];
}
void* NSCalendarDate__dateWithStringCalendarFormat(void* description, void* format) {
  return [NSCalendarDate dateWithString:(NSString*)description calendarFormat:(NSString*)format];
}
//REJECT: year
//void* NSCalendarDate__dateWithYearMonthDayHourMinuteSecondTimeZone(NSInteger year, uint month, uint day, uint hour, uint minute, uint second, void* aTimeZone) {
//  return [NSCalendarDate dateWithYear:year month:month day:day hour:hour minute:minute second:second timeZone:(NSTimeZone*)aTimeZone];
//}

////NSConnection
void* NSConnection_init() {
  return [[NSConnection alloc] init];
}
void* NSConnection_statistics(void* goobj) {
  return [(NSConnection*)goobj statistics];
}
//REJECT: ti
//void NSConnection_setRequestTimeout(void* goobj, NSTimeInterval ti) {
//  [(NSConnection*)goobj setRequestTimeout:ti];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSConnection_requestTimeout(void* goobj) {
//  return [(NSConnection*)goobj requestTimeout];
//}
//REJECT: ti
//void NSConnection_setReplyTimeout(void* goobj, NSTimeInterval ti) {
//  [(NSConnection*)goobj setReplyTimeout:ti];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSConnection_replyTimeout(void* goobj) {
//  return [(NSConnection*)goobj replyTimeout];
//}
void NSConnection_setRootObject(void* goobj, void* anObject) {
  [(NSConnection*)goobj setRootObject:anObject];
}
void* NSConnection_rootObject(void* goobj) {
  return [(NSConnection*)goobj rootObject];
}
//REJECT: NSDistantObject
//void* NSConnection_rootProxy(void* goobj) {
//  return [(NSConnection*)goobj rootProxy];
//}
void NSConnection_setDelegate(void* goobj, void* anObject) {
  [(NSConnection*)goobj setDelegate:anObject];
}
void* NSConnection_delegate(void* goobj) {
  return [(NSConnection*)goobj delegate];
}
void NSConnection_setIndependentConversationQueueing(void* goobj, bool yorn) {
  [(NSConnection*)goobj setIndependentConversationQueueing:yorn];
}
bool NSConnection_independentConversationQueueing(void* goobj) {
  return [(NSConnection*)goobj independentConversationQueueing];
}
bool NSConnection_isValid(void* goobj) {
  return [(NSConnection*)goobj isValid];
}
void NSConnection_invalidate(void* goobj) {
  [(NSConnection*)goobj invalidate];
}
void NSConnection_addRequestMode(void* goobj, void* rmode) {
  [(NSConnection*)goobj addRequestMode:(NSString*)rmode];
}
void NSConnection_removeRequestMode(void* goobj, void* rmode) {
  [(NSConnection*)goobj removeRequestMode:(NSString*)rmode];
}
void* NSConnection_requestModes(void* goobj) {
  return [(NSConnection*)goobj requestModes];
}
bool NSConnection_registerName(void* goobj, void* name) {
  return [(NSConnection*)goobj registerName:(NSString*)name];
}
bool NSConnection_registerNameWithNameServer(void* goobj, void* name, void* server) {
  return [(NSConnection*)goobj registerName:(NSString*)name withNameServer:(NSPortNameServer*)server];
}
void* NSConnection_initWithReceivePortSendPort(void* receivePort, void* sendPort) {
  return [[NSConnection alloc] initWithReceivePort:(NSPort*)receivePort sendPort:(NSPort*)sendPort];
}
void* NSConnection_sendPort(void* goobj) {
  return [(NSConnection*)goobj sendPort];
}
void* NSConnection_receivePort(void* goobj) {
  return [(NSConnection*)goobj receivePort];
}
void NSConnection_enableMultipleThreads(void* goobj) {
  [(NSConnection*)goobj enableMultipleThreads];
}
bool NSConnection_multipleThreadsEnabled(void* goobj) {
  return [(NSConnection*)goobj multipleThreadsEnabled];
}
void NSConnection_addRunLoop(void* goobj, void* runloop) {
  [(NSConnection*)goobj addRunLoop:(NSRunLoop*)runloop];
}
void NSConnection_removeRunLoop(void* goobj, void* runloop) {
  [(NSConnection*)goobj removeRunLoop:(NSRunLoop*)runloop];
}
void NSConnection_runInNewThread(void* goobj) {
  [(NSConnection*)goobj runInNewThread];
}
void* NSConnection_remoteObjects(void* goobj) {
  return [(NSConnection*)goobj remoteObjects];
}
void* NSConnection_localObjects(void* goobj) {
  return [(NSConnection*)goobj localObjects];
}
void NSConnection_dispatchWithComponents(void* goobj, void* components) {
  [(NSConnection*)goobj dispatchWithComponents:(NSArray*)components];
}
void* NSConnection__allConnections() {
  return [NSConnection allConnections];
}
void* NSConnection__defaultConnection() {
  return [NSConnection defaultConnection];
}
void* NSConnection__connectionWithRegisteredNameHost(void* name, void* hostName) {
  return [NSConnection connectionWithRegisteredName:(NSString*)name host:(NSString*)hostName];
}
void* NSConnection__connectionWithRegisteredNameHostUsingNameServer(void* name, void* hostName, void* server) {
  return [NSConnection connectionWithRegisteredName:(NSString*)name host:(NSString*)hostName usingNameServer:(NSPortNameServer*)server];
}
//REJECT: NSDistantObject
//void* NSConnection__rootProxyForConnectionWithRegisteredNameHost(void* name, void* hostName) {
//  return [NSConnection rootProxyForConnectionWithRegisteredName:(NSString*)name host:(NSString*)hostName];
//}
//REJECT: NSDistantObject
//void* NSConnection__rootProxyForConnectionWithRegisteredNameHostUsingNameServer(void* name, void* hostName, void* server) {
//  return [NSConnection rootProxyForConnectionWithRegisteredName:(NSString*)name host:(NSString*)hostName usingNameServer:(NSPortNameServer*)server];
//}
void* NSConnection__serviceConnectionWithNameRootObjectUsingNameServer(void* name, void* root, void* server) {
  return [NSConnection serviceConnectionWithName:(NSString*)name rootObject:root usingNameServer:(NSPortNameServer*)server];
}
void* NSConnection__serviceConnectionWithNameRootObject(void* name, void* root) {
  return [NSConnection serviceConnectionWithName:(NSString*)name rootObject:root];
}
void* NSConnection__connectionWithReceivePortSendPort(void* receivePort, void* sendPort) {
  return [NSConnection connectionWithReceivePort:(NSPort*)receivePort sendPort:(NSPort*)sendPort];
}
void* NSConnection__currentConversation() {
  return [NSConnection currentConversation];
}

////NSDistantObjectRequest
void* NSDistantObjectRequest_init() {
  return [[NSDistantObjectRequest alloc] init];
}
//REJECT: NSInvocation
//void* NSDistantObjectRequest_invocation(void* goobj) {
//  return [(NSDistantObjectRequest*)goobj invocation];
//}
void* NSDistantObjectRequest_connection(void* goobj) {
  return [(NSDistantObjectRequest*)goobj connection];
}
void* NSDistantObjectRequest_conversation(void* goobj) {
  return [(NSDistantObjectRequest*)goobj conversation];
}
void NSDistantObjectRequest_replyWithException(void* goobj, void* exception) {
  [(NSDistantObjectRequest*)goobj replyWithException:(NSException*)exception];
}


// NSDistantObject


////NSDistributedNotificationCenter
void* NSDistributedNotificationCenter_init() {
  return [[NSDistributedNotificationCenter alloc] init];
}
//REJECT: selector
//void NSDistributedNotificationCenter_addObserverSelectorNameObjectSuspensionBehavior(void* goobj, void* observer, SEL selector, void* name, void* object, NSNotificationSuspensionBehavior suspensionBehavior) {
//  [(NSDistributedNotificationCenter*)goobj addObserver:observer selector:selector name:(NSString*)name object:(NSString*)object suspensionBehavior:suspensionBehavior];
//}
void NSDistributedNotificationCenter_postNotificationNameObjectUserInfoDeliverImmediately(void* goobj, void* name, void* object, void* userInfo, bool deliverImmediately) {
  [(NSDistributedNotificationCenter*)goobj postNotificationName:(NSString*)name object:(NSString*)object userInfo:(NSDictionary*)userInfo deliverImmediately:deliverImmediately];
}
void NSDistributedNotificationCenter_postNotificationNameObjectUserInfoOptions(void* goobj, void* name, void* object, void* userInfo, uint options) {
  [(NSDistributedNotificationCenter*)goobj postNotificationName:(NSString*)name object:(NSString*)object userInfo:(NSDictionary*)userInfo options:options];
}
void NSDistributedNotificationCenter_setSuspended(void* goobj, bool suspended) {
  [(NSDistributedNotificationCenter*)goobj setSuspended:suspended];
}
bool NSDistributedNotificationCenter_suspended(void* goobj) {
  return [(NSDistributedNotificationCenter*)goobj suspended];
}
//REJECT: aSelector
//void NSDistributedNotificationCenter_addObserverSelectorNameObject(void* goobj, void* observer, SEL aSelector, void* aName, void* anObject) {
//  [(NSDistributedNotificationCenter*)goobj addObserver:observer selector:aSelector name:(NSString*)aName object:(NSString*)anObject];
//}
void NSDistributedNotificationCenter_postNotificationNameObject(void* goobj, void* aName, void* anObject) {
  [(NSDistributedNotificationCenter*)goobj postNotificationName:(NSString*)aName object:(NSString*)anObject];
}
void NSDistributedNotificationCenter_postNotificationNameObjectUserInfo(void* goobj, void* aName, void* anObject, void* aUserInfo) {
  [(NSDistributedNotificationCenter*)goobj postNotificationName:(NSString*)aName object:(NSString*)anObject userInfo:(NSDictionary*)aUserInfo];
}
void NSDistributedNotificationCenter_removeObserverNameObject(void* goobj, void* observer, void* aName, void* anObject) {
  [(NSDistributedNotificationCenter*)goobj removeObserver:observer name:(NSString*)aName object:(NSString*)anObject];
}
void* NSDistributedNotificationCenter__notificationCenterForType(void* notificationCenterType) {
  return [NSDistributedNotificationCenter notificationCenterForType:(NSString*)notificationCenterType];
}
void* NSDistributedNotificationCenter__defaultCenter() {
  return [NSDistributedNotificationCenter defaultCenter];
}

////NSPortCoder
void* NSPortCoder_init() {
  return [[NSPortCoder alloc] init];
}
bool NSPortCoder_isBycopy(void* goobj) {
  return [(NSPortCoder*)goobj isBycopy];
}
bool NSPortCoder_isByref(void* goobj) {
  return [(NSPortCoder*)goobj isByref];
}
void NSPortCoder_encodePortObject(void* goobj, void* aport) {
  [(NSPortCoder*)goobj encodePortObject:(NSPort*)aport];
}
void* NSPortCoder_decodePortObject(void* goobj) {
  return [(NSPortCoder*)goobj decodePortObject];
}
void* NSPortCoder_connection(void* goobj) {
  return [(NSPortCoder*)goobj connection];
}
void* NSPortCoder_initWithReceivePortSendPortComponents(void* rcvPort, void* sndPort, void* comps) {
  return [[NSPortCoder alloc] initWithReceivePort:(NSPort*)rcvPort sendPort:(NSPort*)sndPort components:(NSArray*)comps];
}
void NSPortCoder_dispatch(void* goobj) {
  [(NSPortCoder*)goobj dispatch];
}
void NSPortCoder__portCoderWithReceivePortSendPortComponents(void* rcvPort, void* sndPort, void* comps) {
  [NSPortCoder portCoderWithReceivePort:(NSPort*)rcvPort sendPort:(NSPort*)sndPort components:(NSArray*)comps];
}

////NSPortMessage
void* NSPortMessage_init() {
  return [[NSPortMessage alloc] init];
}
void* NSPortMessage_initWithSendPortReceivePortComponents(void* sendPort, void* replyPort, void* components) {
  return [[NSPortMessage alloc] initWithSendPort:(NSPort*)sendPort receivePort:(NSPort*)replyPort components:(NSArray*)components];
}
void* NSPortMessage_components(void* goobj) {
  return [(NSPortMessage*)goobj components];
}
void* NSPortMessage_receivePort(void* goobj) {
  return [(NSPortMessage*)goobj receivePort];
}
void* NSPortMessage_sendPort(void* goobj) {
  return [(NSPortMessage*)goobj sendPort];
}
bool NSPortMessage_sendBeforeDate(void* goobj, void* date) {
  return [(NSPortMessage*)goobj sendBeforeDate:(NSDate*)date];
}
uint32_t NSPortMessage_msgid(void* goobj) {
  return [(NSPortMessage*)goobj msgid];
}
void NSPortMessage_setMsgid(void* goobj, uint32_t msgid) {
  [(NSPortMessage*)goobj setMsgid:msgid];
}


////NSPortNameServer
void* NSPortNameServer_init() {
  return [[NSPortNameServer alloc] init];
}
void* NSPortNameServer_portForName(void* goobj, void* name) {
  return [(NSPortNameServer*)goobj portForName:(NSString*)name];
}
void* NSPortNameServer_portForNameHost(void* goobj, void* name, void* host) {
  return [(NSPortNameServer*)goobj portForName:(NSString*)name host:(NSString*)host];
}
bool NSPortNameServer_registerPortName(void* goobj, void* port, void* name) {
  return [(NSPortNameServer*)goobj registerPort:(NSPort*)port name:(NSString*)name];
}
bool NSPortNameServer_removePortForName(void* goobj, void* name) {
  return [(NSPortNameServer*)goobj removePortForName:(NSString*)name];
}
void* NSPortNameServer__systemDefaultPortNameServer() {
  return [NSPortNameServer systemDefaultPortNameServer];
}

////NSMachBootstrapServer
void* NSMachBootstrapServer_init() {
  return [[NSMachBootstrapServer alloc] init];
}
void* NSMachBootstrapServer_portForName(void* goobj, void* name) {
  return [(NSMachBootstrapServer*)goobj portForName:(NSString*)name];
}
void* NSMachBootstrapServer_portForNameHost(void* goobj, void* name, void* host) {
  return [(NSMachBootstrapServer*)goobj portForName:(NSString*)name host:(NSString*)host];
}
bool NSMachBootstrapServer_registerPortName(void* goobj, void* port, void* name) {
  return [(NSMachBootstrapServer*)goobj registerPort:(NSPort*)port name:(NSString*)name];
}
void* NSMachBootstrapServer_servicePortWithName(void* goobj, void* name) {
  return [(NSMachBootstrapServer*)goobj servicePortWithName:(NSString*)name];
}
void* NSMachBootstrapServer__sharedInstance() {
  return [NSMachBootstrapServer sharedInstance];
}

////NSMessagePortNameServer
void* NSMessagePortNameServer_init() {
  return [[NSMessagePortNameServer alloc] init];
}
void* NSMessagePortNameServer_portForName(void* goobj, void* name) {
  return [(NSMessagePortNameServer*)goobj portForName:(NSString*)name];
}
void* NSMessagePortNameServer_portForNameHost(void* goobj, void* name, void* host) {
  return [(NSMessagePortNameServer*)goobj portForName:(NSString*)name host:(NSString*)host];
}
void* NSMessagePortNameServer__sharedInstance() {
  return [NSMessagePortNameServer sharedInstance];
}

////NSSocketPortNameServer
void* NSSocketPortNameServer_init() {
  return [[NSSocketPortNameServer alloc] init];
}
void* NSSocketPortNameServer_portForName(void* goobj, void* name) {
  return [(NSSocketPortNameServer*)goobj portForName:(NSString*)name];
}
void* NSSocketPortNameServer_portForNameHost(void* goobj, void* name, void* host) {
  return [(NSSocketPortNameServer*)goobj portForName:(NSString*)name host:(NSString*)host];
}
bool NSSocketPortNameServer_registerPortName(void* goobj, void* port, void* name) {
  return [(NSSocketPortNameServer*)goobj registerPort:(NSPort*)port name:(NSString*)name];
}
bool NSSocketPortNameServer_removePortForName(void* goobj, void* name) {
  return [(NSSocketPortNameServer*)goobj removePortForName:(NSString*)name];
}
void* NSSocketPortNameServer_portForNameHostNameServerPortNumber(void* goobj, void* name, void* host, uint16_t portNumber) {
  return [(NSSocketPortNameServer*)goobj portForName:(NSString*)name host:(NSString*)host nameServerPortNumber:portNumber];
}
bool NSSocketPortNameServer_registerPortNameNameServerPortNumber(void* goobj, void* port, void* name, uint16_t portNumber) {
  return [(NSSocketPortNameServer*)goobj registerPort:(NSPort*)port name:(NSString*)name nameServerPortNumber:portNumber];
}
void NSSocketPortNameServer_setDefaultNameServerPortNumber(void* goobj, uint16_t portNumber) {
  [(NSSocketPortNameServer*)goobj setDefaultNameServerPortNumber:portNumber];
}
uint16_t NSSocketPortNameServer_defaultNameServerPortNumber(void* goobj) {
  return [(NSSocketPortNameServer*)goobj defaultNameServerPortNumber];
}
void* NSSocketPortNameServer__sharedInstance() {
  return [NSSocketPortNameServer sharedInstance];
}

// NSProtocolChecker


////NSTask
void* NSTask_init() {
  return [[NSTask alloc] init];
}
void NSTask_setLaunchPath(void* goobj, void* path) {
  [(NSTask*)goobj setLaunchPath:(NSString*)path];
}
void NSTask_setArguments(void* goobj, void* arguments) {
  [(NSTask*)goobj setArguments:(NSArray*)arguments];
}
void NSTask_setEnvironment(void* goobj, void* dict) {
  [(NSTask*)goobj setEnvironment:(NSDictionary*)dict];
}
void NSTask_setCurrentDirectoryPath(void* goobj, void* path) {
  [(NSTask*)goobj setCurrentDirectoryPath:(NSString*)path];
}
void NSTask_setStandardInput(void* goobj, void* input) {
  [(NSTask*)goobj setStandardInput:input];
}
void NSTask_setStandardOutput(void* goobj, void* output) {
  [(NSTask*)goobj setStandardOutput:output];
}
void NSTask_setStandardError(void* goobj, void* error) {
  [(NSTask*)goobj setStandardError:error];
}
void* NSTask_launchPath(void* goobj) {
  return [(NSTask*)goobj launchPath];
}
void* NSTask_arguments(void* goobj) {
  return [(NSTask*)goobj arguments];
}
void* NSTask_environment(void* goobj) {
  return [(NSTask*)goobj environment];
}
void* NSTask_currentDirectoryPath(void* goobj) {
  return [(NSTask*)goobj currentDirectoryPath];
}
void* NSTask_standardInput(void* goobj) {
  return [(NSTask*)goobj standardInput];
}
void* NSTask_standardOutput(void* goobj) {
  return [(NSTask*)goobj standardOutput];
}
void* NSTask_standardError(void* goobj) {
  return [(NSTask*)goobj standardError];
}
void NSTask_launch(void* goobj) {
  [(NSTask*)goobj launch];
}
void NSTask_interrupt(void* goobj) {
  [(NSTask*)goobj interrupt];
}
void NSTask_terminate(void* goobj) {
  [(NSTask*)goobj terminate];
}
bool NSTask_suspend(void* goobj) {
  return [(NSTask*)goobj suspend];
}
bool NSTask_resume(void* goobj) {
  return [(NSTask*)goobj resume];
}
int NSTask_processIdentifier(void* goobj) {
  return [(NSTask*)goobj processIdentifier];
}
bool NSTask_isRunning(void* goobj) {
  return [(NSTask*)goobj isRunning];
}
int NSTask_terminationStatus(void* goobj) {
  return [(NSTask*)goobj terminationStatus];
}
NSTaskTerminationReason NSTask_terminationReason(void* goobj) {
  return [(NSTask*)goobj terminationReason];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSTask_terminationHandler(void* goobj) {
//  return [(NSTask*)goobj terminationHandler];
//}
//REJECT: terminationHandler
//void NSTask_setTerminationHandler(void* goobj, *INVALID TYPE* terminationHandler) {
//  [(NSTask*)goobj setTerminationHandler:terminationHandler];
//}
void NSTask_waitUntilExit(void* goobj) {
  [(NSTask*)goobj waitUntilExit];
}


////NSXMLNode
void* NSXMLNode_init() {
  return [[NSXMLNode alloc] init];
}
void* NSXMLNode_initWithKind(NSXMLNodeKind kind) {
  return [[NSXMLNode alloc] initWithKind:kind];
}
void* NSXMLNode_initWithKindOptions(NSXMLNodeKind kind, uint options) {
  return [[NSXMLNode alloc] initWithKind:kind options:options];
}
NSXMLNodeKind NSXMLNode_kind(void* goobj) {
  return [(NSXMLNode*)goobj kind];
}
void NSXMLNode_setName(void* goobj, void* name) {
  [(NSXMLNode*)goobj setName:(NSString*)name];
}
void* NSXMLNode_name(void* goobj) {
  return [(NSXMLNode*)goobj name];
}
void NSXMLNode_setObjectValue(void* goobj, void* value) {
  [(NSXMLNode*)goobj setObjectValue:value];
}
void* NSXMLNode_objectValue(void* goobj) {
  return [(NSXMLNode*)goobj objectValue];
}
void NSXMLNode_setStringValue(void* goobj, void* string) {
  [(NSXMLNode*)goobj setStringValue:(NSString*)string];
}
void NSXMLNode_setStringValueResolvingEntities(void* goobj, void* string, bool resolve) {
  [(NSXMLNode*)goobj setStringValue:(NSString*)string resolvingEntities:resolve];
}
void* NSXMLNode_stringValue(void* goobj) {
  return [(NSXMLNode*)goobj stringValue];
}
uint NSXMLNode_index(void* goobj) {
  return [(NSXMLNode*)goobj index];
}
uint NSXMLNode_level(void* goobj) {
  return [(NSXMLNode*)goobj level];
}
void* NSXMLNode_rootDocument(void* goobj) {
  return [(NSXMLNode*)goobj rootDocument];
}
void* NSXMLNode_parent(void* goobj) {
  return [(NSXMLNode*)goobj parent];
}
uint NSXMLNode_childCount(void* goobj) {
  return [(NSXMLNode*)goobj childCount];
}
void* NSXMLNode_children(void* goobj) {
  return [(NSXMLNode*)goobj children];
}
void* NSXMLNode_childAtIndex(void* goobj, uint index) {
  return [(NSXMLNode*)goobj childAtIndex:index];
}
void* NSXMLNode_previousSibling(void* goobj) {
  return [(NSXMLNode*)goobj previousSibling];
}
void* NSXMLNode_nextSibling(void* goobj) {
  return [(NSXMLNode*)goobj nextSibling];
}
void* NSXMLNode_previousNode(void* goobj) {
  return [(NSXMLNode*)goobj previousNode];
}
void* NSXMLNode_nextNode(void* goobj) {
  return [(NSXMLNode*)goobj nextNode];
}
void NSXMLNode_detach(void* goobj) {
  [(NSXMLNode*)goobj detach];
}
void* NSXMLNode_XPath(void* goobj) {
  return [(NSXMLNode*)goobj XPath];
}
void* NSXMLNode_localName(void* goobj) {
  return [(NSXMLNode*)goobj localName];
}
void* NSXMLNode_prefix(void* goobj) {
  return [(NSXMLNode*)goobj prefix];
}
void NSXMLNode_setURI(void* goobj, void* URI) {
  [(NSXMLNode*)goobj setURI:(NSString*)URI];
}
void* NSXMLNode_URI(void* goobj) {
  return [(NSXMLNode*)goobj URI];
}
void* NSXMLNode_description(void* goobj) {
  return [(NSXMLNode*)goobj description];
}
void* NSXMLNode_XMLString(void* goobj) {
  return [(NSXMLNode*)goobj XMLString];
}
void* NSXMLNode_XMLStringWithOptions(void* goobj, uint options) {
  return [(NSXMLNode*)goobj XMLStringWithOptions:options];
}
void* NSXMLNode_canonicalXMLStringPreservingComments(void* goobj, bool comments) {
  return [(NSXMLNode*)goobj canonicalXMLStringPreservingComments:comments];
}
void* NSXMLNode_nodesForXPathError(void* goobj, void* xpath, void* error) {
  return [(NSXMLNode*)goobj nodesForXPath:(NSString*)xpath error:(NSError**)&error];
}
void* NSXMLNode_objectsForXQueryConstantsError(void* goobj, void* xquery, void* constants, void* error) {
  return [(NSXMLNode*)goobj objectsForXQuery:(NSString*)xquery constants:(NSDictionary*)constants error:(NSError**)&error];
}
void* NSXMLNode_objectsForXQueryError(void* goobj, void* xquery, void* error) {
  return [(NSXMLNode*)goobj objectsForXQuery:(NSString*)xquery error:(NSError**)&error];
}
void* NSXMLNode__document() {
  return [NSXMLNode document];
}
void* NSXMLNode__documentWithRootElement(void* element) {
  return [NSXMLNode documentWithRootElement:(NSXMLElement*)element];
}
void* NSXMLNode__elementWithName(void* name) {
  return [NSXMLNode elementWithName:(NSString*)name];
}
void* NSXMLNode__elementWithNameURI(void* name, void* URI) {
  return [NSXMLNode elementWithName:(NSString*)name URI:(NSString*)URI];
}
void* NSXMLNode__elementWithNameStringValue(void* name, void* string) {
  return [NSXMLNode elementWithName:(NSString*)name stringValue:(NSString*)string];
}
void* NSXMLNode__elementWithNameChildrenAttributes(void* name, void* children, void* attributes) {
  return [NSXMLNode elementWithName:(NSString*)name children:(NSArray*)children attributes:(NSArray*)attributes];
}
void* NSXMLNode__attributeWithNameStringValue(void* name, void* stringValue) {
  return [NSXMLNode attributeWithName:(NSString*)name stringValue:(NSString*)stringValue];
}
void* NSXMLNode__attributeWithNameURIStringValue(void* name, void* URI, void* stringValue) {
  return [NSXMLNode attributeWithName:(NSString*)name URI:(NSString*)URI stringValue:(NSString*)stringValue];
}
void* NSXMLNode__namespaceWithNameStringValue(void* name, void* stringValue) {
  return [NSXMLNode namespaceWithName:(NSString*)name stringValue:(NSString*)stringValue];
}
void* NSXMLNode__processingInstructionWithNameStringValue(void* name, void* stringValue) {
  return [NSXMLNode processingInstructionWithName:(NSString*)name stringValue:(NSString*)stringValue];
}
void* NSXMLNode__commentWithStringValue(void* stringValue) {
  return [NSXMLNode commentWithStringValue:(NSString*)stringValue];
}
void* NSXMLNode__textWithStringValue(void* stringValue) {
  return [NSXMLNode textWithStringValue:(NSString*)stringValue];
}
void* NSXMLNode__DTDNodeWithXMLString(void* string) {
  return [NSXMLNode DTDNodeWithXMLString:(NSString*)string];
}
void* NSXMLNode__localNameForName(void* name) {
  return [NSXMLNode localNameForName:(NSString*)name];
}
void* NSXMLNode__prefixForName(void* name) {
  return [NSXMLNode prefixForName:(NSString*)name];
}
void* NSXMLNode__predefinedNamespaceForPrefix(void* name) {
  return [NSXMLNode predefinedNamespaceForPrefix:(NSString*)name];
}

////NSXMLDTD
void* NSXMLDTD_init() {
  return [[NSXMLDTD alloc] init];
}
void* NSXMLDTD_initWithContentsOfURLOptionsError(void* url, uint mask, void* error) {
  return [[NSXMLDTD alloc] initWithContentsOfURL:(NSURL*)url options:mask error:(NSError**)&error];
}
void* NSXMLDTD_initWithDataOptionsError(void* data, uint mask, void* error) {
  return [[NSXMLDTD alloc] initWithData:(NSData*)data options:mask error:(NSError**)&error];
}
void NSXMLDTD_setPublicID(void* goobj, void* publicID) {
  [(NSXMLDTD*)goobj setPublicID:(NSString*)publicID];
}
void* NSXMLDTD_publicID(void* goobj) {
  return [(NSXMLDTD*)goobj publicID];
}
void NSXMLDTD_setSystemID(void* goobj, void* systemID) {
  [(NSXMLDTD*)goobj setSystemID:(NSString*)systemID];
}
void* NSXMLDTD_systemID(void* goobj) {
  return [(NSXMLDTD*)goobj systemID];
}
void NSXMLDTD_insertChildAtIndex(void* goobj, void* child, uint index) {
  [(NSXMLDTD*)goobj insertChild:(NSXMLNode*)child atIndex:index];
}
void NSXMLDTD_insertChildrenAtIndex(void* goobj, void* children, uint index) {
  [(NSXMLDTD*)goobj insertChildren:(NSArray*)children atIndex:index];
}
void NSXMLDTD_removeChildAtIndex(void* goobj, uint index) {
  [(NSXMLDTD*)goobj removeChildAtIndex:index];
}
void NSXMLDTD_setChildren(void* goobj, void* children) {
  [(NSXMLDTD*)goobj setChildren:(NSArray*)children];
}
void NSXMLDTD_addChild(void* goobj, void* child) {
  [(NSXMLDTD*)goobj addChild:(NSXMLNode*)child];
}
void NSXMLDTD_replaceChildAtIndexWithNode(void* goobj, uint index, void* node) {
  [(NSXMLDTD*)goobj replaceChildAtIndex:index withNode:(NSXMLNode*)node];
}
void* NSXMLDTD_entityDeclarationForName(void* goobj, void* name) {
  return [(NSXMLDTD*)goobj entityDeclarationForName:(NSString*)name];
}
void* NSXMLDTD_notationDeclarationForName(void* goobj, void* name) {
  return [(NSXMLDTD*)goobj notationDeclarationForName:(NSString*)name];
}
void* NSXMLDTD_elementDeclarationForName(void* goobj, void* name) {
  return [(NSXMLDTD*)goobj elementDeclarationForName:(NSString*)name];
}
void* NSXMLDTD_attributeDeclarationForNameElementName(void* goobj, void* name, void* elementName) {
  return [(NSXMLDTD*)goobj attributeDeclarationForName:(NSString*)name elementName:(NSString*)elementName];
}
void* NSXMLDTD__predefinedEntityDeclarationForName(void* name) {
  return [NSXMLDTD predefinedEntityDeclarationForName:(NSString*)name];
}

////NSXMLDTDNode
void* NSXMLDTDNode_init() {
  return [[NSXMLDTDNode alloc] init];
}
void* NSXMLDTDNode_initWithXMLString(void* string) {
  return [[NSXMLDTDNode alloc] initWithXMLString:(NSString*)string];
}
void NSXMLDTDNode_setDTDKind(void* goobj, NSXMLDTDNodeKind kind) {
  [(NSXMLDTDNode*)goobj setDTDKind:kind];
}
NSXMLDTDNodeKind NSXMLDTDNode_DTDKind(void* goobj) {
  return [(NSXMLDTDNode*)goobj DTDKind];
}
bool NSXMLDTDNode_isExternal(void* goobj) {
  return [(NSXMLDTDNode*)goobj isExternal];
}
void NSXMLDTDNode_setPublicID(void* goobj, void* publicID) {
  [(NSXMLDTDNode*)goobj setPublicID:(NSString*)publicID];
}
void* NSXMLDTDNode_publicID(void* goobj) {
  return [(NSXMLDTDNode*)goobj publicID];
}
void NSXMLDTDNode_setSystemID(void* goobj, void* systemID) {
  [(NSXMLDTDNode*)goobj setSystemID:(NSString*)systemID];
}
void* NSXMLDTDNode_systemID(void* goobj) {
  return [(NSXMLDTDNode*)goobj systemID];
}
void NSXMLDTDNode_setNotationName(void* goobj, void* notationName) {
  [(NSXMLDTDNode*)goobj setNotationName:(NSString*)notationName];
}
void* NSXMLDTDNode_notationName(void* goobj) {
  return [(NSXMLDTDNode*)goobj notationName];
}


////NSXMLDocument
void* NSXMLDocument_init() {
  return [[NSXMLDocument alloc] init];
}
void* NSXMLDocument_initWithXMLStringOptionsError(void* string, uint mask, void* error) {
  return [[NSXMLDocument alloc] initWithXMLString:(NSString*)string options:mask error:(NSError**)&error];
}
void* NSXMLDocument_initWithContentsOfURLOptionsError(void* url, uint mask, void* error) {
  return [[NSXMLDocument alloc] initWithContentsOfURL:(NSURL*)url options:mask error:(NSError**)&error];
}
void* NSXMLDocument_initWithDataOptionsError(void* data, uint mask, void* error) {
  return [[NSXMLDocument alloc] initWithData:(NSData*)data options:mask error:(NSError**)&error];
}
void* NSXMLDocument_initWithRootElement(void* element) {
  return [[NSXMLDocument alloc] initWithRootElement:(NSXMLElement*)element];
}
void NSXMLDocument_setCharacterEncoding(void* goobj, void* encoding) {
  [(NSXMLDocument*)goobj setCharacterEncoding:(NSString*)encoding];
}
void* NSXMLDocument_characterEncoding(void* goobj) {
  return [(NSXMLDocument*)goobj characterEncoding];
}
void NSXMLDocument_setVersion(void* goobj, void* version) {
  [(NSXMLDocument*)goobj setVersion:(NSString*)version];
}
void* NSXMLDocument_version(void* goobj) {
  return [(NSXMLDocument*)goobj version];
}
void NSXMLDocument_setStandalone(void* goobj, bool standalone) {
  [(NSXMLDocument*)goobj setStandalone:standalone];
}
bool NSXMLDocument_isStandalone(void* goobj) {
  return [(NSXMLDocument*)goobj isStandalone];
}
void NSXMLDocument_setDocumentContentKind(void* goobj, NSXMLDocumentContentKind kind) {
  [(NSXMLDocument*)goobj setDocumentContentKind:kind];
}
NSXMLDocumentContentKind NSXMLDocument_documentContentKind(void* goobj) {
  return [(NSXMLDocument*)goobj documentContentKind];
}
void NSXMLDocument_setMIMEType(void* goobj, void* MIMEType) {
  [(NSXMLDocument*)goobj setMIMEType:(NSString*)MIMEType];
}
void* NSXMLDocument_MIMEType(void* goobj) {
  return [(NSXMLDocument*)goobj MIMEType];
}
void NSXMLDocument_setDTD(void* goobj, void* documentTypeDeclaration) {
  [(NSXMLDocument*)goobj setDTD:(NSXMLDTD*)documentTypeDeclaration];
}
void* NSXMLDocument_DTD(void* goobj) {
  return [(NSXMLDocument*)goobj DTD];
}
void NSXMLDocument_setRootElement(void* goobj, void* root) {
  [(NSXMLDocument*)goobj setRootElement:(NSXMLNode*)root];
}
void* NSXMLDocument_rootElement(void* goobj) {
  return [(NSXMLDocument*)goobj rootElement];
}
void NSXMLDocument_insertChildAtIndex(void* goobj, void* child, uint index) {
  [(NSXMLDocument*)goobj insertChild:(NSXMLNode*)child atIndex:index];
}
void NSXMLDocument_insertChildrenAtIndex(void* goobj, void* children, uint index) {
  [(NSXMLDocument*)goobj insertChildren:(NSArray*)children atIndex:index];
}
void NSXMLDocument_removeChildAtIndex(void* goobj, uint index) {
  [(NSXMLDocument*)goobj removeChildAtIndex:index];
}
void NSXMLDocument_setChildren(void* goobj, void* children) {
  [(NSXMLDocument*)goobj setChildren:(NSArray*)children];
}
void NSXMLDocument_addChild(void* goobj, void* child) {
  [(NSXMLDocument*)goobj addChild:(NSXMLNode*)child];
}
void NSXMLDocument_replaceChildAtIndexWithNode(void* goobj, uint index, void* node) {
  [(NSXMLDocument*)goobj replaceChildAtIndex:index withNode:(NSXMLNode*)node];
}
void* NSXMLDocument_XMLData(void* goobj) {
  return [(NSXMLDocument*)goobj XMLData];
}
void* NSXMLDocument_XMLDataWithOptions(void* goobj, uint options) {
  return [(NSXMLDocument*)goobj XMLDataWithOptions:options];
}
void* NSXMLDocument_objectByApplyingXSLTArgumentsError(void* goobj, void* xslt, void* arguments, void* error) {
  return [(NSXMLDocument*)goobj objectByApplyingXSLT:(NSData*)xslt arguments:(NSDictionary*)arguments error:(NSError**)&error];
}
void* NSXMLDocument_objectByApplyingXSLTStringArgumentsError(void* goobj, void* xslt, void* arguments, void* error) {
  return [(NSXMLDocument*)goobj objectByApplyingXSLTString:(NSString*)xslt arguments:(NSDictionary*)arguments error:(NSError**)&error];
}
void* NSXMLDocument_objectByApplyingXSLTAtURLArgumentsError(void* goobj, void* xsltURL, void* argument, void* error) {
  return [(NSXMLDocument*)goobj objectByApplyingXSLTAtURL:(NSURL*)xsltURL arguments:(NSDictionary*)argument error:(NSError**)&error];
}
bool NSXMLDocument_validateAndReturnError(void* goobj, void* error) {
  return [(NSXMLDocument*)goobj validateAndReturnError:(NSError**)&error];
}
//REJECT: Class cls
//Class NSXMLDocument__replacementClassForClass(Class cls) {
//  return [NSXMLDocument replacementClassForClass:cls];
//}

////NSXMLElement
void* NSXMLElement_init() {
  return [[NSXMLElement alloc] init];
}
void* NSXMLElement_initWithName(void* name) {
  return [[NSXMLElement alloc] initWithName:(NSString*)name];
}
void* NSXMLElement_initWithNameURI(void* name, void* URI) {
  return [[NSXMLElement alloc] initWithName:(NSString*)name URI:(NSString*)URI];
}
void* NSXMLElement_initWithNameStringValue(void* name, void* string) {
  return [[NSXMLElement alloc] initWithName:(NSString*)name stringValue:(NSString*)string];
}
void* NSXMLElement_initWithXMLStringError(void* string, void* error) {
  return [[NSXMLElement alloc] initWithXMLString:(NSString*)string error:(NSError**)&error];
}
void* NSXMLElement_elementsForName(void* goobj, void* name) {
  return [(NSXMLElement*)goobj elementsForName:(NSString*)name];
}
void* NSXMLElement_elementsForLocalNameURI(void* goobj, void* localName, void* URI) {
  return [(NSXMLElement*)goobj elementsForLocalName:(NSString*)localName URI:(NSString*)URI];
}
void NSXMLElement_addAttribute(void* goobj, void* attribute) {
  [(NSXMLElement*)goobj addAttribute:(NSXMLNode*)attribute];
}
void NSXMLElement_removeAttributeForName(void* goobj, void* name) {
  [(NSXMLElement*)goobj removeAttributeForName:(NSString*)name];
}
void NSXMLElement_setAttributes(void* goobj, void* attributes) {
  [(NSXMLElement*)goobj setAttributes:(NSArray*)attributes];
}
void NSXMLElement_setAttributesWithDictionary(void* goobj, void* attributes) {
  [(NSXMLElement*)goobj setAttributesWithDictionary:(NSDictionary*)attributes];
}
void* NSXMLElement_attributes(void* goobj) {
  return [(NSXMLElement*)goobj attributes];
}
void* NSXMLElement_attributeForName(void* goobj, void* name) {
  return [(NSXMLElement*)goobj attributeForName:(NSString*)name];
}
void* NSXMLElement_attributeForLocalNameURI(void* goobj, void* localName, void* URI) {
  return [(NSXMLElement*)goobj attributeForLocalName:(NSString*)localName URI:(NSString*)URI];
}
void NSXMLElement_addNamespace(void* goobj, void* aNamespace) {
  [(NSXMLElement*)goobj addNamespace:(NSXMLNode*)aNamespace];
}
void NSXMLElement_removeNamespaceForPrefix(void* goobj, void* name) {
  [(NSXMLElement*)goobj removeNamespaceForPrefix:(NSString*)name];
}
void NSXMLElement_setNamespaces(void* goobj, void* namespaces) {
  [(NSXMLElement*)goobj setNamespaces:(NSArray*)namespaces];
}
void* NSXMLElement_namespaces(void* goobj) {
  return [(NSXMLElement*)goobj namespaces];
}
void* NSXMLElement_namespaceForPrefix(void* goobj, void* name) {
  return [(NSXMLElement*)goobj namespaceForPrefix:(NSString*)name];
}
void* NSXMLElement_resolveNamespaceForName(void* goobj, void* name) {
  return [(NSXMLElement*)goobj resolveNamespaceForName:(NSString*)name];
}
void* NSXMLElement_resolvePrefixForNamespaceURI(void* goobj, void* namespaceURI) {
  return [(NSXMLElement*)goobj resolvePrefixForNamespaceURI:(NSString*)namespaceURI];
}
void NSXMLElement_insertChildAtIndex(void* goobj, void* child, uint index) {
  [(NSXMLElement*)goobj insertChild:(NSXMLNode*)child atIndex:index];
}
void NSXMLElement_insertChildrenAtIndex(void* goobj, void* children, uint index) {
  [(NSXMLElement*)goobj insertChildren:(NSArray*)children atIndex:index];
}
void NSXMLElement_removeChildAtIndex(void* goobj, uint index) {
  [(NSXMLElement*)goobj removeChildAtIndex:index];
}
void NSXMLElement_setChildren(void* goobj, void* children) {
  [(NSXMLElement*)goobj setChildren:(NSArray*)children];
}
void NSXMLElement_addChild(void* goobj, void* child) {
  [(NSXMLElement*)goobj addChild:(NSXMLNode*)child];
}
void NSXMLElement_replaceChildAtIndexWithNode(void* goobj, uint index, void* node) {
  [(NSXMLElement*)goobj replaceChildAtIndex:index withNode:(NSXMLNode*)node];
}
void NSXMLElement_normalizeAdjacentTextNodesPreservingCDATA(void* goobj, bool preserve) {
  [(NSXMLElement*)goobj normalizeAdjacentTextNodesPreservingCDATA:preserve];
}


////NSURLDownload
void* NSURLDownload_init() {
  return [[NSURLDownload alloc] init];
}
void* NSURLDownload_initWithRequestDelegate(void* request, void* delegate) {
  return [[NSURLDownload alloc] initWithRequest:(NSURLRequest*)request delegate:delegate];
}
void* NSURLDownload_initWithResumeDataDelegatePath(void* resumeData, void* delegate, void* path) {
  return [[NSURLDownload alloc] initWithResumeData:(NSData*)resumeData delegate:delegate path:(NSString*)path];
}
void NSURLDownload_cancel(void* goobj) {
  [(NSURLDownload*)goobj cancel];
}
void NSURLDownload_setDestinationAllowOverwrite(void* goobj, void* path, bool allowOverwrite) {
  [(NSURLDownload*)goobj setDestination:(NSString*)path allowOverwrite:allowOverwrite];
}
void* NSURLDownload_request(void* goobj) {
  return [(NSURLDownload*)goobj request];
}
void* NSURLDownload_resumeData(void* goobj) {
  return [(NSURLDownload*)goobj resumeData];
}
void NSURLDownload_setDeletesFileUponFailure(void* goobj, bool deletesFileUponFailure) {
  [(NSURLDownload*)goobj setDeletesFileUponFailure:deletesFileUponFailure];
}
bool NSURLDownload_deletesFileUponFailure(void* goobj) {
  return [(NSURLDownload*)goobj deletesFileUponFailure];
}
bool NSURLDownload__canResumeDownloadDecodedWithEncodingMIMEType(void* MIMEType) {
  return [NSURLDownload canResumeDownloadDecodedWithEncodingMIMEType:(NSString*)MIMEType];
}

////NSAffineTransform
void* NSAffineTransform_init() {
  return [[NSAffineTransform alloc] init];
}
void* NSAffineTransform_initWithTransform(void* transform) {
  return [[NSAffineTransform alloc] initWithTransform:(NSAffineTransform*)transform];
}
//REJECT: deltaX deltaY
//void NSAffineTransform_translateXByYBy(void* goobj, CGFloat deltaX, CGFloat deltaY) {
//  [(NSAffineTransform*)goobj translateXBy:deltaX yBy:deltaY];
//}
//REJECT: angle
//void NSAffineTransform_rotateByDegrees(void* goobj, CGFloat angle) {
//  [(NSAffineTransform*)goobj rotateByDegrees:angle];
//}
//REJECT: angle
//void NSAffineTransform_rotateByRadians(void* goobj, CGFloat angle) {
//  [(NSAffineTransform*)goobj rotateByRadians:angle];
//}
//REJECT: scale
//void NSAffineTransform_scaleBy(void* goobj, CGFloat scale) {
//  [(NSAffineTransform*)goobj scaleBy:scale];
//}
//REJECT: scaleX scaleY
//void NSAffineTransform_scaleXByYBy(void* goobj, CGFloat scaleX, CGFloat scaleY) {
//  [(NSAffineTransform*)goobj scaleXBy:scaleX yBy:scaleY];
//}
void NSAffineTransform_invert(void* goobj) {
  [(NSAffineTransform*)goobj invert];
}
void NSAffineTransform_appendTransform(void* goobj, void* transform) {
  [(NSAffineTransform*)goobj appendTransform:(NSAffineTransform*)transform];
}
void NSAffineTransform_prependTransform(void* goobj, void* transform) {
  [(NSAffineTransform*)goobj prependTransform:(NSAffineTransform*)transform];
}
NSPoint NSAffineTransform_transformPoint(void* goobj, NSPoint aPoint) {
  return [(NSAffineTransform*)goobj transformPoint:aPoint];
}
//REJECT: NSSize aSize
//NSSize NSAffineTransform_transformSize(void* goobj, NSSize aSize) {
//  return [(NSAffineTransform*)goobj transformSize:aSize];
//}
NSAffineTransformStruct NSAffineTransform_transformStruct(void* goobj) {
  return [(NSAffineTransform*)goobj transformStruct];
}
void NSAffineTransform_setTransformStruct(void* goobj, NSAffineTransformStruct transformStruct) {
  [(NSAffineTransform*)goobj setTransformStruct:transformStruct];
}
void* NSAffineTransform__transform() {
  return [NSAffineTransform transform];
}

////NSAppleEventManager
void* NSAppleEventManager_init() {
  return [[NSAppleEventManager alloc] init];
}
//REJECT: handleEventSelector eventClass eventID
//void NSAppleEventManager_setEventHandlerAndSelectorForEventClassAndEventID(void* goobj, void* handler, SEL handleEventSelector, AEEventClass eventClass, AEEventID eventID) {
//  [(NSAppleEventManager*)goobj setEventHandler:handler andSelector:handleEventSelector forEventClass:eventClass andEventID:eventID];
//}
//REJECT: eventClass eventID
//void NSAppleEventManager_removeEventHandlerForEventClassAndEventID(void* goobj, AEEventClass eventClass, AEEventID eventID) {
//  [(NSAppleEventManager*)goobj removeEventHandlerForEventClass:eventClass andEventID:eventID];
//}
//REJECT: OSErr theAppleEvent theReply
//OSErr NSAppleEventManager_dispatchRawAppleEventWithRawReplyHandlerRefCon(void* goobj, AppleEvent theAppleEvent, AppleEvent theReply, SRefCon handlerRefCon) {
//  return [(NSAppleEventManager*)goobj dispatchRawAppleEvent:theAppleEvent withRawReply:theReply handlerRefCon:handlerRefCon];
//}
void* NSAppleEventManager_currentAppleEvent(void* goobj) {
  return [(NSAppleEventManager*)goobj currentAppleEvent];
}
void* NSAppleEventManager_currentReplyAppleEvent(void* goobj) {
  return [(NSAppleEventManager*)goobj currentReplyAppleEvent];
}
//REJECT: NSAppleEventManagerSuspensionID
//NSAppleEventManagerSuspensionID NSAppleEventManager_suspendCurrentAppleEvent(void* goobj) {
//  return [(NSAppleEventManager*)goobj suspendCurrentAppleEvent];
//}
//REJECT: suspensionID
//void* NSAppleEventManager_appleEventForSuspensionID(void* goobj, NSAppleEventManagerSuspensionID suspensionID) {
//  return [(NSAppleEventManager*)goobj appleEventForSuspensionID:suspensionID];
//}
//REJECT: suspensionID
//void* NSAppleEventManager_replyAppleEventForSuspensionID(void* goobj, NSAppleEventManagerSuspensionID suspensionID) {
//  return [(NSAppleEventManager*)goobj replyAppleEventForSuspensionID:suspensionID];
//}
//REJECT: suspensionID
//void NSAppleEventManager_setCurrentAppleEventAndReplyEventWithSuspensionID(void* goobj, NSAppleEventManagerSuspensionID suspensionID) {
//  [(NSAppleEventManager*)goobj setCurrentAppleEventAndReplyEventWithSuspensionID:suspensionID];
//}
//REJECT: suspensionID
//void NSAppleEventManager_resumeWithSuspensionID(void* goobj, NSAppleEventManagerSuspensionID suspensionID) {
//  [(NSAppleEventManager*)goobj resumeWithSuspensionID:suspensionID];
//}
void* NSAppleEventManager__sharedAppleEventManager() {
  return [NSAppleEventManager sharedAppleEventManager];
}

////NSAppleScript
void* NSAppleScript_init() {
  return [[NSAppleScript alloc] init];
}
void* NSAppleScript_initWithContentsOfURLError(void* url, void* errorInfo) {
  return [[NSAppleScript alloc] initWithContentsOfURL:(NSURL*)url error:(NSDictionary*)errorInfo];
}
void* NSAppleScript_initWithSource(void* source) {
  return [[NSAppleScript alloc] initWithSource:(NSString*)source];
}
void* NSAppleScript_source(void* goobj) {
  return [(NSAppleScript*)goobj source];
}
bool NSAppleScript_isCompiled(void* goobj) {
  return [(NSAppleScript*)goobj isCompiled];
}
bool NSAppleScript_compileAndReturnError(void* goobj, void* errorInfo) {
  return [(NSAppleScript*)goobj compileAndReturnError:(NSDictionary*)errorInfo];
}
void* NSAppleScript_executeAndReturnError(void* goobj, void* errorInfo) {
  return [(NSAppleScript*)goobj executeAndReturnError:(NSDictionary*)errorInfo];
}
void* NSAppleScript_executeAppleEventError(void* goobj, void* event, void* errorInfo) {
  return [(NSAppleScript*)goobj executeAppleEvent:(NSAppleEventDescriptor*)event error:(NSDictionary*)errorInfo];
}


////NSClassDescription
void* NSClassDescription_init() {
  return [[NSClassDescription alloc] init];
}
void* NSClassDescription_attributeKeys(void* goobj) {
  return [(NSClassDescription*)goobj attributeKeys];
}
void* NSClassDescription_toOneRelationshipKeys(void* goobj) {
  return [(NSClassDescription*)goobj toOneRelationshipKeys];
}
void* NSClassDescription_toManyRelationshipKeys(void* goobj) {
  return [(NSClassDescription*)goobj toManyRelationshipKeys];
}
void* NSClassDescription_inverseForRelationshipKey(void* goobj, void* relationshipKey) {
  return [(NSClassDescription*)goobj inverseForRelationshipKey:(NSString*)relationshipKey];
}
//REJECT: aClass
//void NSClassDescription__registerClassDescriptionForClass(void* description, Class aClass) {
//  [NSClassDescription registerClassDescription:(NSClassDescription*)description forClass:aClass];
//}
void NSClassDescription__invalidateClassDescriptionCache() {
  [NSClassDescription invalidateClassDescriptionCache];
}
//REJECT: aClass
//void* NSClassDescription__classDescriptionForClass(Class aClass) {
//  return [NSClassDescription classDescriptionForClass:aClass];
//}

////NSDistributedLock
void* NSDistributedLock_init() {
  return [[NSDistributedLock alloc] init];
}
void* NSDistributedLock_initWithPath(void* path) {
  return [[NSDistributedLock alloc] initWithPath:(NSString*)path];
}
bool NSDistributedLock_tryLock(void* goobj) {
  return [(NSDistributedLock*)goobj tryLock];
}
void NSDistributedLock_unlock(void* goobj) {
  [(NSDistributedLock*)goobj unlock];
}
void NSDistributedLock_breakLock(void* goobj) {
  [(NSDistributedLock*)goobj breakLock];
}
void* NSDistributedLock_lockDate(void* goobj) {
  return [(NSDistributedLock*)goobj lockDate];
}
void* NSDistributedLock__lockWithPath(void* path) {
  return [NSDistributedLock lockWithPath:(NSString*)path];
}

////NSGarbageCollector
void* NSGarbageCollector_init() {
  return [[NSGarbageCollector alloc] init];
}
bool NSGarbageCollector_isCollecting(void* goobj) {
  return [(NSGarbageCollector*)goobj isCollecting];
}
void NSGarbageCollector_disable(void* goobj) {
  [(NSGarbageCollector*)goobj disable];
}
void NSGarbageCollector_enable(void* goobj) {
  [(NSGarbageCollector*)goobj enable];
}
bool NSGarbageCollector_isEnabled(void* goobj) {
  return [(NSGarbageCollector*)goobj isEnabled];
}
void NSGarbageCollector_collectIfNeeded(void* goobj) {
  [(NSGarbageCollector*)goobj collectIfNeeded];
}
void NSGarbageCollector_collectExhaustively(void* goobj) {
  [(NSGarbageCollector*)goobj collectExhaustively];
}
void NSGarbageCollector_disableCollectorForPointer(void* goobj, const void* ptr) {
  [(NSGarbageCollector*)goobj disableCollectorForPointer:ptr];
}
void NSGarbageCollector_enableCollectorForPointer(void* goobj, const void* ptr) {
  [(NSGarbageCollector*)goobj enableCollectorForPointer:ptr];
}
//REJECT: NSZone
//NSZone NSGarbageCollector_zone(void* goobj) {
//  return [(NSGarbageCollector*)goobj zone];
//}
void* NSGarbageCollector__defaultCollector() {
  return [NSGarbageCollector defaultCollector];
}

////NSHost
void* NSHost_init() {
  return [[NSHost alloc] init];
}
bool NSHost_isEqualToHost(void* goobj, void* aHost) {
  return [(NSHost*)goobj isEqualToHost:(NSHost*)aHost];
}
void* NSHost_name(void* goobj) {
  return [(NSHost*)goobj name];
}
void* NSHost_names(void* goobj) {
  return [(NSHost*)goobj names];
}
void* NSHost_address(void* goobj) {
  return [(NSHost*)goobj address];
}
void* NSHost_addresses(void* goobj) {
  return [(NSHost*)goobj addresses];
}
void* NSHost_localizedName(void* goobj) {
  return [(NSHost*)goobj localizedName];
}
void* NSHost__currentHost() {
  return [NSHost currentHost];
}
void* NSHost__hostWithName(void* name) {
  return [NSHost hostWithName:(NSString*)name];
}
void* NSHost__hostWithAddress(void* address) {
  return [NSHost hostWithAddress:(NSString*)address];
}
void NSHost__setHostCacheEnabled(bool flag) {
  [NSHost setHostCacheEnabled:flag];
}
bool NSHost__isHostCacheEnabled() {
  return [NSHost isHostCacheEnabled];
}
void NSHost__flushHostCache() {
  [NSHost flushHostCache];
}

////NSScriptClassDescription
void* NSScriptClassDescription_init() {
  return [[NSScriptClassDescription alloc] init];
}
void* NSScriptClassDescription_initWithSuiteNameClassNameDictionary(void* suiteName, void* className, void* classDeclaration) {
  return [[NSScriptClassDescription alloc] initWithSuiteName:(NSString*)suiteName className:(NSString*)className dictionary:(NSDictionary*)classDeclaration];
}
void* NSScriptClassDescription_suiteName(void* goobj) {
  return [(NSScriptClassDescription*)goobj suiteName];
}
void* NSScriptClassDescription_className(void* goobj) {
  return [(NSScriptClassDescription*)goobj className];
}
void* NSScriptClassDescription_implementationClassName(void* goobj) {
  return [(NSScriptClassDescription*)goobj implementationClassName];
}
void* NSScriptClassDescription_superclassDescription(void* goobj) {
  return [(NSScriptClassDescription*)goobj superclassDescription];
}
//REJECT: FourCharCode
//FourCharCode NSScriptClassDescription_appleEventCode(void* goobj) {
//  return [(NSScriptClassDescription*)goobj appleEventCode];
//}
//REJECT: appleEventCode
//bool NSScriptClassDescription_matchesAppleEventCode(void* goobj, FourCharCode appleEventCode) {
//  return [(NSScriptClassDescription*)goobj matchesAppleEventCode:appleEventCode];
//}
bool NSScriptClassDescription_supportsCommand(void* goobj, void* commandDescription) {
  return [(NSScriptClassDescription*)goobj supportsCommand:(NSScriptCommandDescription*)commandDescription];
}
//REJECT: SEL
//SEL NSScriptClassDescription_selectorForCommand(void* goobj, void* commandDescription) {
//  return [(NSScriptClassDescription*)goobj selectorForCommand:(NSScriptCommandDescription*)commandDescription];
//}
void* NSScriptClassDescription_typeForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj typeForKey:(NSString*)key];
}
void* NSScriptClassDescription_classDescriptionForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj classDescriptionForKey:(NSString*)key];
}
//REJECT: FourCharCode
//FourCharCode NSScriptClassDescription_appleEventCodeForKey(void* goobj, void* key) {
//  return [(NSScriptClassDescription*)goobj appleEventCodeForKey:(NSString*)key];
//}
//REJECT: appleEventCode
//void* NSScriptClassDescription_keyWithAppleEventCode(void* goobj, FourCharCode appleEventCode) {
//  return [(NSScriptClassDescription*)goobj keyWithAppleEventCode:appleEventCode];
//}
void* NSScriptClassDescription_defaultSubcontainerAttributeKey(void* goobj) {
  return [(NSScriptClassDescription*)goobj defaultSubcontainerAttributeKey];
}
bool NSScriptClassDescription_isLocationRequiredToCreateForKey(void* goobj, void* toManyRelationshipKey) {
  return [(NSScriptClassDescription*)goobj isLocationRequiredToCreateForKey:(NSString*)toManyRelationshipKey];
}
bool NSScriptClassDescription_hasPropertyForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj hasPropertyForKey:(NSString*)key];
}
bool NSScriptClassDescription_hasOrderedToManyRelationshipForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj hasOrderedToManyRelationshipForKey:(NSString*)key];
}
bool NSScriptClassDescription_hasReadablePropertyForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj hasReadablePropertyForKey:(NSString*)key];
}
bool NSScriptClassDescription_hasWritablePropertyForKey(void* goobj, void* key) {
  return [(NSScriptClassDescription*)goobj hasWritablePropertyForKey:(NSString*)key];
}
//REJECT: aClass
//void* NSScriptClassDescription__classDescriptionForClass(Class aClass) {
//  return [NSScriptClassDescription classDescriptionForClass:aClass];
//}

////NSScriptCoercionHandler
void* NSScriptCoercionHandler_init() {
  return [[NSScriptCoercionHandler alloc] init];
}
//REJECT: toClass
//void* NSScriptCoercionHandler_coerceValueToClass(void* goobj, void* value, Class toClass) {
//  return [(NSScriptCoercionHandler*)goobj coerceValue:value toClass:toClass];
//}
//REJECT: selector fromClass toClass
//void NSScriptCoercionHandler_registerCoercerSelectorToConvertFromClassToClass(void* goobj, void* coercer, SEL selector, Class fromClass, Class toClass) {
//  [(NSScriptCoercionHandler*)goobj registerCoercer:coercer selector:selector toConvertFromClass:fromClass toClass:toClass];
//}
void* NSScriptCoercionHandler__sharedCoercionHandler() {
  return [NSScriptCoercionHandler sharedCoercionHandler];
}

////NSScriptCommand
void* NSScriptCommand_init() {
  return [[NSScriptCommand alloc] init];
}
void* NSScriptCommand_initWithCommandDescription(void* commandDef) {
  return [[NSScriptCommand alloc] initWithCommandDescription:(NSScriptCommandDescription*)commandDef];
}
void* NSScriptCommand_commandDescription(void* goobj) {
  return [(NSScriptCommand*)goobj commandDescription];
}
void NSScriptCommand_setDirectParameter(void* goobj, void* directParameter) {
  [(NSScriptCommand*)goobj setDirectParameter:directParameter];
}
void* NSScriptCommand_directParameter(void* goobj) {
  return [(NSScriptCommand*)goobj directParameter];
}
void NSScriptCommand_setReceiversSpecifier(void* goobj, void* receiversRef) {
  [(NSScriptCommand*)goobj setReceiversSpecifier:(NSScriptObjectSpecifier*)receiversRef];
}
void* NSScriptCommand_receiversSpecifier(void* goobj) {
  return [(NSScriptCommand*)goobj receiversSpecifier];
}
void* NSScriptCommand_evaluatedReceivers(void* goobj) {
  return [(NSScriptCommand*)goobj evaluatedReceivers];
}
void NSScriptCommand_setArguments(void* goobj, void* args) {
  [(NSScriptCommand*)goobj setArguments:(NSDictionary*)args];
}
void* NSScriptCommand_arguments(void* goobj) {
  return [(NSScriptCommand*)goobj arguments];
}
void* NSScriptCommand_evaluatedArguments(void* goobj) {
  return [(NSScriptCommand*)goobj evaluatedArguments];
}
bool NSScriptCommand_isWellFormed(void* goobj) {
  return [(NSScriptCommand*)goobj isWellFormed];
}
void* NSScriptCommand_performDefaultImplementation(void* goobj) {
  return [(NSScriptCommand*)goobj performDefaultImplementation];
}
void* NSScriptCommand_executeCommand(void* goobj) {
  return [(NSScriptCommand*)goobj executeCommand];
}
void NSScriptCommand_setScriptErrorNumber(void* goobj, int errorNumber) {
  [(NSScriptCommand*)goobj setScriptErrorNumber:errorNumber];
}
void NSScriptCommand_setScriptErrorOffendingObjectDescriptor(void* goobj, void* errorOffendingObjectDescriptor) {
  [(NSScriptCommand*)goobj setScriptErrorOffendingObjectDescriptor:(NSAppleEventDescriptor*)errorOffendingObjectDescriptor];
}
void NSScriptCommand_setScriptErrorExpectedTypeDescriptor(void* goobj, void* errorExpectedTypeDescriptor) {
  [(NSScriptCommand*)goobj setScriptErrorExpectedTypeDescriptor:(NSAppleEventDescriptor*)errorExpectedTypeDescriptor];
}
void NSScriptCommand_setScriptErrorString(void* goobj, void* errorString) {
  [(NSScriptCommand*)goobj setScriptErrorString:(NSString*)errorString];
}
int NSScriptCommand_scriptErrorNumber(void* goobj) {
  return [(NSScriptCommand*)goobj scriptErrorNumber];
}
void* NSScriptCommand_scriptErrorOffendingObjectDescriptor(void* goobj) {
  return [(NSScriptCommand*)goobj scriptErrorOffendingObjectDescriptor];
}
void* NSScriptCommand_scriptErrorExpectedTypeDescriptor(void* goobj) {
  return [(NSScriptCommand*)goobj scriptErrorExpectedTypeDescriptor];
}
void* NSScriptCommand_scriptErrorString(void* goobj) {
  return [(NSScriptCommand*)goobj scriptErrorString];
}
void* NSScriptCommand_appleEvent(void* goobj) {
  return [(NSScriptCommand*)goobj appleEvent];
}
void NSScriptCommand_suspendExecution(void* goobj) {
  [(NSScriptCommand*)goobj suspendExecution];
}
void NSScriptCommand_resumeExecutionWithResult(void* goobj, void* result) {
  [(NSScriptCommand*)goobj resumeExecutionWithResult:result];
}
void* NSScriptCommand__currentCommand() {
  return [NSScriptCommand currentCommand];
}

////NSScriptCommandDescription
void* NSScriptCommandDescription_init() {
  return [[NSScriptCommandDescription alloc] init];
}
void* NSScriptCommandDescription_initWithSuiteNameCommandNameDictionary(void* suiteName, void* commandName, void* commandDeclaration) {
  return [[NSScriptCommandDescription alloc] initWithSuiteName:(NSString*)suiteName commandName:(NSString*)commandName dictionary:(NSDictionary*)commandDeclaration];
}
void* NSScriptCommandDescription_suiteName(void* goobj) {
  return [(NSScriptCommandDescription*)goobj suiteName];
}
void* NSScriptCommandDescription_commandName(void* goobj) {
  return [(NSScriptCommandDescription*)goobj commandName];
}
//REJECT: FourCharCode
//FourCharCode NSScriptCommandDescription_appleEventClassCode(void* goobj) {
//  return [(NSScriptCommandDescription*)goobj appleEventClassCode];
//}
//REJECT: FourCharCode
//FourCharCode NSScriptCommandDescription_appleEventCode(void* goobj) {
//  return [(NSScriptCommandDescription*)goobj appleEventCode];
//}
void* NSScriptCommandDescription_commandClassName(void* goobj) {
  return [(NSScriptCommandDescription*)goobj commandClassName];
}
void* NSScriptCommandDescription_returnType(void* goobj) {
  return [(NSScriptCommandDescription*)goobj returnType];
}
//REJECT: FourCharCode
//FourCharCode NSScriptCommandDescription_appleEventCodeForReturnType(void* goobj) {
//  return [(NSScriptCommandDescription*)goobj appleEventCodeForReturnType];
//}
void* NSScriptCommandDescription_argumentNames(void* goobj) {
  return [(NSScriptCommandDescription*)goobj argumentNames];
}
void* NSScriptCommandDescription_typeForArgumentWithName(void* goobj, void* argumentName) {
  return [(NSScriptCommandDescription*)goobj typeForArgumentWithName:(NSString*)argumentName];
}
//REJECT: FourCharCode
//FourCharCode NSScriptCommandDescription_appleEventCodeForArgumentWithName(void* goobj, void* argumentName) {
//  return [(NSScriptCommandDescription*)goobj appleEventCodeForArgumentWithName:(NSString*)argumentName];
//}
bool NSScriptCommandDescription_isOptionalArgumentWithName(void* goobj, void* argumentName) {
  return [(NSScriptCommandDescription*)goobj isOptionalArgumentWithName:(NSString*)argumentName];
}
void* NSScriptCommandDescription_createCommandInstance(void* goobj) {
  return [(NSScriptCommandDescription*)goobj createCommandInstance];
}
//REJECT: zone
//void* NSScriptCommandDescription_createCommandInstanceWithZone(void* goobj, NSZone zone) {
//  return [(NSScriptCommandDescription*)goobj createCommandInstanceWithZone:zone];
//}


////NSScriptExecutionContext
void* NSScriptExecutionContext_init() {
  return [[NSScriptExecutionContext alloc] init];
}
void* NSScriptExecutionContext_topLevelObject(void* goobj) {
  return [(NSScriptExecutionContext*)goobj topLevelObject];
}
void NSScriptExecutionContext_setTopLevelObject(void* goobj, void* obj) {
  [(NSScriptExecutionContext*)goobj setTopLevelObject:obj];
}
void* NSScriptExecutionContext_objectBeingTested(void* goobj) {
  return [(NSScriptExecutionContext*)goobj objectBeingTested];
}
void NSScriptExecutionContext_setObjectBeingTested(void* goobj, void* obj) {
  [(NSScriptExecutionContext*)goobj setObjectBeingTested:obj];
}
void* NSScriptExecutionContext_rangeContainerObject(void* goobj) {
  return [(NSScriptExecutionContext*)goobj rangeContainerObject];
}
void NSScriptExecutionContext_setRangeContainerObject(void* goobj, void* obj) {
  [(NSScriptExecutionContext*)goobj setRangeContainerObject:obj];
}
void* NSScriptExecutionContext__sharedScriptExecutionContext() {
  return [NSScriptExecutionContext sharedScriptExecutionContext];
}

////NSScriptObjectSpecifier
void* NSScriptObjectSpecifier_init() {
  return [[NSScriptObjectSpecifier alloc] init];
}
void* NSScriptObjectSpecifier_initWithContainerSpecifierKey(void* container, void* property) {
  return [[NSScriptObjectSpecifier alloc] initWithContainerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property];
}
void* NSScriptObjectSpecifier_initWithContainerClassDescriptionContainerSpecifierKey(void* classDesc, void* container, void* property) {
  return [[NSScriptObjectSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property];
}
void* NSScriptObjectSpecifier_childSpecifier(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj childSpecifier];
}
void NSScriptObjectSpecifier_setChildSpecifier(void* goobj, void* child) {
  [(NSScriptObjectSpecifier*)goobj setChildSpecifier:(NSScriptObjectSpecifier*)child];
}
void* NSScriptObjectSpecifier_containerSpecifier(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj containerSpecifier];
}
void NSScriptObjectSpecifier_setContainerSpecifier(void* goobj, void* subRef) {
  [(NSScriptObjectSpecifier*)goobj setContainerSpecifier:(NSScriptObjectSpecifier*)subRef];
}
bool NSScriptObjectSpecifier_containerIsObjectBeingTested(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj containerIsObjectBeingTested];
}
void NSScriptObjectSpecifier_setContainerIsObjectBeingTested(void* goobj, bool flag) {
  [(NSScriptObjectSpecifier*)goobj setContainerIsObjectBeingTested:flag];
}
bool NSScriptObjectSpecifier_containerIsRangeContainerObject(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj containerIsRangeContainerObject];
}
void NSScriptObjectSpecifier_setContainerIsRangeContainerObject(void* goobj, bool flag) {
  [(NSScriptObjectSpecifier*)goobj setContainerIsRangeContainerObject:flag];
}
void* NSScriptObjectSpecifier_key(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj key];
}
void NSScriptObjectSpecifier_setKey(void* goobj, void* key) {
  [(NSScriptObjectSpecifier*)goobj setKey:(NSString*)key];
}
void* NSScriptObjectSpecifier_containerClassDescription(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj containerClassDescription];
}
void NSScriptObjectSpecifier_setContainerClassDescription(void* goobj, void* classDesc) {
  [(NSScriptObjectSpecifier*)goobj setContainerClassDescription:(NSScriptClassDescription*)classDesc];
}
void* NSScriptObjectSpecifier_keyClassDescription(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj keyClassDescription];
}
//REJECT: NSInteger count
//NSInteger NSScriptObjectSpecifier_indicesOfObjectsByEvaluatingWithContainerCount(void* goobj, void* container, NSInteger count) {
//  return [(NSScriptObjectSpecifier*)goobj indicesOfObjectsByEvaluatingWithContainer:container count:count];
//}
void* NSScriptObjectSpecifier_objectsByEvaluatingWithContainers(void* goobj, void* containers) {
  return [(NSScriptObjectSpecifier*)goobj objectsByEvaluatingWithContainers:containers];
}
void* NSScriptObjectSpecifier_objectsByEvaluatingSpecifier(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj objectsByEvaluatingSpecifier];
}
//REJECT: NSInteger
//NSInteger NSScriptObjectSpecifier_evaluationErrorNumber(void* goobj) {
//  return [(NSScriptObjectSpecifier*)goobj evaluationErrorNumber];
//}
//REJECT: error
//void NSScriptObjectSpecifier_setEvaluationErrorNumber(void* goobj, NSInteger error) {
//  [(NSScriptObjectSpecifier*)goobj setEvaluationErrorNumber:error];
//}
void* NSScriptObjectSpecifier_evaluationErrorSpecifier(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj evaluationErrorSpecifier];
}
void* NSScriptObjectSpecifier_descriptor(void* goobj) {
  return [(NSScriptObjectSpecifier*)goobj descriptor];
}
void* NSScriptObjectSpecifier__objectSpecifierWithDescriptor(void* descriptor) {
  return [NSScriptObjectSpecifier objectSpecifierWithDescriptor:(NSAppleEventDescriptor*)descriptor];
}

////NSIndexSpecifier
void* NSIndexSpecifier_init() {
  return [[NSIndexSpecifier alloc] init];
}
//REJECT: index
//void* NSIndexSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyIndex(void* classDesc, void* container, void* property, NSInteger index) {
//  return [[NSIndexSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property index:index];
//}
//REJECT: NSInteger
//NSInteger NSIndexSpecifier_index(void* goobj) {
//  return [(NSIndexSpecifier*)goobj index];
//}
//REJECT: index
//void NSIndexSpecifier_setIndex(void* goobj, NSInteger index) {
//  [(NSIndexSpecifier*)goobj setIndex:index];
//}


////NSMiddleSpecifier
void* NSMiddleSpecifier_init() {
  return [[NSMiddleSpecifier alloc] init];
}



////NSNameSpecifier
void* NSNameSpecifier_init() {
  return [[NSNameSpecifier alloc] init];
}
void* NSNameSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyName(void* classDesc, void* container, void* property, void* name) {
  return [[NSNameSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property name:(NSString*)name];
}
void* NSNameSpecifier_name(void* goobj) {
  return [(NSNameSpecifier*)goobj name];
}
void NSNameSpecifier_setName(void* goobj, void* name) {
  [(NSNameSpecifier*)goobj setName:(NSString*)name];
}


////NSPositionalSpecifier
void* NSPositionalSpecifier_init() {
  return [[NSPositionalSpecifier alloc] init];
}
void* NSPositionalSpecifier_initWithPositionObjectSpecifier(NSInsertionPosition position, void* specifier) {
  return [[NSPositionalSpecifier alloc] initWithPosition:position objectSpecifier:(NSScriptObjectSpecifier*)specifier];
}
NSInsertionPosition NSPositionalSpecifier_position(void* goobj) {
  return [(NSPositionalSpecifier*)goobj position];
}
void* NSPositionalSpecifier_objectSpecifier(void* goobj) {
  return [(NSPositionalSpecifier*)goobj objectSpecifier];
}
void NSPositionalSpecifier_setInsertionClassDescription(void* goobj, void* classDescription) {
  [(NSPositionalSpecifier*)goobj setInsertionClassDescription:(NSScriptClassDescription*)classDescription];
}
void NSPositionalSpecifier_evaluate(void* goobj) {
  [(NSPositionalSpecifier*)goobj evaluate];
}
void* NSPositionalSpecifier_insertionContainer(void* goobj) {
  return [(NSPositionalSpecifier*)goobj insertionContainer];
}
void* NSPositionalSpecifier_insertionKey(void* goobj) {
  return [(NSPositionalSpecifier*)goobj insertionKey];
}
//REJECT: NSInteger
//NSInteger NSPositionalSpecifier_insertionIndex(void* goobj) {
//  return [(NSPositionalSpecifier*)goobj insertionIndex];
//}
bool NSPositionalSpecifier_insertionReplaces(void* goobj) {
  return [(NSPositionalSpecifier*)goobj insertionReplaces];
}


////NSPropertySpecifier
void* NSPropertySpecifier_init() {
  return [[NSPropertySpecifier alloc] init];
}



////NSRandomSpecifier
void* NSRandomSpecifier_init() {
  return [[NSRandomSpecifier alloc] init];
}



////NSRangeSpecifier
void* NSRangeSpecifier_init() {
  return [[NSRangeSpecifier alloc] init];
}
void* NSRangeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(void* classDesc, void* container, void* property, void* startSpec, void* endSpec) {
  return [[NSRangeSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property startSpecifier:(NSScriptObjectSpecifier*)startSpec endSpecifier:(NSScriptObjectSpecifier*)endSpec];
}
void* NSRangeSpecifier_startSpecifier(void* goobj) {
  return [(NSRangeSpecifier*)goobj startSpecifier];
}
void NSRangeSpecifier_setStartSpecifier(void* goobj, void* startSpec) {
  [(NSRangeSpecifier*)goobj setStartSpecifier:(NSScriptObjectSpecifier*)startSpec];
}
void* NSRangeSpecifier_endSpecifier(void* goobj) {
  return [(NSRangeSpecifier*)goobj endSpecifier];
}
void NSRangeSpecifier_setEndSpecifier(void* goobj, void* endSpec) {
  [(NSRangeSpecifier*)goobj setEndSpecifier:(NSScriptObjectSpecifier*)endSpec];
}


////NSRelativeSpecifier
void* NSRelativeSpecifier_init() {
  return [[NSRelativeSpecifier alloc] init];
}
void* NSRelativeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(void* classDesc, void* container, void* property, NSRelativePosition relPos, void* baseSpecifier) {
  return [[NSRelativeSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property relativePosition:relPos baseSpecifier:(NSScriptObjectSpecifier*)baseSpecifier];
}
NSRelativePosition NSRelativeSpecifier_relativePosition(void* goobj) {
  return [(NSRelativeSpecifier*)goobj relativePosition];
}
void NSRelativeSpecifier_setRelativePosition(void* goobj, NSRelativePosition relPos) {
  [(NSRelativeSpecifier*)goobj setRelativePosition:relPos];
}
void* NSRelativeSpecifier_baseSpecifier(void* goobj) {
  return [(NSRelativeSpecifier*)goobj baseSpecifier];
}
void NSRelativeSpecifier_setBaseSpecifier(void* goobj, void* baseSpecifier) {
  [(NSRelativeSpecifier*)goobj setBaseSpecifier:(NSScriptObjectSpecifier*)baseSpecifier];
}


////NSUniqueIDSpecifier
void* NSUniqueIDSpecifier_init() {
  return [[NSUniqueIDSpecifier alloc] init];
}
void* NSUniqueIDSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyUniqueID(void* classDesc, void* container, void* property, void* uniqueID) {
  return [[NSUniqueIDSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property uniqueID:uniqueID];
}
void* NSUniqueIDSpecifier_uniqueID(void* goobj) {
  return [(NSUniqueIDSpecifier*)goobj uniqueID];
}
void NSUniqueIDSpecifier_setUniqueID(void* goobj, void* uniqueID) {
  [(NSUniqueIDSpecifier*)goobj setUniqueID:uniqueID];
}


////NSWhoseSpecifier
void* NSWhoseSpecifier_init() {
  return [[NSWhoseSpecifier alloc] init];
}
void* NSWhoseSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyTest(void* classDesc, void* container, void* property, void* test) {
  return [[NSWhoseSpecifier alloc] initWithContainerClassDescription:(NSScriptClassDescription*)classDesc containerSpecifier:(NSScriptObjectSpecifier*)container key:(NSString*)property test:(NSScriptWhoseTest*)test];
}
void* NSWhoseSpecifier_test(void* goobj) {
  return [(NSWhoseSpecifier*)goobj test];
}
void NSWhoseSpecifier_setTest(void* goobj, void* test) {
  [(NSWhoseSpecifier*)goobj setTest:(NSScriptWhoseTest*)test];
}
NSWhoseSubelementIdentifier NSWhoseSpecifier_startSubelementIdentifier(void* goobj) {
  return [(NSWhoseSpecifier*)goobj startSubelementIdentifier];
}
void NSWhoseSpecifier_setStartSubelementIdentifier(void* goobj, NSWhoseSubelementIdentifier subelement) {
  [(NSWhoseSpecifier*)goobj setStartSubelementIdentifier:subelement];
}
//REJECT: NSInteger
//NSInteger NSWhoseSpecifier_startSubelementIndex(void* goobj) {
//  return [(NSWhoseSpecifier*)goobj startSubelementIndex];
//}
//REJECT: index
//void NSWhoseSpecifier_setStartSubelementIndex(void* goobj, NSInteger index) {
//  [(NSWhoseSpecifier*)goobj setStartSubelementIndex:index];
//}
NSWhoseSubelementIdentifier NSWhoseSpecifier_endSubelementIdentifier(void* goobj) {
  return [(NSWhoseSpecifier*)goobj endSubelementIdentifier];
}
void NSWhoseSpecifier_setEndSubelementIdentifier(void* goobj, NSWhoseSubelementIdentifier subelement) {
  [(NSWhoseSpecifier*)goobj setEndSubelementIdentifier:subelement];
}
//REJECT: NSInteger
//NSInteger NSWhoseSpecifier_endSubelementIndex(void* goobj) {
//  return [(NSWhoseSpecifier*)goobj endSubelementIndex];
//}
//REJECT: index
//void NSWhoseSpecifier_setEndSubelementIndex(void* goobj, NSInteger index) {
//  [(NSWhoseSpecifier*)goobj setEndSubelementIndex:index];
//}


////NSCloneCommand
void* NSCloneCommand_init() {
  return [[NSCloneCommand alloc] init];
}
void NSCloneCommand_setReceiversSpecifier(void* goobj, void* receiversRef) {
  [(NSCloneCommand*)goobj setReceiversSpecifier:(NSScriptObjectSpecifier*)receiversRef];
}
void* NSCloneCommand_keySpecifier(void* goobj) {
  return [(NSCloneCommand*)goobj keySpecifier];
}


////NSCloseCommand
void* NSCloseCommand_init() {
  return [[NSCloseCommand alloc] init];
}
NSSaveOptions NSCloseCommand_saveOptions(void* goobj) {
  return [(NSCloseCommand*)goobj saveOptions];
}


////NSCountCommand
void* NSCountCommand_init() {
  return [[NSCountCommand alloc] init];
}



////NSCreateCommand
void* NSCreateCommand_init() {
  return [[NSCreateCommand alloc] init];
}
void* NSCreateCommand_createClassDescription(void* goobj) {
  return [(NSCreateCommand*)goobj createClassDescription];
}
void* NSCreateCommand_resolvedKeyDictionary(void* goobj) {
  return [(NSCreateCommand*)goobj resolvedKeyDictionary];
}


////NSDeleteCommand
void* NSDeleteCommand_init() {
  return [[NSDeleteCommand alloc] init];
}
void NSDeleteCommand_setReceiversSpecifier(void* goobj, void* receiversRef) {
  [(NSDeleteCommand*)goobj setReceiversSpecifier:(NSScriptObjectSpecifier*)receiversRef];
}
void* NSDeleteCommand_keySpecifier(void* goobj) {
  return [(NSDeleteCommand*)goobj keySpecifier];
}


////NSExistsCommand
void* NSExistsCommand_init() {
  return [[NSExistsCommand alloc] init];
}



////NSGetCommand
void* NSGetCommand_init() {
  return [[NSGetCommand alloc] init];
}



////NSMoveCommand
void* NSMoveCommand_init() {
  return [[NSMoveCommand alloc] init];
}
void NSMoveCommand_setReceiversSpecifier(void* goobj, void* receiversRef) {
  [(NSMoveCommand*)goobj setReceiversSpecifier:(NSScriptObjectSpecifier*)receiversRef];
}
void* NSMoveCommand_keySpecifier(void* goobj) {
  return [(NSMoveCommand*)goobj keySpecifier];
}


////NSQuitCommand
void* NSQuitCommand_init() {
  return [[NSQuitCommand alloc] init];
}
NSSaveOptions NSQuitCommand_saveOptions(void* goobj) {
  return [(NSQuitCommand*)goobj saveOptions];
}


////NSSetCommand
void* NSSetCommand_init() {
  return [[NSSetCommand alloc] init];
}
void NSSetCommand_setReceiversSpecifier(void* goobj, void* receiversRef) {
  [(NSSetCommand*)goobj setReceiversSpecifier:(NSScriptObjectSpecifier*)receiversRef];
}
void* NSSetCommand_keySpecifier(void* goobj) {
  return [(NSSetCommand*)goobj keySpecifier];
}


////NSScriptSuiteRegistry
void* NSScriptSuiteRegistry_init() {
  return [[NSScriptSuiteRegistry alloc] init];
}
void NSScriptSuiteRegistry_loadSuitesFromBundle(void* goobj, void* bundle) {
  [(NSScriptSuiteRegistry*)goobj loadSuitesFromBundle:(NSBundle*)bundle];
}
void NSScriptSuiteRegistry_loadSuiteWithDictionaryFromBundle(void* goobj, void* suiteDeclaration, void* bundle) {
  [(NSScriptSuiteRegistry*)goobj loadSuiteWithDictionary:(NSDictionary*)suiteDeclaration fromBundle:(NSBundle*)bundle];
}
void NSScriptSuiteRegistry_registerClassDescription(void* goobj, void* classDescription) {
  [(NSScriptSuiteRegistry*)goobj registerClassDescription:(NSScriptClassDescription*)classDescription];
}
void NSScriptSuiteRegistry_registerCommandDescription(void* goobj, void* commandDescription) {
  [(NSScriptSuiteRegistry*)goobj registerCommandDescription:(NSScriptCommandDescription*)commandDescription];
}
void* NSScriptSuiteRegistry_suiteNames(void* goobj) {
  return [(NSScriptSuiteRegistry*)goobj suiteNames];
}
//REJECT: FourCharCode
//FourCharCode NSScriptSuiteRegistry_appleEventCodeForSuite(void* goobj, void* suiteName) {
//  return [(NSScriptSuiteRegistry*)goobj appleEventCodeForSuite:(NSString*)suiteName];
//}
void* NSScriptSuiteRegistry_bundleForSuite(void* goobj, void* suiteName) {
  return [(NSScriptSuiteRegistry*)goobj bundleForSuite:(NSString*)suiteName];
}
void* NSScriptSuiteRegistry_classDescriptionsInSuite(void* goobj, void* suiteName) {
  return [(NSScriptSuiteRegistry*)goobj classDescriptionsInSuite:(NSString*)suiteName];
}
void* NSScriptSuiteRegistry_commandDescriptionsInSuite(void* goobj, void* suiteName) {
  return [(NSScriptSuiteRegistry*)goobj commandDescriptionsInSuite:(NSString*)suiteName];
}
//REJECT: appleEventCode
//void* NSScriptSuiteRegistry_suiteForAppleEventCode(void* goobj, FourCharCode appleEventCode) {
//  return [(NSScriptSuiteRegistry*)goobj suiteForAppleEventCode:appleEventCode];
//}
//REJECT: appleEventCode
//void* NSScriptSuiteRegistry_classDescriptionWithAppleEventCode(void* goobj, FourCharCode appleEventCode) {
//  return [(NSScriptSuiteRegistry*)goobj classDescriptionWithAppleEventCode:appleEventCode];
//}
//REJECT: appleEventClassCode appleEventIDCode
//void* NSScriptSuiteRegistry_commandDescriptionWithAppleEventClassAndAppleEventCode(void* goobj, FourCharCode appleEventClassCode, FourCharCode appleEventIDCode) {
//  return [(NSScriptSuiteRegistry*)goobj commandDescriptionWithAppleEventClass:appleEventClassCode andAppleEventCode:appleEventIDCode];
//}
void* NSScriptSuiteRegistry_aeteResource(void* goobj, void* languageName) {
  return [(NSScriptSuiteRegistry*)goobj aeteResource:(NSString*)languageName];
}
void* NSScriptSuiteRegistry__sharedScriptSuiteRegistry() {
  return [NSScriptSuiteRegistry sharedScriptSuiteRegistry];
}
void NSScriptSuiteRegistry__setSharedScriptSuiteRegistry(void* registry) {
  [NSScriptSuiteRegistry setSharedScriptSuiteRegistry:(NSScriptSuiteRegistry*)registry];
}

////NSScriptWhoseTest
void* NSScriptWhoseTest_init() {
  return [[NSScriptWhoseTest alloc] init];
}
bool NSScriptWhoseTest_isTrue(void* goobj) {
  return [(NSScriptWhoseTest*)goobj isTrue];
}


////NSLogicalTest
void* NSLogicalTest_init() {
  return [[NSLogicalTest alloc] init];
}
void* NSLogicalTest_initAndTestWithTests(void* goobj, void* subTests) {
  return [(NSLogicalTest*)goobj initAndTestWithTests:(NSArray*)subTests];
}
void* NSLogicalTest_initOrTestWithTests(void* goobj, void* subTests) {
  return [(NSLogicalTest*)goobj initOrTestWithTests:(NSArray*)subTests];
}
void* NSLogicalTest_initNotTestWithTest(void* goobj, void* subTest) {
  return [(NSLogicalTest*)goobj initNotTestWithTest:(NSScriptWhoseTest*)subTest];
}


////NSSpecifierTest
void* NSSpecifierTest_init() {
  return [[NSSpecifierTest alloc] init];
}
void* NSSpecifierTest_initWithObjectSpecifierComparisonOperatorTestObject(void* obj1, NSTestComparisonOperation compOp, void* obj2) {
  return [[NSSpecifierTest alloc] initWithObjectSpecifier:(NSScriptObjectSpecifier*)obj1 comparisonOperator:compOp testObject:obj2];
}


////NSSpellServer
void* NSSpellServer_init() {
  return [[NSSpellServer alloc] init];
}
void NSSpellServer_setDelegate(void* goobj, void* anObject) {
  [(NSSpellServer*)goobj setDelegate:anObject];
}
void* NSSpellServer_delegate(void* goobj) {
  return [(NSSpellServer*)goobj delegate];
}
bool NSSpellServer_registerLanguageByVendor(void* goobj, void* language, void* vendor) {
  return [(NSSpellServer*)goobj registerLanguage:(NSString*)language byVendor:(NSString*)vendor];
}
bool NSSpellServer_isWordInUserDictionariesCaseSensitive(void* goobj, void* word, bool flag) {
  return [(NSSpellServer*)goobj isWordInUserDictionaries:(NSString*)word caseSensitive:flag];
}
void NSSpellServer_run(void* goobj) {
  [(NSSpellServer*)goobj run];
}


////NSUserNotification
void* NSUserNotification_init() {
  return [[NSUserNotification alloc] init];
}
void* NSUserNotification_title(void* goobj) {
  return [(NSUserNotification*)goobj title];
}
void NSUserNotification_setTitle(void* goobj, void* title) {
  [(NSUserNotification*)goobj setTitle:(NSString*)title];
}
void* NSUserNotification_subtitle(void* goobj) {
  return [(NSUserNotification*)goobj subtitle];
}
void NSUserNotification_setSubtitle(void* goobj, void* subtitle) {
  [(NSUserNotification*)goobj setSubtitle:(NSString*)subtitle];
}
void* NSUserNotification_informativeText(void* goobj) {
  return [(NSUserNotification*)goobj informativeText];
}
void NSUserNotification_setInformativeText(void* goobj, void* informativeText) {
  [(NSUserNotification*)goobj setInformativeText:(NSString*)informativeText];
}
void* NSUserNotification_actionButtonTitle(void* goobj) {
  return [(NSUserNotification*)goobj actionButtonTitle];
}
void NSUserNotification_setActionButtonTitle(void* goobj, void* actionButtonTitle) {
  [(NSUserNotification*)goobj setActionButtonTitle:(NSString*)actionButtonTitle];
}
void* NSUserNotification_userInfo(void* goobj) {
  return [(NSUserNotification*)goobj userInfo];
}
void NSUserNotification_setUserInfo(void* goobj, void* userInfo) {
  [(NSUserNotification*)goobj setUserInfo:(NSDictionary*)userInfo];
}
void* NSUserNotification_deliveryDate(void* goobj) {
  return [(NSUserNotification*)goobj deliveryDate];
}
void NSUserNotification_setDeliveryDate(void* goobj, void* deliveryDate) {
  [(NSUserNotification*)goobj setDeliveryDate:(NSDate*)deliveryDate];
}
void* NSUserNotification_deliveryTimeZone(void* goobj) {
  return [(NSUserNotification*)goobj deliveryTimeZone];
}
void NSUserNotification_setDeliveryTimeZone(void* goobj, void* deliveryTimeZone) {
  [(NSUserNotification*)goobj setDeliveryTimeZone:(NSTimeZone*)deliveryTimeZone];
}
void* NSUserNotification_deliveryRepeatInterval(void* goobj) {
  return [(NSUserNotification*)goobj deliveryRepeatInterval];
}
void NSUserNotification_setDeliveryRepeatInterval(void* goobj, void* deliveryRepeatInterval) {
  [(NSUserNotification*)goobj setDeliveryRepeatInterval:(NSDateComponents*)deliveryRepeatInterval];
}
void* NSUserNotification_actualDeliveryDate(void* goobj) {
  return [(NSUserNotification*)goobj actualDeliveryDate];
}
char NSUserNotification_isPresented(void* goobj) {
  return [(NSUserNotification*)goobj isPresented];
}
char NSUserNotification_isRemote(void* goobj) {
  return [(NSUserNotification*)goobj isRemote];
}
void* NSUserNotification_soundName(void* goobj) {
  return [(NSUserNotification*)goobj soundName];
}
void NSUserNotification_setSoundName(void* goobj, void* soundName) {
  [(NSUserNotification*)goobj setSoundName:(NSString*)soundName];
}
bool NSUserNotification_hasActionButton(void* goobj) {
  return [(NSUserNotification*)goobj hasActionButton];
}
void NSUserNotification_setHasActionButton(void* goobj, bool hasActionButton) {
  [(NSUserNotification*)goobj setHasActionButton:hasActionButton];
}
NSUserNotificationActivationType NSUserNotification_activationType(void* goobj) {
  return [(NSUserNotification*)goobj activationType];
}
void* NSUserNotification_otherButtonTitle(void* goobj) {
  return [(NSUserNotification*)goobj otherButtonTitle];
}
void NSUserNotification_setOtherButtonTitle(void* goobj, void* otherButtonTitle) {
  [(NSUserNotification*)goobj setOtherButtonTitle:(NSString*)otherButtonTitle];
}
void* NSUserNotification_identifier(void* goobj) {
  return [(NSUserNotification*)goobj identifier];
}
void NSUserNotification_setIdentifier(void* goobj, void* identifier) {
  [(NSUserNotification*)goobj setIdentifier:(NSString*)identifier];
}
void* NSUserNotification_contentImage(void* goobj) {
  return [(NSUserNotification*)goobj contentImage];
}
void NSUserNotification_setContentImage(void* goobj, void* contentImage) {
  [(NSUserNotification*)goobj setContentImage:(NSImage*)contentImage];
}
bool NSUserNotification_hasReplyButton(void* goobj) {
  return [(NSUserNotification*)goobj hasReplyButton];
}
void NSUserNotification_setHasReplyButton(void* goobj, bool hasReplyButton) {
  [(NSUserNotification*)goobj setHasReplyButton:hasReplyButton];
}
void* NSUserNotification_responsePlaceholder(void* goobj) {
  return [(NSUserNotification*)goobj responsePlaceholder];
}
void NSUserNotification_setResponsePlaceholder(void* goobj, void* responsePlaceholder) {
  [(NSUserNotification*)goobj setResponsePlaceholder:(NSString*)responsePlaceholder];
}
void* NSUserNotification_response(void* goobj) {
  return [(NSUserNotification*)goobj response];
}


////NSUserNotificationCenter
void* NSUserNotificationCenter_init() {
  return [[NSUserNotificationCenter alloc] init];
}
void NSUserNotificationCenter_scheduleNotification(void* goobj, void* notification) {
  [(NSUserNotificationCenter*)goobj scheduleNotification:(NSUserNotification*)notification];
}
void NSUserNotificationCenter_removeScheduledNotification(void* goobj, void* notification) {
  [(NSUserNotificationCenter*)goobj removeScheduledNotification:(NSUserNotification*)notification];
}
void NSUserNotificationCenter_deliverNotification(void* goobj, void* notification) {
  [(NSUserNotificationCenter*)goobj deliverNotification:(NSUserNotification*)notification];
}
void NSUserNotificationCenter_removeDeliveredNotification(void* goobj, void* notification) {
  [(NSUserNotificationCenter*)goobj removeDeliveredNotification:(NSUserNotification*)notification];
}
void NSUserNotificationCenter_removeAllDeliveredNotifications(void* goobj) {
  [(NSUserNotificationCenter*)goobj removeAllDeliveredNotifications];
}
void* NSUserNotificationCenter_delegate(void* goobj) {
  return [(NSUserNotificationCenter*)goobj delegate];
}
void NSUserNotificationCenter_setDelegate(void* goobj, void* delegate) {
  [(NSUserNotificationCenter*)goobj setDelegate:delegate];
}
void* NSUserNotificationCenter_scheduledNotifications(void* goobj) {
  return [(NSUserNotificationCenter*)goobj scheduledNotifications];
}
void NSUserNotificationCenter_setScheduledNotifications(void* goobj, void* scheduledNotifications) {
  [(NSUserNotificationCenter*)goobj setScheduledNotifications:(NSArray*)scheduledNotifications];
}
void* NSUserNotificationCenter_deliveredNotifications(void* goobj) {
  return [(NSUserNotificationCenter*)goobj deliveredNotifications];
}
void* NSUserNotificationCenter__defaultUserNotificationCenter() {
  return [NSUserNotificationCenter defaultUserNotificationCenter];
}

////NSUserScriptTask
void* NSUserScriptTask_init() {
  return [[NSUserScriptTask alloc] init];
}
void* NSUserScriptTask_initWithURLError(void* url, void* error) {
  return [[NSUserScriptTask alloc] initWithURL:(NSURL*)url error:(NSError**)&error];
}
void* NSUserScriptTask_scriptURL(void* goobj) {
  return [(NSUserScriptTask*)goobj scriptURL];
}
void NSUserScriptTask_executeWithCompletionHandler(void* goobj, NSUserScriptTaskCompletionHandler handler) {
  [(NSUserScriptTask*)goobj executeWithCompletionHandler:handler];
}


////NSUserUnixTask
void* NSUserUnixTask_init() {
  return [[NSUserUnixTask alloc] init];
}
void NSUserUnixTask_executeWithArgumentsCompletionHandler(void* goobj, void* arguments, NSUserUnixTaskCompletionHandler handler) {
  [(NSUserUnixTask*)goobj executeWithArguments:(NSArray*)arguments completionHandler:handler];
}
void* NSUserUnixTask_standardInput(void* goobj) {
  return [(NSUserUnixTask*)goobj standardInput];
}
void NSUserUnixTask_setStandardInput(void* goobj, void* standardInput) {
  [(NSUserUnixTask*)goobj setStandardInput:(NSFileHandle*)standardInput];
}
void* NSUserUnixTask_standardOutput(void* goobj) {
  return [(NSUserUnixTask*)goobj standardOutput];
}
void NSUserUnixTask_setStandardOutput(void* goobj, void* standardOutput) {
  [(NSUserUnixTask*)goobj setStandardOutput:(NSFileHandle*)standardOutput];
}
void* NSUserUnixTask_standardError(void* goobj) {
  return [(NSUserUnixTask*)goobj standardError];
}
void NSUserUnixTask_setStandardError(void* goobj, void* standardError) {
  [(NSUserUnixTask*)goobj setStandardError:(NSFileHandle*)standardError];
}


////NSUserAppleScriptTask
void* NSUserAppleScriptTask_init() {
  return [[NSUserAppleScriptTask alloc] init];
}
void NSUserAppleScriptTask_executeWithAppleEventCompletionHandler(void* goobj, void* event, NSUserAppleScriptTaskCompletionHandler handler) {
  [(NSUserAppleScriptTask*)goobj executeWithAppleEvent:(NSAppleEventDescriptor*)event completionHandler:handler];
}


////NSUserAutomatorTask
void* NSUserAutomatorTask_init() {
  return [[NSUserAutomatorTask alloc] init];
}
void NSUserAutomatorTask_executeWithInputCompletionHandler(void* goobj, void* input, NSUserAutomatorTaskCompletionHandler handler) {
  [(NSUserAutomatorTask*)goobj executeWithInput:input completionHandler:handler];
}
void* NSUserAutomatorTask_variables(void* goobj) {
  return [(NSUserAutomatorTask*)goobj variables];
}
void NSUserAutomatorTask_setVariables(void* goobj, void* variables) {
  [(NSUserAutomatorTask*)goobj setVariables:(NSDictionary*)variables];
}


////NSXPCConnection
void* NSXPCConnection_init() {
  return [[NSXPCConnection alloc] init];
}
void* NSXPCConnection_initWithServiceName(void* serviceName) {
  return [[NSXPCConnection alloc] initWithServiceName:(NSString*)serviceName];
}
void* NSXPCConnection_initWithMachServiceNameOptions(void* name, NSXPCConnectionOptions options) {
  return [[NSXPCConnection alloc] initWithMachServiceName:(NSString*)name options:options];
}
void* NSXPCConnection_initWithListenerEndpoint(void* endpoint) {
  return [[NSXPCConnection alloc] initWithListenerEndpoint:(NSXPCListenerEndpoint*)endpoint];
}
void* NSXPCConnection_remoteObjectProxy(void* goobj) {
  return [(NSXPCConnection*)goobj remoteObjectProxy];
}
//REJECT: handler
//void* NSXPCConnection_remoteObjectProxyWithErrorHandler(void* goobj, *INVALID TYPE* handler) {
//  return [(NSXPCConnection*)goobj remoteObjectProxyWithErrorHandler:handler];
//}
void NSXPCConnection_resume(void* goobj) {
  [(NSXPCConnection*)goobj resume];
}
void NSXPCConnection_suspend(void* goobj) {
  [(NSXPCConnection*)goobj suspend];
}
void NSXPCConnection_invalidate(void* goobj) {
  [(NSXPCConnection*)goobj invalidate];
}
void* NSXPCConnection_serviceName(void* goobj) {
  return [(NSXPCConnection*)goobj serviceName];
}
void* NSXPCConnection_endpoint(void* goobj) {
  return [(NSXPCConnection*)goobj endpoint];
}
void* NSXPCConnection_exportedInterface(void* goobj) {
  return [(NSXPCConnection*)goobj exportedInterface];
}
void NSXPCConnection_setExportedInterface(void* goobj, void* exportedInterface) {
  [(NSXPCConnection*)goobj setExportedInterface:(NSXPCInterface*)exportedInterface];
}
void* NSXPCConnection_exportedObject(void* goobj) {
  return [(NSXPCConnection*)goobj exportedObject];
}
void NSXPCConnection_setExportedObject(void* goobj, void* exportedObject) {
  [(NSXPCConnection*)goobj setExportedObject:exportedObject];
}
void* NSXPCConnection_remoteObjectInterface(void* goobj) {
  return [(NSXPCConnection*)goobj remoteObjectInterface];
}
void NSXPCConnection_setRemoteObjectInterface(void* goobj, void* remoteObjectInterface) {
  [(NSXPCConnection*)goobj setRemoteObjectInterface:(NSXPCInterface*)remoteObjectInterface];
}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSXPCConnection_interruptionHandler(void* goobj) {
//  return [(NSXPCConnection*)goobj interruptionHandler];
//}
//REJECT: interruptionHandler
//void NSXPCConnection_setInterruptionHandler(void* goobj, *INVALID TYPE* interruptionHandler) {
//  [(NSXPCConnection*)goobj setInterruptionHandler:interruptionHandler];
//}
//REJECT: *INVALID TYPE*
//*INVALID TYPE* NSXPCConnection_invalidationHandler(void* goobj) {
//  return [(NSXPCConnection*)goobj invalidationHandler];
//}
//REJECT: invalidationHandler
//void NSXPCConnection_setInvalidationHandler(void* goobj, *INVALID TYPE* invalidationHandler) {
//  [(NSXPCConnection*)goobj setInvalidationHandler:invalidationHandler];
//}
//REJECT: au_asid_t
//au_asid_t NSXPCConnection_auditSessionIdentifier(void* goobj) {
//  return [(NSXPCConnection*)goobj auditSessionIdentifier];
//}
//REJECT: pid_t
//pid_t NSXPCConnection_processIdentifier(void* goobj) {
//  return [(NSXPCConnection*)goobj processIdentifier];
//}
//REJECT: uid_t
//uid_t NSXPCConnection_effectiveUserIdentifier(void* goobj) {
//  return [(NSXPCConnection*)goobj effectiveUserIdentifier];
//}
//REJECT: gid_t
//gid_t NSXPCConnection_effectiveGroupIdentifier(void* goobj) {
//  return [(NSXPCConnection*)goobj effectiveGroupIdentifier];
//}


////NSXPCListener
void* NSXPCListener_init() {
  return [[NSXPCListener alloc] init];
}
void* NSXPCListener_initWithMachServiceName(void* name) {
  return [[NSXPCListener alloc] initWithMachServiceName:(NSString*)name];
}
void* NSXPCListener_endpoint(void* goobj) {
  return [(NSXPCListener*)goobj endpoint];
}
void NSXPCListener_resume(void* goobj) {
  [(NSXPCListener*)goobj resume];
}
void NSXPCListener_suspend(void* goobj) {
  [(NSXPCListener*)goobj suspend];
}
void NSXPCListener_invalidate(void* goobj) {
  [(NSXPCListener*)goobj invalidate];
}
void* NSXPCListener_delegate(void* goobj) {
  return [(NSXPCListener*)goobj delegate];
}
void NSXPCListener_setDelegate(void* goobj, void* delegate) {
  [(NSXPCListener*)goobj setDelegate:delegate];
}
void* NSXPCListener__serviceListener() {
  return [NSXPCListener serviceListener];
}
void* NSXPCListener__anonymousListener() {
  return [NSXPCListener anonymousListener];
}

////NSXPCInterface
void* NSXPCInterface_init() {
  return [[NSXPCInterface alloc] init];
}
//REJECT: sel
//void NSXPCInterface_setClassesForSelectorArgumentIndexOfReply(void* goobj, void* classes, SEL sel, uint arg, bool ofReply) {
//  [(NSXPCInterface*)goobj setClasses:(NSSet*)classes forSelector:sel argumentIndex:arg ofReply:ofReply];
//}
//REJECT: sel
//void* NSXPCInterface_classesForSelectorArgumentIndexOfReply(void* goobj, SEL sel, uint arg, bool ofReply) {
//  return [(NSXPCInterface*)goobj classesForSelector:sel argumentIndex:arg ofReply:ofReply];
//}
//REJECT: sel
//void NSXPCInterface_setInterfaceForSelectorArgumentIndexOfReply(void* goobj, void* ifc, SEL sel, uint arg, bool ofReply) {
//  [(NSXPCInterface*)goobj setInterface:(NSXPCInterface*)ifc forSelector:sel argumentIndex:arg ofReply:ofReply];
//}
//REJECT: sel
//void* NSXPCInterface_interfaceForSelectorArgumentIndexOfReply(void* goobj, SEL sel, uint arg, bool ofReply) {
//  return [(NSXPCInterface*)goobj interfaceForSelector:sel argumentIndex:arg ofReply:ofReply];
//}
void* NSXPCInterface_protocol(void* goobj) {
  return [(NSXPCInterface*)goobj protocol];
}
void NSXPCInterface_setProtocol(void* goobj, void* protocol) {
  [(NSXPCInterface*)goobj setProtocol:(Protocol*)protocol];
}
void* NSXPCInterface__interfaceWithProtocol(void* protocol) {
  return [NSXPCInterface interfaceWithProtocol:(Protocol*)protocol];
}

////NSXPCListenerEndpoint
void* NSXPCListenerEndpoint_init() {
  return [[NSXPCListenerEndpoint alloc] init];
}



////NSAnimation
void* NSAnimation_init() {
  return [[NSAnimation alloc] init];
}
//REJECT: duration
//void* NSAnimation_initWithDurationAnimationCurve(NSTimeInterval duration, NSAnimationCurve animationCurve) {
//  return [[NSAnimation alloc] initWithDuration:duration animationCurve:animationCurve];
//}
void NSAnimation_startAnimation(void* goobj) {
  [(NSAnimation*)goobj startAnimation];
}
void NSAnimation_stopAnimation(void* goobj) {
  [(NSAnimation*)goobj stopAnimation];
}
bool NSAnimation_isAnimating(void* goobj) {
  return [(NSAnimation*)goobj isAnimating];
}
NSAnimationProgress NSAnimation_currentProgress(void* goobj) {
  return [(NSAnimation*)goobj currentProgress];
}
void NSAnimation_setCurrentProgress(void* goobj, NSAnimationProgress progress) {
  [(NSAnimation*)goobj setCurrentProgress:progress];
}
//REJECT: duration
//void NSAnimation_setDuration(void* goobj, NSTimeInterval duration) {
//  [(NSAnimation*)goobj setDuration:duration];
//}
//REJECT: NSTimeInterval
//NSTimeInterval NSAnimation_duration(void* goobj) {
//  return [(NSAnimation*)goobj duration];
//}
NSAnimationBlockingMode NSAnimation_animationBlockingMode(void* goobj) {
  return [(NSAnimation*)goobj animationBlockingMode];
}
void NSAnimation_setAnimationBlockingMode(void* goobj, NSAnimationBlockingMode animationBlockingMode) {
  [(NSAnimation*)goobj setAnimationBlockingMode:animationBlockingMode];
}
void NSAnimation_setFrameRate(void* goobj, float framesPerSecond) {
  [(NSAnimation*)goobj setFrameRate:framesPerSecond];
}
float NSAnimation_frameRate(void* goobj) {
  return [(NSAnimation*)goobj frameRate];
}
void NSAnimation_setAnimationCurve(void* goobj, NSAnimationCurve curve) {
  [(NSAnimation*)goobj setAnimationCurve:curve];
}
NSAnimationCurve NSAnimation_animationCurve(void* goobj) {
  return [(NSAnimation*)goobj animationCurve];
}
float NSAnimation_currentValue(void* goobj) {
  return [(NSAnimation*)goobj currentValue];
}
void NSAnimation_setDelegate(void* goobj, void* delegate) {
  [(NSAnimation*)goobj setDelegate:delegate];
}
void* NSAnimation_delegate(void* goobj) {
  return [(NSAnimation*)goobj delegate];
}
void* NSAnimation_progressMarks(void* goobj) {
  return [(NSAnimation*)goobj progressMarks];
}
void NSAnimation_setProgressMarks(void* goobj, void* progressMarks) {
  [(NSAnimation*)goobj setProgressMarks:(NSArray*)progressMarks];
}
void NSAnimation_addProgressMark(void* goobj, NSAnimationProgress progressMark) {
  [(NSAnimation*)goobj addProgressMark:progressMark];
}
void NSAnimation_removeProgressMark(void* goobj, NSAnimationProgress progressMark) {
  [(NSAnimation*)goobj removeProgressMark:progressMark];
}
void NSAnimation_startWhenAnimationReachesProgress(void* goobj, void* animation, NSAnimationProgress startProgress) {
  [(NSAnimation*)goobj startWhenAnimation:(NSAnimation*)animation reachesProgress:startProgress];
}
void NSAnimation_stopWhenAnimationReachesProgress(void* goobj, void* animation, NSAnimationProgress stopProgress) {
  [(NSAnimation*)goobj stopWhenAnimation:(NSAnimation*)animation reachesProgress:stopProgress];
}
void NSAnimation_clearStartAnimation(void* goobj) {
  [(NSAnimation*)goobj clearStartAnimation];
}
void NSAnimation_clearStopAnimation(void* goobj) {
  [(NSAnimation*)goobj clearStopAnimation];
}
void* NSAnimation_runLoopModesForAnimating(void* goobj) {
  return [(NSAnimation*)goobj runLoopModesForAnimating];
}


////NSViewAnimation
void* NSViewAnimation_init() {
  return [[NSViewAnimation alloc] init];
}
void* NSViewAnimation_initWithViewAnimations(void* viewAnimations) {
  return [[NSViewAnimation alloc] initWithViewAnimations:(NSArray*)viewAnimations];
}
void* NSViewAnimation_viewAnimations(void* goobj) {
  return [(NSViewAnimation*)goobj viewAnimations];
}
void NSViewAnimation_setViewAnimations(void* goobj, void* viewAnimations) {
  [(NSViewAnimation*)goobj setViewAnimations:(NSArray*)viewAnimations];
}


////NSAppearance
void* NSAppearance_init() {
  return [[NSAppearance alloc] init];
}
void* NSAppearance_initWithAppearanceNamedBundle(void* name, void* bundle) {
  return [[NSAppearance alloc] initWithAppearanceNamed:(NSString*)name bundle:(NSBundle*)bundle];
}
void* NSAppearance__currentAppearance() {
  return [NSAppearance currentAppearance];
}
void NSAppearance__setCurrentAppearance(void* appearance) {
  [NSAppearance setCurrentAppearance:(NSAppearance*)appearance];
}
void* NSAppearance__appearanceNamed(void* name) {
  return [NSAppearance appearanceNamed:(NSString*)name];
}

////NSWindow
void* NSWindow_init() {
  return [[NSWindow alloc] init];
}
NSRect NSWindow_frameRectForContentRect(void* goobj, NSRect contentRect) {
  return [(NSWindow*)goobj frameRectForContentRect:contentRect];
}
NSRect NSWindow_contentRectForFrameRect(void* goobj, NSRect frameRect) {
  return [(NSWindow*)goobj contentRectForFrameRect:frameRect];
}
void* NSWindow_initWithContentRectStyleMaskBackingDefer(NSRect contentRect, uint aStyle, NSBackingStoreType bufferingType, bool flag) {
  return [[NSWindow alloc] initWithContentRect:contentRect styleMask:aStyle backing:bufferingType defer:flag];
}
void* NSWindow_initWithContentRectStyleMaskBackingDeferScreen(NSRect contentRect, uint aStyle, NSBackingStoreType bufferingType, bool flag, void* screen) {
  return [[NSWindow alloc] initWithContentRect:contentRect styleMask:aStyle backing:bufferingType defer:flag screen:(NSScreen*)screen];
}
void* NSWindow_title(void* goobj) {
  return [(NSWindow*)goobj title];
}
void NSWindow_setTitle(void* goobj, void* aString) {
  [(NSWindow*)goobj setTitle:(NSString*)aString];
}
void NSWindow_setRepresentedURL(void* goobj, void* url) {
  [(NSWindow*)goobj setRepresentedURL:(NSURL*)url];
}
void* NSWindow_representedURL(void* goobj) {
  return [(NSWindow*)goobj representedURL];
}
void* NSWindow_representedFilename(void* goobj) {
  return [(NSWindow*)goobj representedFilename];
}
void NSWindow_setRepresentedFilename(void* goobj, void* aString) {
  [(NSWindow*)goobj setRepresentedFilename:(NSString*)aString];
}
void NSWindow_setTitleWithRepresentedFilename(void* goobj, void* filename) {
  [(NSWindow*)goobj setTitleWithRepresentedFilename:(NSString*)filename];
}
void NSWindow_setExcludedFromWindowsMenu(void* goobj, bool flag) {
  [(NSWindow*)goobj setExcludedFromWindowsMenu:flag];
}
bool NSWindow_isExcludedFromWindowsMenu(void* goobj) {
  return [(NSWindow*)goobj isExcludedFromWindowsMenu];
}
void NSWindow_setContentView(void* goobj, void* aView) {
  [(NSWindow*)goobj setContentView:(NSView*)aView];
}
void* NSWindow_contentView(void* goobj) {
  return [(NSWindow*)goobj contentView];
}
void NSWindow_setDelegate(void* goobj, void* anObject) {
  [(NSWindow*)goobj setDelegate:anObject];
}
void* NSWindow_delegate(void* goobj) {
  return [(NSWindow*)goobj delegate];
}
//REJECT: NSInteger
//NSInteger NSWindow_windowNumber(void* goobj) {
//  return [(NSWindow*)goobj windowNumber];
//}
uint NSWindow_styleMask(void* goobj) {
  return [(NSWindow*)goobj styleMask];
}
void NSWindow_setStyleMask(void* goobj, uint styleMask) {
  [(NSWindow*)goobj setStyleMask:styleMask];
}
void* NSWindow_fieldEditorForObject(void* goobj, bool createFlag, void* anObject) {
  return [(NSWindow*)goobj fieldEditor:createFlag forObject:anObject];
}
void NSWindow_endEditingFor(void* goobj, void* anObject) {
  [(NSWindow*)goobj endEditingFor:anObject];
}
NSRect NSWindow_constrainFrameRectToScreen(void* goobj, NSRect frameRect, void* screen) {
  return [(NSWindow*)goobj constrainFrameRect:frameRect toScreen:(NSScreen*)screen];
}
void NSWindow_setFrameDisplay(void* goobj, NSRect frameRect, bool flag) {
  [(NSWindow*)goobj setFrame:frameRect display:flag];
}
//REJECT: aSize
//void NSWindow_setContentSize(void* goobj, NSSize aSize) {
//  [(NSWindow*)goobj setContentSize:aSize];
//}
void NSWindow_setFrameOrigin(void* goobj, NSPoint aPoint) {
  [(NSWindow*)goobj setFrameOrigin:aPoint];
}
void NSWindow_setFrameTopLeftPoint(void* goobj, NSPoint aPoint) {
  [(NSWindow*)goobj setFrameTopLeftPoint:aPoint];
}
NSPoint NSWindow_cascadeTopLeftFromPoint(void* goobj, NSPoint topLeftPoint) {
  return [(NSWindow*)goobj cascadeTopLeftFromPoint:topLeftPoint];
}
NSRect NSWindow_frame(void* goobj) {
  return [(NSWindow*)goobj frame];
}
//REJECT: NSTimeInterval
//NSTimeInterval NSWindow_animationResizeTime(void* goobj, NSRect newFrame) {
//  return [(NSWindow*)goobj animationResizeTime:newFrame];
//}
void NSWindow_setFrameDisplayAnimate(void* goobj, NSRect frameRect, bool displayFlag, bool animateFlag) {
  [(NSWindow*)goobj setFrame:frameRect display:displayFlag animate:animateFlag];
}
bool NSWindow_inLiveResize(void* goobj) {
  return [(NSWindow*)goobj inLiveResize];
}
void NSWindow_setShowsResizeIndicator(void* goobj, bool show) {
  [(NSWindow*)goobj setShowsResizeIndicator:show];
}
bool NSWindow_showsResizeIndicator(void* goobj) {
  return [(NSWindow*)goobj showsResizeIndicator];
}
//REJECT: increments
//void NSWindow_setResizeIncrements(void* goobj, NSSize increments) {
//  [(NSWindow*)goobj setResizeIncrements:increments];
//}
//REJECT: NSSize
//NSSize NSWindow_resizeIncrements(void* goobj) {
//  return [(NSWindow*)goobj resizeIncrements];
//}
//REJECT: ratio
//void NSWindow_setAspectRatio(void* goobj, NSSize ratio) {
//  [(NSWindow*)goobj setAspectRatio:ratio];
//}
//REJECT: NSSize
//NSSize NSWindow_aspectRatio(void* goobj) {
//  return [(NSWindow*)goobj aspectRatio];
//}
//REJECT: increments
//void NSWindow_setContentResizeIncrements(void* goobj, NSSize increments) {
//  [(NSWindow*)goobj setContentResizeIncrements:increments];
//}
//REJECT: NSSize
//NSSize NSWindow_contentResizeIncrements(void* goobj) {
//  return [(NSWindow*)goobj contentResizeIncrements];
//}
//REJECT: ratio
//void NSWindow_setContentAspectRatio(void* goobj, NSSize ratio) {
//  [(NSWindow*)goobj setContentAspectRatio:ratio];
//}
//REJECT: NSSize
//NSSize NSWindow_contentAspectRatio(void* goobj) {
//  return [(NSWindow*)goobj contentAspectRatio];
//}
void NSWindow_useOptimizedDrawing(void* goobj, bool flag) {
  [(NSWindow*)goobj useOptimizedDrawing:flag];
}
void NSWindow_disableFlushWindow(void* goobj) {
  [(NSWindow*)goobj disableFlushWindow];
}
void NSWindow_enableFlushWindow(void* goobj) {
  [(NSWindow*)goobj enableFlushWindow];
}
bool NSWindow_isFlushWindowDisabled(void* goobj) {
  return [(NSWindow*)goobj isFlushWindowDisabled];
}
void NSWindow_flushWindow(void* goobj) {
  [(NSWindow*)goobj flushWindow];
}
void NSWindow_flushWindowIfNeeded(void* goobj) {
  [(NSWindow*)goobj flushWindowIfNeeded];
}
void NSWindow_setViewsNeedDisplay(void* goobj, bool flag) {
  [(NSWindow*)goobj setViewsNeedDisplay:flag];
}
bool NSWindow_viewsNeedDisplay(void* goobj) {
  return [(NSWindow*)goobj viewsNeedDisplay];
}
void NSWindow_displayIfNeeded(void* goobj) {
  [(NSWindow*)goobj displayIfNeeded];
}
void NSWindow_display(void* goobj) {
  [(NSWindow*)goobj display];
}
void NSWindow_setAutodisplay(void* goobj, bool flag) {
  [(NSWindow*)goobj setAutodisplay:flag];
}
bool NSWindow_isAutodisplay(void* goobj) {
  return [(NSWindow*)goobj isAutodisplay];
}
bool NSWindow_preservesContentDuringLiveResize(void* goobj) {
  return [(NSWindow*)goobj preservesContentDuringLiveResize];
}
void NSWindow_setPreservesContentDuringLiveResize(void* goobj, bool flag) {
  [(NSWindow*)goobj setPreservesContentDuringLiveResize:flag];
}
void NSWindow_update(void* goobj) {
  [(NSWindow*)goobj update];
}
bool NSWindow_makeFirstResponder(void* goobj, void* aResponder) {
  return [(NSWindow*)goobj makeFirstResponder:(NSResponder*)aResponder];
}
void* NSWindow_firstResponder(void* goobj) {
  return [(NSWindow*)goobj firstResponder];
}
//REJECT: NSInteger
//NSInteger NSWindow_resizeFlags(void* goobj) {
//  return [(NSWindow*)goobj resizeFlags];
//}
void NSWindow_keyDown(void* goobj, void* theEvent) {
  [(NSWindow*)goobj keyDown:(NSEvent*)theEvent];
}
void NSWindow_close(void* goobj) {
  [(NSWindow*)goobj close];
}
void NSWindow_setReleasedWhenClosed(void* goobj, bool flag) {
  [(NSWindow*)goobj setReleasedWhenClosed:flag];
}
bool NSWindow_isReleasedWhenClosed(void* goobj) {
  return [(NSWindow*)goobj isReleasedWhenClosed];
}
void NSWindow_miniaturize(void* goobj, void* sender) {
  [(NSWindow*)goobj miniaturize:sender];
}
void NSWindow_deminiaturize(void* goobj, void* sender) {
  [(NSWindow*)goobj deminiaturize:sender];
}
bool NSWindow_isZoomed(void* goobj) {
  return [(NSWindow*)goobj isZoomed];
}
void NSWindow_zoom(void* goobj, void* sender) {
  [(NSWindow*)goobj zoom:sender];
}
bool NSWindow_isMiniaturized(void* goobj) {
  return [(NSWindow*)goobj isMiniaturized];
}
//REJECT: anAction
//bool NSWindow_tryToPerformWith(void* goobj, SEL anAction, void* anObject) {
//  return [(NSWindow*)goobj tryToPerform:anAction with:anObject];
//}
void* NSWindow_validRequestorForSendTypeReturnType(void* goobj, void* sendType, void* returnType) {
  return [(NSWindow*)goobj validRequestorForSendType:(NSString*)sendType returnType:(NSString*)returnType];
}
void NSWindow_setBackgroundColor(void* goobj, void* color) {
  [(NSWindow*)goobj setBackgroundColor:(NSColor*)color];
}
void* NSWindow_backgroundColor(void* goobj) {
  return [(NSWindow*)goobj backgroundColor];
}
//REJECT: thickness edge
//void NSWindow_setContentBorderThicknessForEdge(void* goobj, CGFloat thickness, NSRectEdge edge) {
//  [(NSWindow*)goobj setContentBorderThickness:thickness forEdge:edge];
//}
//REJECT: CGFloat edge
//CGFloat NSWindow_contentBorderThicknessForEdge(void* goobj, NSRectEdge edge) {
//  return [(NSWindow*)goobj contentBorderThicknessForEdge:edge];
//}
//REJECT: edge
//void NSWindow_setAutorecalculatesContentBorderThicknessForEdge(void* goobj, bool flag, NSRectEdge edge) {
//  [(NSWindow*)goobj setAutorecalculatesContentBorderThickness:flag forEdge:edge];
//}
//REJECT: edge
//bool NSWindow_autorecalculatesContentBorderThicknessForEdge(void* goobj, NSRectEdge edge) {
//  return [(NSWindow*)goobj autorecalculatesContentBorderThicknessForEdge:edge];
//}
void NSWindow_setMovable(void* goobj, bool flag) {
  [(NSWindow*)goobj setMovable:flag];
}
bool NSWindow_isMovable(void* goobj) {
  return [(NSWindow*)goobj isMovable];
}
void NSWindow_setMovableByWindowBackground(void* goobj, bool flag) {
  [(NSWindow*)goobj setMovableByWindowBackground:flag];
}
bool NSWindow_isMovableByWindowBackground(void* goobj) {
  return [(NSWindow*)goobj isMovableByWindowBackground];
}
void NSWindow_setHidesOnDeactivate(void* goobj, bool flag) {
  [(NSWindow*)goobj setHidesOnDeactivate:flag];
}
bool NSWindow_hidesOnDeactivate(void* goobj) {
  return [(NSWindow*)goobj hidesOnDeactivate];
}
void NSWindow_setCanHide(void* goobj, bool flag) {
  [(NSWindow*)goobj setCanHide:flag];
}
bool NSWindow_canHide(void* goobj) {
  return [(NSWindow*)goobj canHide];
}
void NSWindow_center(void* goobj) {
  [(NSWindow*)goobj center];
}
void NSWindow_makeKeyAndOrderFront(void* goobj, void* sender) {
  [(NSWindow*)goobj makeKeyAndOrderFront:sender];
}
void NSWindow_orderFront(void* goobj, void* sender) {
  [(NSWindow*)goobj orderFront:sender];
}
void NSWindow_orderBack(void* goobj, void* sender) {
  [(NSWindow*)goobj orderBack:sender];
}
void NSWindow_orderOut(void* goobj, void* sender) {
  [(NSWindow*)goobj orderOut:sender];
}
//REJECT: place otherWin
//void NSWindow_orderWindowRelativeTo(void* goobj, NSWindowOrderingMode place, NSInteger otherWin) {
//  [(NSWindow*)goobj orderWindow:place relativeTo:otherWin];
//}
void NSWindow_orderFrontRegardless(void* goobj) {
  [(NSWindow*)goobj orderFrontRegardless];
}
void NSWindow_setMiniwindowImage(void* goobj, void* image) {
  [(NSWindow*)goobj setMiniwindowImage:(NSImage*)image];
}
void NSWindow_setMiniwindowTitle(void* goobj, void* title) {
  [(NSWindow*)goobj setMiniwindowTitle:(NSString*)title];
}
void* NSWindow_miniwindowImage(void* goobj) {
  return [(NSWindow*)goobj miniwindowImage];
}
void* NSWindow_miniwindowTitle(void* goobj) {
  return [(NSWindow*)goobj miniwindowTitle];
}
void* NSWindow_dockTile(void* goobj) {
  return [(NSWindow*)goobj dockTile];
}
void NSWindow_setDocumentEdited(void* goobj, bool flag) {
  [(NSWindow*)goobj setDocumentEdited:flag];
}
bool NSWindow_isDocumentEdited(void* goobj) {
  return [(NSWindow*)goobj isDocumentEdited];
}
bool NSWindow_isVisible(void* goobj) {
  return [(NSWindow*)goobj isVisible];
}
bool NSWindow_isKeyWindow(void* goobj) {
  return [(NSWindow*)goobj isKeyWindow];
}
bool NSWindow_isMainWindow(void* goobj) {
  return [(NSWindow*)goobj isMainWindow];
}
bool NSWindow_canBecomeKeyWindow(void* goobj) {
  return [(NSWindow*)goobj canBecomeKeyWindow];
}
bool NSWindow_canBecomeMainWindow(void* goobj) {
  return [(NSWindow*)goobj canBecomeMainWindow];
}
void NSWindow_makeKeyWindow(void* goobj) {
  [(NSWindow*)goobj makeKeyWindow];
}
void NSWindow_makeMainWindow(void* goobj) {
  [(NSWindow*)goobj makeMainWindow];
}
void NSWindow_becomeKeyWindow(void* goobj) {
  [(NSWindow*)goobj becomeKeyWindow];
}
void NSWindow_resignKeyWindow(void* goobj) {
  [(NSWindow*)goobj resignKeyWindow];
}
void NSWindow_becomeMainWindow(void* goobj) {
  [(NSWindow*)goobj becomeMainWindow];
}
void NSWindow_resignMainWindow(void* goobj) {
  [(NSWindow*)goobj resignMainWindow];
}
bool NSWindow_worksWhenModal(void* goobj) {
  return [(NSWindow*)goobj worksWhenModal];
}
bool NSWindow_preventsApplicationTerminationWhenModal(void* goobj) {
  return [(NSWindow*)goobj preventsApplicationTerminationWhenModal];
}
void NSWindow_setPreventsApplicationTerminationWhenModal(void* goobj, bool flag) {
  [(NSWindow*)goobj setPreventsApplicationTerminationWhenModal:flag];
}
NSRect NSWindow_convertRectToScreen(void* goobj, NSRect aRect) {
  return [(NSWindow*)goobj convertRectToScreen:aRect];
}
NSRect NSWindow_convertRectFromScreen(void* goobj, NSRect aRect) {
  return [(NSWindow*)goobj convertRectFromScreen:aRect];
}
NSRect NSWindow_convertRectToBacking(void* goobj, NSRect aRect) {
  return [(NSWindow*)goobj convertRectToBacking:aRect];
}
NSRect NSWindow_convertRectFromBacking(void* goobj, NSRect aRect) {
  return [(NSWindow*)goobj convertRectFromBacking:aRect];
}
NSRect NSWindow_backingAlignedRectOptions(void* goobj, NSRect aRect, NSAlignmentOptions options) {
  return [(NSWindow*)goobj backingAlignedRect:aRect options:options];
}
//REJECT: CGFloat
//CGFloat NSWindow_backingScaleFactor(void* goobj) {
//  return [(NSWindow*)goobj backingScaleFactor];
//}
NSPoint NSWindow_convertBaseToScreen(void* goobj, NSPoint aPoint) {
  return [(NSWindow*)goobj convertBaseToScreen:aPoint];
}
NSPoint NSWindow_convertScreenToBase(void* goobj, NSPoint aPoint) {
  return [(NSWindow*)goobj convertScreenToBase:aPoint];
}
void NSWindow_performClose(void* goobj, void* sender) {
  [(NSWindow*)goobj performClose:sender];
}
void NSWindow_performMiniaturize(void* goobj, void* sender) {
  [(NSWindow*)goobj performMiniaturize:sender];
}
void NSWindow_performZoom(void* goobj, void* sender) {
  [(NSWindow*)goobj performZoom:sender];
}
//REJECT: NSInteger
//NSInteger NSWindow_gState(void* goobj) {
//  return [(NSWindow*)goobj gState];
//}
void NSWindow_setOneShot(void* goobj, bool flag) {
  [(NSWindow*)goobj setOneShot:flag];
}
bool NSWindow_isOneShot(void* goobj) {
  return [(NSWindow*)goobj isOneShot];
}
void* NSWindow_dataWithEPSInsideRect(void* goobj, NSRect rect) {
  return [(NSWindow*)goobj dataWithEPSInsideRect:rect];
}
void* NSWindow_dataWithPDFInsideRect(void* goobj, NSRect rect) {
  return [(NSWindow*)goobj dataWithPDFInsideRect:rect];
}
void NSWindow_print(void* goobj, void* sender) {
  [(NSWindow*)goobj print:sender];
}
void NSWindow_disableCursorRects(void* goobj) {
  [(NSWindow*)goobj disableCursorRects];
}
void NSWindow_enableCursorRects(void* goobj) {
  [(NSWindow*)goobj enableCursorRects];
}
void NSWindow_discardCursorRects(void* goobj) {
  [(NSWindow*)goobj discardCursorRects];
}
bool NSWindow_areCursorRectsEnabled(void* goobj) {
  return [(NSWindow*)goobj areCursorRectsEnabled];
}
void NSWindow_invalidateCursorRectsForView(void* goobj, void* aView) {
  [(NSWindow*)goobj invalidateCursorRectsForView:(NSView*)aView];
}
void NSWindow_resetCursorRects(void* goobj) {
  [(NSWindow*)goobj resetCursorRects];
}
void NSWindow_setAllowsToolTipsWhenApplicationIsInactive(void* goobj, bool allowWhenInactive) {
  [(NSWindow*)goobj setAllowsToolTipsWhenApplicationIsInactive:allowWhenInactive];
}
bool NSWindow_allowsToolTipsWhenApplicationIsInactive(void* goobj) {
  return [(NSWindow*)goobj allowsToolTipsWhenApplicationIsInactive];
}
void NSWindow_setBackingType(void* goobj, NSBackingStoreType bufferingType) {
  [(NSWindow*)goobj setBackingType:bufferingType];
}
NSBackingStoreType NSWindow_backingType(void* goobj) {
  return [(NSWindow*)goobj backingType];
}
//REJECT: newLevel
//void NSWindow_setLevel(void* goobj, NSInteger newLevel) {
//  [(NSWindow*)goobj setLevel:newLevel];
//}
//REJECT: NSInteger
//NSInteger NSWindow_level(void* goobj) {
//  return [(NSWindow*)goobj level];
//}
void NSWindow_setDepthLimit(void* goobj, NSWindowDepth limit) {
  [(NSWindow*)goobj setDepthLimit:limit];
}
NSWindowDepth NSWindow_depthLimit(void* goobj) {
  return [(NSWindow*)goobj depthLimit];
}
void NSWindow_setDynamicDepthLimit(void* goobj, bool flag) {
  [(NSWindow*)goobj setDynamicDepthLimit:flag];
}
bool NSWindow_hasDynamicDepthLimit(void* goobj) {
  return [(NSWindow*)goobj hasDynamicDepthLimit];
}
void* NSWindow_screen(void* goobj) {
  return [(NSWindow*)goobj screen];
}
void* NSWindow_deepestScreen(void* goobj) {
  return [(NSWindow*)goobj deepestScreen];
}
bool NSWindow_canStoreColor(void* goobj) {
  return [(NSWindow*)goobj canStoreColor];
}
void NSWindow_setHasShadow(void* goobj, bool hasShadow) {
  [(NSWindow*)goobj setHasShadow:hasShadow];
}
bool NSWindow_hasShadow(void* goobj) {
  return [(NSWindow*)goobj hasShadow];
}
void NSWindow_invalidateShadow(void* goobj) {
  [(NSWindow*)goobj invalidateShadow];
}
//REJECT: windowAlpha
//void NSWindow_setAlphaValue(void* goobj, CGFloat windowAlpha) {
//  [(NSWindow*)goobj setAlphaValue:windowAlpha];
//}
//REJECT: CGFloat
//CGFloat NSWindow_alphaValue(void* goobj) {
//  return [(NSWindow*)goobj alphaValue];
//}
void NSWindow_setOpaque(void* goobj, bool isOpaque) {
  [(NSWindow*)goobj setOpaque:isOpaque];
}
bool NSWindow_isOpaque(void* goobj) {
  return [(NSWindow*)goobj isOpaque];
}
//REJECT: type
//void NSWindow_setSharingType(void* goobj, NSWindowSharingType type) {
//  [(NSWindow*)goobj setSharingType:type];
//}
//REJECT: NSWindowSharingType
//NSWindowSharingType NSWindow_sharingType(void* goobj) {
//  return [(NSWindow*)goobj sharingType];
//}
//REJECT: backingLocation
//void NSWindow_setPreferredBackingLocation(void* goobj, NSWindowBackingLocation backingLocation) {
//  [(NSWindow*)goobj setPreferredBackingLocation:backingLocation];
//}
//REJECT: NSWindowBackingLocation
//NSWindowBackingLocation NSWindow_preferredBackingLocation(void* goobj) {
//  return [(NSWindow*)goobj preferredBackingLocation];
//}
//REJECT: NSWindowBackingLocation
//NSWindowBackingLocation NSWindow_backingLocation(void* goobj) {
//  return [(NSWindow*)goobj backingLocation];
//}
bool NSWindow_allowsConcurrentViewDrawing(void* goobj) {
  return [(NSWindow*)goobj allowsConcurrentViewDrawing];
}
void NSWindow_setAllowsConcurrentViewDrawing(void* goobj, bool flag) {
  [(NSWindow*)goobj setAllowsConcurrentViewDrawing:flag];
}
bool NSWindow_displaysWhenScreenProfileChanges(void* goobj) {
  return [(NSWindow*)goobj displaysWhenScreenProfileChanges];
}
void NSWindow_setDisplaysWhenScreenProfileChanges(void* goobj, bool flag) {
  [(NSWindow*)goobj setDisplaysWhenScreenProfileChanges:flag];
}
void NSWindow_disableScreenUpdatesUntilFlush(void* goobj) {
  [(NSWindow*)goobj disableScreenUpdatesUntilFlush];
}
bool NSWindow_canBecomeVisibleWithoutLogin(void* goobj) {
  return [(NSWindow*)goobj canBecomeVisibleWithoutLogin];
}
void NSWindow_setCanBecomeVisibleWithoutLogin(void* goobj, bool flag) {
  [(NSWindow*)goobj setCanBecomeVisibleWithoutLogin:flag];
}
//REJECT: behavior
//void NSWindow_setCollectionBehavior(void* goobj, NSWindowCollectionBehavior behavior) {
//  [(NSWindow*)goobj setCollectionBehavior:behavior];
//}
//REJECT: NSWindowCollectionBehavior
//NSWindowCollectionBehavior NSWindow_collectionBehavior(void* goobj) {
//  return [(NSWindow*)goobj collectionBehavior];
//}
//REJECT: NSWindowAnimationBehavior
//NSWindowAnimationBehavior NSWindow_animationBehavior(void* goobj) {
//  return [(NSWindow*)goobj animationBehavior];
//}
//REJECT: newAnimationBehavior
//void NSWindow_setAnimationBehavior(void* goobj, NSWindowAnimationBehavior newAnimationBehavior) {
//  [(NSWindow*)goobj setAnimationBehavior:newAnimationBehavior];
//}
bool NSWindow_canBeVisibleOnAllSpaces(void* goobj) {
  return [(NSWindow*)goobj canBeVisibleOnAllSpaces];
}
void NSWindow_setCanBeVisibleOnAllSpaces(void* goobj, bool flag) {
  [(NSWindow*)goobj setCanBeVisibleOnAllSpaces:flag];
}
bool NSWindow_isOnActiveSpace(void* goobj) {
  return [(NSWindow*)goobj isOnActiveSpace];
}
void NSWindow_toggleFullScreen(void* goobj, void* sender) {
  [(NSWindow*)goobj toggleFullScreen:sender];
}
void* NSWindow_stringWithSavedFrame(void* goobj) {
  return [(NSWindow*)goobj stringWithSavedFrame];
}
void NSWindow_setFrameFromString(void* goobj, void* string) {
  [(NSWindow*)goobj setFrameFromString:(NSString*)string];
}
void NSWindow_saveFrameUsingName(void* goobj, void* name) {
  [(NSWindow*)goobj saveFrameUsingName:(NSString*)name];
}
bool NSWindow_setFrameUsingNameForce(void* goobj, void* name, bool force) {
  return [(NSWindow*)goobj setFrameUsingName:(NSString*)name force:force];
}
bool NSWindow_setFrameUsingName(void* goobj, void* name) {
  return [(NSWindow*)goobj setFrameUsingName:(NSString*)name];
}
bool NSWindow_setFrameAutosaveName(void* goobj, void* name) {
  return [(NSWindow*)goobj setFrameAutosaveName:(NSString*)name];
}
void* NSWindow_frameAutosaveName(void* goobj) {
  return [(NSWindow*)goobj frameAutosaveName];
}
void NSWindow_cacheImageInRect(void* goobj, NSRect aRect) {
  [(NSWindow*)goobj cacheImageInRect:aRect];
}
void NSWindow_restoreCachedImage(void* goobj) {
  [(NSWindow*)goobj restoreCachedImage];
}
void NSWindow_discardCachedImage(void* goobj) {
  [(NSWindow*)goobj discardCachedImage];
}
//REJECT: NSSize
//NSSize NSWindow_minSize(void* goobj) {
//  return [(NSWindow*)goobj minSize];
//}
//REJECT: NSSize
//NSSize NSWindow_maxSize(void* goobj) {
//  return [(NSWindow*)goobj maxSize];
//}
//REJECT: size
//void NSWindow_setMinSize(void* goobj, NSSize size) {
//  [(NSWindow*)goobj setMinSize:size];
//}
//REJECT: size
//void NSWindow_setMaxSize(void* goobj, NSSize size) {
//  [(NSWindow*)goobj setMaxSize:size];
//}
//REJECT: NSSize
//NSSize NSWindow_contentMinSize(void* goobj) {
//  return [(NSWindow*)goobj contentMinSize];
//}
//REJECT: NSSize
//NSSize NSWindow_contentMaxSize(void* goobj) {
//  return [(NSWindow*)goobj contentMaxSize];
//}
//REJECT: size
//void NSWindow_setContentMinSize(void* goobj, NSSize size) {
//  [(NSWindow*)goobj setContentMinSize:size];
//}
//REJECT: size
//void NSWindow_setContentMaxSize(void* goobj, NSSize size) {
//  [(NSWindow*)goobj setContentMaxSize:size];
//}
void* NSWindow_nextEventMatchingMask(void* goobj, uint mask) {
  return [(NSWindow*)goobj nextEventMatchingMask:mask];
}
void* NSWindow_nextEventMatchingMaskUntilDateInModeDequeue(void* goobj, uint mask, void* expiration, void* mode, bool deqFlag) {
  return [(NSWindow*)goobj nextEventMatchingMask:mask untilDate:(NSDate*)expiration inMode:(NSString*)mode dequeue:deqFlag];
}
void NSWindow_discardEventsMatchingMaskBeforeEvent(void* goobj, uint mask, void* lastEvent) {
  [(NSWindow*)goobj discardEventsMatchingMask:mask beforeEvent:(NSEvent*)lastEvent];
}
void NSWindow_postEventAtStart(void* goobj, void* event, bool flag) {
  [(NSWindow*)goobj postEvent:(NSEvent*)event atStart:flag];
}
void* NSWindow_currentEvent(void* goobj) {
  return [(NSWindow*)goobj currentEvent];
}
void NSWindow_setAcceptsMouseMovedEvents(void* goobj, bool flag) {
  [(NSWindow*)goobj setAcceptsMouseMovedEvents:flag];
}
bool NSWindow_acceptsMouseMovedEvents(void* goobj) {
  return [(NSWindow*)goobj acceptsMouseMovedEvents];
}
void NSWindow_setIgnoresMouseEvents(void* goobj, bool flag) {
  [(NSWindow*)goobj setIgnoresMouseEvents:flag];
}
bool NSWindow_ignoresMouseEvents(void* goobj) {
  return [(NSWindow*)goobj ignoresMouseEvents];
}
void* NSWindow_deviceDescription(void* goobj) {
  return [(NSWindow*)goobj deviceDescription];
}
void NSWindow_sendEvent(void* goobj, void* theEvent) {
  [(NSWindow*)goobj sendEvent:(NSEvent*)theEvent];
}
NSPoint NSWindow_mouseLocationOutsideOfEventStream(void* goobj) {
  return [(NSWindow*)goobj mouseLocationOutsideOfEventStream];
}
void* NSWindow_windowController(void* goobj) {
  return [(NSWindow*)goobj windowController];
}
void NSWindow_setWindowController(void* goobj, void* windowController) {
  [(NSWindow*)goobj setWindowController:(NSWindowController*)windowController];
}
//REJECT: handler
//void NSWindow_beginSheetCompletionHandler(void* goobj, void* sheetWindow, *INVALID TYPE* handler) {
//  [(NSWindow*)goobj beginSheet:(NSWindow*)sheetWindow completionHandler:handler];
//}
//REJECT: handler
//void NSWindow_beginCriticalSheetCompletionHandler(void* goobj, void* sheetWindow, *INVALID TYPE* handler) {
//  [(NSWindow*)goobj beginCriticalSheet:(NSWindow*)sheetWindow completionHandler:handler];
//}
void NSWindow_endSheet(void* goobj, void* sheetWindow) {
  [(NSWindow*)goobj endSheet:(NSWindow*)sheetWindow];
}
//REJECT: returnCode
//void NSWindow_endSheetReturnCode(void* goobj, void* sheetWindow, NSModalResponse returnCode) {
//  [(NSWindow*)goobj endSheet:(NSWindow*)sheetWindow returnCode:returnCode];
//}
void* NSWindow_sheets(void* goobj) {
  return [(NSWindow*)goobj sheets];
}
void* NSWindow_attachedSheet(void* goobj) {
  return [(NSWindow*)goobj attachedSheet];
}
bool NSWindow_isSheet(void* goobj) {
  return [(NSWindow*)goobj isSheet];
}
void* NSWindow_sheetParent(void* goobj) {
  return [(NSWindow*)goobj sheetParent];
}
//REJECT: b
//void* NSWindow_standardWindowButton(void* goobj, NSWindowButton b) {
//  return [(NSWindow*)goobj standardWindowButton:b];
//}
//REJECT: place
//void NSWindow_addChildWindowOrdered(void* goobj, void* childWin, NSWindowOrderingMode place) {
//  [(NSWindow*)goobj addChildWindow:(NSWindow*)childWin ordered:place];
//}
void NSWindow_removeChildWindow(void* goobj, void* childWin) {
  [(NSWindow*)goobj removeChildWindow:(NSWindow*)childWin];
}
void* NSWindow_childWindows(void* goobj) {
  return [(NSWindow*)goobj childWindows];
}
void* NSWindow_parentWindow(void* goobj) {
  return [(NSWindow*)goobj parentWindow];
}
void NSWindow_setParentWindow(void* goobj, void* window) {
  [(NSWindow*)goobj setParentWindow:(NSWindow*)window];
}
void* NSWindow_graphicsContext(void* goobj) {
  return [(NSWindow*)goobj graphicsContext];
}
//REJECT: CGFloat
//CGFloat NSWindow_userSpaceScaleFactor(void* goobj) {
//  return [(NSWindow*)goobj userSpaceScaleFactor];
//}
void NSWindow_setColorSpace(void* goobj, void* colorSpace) {
  [(NSWindow*)goobj setColorSpace:(NSColorSpace*)colorSpace];
}
void* NSWindow_colorSpace(void* goobj) {
  return [(NSWindow*)goobj colorSpace];
}
NSWindowOcclusionState NSWindow_occlusionState(void* goobj) {
  return [(NSWindow*)goobj occlusionState];
}
void NSWindow_setInitialFirstResponder(void* goobj, void* view) {
  [(NSWindow*)goobj setInitialFirstResponder:(NSView*)view];
}
void* NSWindow_initialFirstResponder(void* goobj) {
  return [(NSWindow*)goobj initialFirstResponder];
}
void NSWindow_selectNextKeyView(void* goobj, void* sender) {
  [(NSWindow*)goobj selectNextKeyView:sender];
}
void NSWindow_selectPreviousKeyView(void* goobj, void* sender) {
  [(NSWindow*)goobj selectPreviousKeyView:sender];
}
void NSWindow_selectKeyViewFollowingView(void* goobj, void* aView) {
  [(NSWindow*)goobj selectKeyViewFollowingView:(NSView*)aView];
}
void NSWindow_selectKeyViewPrecedingView(void* goobj, void* aView) {
  [(NSWindow*)goobj selectKeyViewPrecedingView:(NSView*)aView];
}
//REJECT: NSSelectionDirection
//NSSelectionDirection NSWindow_keyViewSelectionDirection(void* goobj) {
//  return [(NSWindow*)goobj keyViewSelectionDirection];
//}
void NSWindow_setDefaultButtonCell(void* goobj, void* defButt) {
  [(NSWindow*)goobj setDefaultButtonCell:(NSButtonCell*)defButt];
}
void* NSWindow_defaultButtonCell(void* goobj) {
  return [(NSWindow*)goobj defaultButtonCell];
}
void NSWindow_disableKeyEquivalentForDefaultButtonCell(void* goobj) {
  [(NSWindow*)goobj disableKeyEquivalentForDefaultButtonCell];
}
void NSWindow_enableKeyEquivalentForDefaultButtonCell(void* goobj) {
  [(NSWindow*)goobj enableKeyEquivalentForDefaultButtonCell];
}
void NSWindow_setAutorecalculatesKeyViewLoop(void* goobj, bool flag) {
  [(NSWindow*)goobj setAutorecalculatesKeyViewLoop:flag];
}
bool NSWindow_autorecalculatesKeyViewLoop(void* goobj) {
  return [(NSWindow*)goobj autorecalculatesKeyViewLoop];
}
void NSWindow_recalculateKeyViewLoop(void* goobj) {
  [(NSWindow*)goobj recalculateKeyViewLoop];
}
void NSWindow_setToolbar(void* goobj, void* toolbar) {
  [(NSWindow*)goobj setToolbar:(NSToolbar*)toolbar];
}
void* NSWindow_toolbar(void* goobj) {
  return [(NSWindow*)goobj toolbar];
}
void NSWindow_toggleToolbarShown(void* goobj, void* sender) {
  [(NSWindow*)goobj toggleToolbarShown:sender];
}
void NSWindow_runToolbarCustomizationPalette(void* goobj, void* sender) {
  [(NSWindow*)goobj runToolbarCustomizationPalette:sender];
}
void NSWindow_setShowsToolbarButton(void* goobj, bool show) {
  [(NSWindow*)goobj setShowsToolbarButton:show];
}
bool NSWindow_showsToolbarButton(void* goobj) {
  return [(NSWindow*)goobj showsToolbarButton];
}
//REJECT: initialOffset
//void NSWindow_dragImageAtOffsetEventPasteboardSourceSlideBack(void* goobj, void* anImage, NSPoint baseLocation, NSSize initialOffset, void* event, void* pboard, void* sourceObj, bool slideFlag) {
//  [(NSWindow*)goobj dragImage:(NSImage*)anImage at:baseLocation offset:initialOffset event:(NSEvent*)event pasteboard:(NSPasteboard*)pboard source:sourceObj slideBack:slideFlag];
//}
void NSWindow_registerForDraggedTypes(void* goobj, void* newTypes) {
  [(NSWindow*)goobj registerForDraggedTypes:(NSArray*)newTypes];
}
void NSWindow_unregisterDraggedTypes(void* goobj) {
  [(NSWindow*)goobj unregisterDraggedTypes];
}
void* NSWindow_initWithWindowRef(void* windowRef) {
  return [[NSWindow alloc] initWithWindowRef:windowRef];
}
void* NSWindow_windowRef(void* goobj) {
  return [(NSWindow*)goobj windowRef];
}
NSRect NSWindow__frameRectForContentRectStyleMask(NSRect cRect, uint aStyle) {
  return [NSWindow frameRectForContentRect:cRect styleMask:aStyle];
}
NSRect NSWindow__contentRectForFrameRectStyleMask(NSRect fRect, uint aStyle) {
  return [NSWindow contentRectForFrameRect:fRect styleMask:aStyle];
}
//REJECT: CGFloat
//CGFloat NSWindow__minFrameWidthWithTitleStyleMask(void* aTitle, uint aStyle) {
//  return [NSWindow minFrameWidthWithTitle:(NSString*)aTitle styleMask:aStyle];
//}
NSWindowDepth NSWindow__defaultDepthLimit() {
  return [NSWindow defaultDepthLimit];
}
void NSWindow__removeFrameUsingName(void* name) {
  [NSWindow removeFrameUsingName:(NSString*)name];
}
void NSWindow__menuChanged(void* menu) {
  [NSWindow menuChanged:(NSMenu*)menu];
}
//REJECT: b
//void* NSWindow__standardWindowButtonForStyleMask(NSWindowButton b, uint styleMask) {
//  return [NSWindow standardWindowButton:b forStyleMask:styleMask];
//}
//REJECT: options
//void* NSWindow__windowNumbersWithOptions(NSWindowNumberListOptions options) {
//  return [NSWindow windowNumbersWithOptions:options];
//}
//REJECT: NSInteger windowNumber
//NSInteger NSWindow__windowNumberAtPointBelowWindowWithWindowNumber(NSPoint point, NSInteger windowNumber) {
//  return [NSWindow windowNumberAtPoint:point belowWindowWithWindowNumber:windowNumber];
//}




*/
import "C"
import "unsafe"

 
type Id unsafe.Pointer

func Id_(r unsafe.Pointer) Id {
    return Id(r)
}

///// struct for Go
type NSRect struct {
    X float64
    Y float64
    Width float64
    Height float64
}

func NSRect_(r C.NSRect) NSRect {
    return NSRect{float64(r.origin.x), float64(r.origin.y), float64(r.size.width), float64(r.size.height)}
}

type NSPoint struct {
    X float64
    Y float64
}

func NSPoint_(r C.NSPoint) NSPoint {
    return NSPoint{float64(r.x), float64(r.y)}
}


///// additional for Go
func (obj NSObject) Self() unsafe.Pointer {
    return unsafe.Pointer(obj.self)
}
func (obj NSObject) String() string {
    return C.GoString(C.NSObject_descripton(obj.Self()))
}
func (obj NSObject) GetClassName() string {
    p := C.CCG_object_getClassName(obj.Self())
    return C.GoString(p)
}
///// END

type NSObject struct {
  self Id
}
func NSObject_(i Id) NSObject {
  return NSObject{ i }
}
func NSObject_init() NSObject {
  p := Id(C.NSObject_init())
  return NSObject_(p)
}
func (goobj NSObject) Dealloc()  {
  C.NSObject_dealloc(goobj.Self())
}
func (goobj NSObject) Finalize()  {
  C.NSObject_finalize(goobj.Self())
}
func (goobj NSObject) Copy() Id {
  return Id_(C.NSObject_copy(goobj.Self()))
}
func (goobj NSObject) MutableCopy() Id {
  return Id_(C.NSObject_mutableCopy(goobj.Self()))
}
//REJECT: IMP aSelector
//func (goobj NSObject) MethodForSelector(aSelector C.SEL) C.IMP {
//  return (C.NSObject_methodForSelector(goobj.Self(), aSelector))
//}
//REJECT: aSelector
//func (goobj NSObject) DoesNotRecognizeSelector(aSelector C.SEL)  {
//  C.NSObject_doesNotRecognizeSelector(goobj.Self(), aSelector)
//}
//REJECT: aSelector
//func (goobj NSObject) ForwardingTargetForSelector(aSelector C.SEL) Id {
//  return Id_(C.NSObject_forwardingTargetForSelector(goobj.Self(), aSelector))
//}
//REJECT: anInvocation
//func (goobj NSObject) ForwardInvocation(anInvocation NSInvocation)  {
//  C.NSObject_forwardInvocation(goobj.Self(), anInvocation.Self())
//}
//REJECT: NSMethodSignature aSelector
//func (goobj NSObject) MethodSignatureForSelector(aSelector C.SEL) NSMethodSignature {
//  return NSMethodSignature_(Id(C.NSObject_methodSignatureForSelector(goobj.Self(), aSelector)))
//}
//unacceptalble-method
//func (goobj NSObject) AllowsWeakReference() C.bool {
//  return (C.NSObject_allowsWeakReference(goobj.Self()))
//}
//unacceptalble-method
//func (goobj NSObject) RetainWeakReference() C.bool {
//  return (C.NSObject_retainWeakReference(goobj.Self()))
//}
//REJECT: Class
//func (goobj NSObject) ClassForCoder() C.Class {
//  return (C.NSObject_classForCoder(goobj.Self()))
//}
func (goobj NSObject) ReplacementObjectForCoder(aCoder NSCoder) Id {
  return Id_(C.NSObject_replacementObjectForCoder(goobj.Self(), aCoder.Self()))
}
func (goobj NSObject) AwakeAfterUsingCoder(aDecoder NSCoder) Id {
  return Id_(C.NSObject_awakeAfterUsingCoder(goobj.Self(), aDecoder.Self()))
}
func (goobj NSObject) AutoContentAccessingProxy() Id {
  return Id_(C.NSObject_autoContentAccessingProxy(goobj.Self()))
}
//REJECT: didRecoverSelector
//func (goobj NSObject) AttemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(error NSError, recoveryOptionIndex C.uint, delegate Id, didRecoverSelector C.SEL, contextInfo unsafe.Pointer)  {
//  C.NSObject_attemptRecoveryFromErrorOptionIndexDelegateDidRecoverSelectorContextInfo(goobj.Self(), error.Self(), recoveryOptionIndex, unsafe.Pointer(delegate), didRecoverSelector, contextInfo)
//}
func (goobj NSObject) AttemptRecoveryFromErrorOptionIndex(error NSError, recoveryOptionIndex C.uint) C.bool {
  return (C.NSObject_attemptRecoveryFromErrorOptionIndex(goobj.Self(), error.Self(), recoveryOptionIndex))
}
func (goobj NSObject) FileManagerShouldProceedAfterError(fm NSFileManager, errorInfo NSDictionary) C.bool {
  return (C.NSObject_fileManagerShouldProceedAfterError(goobj.Self(), fm.Self(), errorInfo.Self()))
}
func (goobj NSObject) FileManagerWillProcessPath(fm NSFileManager, path NSString)  {
  C.NSObject_fileManagerWillProcessPath(goobj.Self(), fm.Self(), path.Self())
}
func (goobj NSObject) ValueForKey(key NSString) Id {
  return Id_(C.NSObject_valueForKey(goobj.Self(), key.Self()))
}
func (goobj NSObject) SetValueForKey(value Id, key NSString)  {
  C.NSObject_setValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSObject) ValidateValueForKeyError(ioValue Id, inKey NSString, outError NSError) C.bool {
  return (C.NSObject_validateValueForKeyError(goobj.Self(), unsafe.Pointer(ioValue), inKey.Self(), outError.Self()))
}
func (goobj NSObject) MutableArrayValueForKey(key NSString) NSMutableArray {
  return NSMutableArray_(Id(C.NSObject_mutableArrayValueForKey(goobj.Self(), key.Self())))
}
func (goobj NSObject) MutableOrderedSetValueForKey(key NSString) NSMutableOrderedSet {
  return NSMutableOrderedSet_(Id(C.NSObject_mutableOrderedSetValueForKey(goobj.Self(), key.Self())))
}
func (goobj NSObject) MutableSetValueForKey(key NSString) NSMutableSet {
  return NSMutableSet_(Id(C.NSObject_mutableSetValueForKey(goobj.Self(), key.Self())))
}
func (goobj NSObject) ValueForKeyPath(keyPath NSString) Id {
  return Id_(C.NSObject_valueForKeyPath(goobj.Self(), keyPath.Self()))
}
func (goobj NSObject) SetValueForKeyPath(value Id, keyPath NSString)  {
  C.NSObject_setValueForKeyPath(goobj.Self(), unsafe.Pointer(value), keyPath.Self())
}
func (goobj NSObject) ValidateValueForKeyPathError(ioValue Id, inKeyPath NSString, outError NSError) C.bool {
  return (C.NSObject_validateValueForKeyPathError(goobj.Self(), unsafe.Pointer(ioValue), inKeyPath.Self(), outError.Self()))
}
func (goobj NSObject) MutableArrayValueForKeyPath(keyPath NSString) NSMutableArray {
  return NSMutableArray_(Id(C.NSObject_mutableArrayValueForKeyPath(goobj.Self(), keyPath.Self())))
}
func (goobj NSObject) MutableOrderedSetValueForKeyPath(keyPath NSString) NSMutableOrderedSet {
  return NSMutableOrderedSet_(Id(C.NSObject_mutableOrderedSetValueForKeyPath(goobj.Self(), keyPath.Self())))
}
func (goobj NSObject) MutableSetValueForKeyPath(keyPath NSString) NSMutableSet {
  return NSMutableSet_(Id(C.NSObject_mutableSetValueForKeyPath(goobj.Self(), keyPath.Self())))
}
func (goobj NSObject) ValueForUndefinedKey(key NSString) Id {
  return Id_(C.NSObject_valueForUndefinedKey(goobj.Self(), key.Self()))
}
func (goobj NSObject) SetValueForUndefinedKey(value Id, key NSString)  {
  C.NSObject_setValueForUndefinedKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSObject) SetNilValueForKey(key NSString)  {
  C.NSObject_setNilValueForKey(goobj.Self(), key.Self())
}
func (goobj NSObject) DictionaryWithValuesForKeys(keys NSArray) NSDictionary {
  return NSDictionary_(Id(C.NSObject_dictionaryWithValuesForKeys(goobj.Self(), keys.Self())))
}
func (goobj NSObject) SetValuesForKeysWithDictionary(keyedValues NSDictionary)  {
  C.NSObject_setValuesForKeysWithDictionary(goobj.Self(), keyedValues.Self())
}
func (goobj NSObject) ObserveValueForKeyPathOfObjectChangeContext(keyPath NSString, object Id, change NSDictionary, context unsafe.Pointer)  {
  C.NSObject_observeValueForKeyPathOfObjectChangeContext(goobj.Self(), keyPath.Self(), unsafe.Pointer(object), change.Self(), context)
}
func (goobj NSObject) AddObserverForKeyPathOptionsContext(observer NSObject, keyPath NSString, options C.NSKeyValueObservingOptions, context unsafe.Pointer)  {
  C.NSObject_addObserverForKeyPathOptionsContext(goobj.Self(), observer.Self(), keyPath.Self(), options, context)
}
func (goobj NSObject) RemoveObserverForKeyPathContext(observer NSObject, keyPath NSString, context unsafe.Pointer)  {
  C.NSObject_removeObserverForKeyPathContext(goobj.Self(), observer.Self(), keyPath.Self(), context)
}
func (goobj NSObject) RemoveObserverForKeyPath(observer NSObject, keyPath NSString)  {
  C.NSObject_removeObserverForKeyPath(goobj.Self(), observer.Self(), keyPath.Self())
}
func (goobj NSObject) WillChangeValueForKey(key NSString)  {
  C.NSObject_willChangeValueForKey(goobj.Self(), key.Self())
}
func (goobj NSObject) DidChangeValueForKey(key NSString)  {
  C.NSObject_didChangeValueForKey(goobj.Self(), key.Self())
}
func (goobj NSObject) WillChangeValuesAtIndexesForKey(changeKind C.NSKeyValueChange, indexes NSIndexSet, key NSString)  {
  C.NSObject_willChangeValuesAtIndexesForKey(goobj.Self(), changeKind, indexes.Self(), key.Self())
}
func (goobj NSObject) DidChangeValuesAtIndexesForKey(changeKind C.NSKeyValueChange, indexes NSIndexSet, key NSString)  {
  C.NSObject_didChangeValuesAtIndexesForKey(goobj.Self(), changeKind, indexes.Self(), key.Self())
}
func (goobj NSObject) WillChangeValueForKeyWithSetMutationUsingObjects(key NSString, mutationKind C.NSKeyValueSetMutationKind, objects NSSet)  {
  C.NSObject_willChangeValueForKeyWithSetMutationUsingObjects(goobj.Self(), key.Self(), mutationKind, objects.Self())
}
func (goobj NSObject) DidChangeValueForKeyWithSetMutationUsingObjects(key NSString, mutationKind C.NSKeyValueSetMutationKind, objects NSSet)  {
  C.NSObject_didChangeValueForKeyWithSetMutationUsingObjects(goobj.Self(), key.Self(), mutationKind, objects.Self())
}
func (goobj NSObject) SetObservationInfo(observationInfo unsafe.Pointer)  {
  C.NSObject_setObservationInfo(goobj.Self(), observationInfo)
}
func (goobj NSObject) ObservationInfo() unsafe.Pointer {
  return (C.NSObject_observationInfo(goobj.Self()))
}
//REJECT: Class
//func (goobj NSObject) ClassForKeyedArchiver() C.Class {
//  return (C.NSObject_classForKeyedArchiver(goobj.Self()))
//}
func (goobj NSObject) ReplacementObjectForKeyedArchiver(archiver NSKeyedArchiver) Id {
  return Id_(C.NSObject_replacementObjectForKeyedArchiver(goobj.Self(), archiver.Self()))
}
//REJECT: aSelector delay
//func (goobj NSObject) PerformSelectorWithObjectAfterDelayInModes(aSelector C.SEL, anArgument Id, delay C.NSTimeInterval, modes NSArray)  {
//  C.NSObject_performSelectorWithObjectAfterDelayInModes(goobj.Self(), aSelector, unsafe.Pointer(anArgument), delay, modes.Self())
//}
//REJECT: aSelector delay
//func (goobj NSObject) PerformSelectorWithObjectAfterDelay(aSelector C.SEL, anArgument Id, delay C.NSTimeInterval)  {
//  C.NSObject_performSelectorWithObjectAfterDelay(goobj.Self(), aSelector, unsafe.Pointer(anArgument), delay)
//}
//REJECT: aSelector
//func (goobj NSObject) PerformSelectorOnMainThreadWithObjectWaitUntilDoneModes(aSelector C.SEL, arg Id, wait C.bool, array NSArray)  {
//  C.NSObject_performSelectorOnMainThreadWithObjectWaitUntilDoneModes(goobj.Self(), aSelector, unsafe.Pointer(arg), wait, array.Self())
//}
//REJECT: aSelector
//func (goobj NSObject) PerformSelectorOnMainThreadWithObjectWaitUntilDone(aSelector C.SEL, arg Id, wait C.bool)  {
//  C.NSObject_performSelectorOnMainThreadWithObjectWaitUntilDone(goobj.Self(), aSelector, unsafe.Pointer(arg), wait)
//}
//REJECT: aSelector
//func (goobj NSObject) PerformSelectorOnThreadWithObjectWaitUntilDoneModes(aSelector C.SEL, thr NSThread, arg Id, wait C.bool, array NSArray)  {
//  C.NSObject_performSelectorOnThreadWithObjectWaitUntilDoneModes(goobj.Self(), aSelector, thr.Self(), unsafe.Pointer(arg), wait, array.Self())
//}
//REJECT: aSelector
//func (goobj NSObject) PerformSelectorOnThreadWithObjectWaitUntilDone(aSelector C.SEL, thr NSThread, arg Id, wait C.bool)  {
//  C.NSObject_performSelectorOnThreadWithObjectWaitUntilDone(goobj.Self(), aSelector, thr.Self(), unsafe.Pointer(arg), wait)
//}
//REJECT: aSelector
//func (goobj NSObject) PerformSelectorInBackgroundWithObject(aSelector C.SEL, arg Id)  {
//  C.NSObject_performSelectorInBackgroundWithObject(goobj.Self(), aSelector, unsafe.Pointer(arg))
//}
//unacceptalble-method
//func (goobj NSObject) URLResourceDataDidBecomeAvailable(sender NSURL, newBytes NSData)  {
//  C.NSObject_URLResourceDataDidBecomeAvailable(goobj.Self(), sender.Self(), newBytes.Self())
//}
//unacceptalble-method
//func (goobj NSObject) URLResourceDidFinishLoading(sender NSURL)  {
//  C.NSObject_URLResourceDidFinishLoading(goobj.Self(), sender.Self())
//}
//unacceptalble-method
//func (goobj NSObject) URLResourceDidCancelLoading(sender NSURL)  {
//  C.NSObject_URLResourceDidCancelLoading(goobj.Self(), sender.Self())
//}
//unacceptalble-method
//func (goobj NSObject) URLResourceDidFailLoadingWithReason(sender NSURL, reason NSString)  {
//  C.NSObject_URLResourceDidFailLoadingWithReason(goobj.Self(), sender.Self(), reason.Self())
//}
//REJECT: Class
//func (goobj NSObject) ClassForArchiver() C.Class {
//  return (C.NSObject_classForArchiver(goobj.Self()))
//}
func (goobj NSObject) ReplacementObjectForArchiver(archiver NSArchiver) Id {
  return Id_(C.NSObject_replacementObjectForArchiver(goobj.Self(), archiver.Self()))
}
//REJECT: Class
//func (goobj NSObject) ClassForPortCoder() C.Class {
//  return (C.NSObject_classForPortCoder(goobj.Self()))
//}
func (goobj NSObject) ReplacementObjectForPortCoder(coder NSPortCoder) Id {
  return Id_(C.NSObject_replacementObjectForPortCoder(goobj.Self(), coder.Self()))
}
func (goobj NSObject) ClassDescription() NSClassDescription {
  return NSClassDescription_(Id(C.NSObject_classDescription(goobj.Self())))
}
func (goobj NSObject) AttributeKeys() NSArray {
  return NSArray_(Id(C.NSObject_attributeKeys(goobj.Self())))
}
func (goobj NSObject) ToOneRelationshipKeys() NSArray {
  return NSArray_(Id(C.NSObject_toOneRelationshipKeys(goobj.Self())))
}
func (goobj NSObject) ToManyRelationshipKeys() NSArray {
  return NSArray_(Id(C.NSObject_toManyRelationshipKeys(goobj.Self())))
}
func (goobj NSObject) InverseForRelationshipKey(relationshipKey NSString) NSString {
  return NSString_(Id(C.NSObject_inverseForRelationshipKey(goobj.Self(), relationshipKey.Self())))
}
func (goobj NSObject) ScriptingValueForSpecifier(objectSpecifier NSScriptObjectSpecifier) Id {
  return Id_(C.NSObject_scriptingValueForSpecifier(goobj.Self(), objectSpecifier.Self()))
}
func (goobj NSObject) ScriptingProperties() NSDictionary {
  return NSDictionary_(Id(C.NSObject_scriptingProperties(goobj.Self())))
}
func (goobj NSObject) SetScriptingProperties(properties NSDictionary)  {
  C.NSObject_setScriptingProperties(goobj.Self(), properties.Self())
}
func (goobj NSObject) CopyScriptingValueForKeyWithProperties(value Id, key NSString, properties NSDictionary) Id {
  return Id_(C.NSObject_copyScriptingValueForKeyWithProperties(goobj.Self(), unsafe.Pointer(value), key.Self(), properties.Self()))
}
//REJECT: objectClass
//func (goobj NSObject) NewScriptingObjectOfClassForValueForKeyWithContentsValueProperties(objectClass C.Class, key NSString, contentsValue Id, properties NSDictionary) Id {
//  return Id_(C.NSObject_newScriptingObjectOfClassForValueForKeyWithContentsValueProperties(goobj.Self(), objectClass, key.Self(), unsafe.Pointer(contentsValue), properties.Self()))
//}
//REJECT: FourCharCode
//func (goobj NSObject) ClassCode() C.FourCharCode {
//  return (C.NSObject_classCode(goobj.Self()))
//}
func (goobj NSObject) ClassName() NSString {
  return NSString_(Id(C.NSObject_className(goobj.Self())))
}
func (goobj NSObject) ValueAtIndexInPropertyWithKey(index C.uint, key NSString) Id {
  return Id_(C.NSObject_valueAtIndexInPropertyWithKey(goobj.Self(), index, key.Self()))
}
func (goobj NSObject) ValueWithNameInPropertyWithKey(name NSString, key NSString) Id {
  return Id_(C.NSObject_valueWithNameInPropertyWithKey(goobj.Self(), name.Self(), key.Self()))
}
func (goobj NSObject) ValueWithUniqueIDInPropertyWithKey(uniqueID Id, key NSString) Id {
  return Id_(C.NSObject_valueWithUniqueIDInPropertyWithKey(goobj.Self(), unsafe.Pointer(uniqueID), key.Self()))
}
func (goobj NSObject) InsertValueAtIndexInPropertyWithKey(value Id, index C.uint, key NSString)  {
  C.NSObject_insertValueAtIndexInPropertyWithKey(goobj.Self(), unsafe.Pointer(value), index, key.Self())
}
func (goobj NSObject) RemoveValueAtIndexFromPropertyWithKey(index C.uint, key NSString)  {
  C.NSObject_removeValueAtIndexFromPropertyWithKey(goobj.Self(), index, key.Self())
}
func (goobj NSObject) ReplaceValueAtIndexInPropertyWithKeyWithValue(index C.uint, key NSString, value Id)  {
  C.NSObject_replaceValueAtIndexInPropertyWithKeyWithValue(goobj.Self(), index, key.Self(), unsafe.Pointer(value))
}
func (goobj NSObject) InsertValueInPropertyWithKey(value Id, key NSString)  {
  C.NSObject_insertValueInPropertyWithKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSObject) CoerceValueForKey(value Id, key NSString) Id {
  return Id_(C.NSObject_coerceValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self()))
}
func (goobj NSObject) ObjectSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSObject_objectSpecifier(goobj.Self())))
}
func (goobj NSObject) IndicesOfObjectsByEvaluatingObjectSpecifier(specifier NSScriptObjectSpecifier) NSArray {
  return NSArray_(Id(C.NSObject_indicesOfObjectsByEvaluatingObjectSpecifier(goobj.Self(), specifier.Self())))
}
func (goobj NSObject) IsEqualTo(object Id) C.bool {
  return (C.NSObject_isEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsLessThanOrEqualTo(object Id) C.bool {
  return (C.NSObject_isLessThanOrEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsLessThan(object Id) C.bool {
  return (C.NSObject_isLessThan(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsGreaterThanOrEqualTo(object Id) C.bool {
  return (C.NSObject_isGreaterThanOrEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsGreaterThan(object Id) C.bool {
  return (C.NSObject_isGreaterThan(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsNotEqualTo(object Id) C.bool {
  return (C.NSObject_isNotEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) DoesContain(object Id) C.bool {
  return (C.NSObject_doesContain(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) IsLike(object NSString) C.bool {
  return (C.NSObject_isLike(goobj.Self(), object.Self()))
}
func (goobj NSObject) IsCaseInsensitiveLike(object NSString) C.bool {
  return (C.NSObject_isCaseInsensitiveLike(goobj.Self(), object.Self()))
}
func (goobj NSObject) ScriptingIsEqualTo(object Id) C.bool {
  return (C.NSObject_scriptingIsEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingIsLessThanOrEqualTo(object Id) C.bool {
  return (C.NSObject_scriptingIsLessThanOrEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingIsLessThan(object Id) C.bool {
  return (C.NSObject_scriptingIsLessThan(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingIsGreaterThanOrEqualTo(object Id) C.bool {
  return (C.NSObject_scriptingIsGreaterThanOrEqualTo(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingIsGreaterThan(object Id) C.bool {
  return (C.NSObject_scriptingIsGreaterThan(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingBeginsWith(object Id) C.bool {
  return (C.NSObject_scriptingBeginsWith(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingEndsWith(object Id) C.bool {
  return (C.NSObject_scriptingEndsWith(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSObject) ScriptingContains(object Id) C.bool {
  return (C.NSObject_scriptingContains(goobj.Self(), unsafe.Pointer(object)))
}
func NSObject_load()  {
  C.NSObject__load()
}
func NSObject_initialize()  {
  C.NSObject__initialize()
}
func NSObject_new() Id {
  return Id_(C.NSObject__new())
}
//REJECT: zone
//func NSObject_allocWithZone(zone C.struct _NSZone) Id {
//  return Id_(C.NSObject__allocWithZone(zone))
//}
func NSObject_alloc() Id {
  return Id_(C.NSObject__alloc())
}
//REJECT: zone
//func NSObject_copyWithZone(zone C.struct _NSZone) Id {
//  return Id_(C.NSObject__copyWithZone(zone))
//}
//REJECT: zone
//func NSObject_mutableCopyWithZone(zone C.struct _NSZone) Id {
//  return Id_(C.NSObject__mutableCopyWithZone(zone))
//}
//REJECT: Class
//func NSObject_superclass() C.Class {
//  return (C.NSObject__superclass())
//}
//REJECT: Class
//func NSObject_class() C.Class {
//  return (C.NSObject__class())
//}
//REJECT: aSelector
//func NSObject_instancesRespondToSelector(aSelector C.SEL) C.bool {
//  return (C.NSObject__instancesRespondToSelector(aSelector))
//}
func NSObject_conformsToProtocol(protocol Protocol) C.bool {
  return (C.NSObject__conformsToProtocol(protocol.Self()))
}
//REJECT: IMP aSelector
//func NSObject_instanceMethodForSelector(aSelector C.SEL) C.IMP {
//  return (C.NSObject__instanceMethodForSelector(aSelector))
//}
//REJECT: NSMethodSignature aSelector
//func NSObject_instanceMethodSignatureForSelector(aSelector C.SEL) NSMethodSignature {
//  return NSMethodSignature_(Id(C.NSObject__instanceMethodSignatureForSelector(aSelector)))
//}
func NSObject_description() NSString {
  return NSString_(Id(C.NSObject__description()))
}
//REJECT: aClass
//func NSObject_isSubclassOfClass(aClass C.Class) C.bool {
//  return (C.NSObject__isSubclassOfClass(aClass))
//}
//REJECT: sel
//func NSObject_resolveClassMethod(sel C.SEL) C.bool {
//  return (C.NSObject__resolveClassMethod(sel))
//}
//REJECT: sel
//func NSObject_resolveInstanceMethod(sel C.SEL) C.bool {
//  return (C.NSObject__resolveInstanceMethod(sel))
//}
type NSValue struct {
  NSObject
}
func NSValue_(i Id) NSValue {
  return NSValue{ NSObject_(i) }
}
func NSValue_init() NSValue {
  p := Id(C.NSValue_init())
  return NSValue_(p)
}
func (goobj NSValue) GetValue(value unsafe.Pointer)  {
  C.NSValue_getValue(goobj.Self(), value)
}
func (goobj NSValue) ObjCType() string {
  return C.GoString(C.NSValue_objCType(goobj.Self()))
}
func NSValue_initWithBytesObjCType(value unsafe.Pointer, type_ string) NSValue {
  return NSValue_(Id(C.NSValue_initWithBytesObjCType(value, C.CString(type_))))
}
func (goobj NSValue) NonretainedObjectValue() Id {
  return Id_(C.NSValue_nonretainedObjectValue(goobj.Self()))
}
func (goobj NSValue) PointerValue() unsafe.Pointer {
  return (C.NSValue_pointerValue(goobj.Self()))
}
func (goobj NSValue) IsEqualToValue(value NSValue) C.bool {
  return (C.NSValue_isEqualToValue(goobj.Self(), value.Self()))
}
//REJECT: NSRange
//func (goobj NSValue) RangeValue() C.NSRange {
//  return (C.NSValue_rangeValue(goobj.Self()))
//}
func (goobj NSValue) PointValue() NSPoint {
  return NSPoint_(C.NSValue_pointValue(goobj.Self()))
}
//REJECT: NSSize
//func (goobj NSValue) SizeValue() C.NSSize {
//  return (C.NSValue_sizeValue(goobj.Self()))
//}
func (goobj NSValue) RectValue() NSRect {
  return NSRect_(C.NSValue_rectValue(goobj.Self()))
}

type NSNumber struct {
  NSValue
}
func NSNumber_(i Id) NSNumber {
  return NSNumber{ NSValue_(i) }
}
func NSNumber_init() NSNumber {
  p := Id(C.NSNumber_init())
  return NSNumber_(p)
}
func (goobj NSNumber) CharValue() C.char {
  return (C.NSNumber_charValue(goobj.Self()))
}
func (goobj NSNumber) UnsignedCharValue() C.uchar {
  return (C.NSNumber_unsignedCharValue(goobj.Self()))
}
func (goobj NSNumber) ShortValue() C.short {
  return (C.NSNumber_shortValue(goobj.Self()))
}
func (goobj NSNumber) UnsignedShortValue() C.ushort {
  return (C.NSNumber_unsignedShortValue(goobj.Self()))
}
func (goobj NSNumber) IntValue() C.int {
  return (C.NSNumber_intValue(goobj.Self()))
}
func (goobj NSNumber) UnsignedIntValue() C.uint {
  return (C.NSNumber_unsignedIntValue(goobj.Self()))
}
func (goobj NSNumber) LongValue() C.longlong {
  return (C.NSNumber_longValue(goobj.Self()))
}
func (goobj NSNumber) UnsignedLongValue() C.ulonglong {
  return (C.NSNumber_unsignedLongValue(goobj.Self()))
}
func (goobj NSNumber) LongLongValue() C.longlong {
  return (C.NSNumber_longLongValue(goobj.Self()))
}
func (goobj NSNumber) UnsignedLongLongValue() C.ulonglong {
  return (C.NSNumber_unsignedLongLongValue(goobj.Self()))
}
func (goobj NSNumber) FloatValue() C.float {
  return (C.NSNumber_floatValue(goobj.Self()))
}
func (goobj NSNumber) DoubleValue() C.double {
  return (C.NSNumber_doubleValue(goobj.Self()))
}
func (goobj NSNumber) BoolValue() C.bool {
  return (C.NSNumber_boolValue(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSNumber) IntegerValue() C.NSInteger {
//  return (C.NSNumber_integerValue(goobj.Self()))
//}
func (goobj NSNumber) UnsignedIntegerValue() C.uint {
  return (C.NSNumber_unsignedIntegerValue(goobj.Self()))
}
func (goobj NSNumber) StringValue() NSString {
  return NSString_(Id(C.NSNumber_stringValue(goobj.Self())))
}
//REJECT: NSComparisonResult
//func (goobj NSNumber) Compare(otherNumber NSNumber) C.NSComparisonResult {
//  return (C.NSNumber_compare(goobj.Self(), otherNumber.Self()))
//}
func (goobj NSNumber) IsEqualToNumber(number NSNumber) C.bool {
  return (C.NSNumber_isEqualToNumber(goobj.Self(), number.Self()))
}
func (goobj NSNumber) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSNumber_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func NSNumber_initWithChar(value C.char) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithChar(value)))
}
func NSNumber_initWithUnsignedChar(value C.uchar) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedChar(value)))
}
func NSNumber_initWithShort(value C.short) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithShort(value)))
}
func NSNumber_initWithUnsignedShort(value C.ushort) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedShort(value)))
}
func NSNumber_initWithInt(value C.int) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithInt(value)))
}
func NSNumber_initWithUnsignedInt(value C.uint) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedInt(value)))
}
func NSNumber_initWithLong(value C.longlong) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithLong(value)))
}
func NSNumber_initWithUnsignedLong(value C.ulonglong) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedLong(value)))
}
func NSNumber_initWithLongLong(value C.longlong) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithLongLong(value)))
}
func NSNumber_initWithUnsignedLongLong(value C.ulonglong) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedLongLong(value)))
}
func NSNumber_initWithFloat(value C.float) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithFloat(value)))
}
func NSNumber_initWithDouble(value C.double) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithDouble(value)))
}
func NSNumber_initWithBool(value C.bool) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithBool(value)))
}
//REJECT: value
//func NSNumber_initWithInteger(value C.NSInteger) NSNumber {
//  return NSNumber_(Id(C.NSNumber_initWithInteger(value)))
//}
func NSNumber_initWithUnsignedInteger(value C.uint) NSNumber {
  return NSNumber_(Id(C.NSNumber_initWithUnsignedInteger(value)))
}
//REJECT: NSDecimal
//func (goobj NSNumber) DecimalValue() C.NSDecimal {
//  return (C.NSNumber_decimalValue(goobj.Self()))
//}

type NSString struct {
  NSObject
}
func NSString_(i Id) NSString {
  return NSString{ NSObject_(i) }
}
func (goobj NSString) Length() C.uint {
  return (C.NSString_length(goobj.Self()))
}
//REJECT: unichar
//func (goobj NSString) CharacterAtIndex(index C.uint) C.unichar {
//  return (C.NSString_characterAtIndex(goobj.Self(), index))
//}
//REJECT: buffer aRange
//func (goobj NSString) GetCharactersRange(buffer C.unichar, aRange C.NSRange)  {
//  C.NSString_getCharactersRange(goobj.Self(), buffer, aRange)
//}
func (goobj NSString) SubstringFromIndex(from C.uint) NSString {
  return NSString_(Id(C.NSString_substringFromIndex(goobj.Self(), from)))
}
func (goobj NSString) SubstringToIndex(to C.uint) NSString {
  return NSString_(Id(C.NSString_substringToIndex(goobj.Self(), to)))
}
//REJECT: range
//func (goobj NSString) SubstringWithRange(range_ C.NSRange) NSString {
//  return NSString_(Id(C.NSString_substringWithRange(goobj.Self(), range_)))
//}
//REJECT: NSComparisonResult
//func (goobj NSString) Compare(string NSString) C.NSComparisonResult {
//  return (C.NSString_compare(goobj.Self(), string.Self()))
//}
//REJECT: NSComparisonResult mask
//func (goobj NSString) CompareOptions(string NSString, mask C.NSStringCompareOptions) C.NSComparisonResult {
//  return (C.NSString_compareOptions(goobj.Self(), string.Self(), mask))
//}
//REJECT: NSComparisonResult mask compareRange
//func (goobj NSString) CompareOptionsRange(string NSString, mask C.NSStringCompareOptions, compareRange C.NSRange) C.NSComparisonResult {
//  return (C.NSString_compareOptionsRange(goobj.Self(), string.Self(), mask, compareRange))
//}
//REJECT: NSComparisonResult mask compareRange
//func (goobj NSString) CompareOptionsRangeLocale(string NSString, mask C.NSStringCompareOptions, compareRange C.NSRange, locale Id) C.NSComparisonResult {
//  return (C.NSString_compareOptionsRangeLocale(goobj.Self(), string.Self(), mask, compareRange, unsafe.Pointer(locale)))
//}
//REJECT: NSComparisonResult
//func (goobj NSString) CaseInsensitiveCompare(string NSString) C.NSComparisonResult {
//  return (C.NSString_caseInsensitiveCompare(goobj.Self(), string.Self()))
//}
//REJECT: NSComparisonResult
//func (goobj NSString) LocalizedCompare(string NSString) C.NSComparisonResult {
//  return (C.NSString_localizedCompare(goobj.Self(), string.Self()))
//}
//REJECT: NSComparisonResult
//func (goobj NSString) LocalizedCaseInsensitiveCompare(string NSString) C.NSComparisonResult {
//  return (C.NSString_localizedCaseInsensitiveCompare(goobj.Self(), string.Self()))
//}
//REJECT: NSComparisonResult
//func (goobj NSString) LocalizedStandardCompare(string NSString) C.NSComparisonResult {
//  return (C.NSString_localizedStandardCompare(goobj.Self(), string.Self()))
//}
func (goobj NSString) IsEqualToString(aString NSString) C.bool {
  return (C.NSString_isEqualToString(goobj.Self(), aString.Self()))
}
func (goobj NSString) HasPrefix(aString NSString) C.bool {
  return (C.NSString_hasPrefix(goobj.Self(), aString.Self()))
}
func (goobj NSString) HasSuffix(aString NSString) C.bool {
  return (C.NSString_hasSuffix(goobj.Self(), aString.Self()))
}
//REJECT: NSRange
//func (goobj NSString) RangeOfString(aString NSString) C.NSRange {
//  return (C.NSString_rangeOfString(goobj.Self(), aString.Self()))
//}
//REJECT: NSRange mask
//func (goobj NSString) RangeOfStringOptions(aString NSString, mask C.NSStringCompareOptions) C.NSRange {
//  return (C.NSString_rangeOfStringOptions(goobj.Self(), aString.Self(), mask))
//}
//REJECT: NSRange mask searchRange
//func (goobj NSString) RangeOfStringOptionsRange(aString NSString, mask C.NSStringCompareOptions, searchRange C.NSRange) C.NSRange {
//  return (C.NSString_rangeOfStringOptionsRange(goobj.Self(), aString.Self(), mask, searchRange))
//}
//REJECT: NSRange mask searchRange locale
//func (goobj NSString) RangeOfStringOptionsRangeLocale(aString NSString, mask C.NSStringCompareOptions, searchRange C.NSRange, locale NSLocale) C.NSRange {
//  return (C.NSString_rangeOfStringOptionsRangeLocale(goobj.Self(), aString.Self(), mask, searchRange, locale.Self()))
//}
//REJECT: NSRange
//func (goobj NSString) RangeOfCharacterFromSet(aSet NSCharacterSet) C.NSRange {
//  return (C.NSString_rangeOfCharacterFromSet(goobj.Self(), aSet.Self()))
//}
//REJECT: NSRange mask
//func (goobj NSString) RangeOfCharacterFromSetOptions(aSet NSCharacterSet, mask C.NSStringCompareOptions) C.NSRange {
//  return (C.NSString_rangeOfCharacterFromSetOptions(goobj.Self(), aSet.Self(), mask))
//}
//REJECT: NSRange mask searchRange
//func (goobj NSString) RangeOfCharacterFromSetOptionsRange(aSet NSCharacterSet, mask C.NSStringCompareOptions, searchRange C.NSRange) C.NSRange {
//  return (C.NSString_rangeOfCharacterFromSetOptionsRange(goobj.Self(), aSet.Self(), mask, searchRange))
//}
//REJECT: NSRange
//func (goobj NSString) RangeOfComposedCharacterSequenceAtIndex(index C.uint) C.NSRange {
//  return (C.NSString_rangeOfComposedCharacterSequenceAtIndex(goobj.Self(), index))
//}
//REJECT: NSRange range
//func (goobj NSString) RangeOfComposedCharacterSequencesForRange(range_ C.NSRange) C.NSRange {
//  return (C.NSString_rangeOfComposedCharacterSequencesForRange(goobj.Self(), range_))
//}
func (goobj NSString) StringByAppendingString(aString NSString) NSString {
  return NSString_(Id(C.NSString_stringByAppendingString(goobj.Self(), aString.Self())))
}
func (goobj NSString) StringByAppendingFormat(format NSString) NSString {
  return NSString_(Id(C.NSString_stringByAppendingFormat(goobj.Self(), format.Self())))
}
func (goobj NSString) DoubleValue() C.double {
  return (C.NSString_doubleValue(goobj.Self()))
}
func (goobj NSString) FloatValue() C.float {
  return (C.NSString_floatValue(goobj.Self()))
}
func (goobj NSString) IntValue() C.int {
  return (C.NSString_intValue(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSString) IntegerValue() C.NSInteger {
//  return (C.NSString_integerValue(goobj.Self()))
//}
func (goobj NSString) LongLongValue() C.longlong {
  return (C.NSString_longLongValue(goobj.Self()))
}
func (goobj NSString) BoolValue() C.bool {
  return (C.NSString_boolValue(goobj.Self()))
}
func (goobj NSString) ComponentsSeparatedByString(separator NSString) NSArray {
  return NSArray_(Id(C.NSString_componentsSeparatedByString(goobj.Self(), separator.Self())))
}
func (goobj NSString) ComponentsSeparatedByCharactersInSet(separator NSCharacterSet) NSArray {
  return NSArray_(Id(C.NSString_componentsSeparatedByCharactersInSet(goobj.Self(), separator.Self())))
}
//REJECT: mask
//func (goobj NSString) CommonPrefixWithStringOptions(aString NSString, mask C.NSStringCompareOptions) NSString {
//  return NSString_(Id(C.NSString_commonPrefixWithStringOptions(goobj.Self(), aString.Self(), mask)))
//}
func (goobj NSString) UppercaseString() NSString {
  return NSString_(Id(C.NSString_uppercaseString(goobj.Self())))
}
func (goobj NSString) LowercaseString() NSString {
  return NSString_(Id(C.NSString_lowercaseString(goobj.Self())))
}
func (goobj NSString) CapitalizedString() NSString {
  return NSString_(Id(C.NSString_capitalizedString(goobj.Self())))
}
//REJECT: locale
//func (goobj NSString) UppercaseStringWithLocale(locale NSLocale) NSString {
//  return NSString_(Id(C.NSString_uppercaseStringWithLocale(goobj.Self(), locale.Self())))
//}
//REJECT: locale
//func (goobj NSString) LowercaseStringWithLocale(locale NSLocale) NSString {
//  return NSString_(Id(C.NSString_lowercaseStringWithLocale(goobj.Self(), locale.Self())))
//}
//REJECT: locale
//func (goobj NSString) CapitalizedStringWithLocale(locale NSLocale) NSString {
//  return NSString_(Id(C.NSString_capitalizedStringWithLocale(goobj.Self(), locale.Self())))
//}
func (goobj NSString) StringByTrimmingCharactersInSet(set NSCharacterSet) NSString {
  return NSString_(Id(C.NSString_stringByTrimmingCharactersInSet(goobj.Self(), set.Self())))
}
func (goobj NSString) StringByPaddingToLengthWithStringStartingAtIndex(newLength C.uint, padString NSString, padIndex C.uint) NSString {
  return NSString_(Id(C.NSString_stringByPaddingToLengthWithStringStartingAtIndex(goobj.Self(), newLength, padString.Self(), padIndex)))
}
//REJECT: range
//func (goobj NSString) GetLineStartEndContentsEndForRange(startPtr C.uint, lineEndPtr C.uint, contentsEndPtr C.uint, range_ C.NSRange)  {
//  C.NSString_getLineStartEndContentsEndForRange(goobj.Self(), startPtr, lineEndPtr, contentsEndPtr, range_)
//}
//REJECT: NSRange range
//func (goobj NSString) LineRangeForRange(range_ C.NSRange) C.NSRange {
//  return (C.NSString_lineRangeForRange(goobj.Self(), range_))
//}
//REJECT: range
//func (goobj NSString) GetParagraphStartEndContentsEndForRange(startPtr C.uint, parEndPtr C.uint, contentsEndPtr C.uint, range_ C.NSRange)  {
//  C.NSString_getParagraphStartEndContentsEndForRange(goobj.Self(), startPtr, parEndPtr, contentsEndPtr, range_)
//}
//REJECT: NSRange range
//func (goobj NSString) ParagraphRangeForRange(range_ C.NSRange) C.NSRange {
//  return (C.NSString_paragraphRangeForRange(goobj.Self(), range_))
//}
//REJECT: range block
//func (goobj NSString) EnumerateSubstringsInRangeOptionsUsingBlock(range_ C.NSRange, opts C.NSStringEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSString_enumerateSubstringsInRangeOptionsUsingBlock(goobj.Self(), range_, opts, block)
//}
//REJECT: block
//func (goobj NSString) EnumerateLinesUsingBlock(block *INVALID TYPE*)  {
//  C.NSString_enumerateLinesUsingBlock(goobj.Self(), block)
//}
func (goobj NSString) Description() NSString {
  return NSString_(Id(C.NSString_description(goobj.Self())))
}
func (goobj NSString) Hash() C.uint {
  return (C.NSString_hash(goobj.Self()))
}
//REJECT: NSStringEncoding
//func (goobj NSString) FastestEncoding() C.NSStringEncoding {
//  return (C.NSString_fastestEncoding(goobj.Self()))
//}
//REJECT: NSStringEncoding
//func (goobj NSString) SmallestEncoding() C.NSStringEncoding {
//  return (C.NSString_smallestEncoding(goobj.Self()))
//}
//REJECT: encoding
//func (goobj NSString) DataUsingEncodingAllowLossyConversion(encoding C.NSStringEncoding, lossy C.bool) NSData {
//  return NSData_(Id(C.NSString_dataUsingEncodingAllowLossyConversion(goobj.Self(), encoding, lossy)))
//}
//REJECT: encoding
//func (goobj NSString) DataUsingEncoding(encoding C.NSStringEncoding) NSData {
//  return NSData_(Id(C.NSString_dataUsingEncoding(goobj.Self(), encoding)))
//}
//REJECT: encoding
//func (goobj NSString) CanBeConvertedToEncoding(encoding C.NSStringEncoding) C.bool {
//  return (C.NSString_canBeConvertedToEncoding(goobj.Self(), encoding))
//}
//REJECT: encoding
//func (goobj NSString) CStringUsingEncoding(encoding C.NSStringEncoding) string {
//  return C.GoString(C.NSString_cStringUsingEncoding(goobj.Self(), encoding))
//}
//REJECT: encoding
//func (goobj NSString) GetCStringMaxLengthEncoding(buffer string, maxBufferCount C.uint, encoding C.NSStringEncoding) C.bool {
//  return (C.NSString_getCStringMaxLengthEncoding(goobj.Self(), C.CString(buffer), maxBufferCount, encoding))
//}
//REJECT: encoding range leftover
//func (goobj NSString) GetBytesMaxLengthUsedLengthEncodingOptionsRangeRemainingRange(buffer unsafe.Pointer, maxBufferCount C.uint, usedBufferCount C.uint, encoding C.NSStringEncoding, options C.NSStringEncodingConversionOptions, range_ C.NSRange, leftover C.NSRangePointer) C.bool {
//  return (C.NSString_getBytesMaxLengthUsedLengthEncodingOptionsRangeRemainingRange(goobj.Self(), buffer, maxBufferCount, usedBufferCount, encoding, options, range_, leftover))
//}
//REJECT: enc
//func (goobj NSString) MaximumLengthOfBytesUsingEncoding(enc C.NSStringEncoding) C.uint {
//  return (C.NSString_maximumLengthOfBytesUsingEncoding(goobj.Self(), enc))
//}
//REJECT: enc
//func (goobj NSString) LengthOfBytesUsingEncoding(enc C.NSStringEncoding) C.uint {
//  return (C.NSString_lengthOfBytesUsingEncoding(goobj.Self(), enc))
//}
func (goobj NSString) DecomposedStringWithCanonicalMapping() NSString {
  return NSString_(Id(C.NSString_decomposedStringWithCanonicalMapping(goobj.Self())))
}
func (goobj NSString) PrecomposedStringWithCanonicalMapping() NSString {
  return NSString_(Id(C.NSString_precomposedStringWithCanonicalMapping(goobj.Self())))
}
func (goobj NSString) DecomposedStringWithCompatibilityMapping() NSString {
  return NSString_(Id(C.NSString_decomposedStringWithCompatibilityMapping(goobj.Self())))
}
func (goobj NSString) PrecomposedStringWithCompatibilityMapping() NSString {
  return NSString_(Id(C.NSString_precomposedStringWithCompatibilityMapping(goobj.Self())))
}
//REJECT: options locale
//func (goobj NSString) StringByFoldingWithOptionsLocale(options C.NSStringCompareOptions, locale NSLocale) NSString {
//  return NSString_(Id(C.NSString_stringByFoldingWithOptionsLocale(goobj.Self(), options, locale.Self())))
//}
//REJECT: options searchRange
//func (goobj NSString) StringByReplacingOccurrencesOfStringWithStringOptionsRange(target NSString, replacement NSString, options C.NSStringCompareOptions, searchRange C.NSRange) NSString {
//  return NSString_(Id(C.NSString_stringByReplacingOccurrencesOfStringWithStringOptionsRange(goobj.Self(), target.Self(), replacement.Self(), options, searchRange)))
//}
func (goobj NSString) StringByReplacingOccurrencesOfStringWithString(target NSString, replacement NSString) NSString {
  return NSString_(Id(C.NSString_stringByReplacingOccurrencesOfStringWithString(goobj.Self(), target.Self(), replacement.Self())))
}
//REJECT: range
//func (goobj NSString) StringByReplacingCharactersInRangeWithString(range_ C.NSRange, replacement NSString) NSString {
//  return NSString_(Id(C.NSString_stringByReplacingCharactersInRangeWithString(goobj.Self(), range_, replacement.Self())))
//}
func (goobj NSString) UTF8String() string {
  return C.GoString(C.NSString_UTF8String(goobj.Self()))
}
func NSString_init() NSString {
  return NSString_(Id(C.NSString_init()))
}
//REJECT: characters
//func NSString_initWithCharactersNoCopyLengthFreeWhenDone(characters C.unichar, length C.uint, freeBuffer C.bool) NSString {
//  return NSString_(Id(C.NSString_initWithCharactersNoCopyLengthFreeWhenDone(characters, length, freeBuffer)))
//}
//REJECT: characters
//func NSString_initWithCharactersLength(characters C.unichar, length C.uint) NSString {
//  return NSString_(Id(C.NSString_initWithCharactersLength(characters, length)))
//}
func NSString_initWithUTF8String(nullTerminatedCString string) NSString {
  return NSString_(Id(C.NSString_initWithUTF8String(C.CString(nullTerminatedCString))))
}
func NSString_initWithString(aString NSString) NSString {
  return NSString_(Id(C.NSString_initWithString(aString.Self())))
}
func NSString_initWithFormat(format NSString) NSString {
  return NSString_(Id(C.NSString_initWithFormat(format.Self())))
}
//REJECT: argList
//func NSString_initWithFormatArguments(format NSString, argList C.va_list) NSString {
//  return NSString_(Id(C.NSString_initWithFormatArguments(format.Self(), argList)))
//}
func NSString_initWithFormatLocale(format NSString, locale Id) NSString {
  return NSString_(Id(C.NSString_initWithFormatLocale(format.Self(), unsafe.Pointer(locale))))
}
//REJECT: argList
//func NSString_initWithFormatLocaleArguments(format NSString, locale Id, argList C.va_list) NSString {
//  return NSString_(Id(C.NSString_initWithFormatLocaleArguments(format.Self(), unsafe.Pointer(locale), argList)))
//}
//REJECT: encoding
//func NSString_initWithDataEncoding(data NSData, encoding C.NSStringEncoding) NSString {
//  return NSString_(Id(C.NSString_initWithDataEncoding(data.Self(), encoding)))
//}
//REJECT: encoding
//func NSString_initWithBytesLengthEncoding(bytes unsafe.Pointer, len C.uint, encoding C.NSStringEncoding) NSString {
//  return NSString_(Id(C.NSString_initWithBytesLengthEncoding(bytes, len, encoding)))
//}
//REJECT: encoding
//func NSString_initWithBytesNoCopyLengthEncodingFreeWhenDone(bytes unsafe.Pointer, len C.uint, encoding C.NSStringEncoding, freeBuffer C.bool) NSString {
//  return NSString_(Id(C.NSString_initWithBytesNoCopyLengthEncodingFreeWhenDone(bytes, len, encoding, freeBuffer)))
//}
//REJECT: encoding
//func NSString_initWithCStringEncoding(nullTerminatedCString string, encoding C.NSStringEncoding) NSString {
//  return NSString_(Id(C.NSString_initWithCStringEncoding(C.CString(nullTerminatedCString), encoding)))
//}
//REJECT: enc
//func NSString_initWithContentsOfURLEncodingError(url NSURL, enc C.NSStringEncoding, error NSError) NSString {
//  return NSString_(Id(C.NSString_initWithContentsOfURLEncodingError(url.Self(), enc, error.Self())))
//}
//REJECT: enc
//func NSString_initWithContentsOfFileEncodingError(path NSString, enc C.NSStringEncoding, error NSError) NSString {
//  return NSString_(Id(C.NSString_initWithContentsOfFileEncodingError(path.Self(), enc, error.Self())))
//}
//REJECT: enc
//func NSString_initWithContentsOfURLUsedEncodingError(url NSURL, enc C.NSStringEncoding, error NSError) NSString {
//  return NSString_(Id(C.NSString_initWithContentsOfURLUsedEncodingError(url.Self(), enc, error.Self())))
//}
//REJECT: enc
//func NSString_initWithContentsOfFileUsedEncodingError(path NSString, enc C.NSStringEncoding, error NSError) NSString {
//  return NSString_(Id(C.NSString_initWithContentsOfFileUsedEncodingError(path.Self(), enc, error.Self())))
//}
//REJECT: enc
//func (goobj NSString) WriteToURLAtomicallyEncodingError(url NSURL, useAuxiliaryFile C.bool, enc C.NSStringEncoding, error NSError) C.bool {
//  return (C.NSString_writeToURLAtomicallyEncodingError(goobj.Self(), url.Self(), useAuxiliaryFile, enc, error.Self()))
//}
//REJECT: enc
//func (goobj NSString) WriteToFileAtomicallyEncodingError(path NSString, useAuxiliaryFile C.bool, enc C.NSStringEncoding, error NSError) C.bool {
//  return (C.NSString_writeToFileAtomicallyEncodingError(goobj.Self(), path.Self(), useAuxiliaryFile, enc, error.Self()))
//}
func (goobj NSString) PropertyList() Id {
  return Id_(C.NSString_propertyList(goobj.Self()))
}
func (goobj NSString) PropertyListFromStringsFileFormat() NSDictionary {
  return NSDictionary_(Id(C.NSString_propertyListFromStringsFileFormat(goobj.Self())))
}
func (goobj NSString) PathComponents() NSArray {
  return NSArray_(Id(C.NSString_pathComponents(goobj.Self())))
}
func (goobj NSString) IsAbsolutePath() C.bool {
  return (C.NSString_isAbsolutePath(goobj.Self()))
}
func (goobj NSString) LastPathComponent() NSString {
  return NSString_(Id(C.NSString_lastPathComponent(goobj.Self())))
}
func (goobj NSString) StringByDeletingLastPathComponent() NSString {
  return NSString_(Id(C.NSString_stringByDeletingLastPathComponent(goobj.Self())))
}
func (goobj NSString) StringByAppendingPathComponent(str NSString) NSString {
  return NSString_(Id(C.NSString_stringByAppendingPathComponent(goobj.Self(), str.Self())))
}
func (goobj NSString) PathExtension() NSString {
  return NSString_(Id(C.NSString_pathExtension(goobj.Self())))
}
func (goobj NSString) StringByDeletingPathExtension() NSString {
  return NSString_(Id(C.NSString_stringByDeletingPathExtension(goobj.Self())))
}
func (goobj NSString) StringByAppendingPathExtension(str NSString) NSString {
  return NSString_(Id(C.NSString_stringByAppendingPathExtension(goobj.Self(), str.Self())))
}
func (goobj NSString) StringByAbbreviatingWithTildeInPath() NSString {
  return NSString_(Id(C.NSString_stringByAbbreviatingWithTildeInPath(goobj.Self())))
}
func (goobj NSString) StringByExpandingTildeInPath() NSString {
  return NSString_(Id(C.NSString_stringByExpandingTildeInPath(goobj.Self())))
}
func (goobj NSString) StringByStandardizingPath() NSString {
  return NSString_(Id(C.NSString_stringByStandardizingPath(goobj.Self())))
}
func (goobj NSString) StringByResolvingSymlinksInPath() NSString {
  return NSString_(Id(C.NSString_stringByResolvingSymlinksInPath(goobj.Self())))
}
func (goobj NSString) StringsByAppendingPaths(paths NSArray) NSArray {
  return NSArray_(Id(C.NSString_stringsByAppendingPaths(goobj.Self(), paths.Self())))
}
func (goobj NSString) CompletePathIntoStringCaseSensitiveMatchesIntoArrayFilterTypes(outputName NSString, flag C.bool, outputArray NSArray, filterTypes NSArray) C.uint {
  return (C.NSString_completePathIntoStringCaseSensitiveMatchesIntoArrayFilterTypes(goobj.Self(), outputName.Self(), flag, outputArray.Self(), filterTypes.Self()))
}
func (goobj NSString) FileSystemRepresentation() string {
  return C.GoString(C.NSString_fileSystemRepresentation(goobj.Self()))
}
func (goobj NSString) GetFileSystemRepresentationMaxLength(cname string, max C.uint) C.bool {
  return (C.NSString_getFileSystemRepresentationMaxLength(goobj.Self(), C.CString(cname), max))
}
func (goobj NSString) StringByAddingPercentEncodingWithAllowedCharacters(allowedCharacters NSCharacterSet) NSString {
  return NSString_(Id(C.NSString_stringByAddingPercentEncodingWithAllowedCharacters(goobj.Self(), allowedCharacters.Self())))
}
func (goobj NSString) StringByRemovingPercentEncoding() NSString {
  return NSString_(Id(C.NSString_stringByRemovingPercentEncoding(goobj.Self())))
}
//REJECT: enc
//func (goobj NSString) StringByAddingPercentEscapesUsingEncoding(enc C.NSStringEncoding) NSString {
//  return NSString_(Id(C.NSString_stringByAddingPercentEscapesUsingEncoding(goobj.Self(), enc)))
//}
//REJECT: enc
//func (goobj NSString) StringByReplacingPercentEscapesUsingEncoding(enc C.NSStringEncoding) NSString {
//  return NSString_(Id(C.NSString_stringByReplacingPercentEscapesUsingEncoding(goobj.Self(), enc)))
//}
//REJECT: range
//func (goobj NSString) LinguisticTagsInRangeSchemeOptionsOrthographyTokenRanges(range_ C.NSRange, tagScheme NSString, opts C.NSLinguisticTaggerOptions, orthography NSOrthography, tokenRanges NSArray) NSArray {
//  return NSArray_(Id(C.NSString_linguisticTagsInRangeSchemeOptionsOrthographyTokenRanges(goobj.Self(), range_, tagScheme.Self(), opts, orthography.Self(), tokenRanges.Self())))
//}
//REJECT: range block
//func (goobj NSString) EnumerateLinguisticTagsInRangeSchemeOptionsOrthographyUsingBlock(range_ C.NSRange, tagScheme NSString, opts C.NSLinguisticTaggerOptions, orthography NSOrthography, block *INVALID TYPE*)  {
//  C.NSString_enumerateLinguisticTagsInRangeSchemeOptionsOrthographyUsingBlock(goobj.Self(), range_, tagScheme.Self(), opts, orthography.Self(), block)
//}

type NSMutableString struct {
  NSString
}
func NSMutableString_(i Id) NSMutableString {
  return NSMutableString{ NSString_(i) }
}
func NSMutableString_init() NSMutableString {
  p := Id(C.NSMutableString_init())
  return NSMutableString_(p)
}
//REJECT: range
//func (goobj NSMutableString) ReplaceCharactersInRangeWithString(range_ C.NSRange, aString NSString)  {
//  C.NSMutableString_replaceCharactersInRangeWithString(goobj.Self(), range_, aString.Self())
//}
func (goobj NSMutableString) InsertStringAtIndex(aString NSString, loc C.uint)  {
  C.NSMutableString_insertStringAtIndex(goobj.Self(), aString.Self(), loc)
}
//REJECT: range
//func (goobj NSMutableString) DeleteCharactersInRange(range_ C.NSRange)  {
//  C.NSMutableString_deleteCharactersInRange(goobj.Self(), range_)
//}
func (goobj NSMutableString) AppendString(aString NSString)  {
  C.NSMutableString_appendString(goobj.Self(), aString.Self())
}
func (goobj NSMutableString) AppendFormat(format NSString)  {
  C.NSMutableString_appendFormat(goobj.Self(), format.Self())
}
func (goobj NSMutableString) SetString(aString NSString)  {
  C.NSMutableString_setString(goobj.Self(), aString.Self())
}
func NSMutableString_initWithCapacity(capacity C.uint) NSMutableString {
  return NSMutableString_(Id(C.NSMutableString_initWithCapacity(capacity)))
}
//REJECT: options searchRange
//func (goobj NSMutableString) ReplaceOccurrencesOfStringWithStringOptionsRange(target NSString, replacement NSString, options C.NSStringCompareOptions, searchRange C.NSRange) C.uint {
//  return (C.NSMutableString_replaceOccurrencesOfStringWithStringOptionsRange(goobj.Self(), target.Self(), replacement.Self(), options, searchRange))
//}

type NSSimpleCString struct {
  NSString
}
func NSSimpleCString_(i Id) NSSimpleCString {
  return NSSimpleCString{ NSString_(i) }
}
func NSSimpleCString_init() NSSimpleCString {
  p := Id(C.NSSimpleCString_init())
  return NSSimpleCString_(p)
}


type NSConstantString struct {
  NSSimpleCString
}
func NSConstantString_(i Id) NSConstantString {
  return NSConstantString{ NSSimpleCString_(i) }
}
func NSConstantString_init() NSConstantString {
  p := Id(C.NSConstantString_init())
  return NSConstantString_(p)
}


type NSCoder struct {
  NSObject
}
func NSCoder_(i Id) NSCoder {
  return NSCoder{ NSObject_(i) }
}
func NSCoder_init() NSCoder {
  p := Id(C.NSCoder_init())
  return NSCoder_(p)
}
func (goobj NSCoder) EncodeValueOfObjCTypeAt(type_ string, addr unsafe.Pointer)  {
  C.NSCoder_encodeValueOfObjCTypeAt(goobj.Self(), C.CString(type_), addr)
}
func (goobj NSCoder) EncodeDataObject(data NSData)  {
  C.NSCoder_encodeDataObject(goobj.Self(), data.Self())
}
func (goobj NSCoder) DecodeValueOfObjCTypeAt(type_ string, data unsafe.Pointer)  {
  C.NSCoder_decodeValueOfObjCTypeAt(goobj.Self(), C.CString(type_), data)
}
func (goobj NSCoder) DecodeDataObject() NSData {
  return NSData_(Id(C.NSCoder_decodeDataObject(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSCoder) VersionForClassName(className NSString) C.NSInteger {
//  return (C.NSCoder_versionForClassName(goobj.Self(), className.Self()))
//}
func (goobj NSCoder) EncodeObject(object Id)  {
  C.NSCoder_encodeObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSCoder) EncodeRootObject(rootObject Id)  {
  C.NSCoder_encodeRootObject(goobj.Self(), unsafe.Pointer(rootObject))
}
func (goobj NSCoder) EncodeBycopyObject(anObject Id)  {
  C.NSCoder_encodeBycopyObject(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSCoder) EncodeByrefObject(anObject Id)  {
  C.NSCoder_encodeByrefObject(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSCoder) EncodeConditionalObject(object Id)  {
  C.NSCoder_encodeConditionalObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSCoder) EncodeValuesOfObjCTypes(types string)  {
  C.NSCoder_encodeValuesOfObjCTypes(goobj.Self(), C.CString(types))
}
func (goobj NSCoder) EncodeArrayOfObjCTypeCountAt(type_ string, count C.uint, array unsafe.Pointer)  {
  C.NSCoder_encodeArrayOfObjCTypeCountAt(goobj.Self(), C.CString(type_), count, array)
}
func (goobj NSCoder) EncodeBytesLength(byteaddr unsafe.Pointer, length C.uint)  {
  C.NSCoder_encodeBytesLength(goobj.Self(), byteaddr, length)
}
func (goobj NSCoder) DecodeObject() Id {
  return Id_(C.NSCoder_decodeObject(goobj.Self()))
}
func (goobj NSCoder) DecodeValuesOfObjCTypes(types string)  {
  C.NSCoder_decodeValuesOfObjCTypes(goobj.Self(), C.CString(types))
}
func (goobj NSCoder) DecodeArrayOfObjCTypeCountAt(itemType string, count C.uint, array unsafe.Pointer)  {
  C.NSCoder_decodeArrayOfObjCTypeCountAt(goobj.Self(), C.CString(itemType), count, array)
}
func (goobj NSCoder) DecodeBytesWithReturnedLength(lengthp C.uint) unsafe.Pointer {
  return (C.NSCoder_decodeBytesWithReturnedLength(goobj.Self(), lengthp))
}
func (goobj NSCoder) EncodePropertyList(aPropertyList Id)  {
  C.NSCoder_encodePropertyList(goobj.Self(), unsafe.Pointer(aPropertyList))
}
func (goobj NSCoder) DecodePropertyList() Id {
  return Id_(C.NSCoder_decodePropertyList(goobj.Self()))
}
//REJECT: zone
//func (goobj NSCoder) SetObjectZone(zone C.NSZone)  {
//  C.NSCoder_setObjectZone(goobj.Self(), zone)
//}
//REJECT: NSZone
//func (goobj NSCoder) ObjectZone() C.NSZone {
//  return (C.NSCoder_objectZone(goobj.Self()))
//}
func (goobj NSCoder) SystemVersion() C.uint {
  return (C.NSCoder_systemVersion(goobj.Self()))
}
func (goobj NSCoder) AllowsKeyedCoding() C.bool {
  return (C.NSCoder_allowsKeyedCoding(goobj.Self()))
}
func (goobj NSCoder) EncodeObjectForKey(objv Id, key NSString)  {
  C.NSCoder_encodeObjectForKey(goobj.Self(), unsafe.Pointer(objv), key.Self())
}
func (goobj NSCoder) EncodeConditionalObjectForKey(objv Id, key NSString)  {
  C.NSCoder_encodeConditionalObjectForKey(goobj.Self(), unsafe.Pointer(objv), key.Self())
}
func (goobj NSCoder) EncodeBoolForKey(boolv C.bool, key NSString)  {
  C.NSCoder_encodeBoolForKey(goobj.Self(), boolv, key.Self())
}
func (goobj NSCoder) EncodeIntForKey(intv C.int, key NSString)  {
  C.NSCoder_encodeIntForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSCoder) EncodeInt32ForKey(intv C.int32_t, key NSString)  {
  C.NSCoder_encodeInt32ForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSCoder) EncodeInt64ForKey(intv C.int64_t, key NSString)  {
  C.NSCoder_encodeInt64ForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSCoder) EncodeFloatForKey(realv C.float, key NSString)  {
  C.NSCoder_encodeFloatForKey(goobj.Self(), realv, key.Self())
}
func (goobj NSCoder) EncodeDoubleForKey(realv C.double, key NSString)  {
  C.NSCoder_encodeDoubleForKey(goobj.Self(), realv, key.Self())
}
func (goobj NSCoder) EncodeBytesLengthForKey(bytesp C.uint8_t, lenv C.uint, key NSString)  {
  C.NSCoder_encodeBytesLengthForKey(goobj.Self(), bytesp, lenv, key.Self())
}
func (goobj NSCoder) ContainsValueForKey(key NSString) C.bool {
  return (C.NSCoder_containsValueForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeObjectForKey(key NSString) Id {
  return Id_(C.NSCoder_decodeObjectForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeBoolForKey(key NSString) C.bool {
  return (C.NSCoder_decodeBoolForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeIntForKey(key NSString) C.int {
  return (C.NSCoder_decodeIntForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeInt32ForKey(key NSString) C.int32_t {
  return (C.NSCoder_decodeInt32ForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeInt64ForKey(key NSString) C.int64_t {
  return (C.NSCoder_decodeInt64ForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeFloatForKey(key NSString) C.float {
  return (C.NSCoder_decodeFloatForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeDoubleForKey(key NSString) C.double {
  return (C.NSCoder_decodeDoubleForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) DecodeBytesForKeyReturnedLength(key NSString, lengthp C.uint) C.uint8_t {
  return (C.NSCoder_decodeBytesForKeyReturnedLength(goobj.Self(), key.Self(), lengthp))
}
//REJECT: intv
//func (goobj NSCoder) EncodeIntegerForKey(intv C.NSInteger, key NSString)  {
//  C.NSCoder_encodeIntegerForKey(goobj.Self(), intv, key.Self())
//}
//REJECT: NSInteger
//func (goobj NSCoder) DecodeIntegerForKey(key NSString) C.NSInteger {
//  return (C.NSCoder_decodeIntegerForKey(goobj.Self(), key.Self()))
//}
func (goobj NSCoder) RequiresSecureCoding() C.bool {
  return (C.NSCoder_requiresSecureCoding(goobj.Self()))
}
//REJECT: aClass
//func (goobj NSCoder) DecodeObjectOfClassForKey(aClass C.Class, key NSString) Id {
//  return Id_(C.NSCoder_decodeObjectOfClassForKey(goobj.Self(), aClass, key.Self()))
//}
func (goobj NSCoder) DecodeObjectOfClassesForKey(classes NSSet, key NSString) Id {
  return Id_(C.NSCoder_decodeObjectOfClassesForKey(goobj.Self(), classes.Self(), key.Self()))
}
func (goobj NSCoder) DecodePropertyListForKey(key NSString) Id {
  return Id_(C.NSCoder_decodePropertyListForKey(goobj.Self(), key.Self()))
}
func (goobj NSCoder) AllowedClasses() NSSet {
  return NSSet_(Id(C.NSCoder_allowedClasses(goobj.Self())))
}
func (goobj NSCoder) EncodeNXObject(object Id)  {
  C.NSCoder_encodeNXObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSCoder) DecodeNXObject() Id {
  return Id_(C.NSCoder_decodeNXObject(goobj.Self()))
}
func (goobj NSCoder) EncodePoint(point NSPoint)  {
  C.NSCoder_encodePoint(goobj.Self(), C.CGPointMake(C.CGFloat(point.X), C.CGFloat(point.Y)))
}
func (goobj NSCoder) DecodePoint() NSPoint {
  return NSPoint_(C.NSCoder_decodePoint(goobj.Self()))
}
//REJECT: size
//func (goobj NSCoder) EncodeSize(size C.NSSize)  {
//  C.NSCoder_encodeSize(goobj.Self(), size)
//}
//REJECT: NSSize
//func (goobj NSCoder) DecodeSize() C.NSSize {
//  return (C.NSCoder_decodeSize(goobj.Self()))
//}
func (goobj NSCoder) EncodeRect(rect NSRect)  {
  C.NSCoder_encodeRect(goobj.Self(), C.CGRectMake(C.CGFloat(rect.X), C.CGFloat(rect.Y), C.CGFloat(rect.Width), C.CGFloat(rect.Height)))
}
func (goobj NSCoder) DecodeRect() NSRect {
  return NSRect_(C.NSCoder_decodeRect(goobj.Self()))
}
func (goobj NSCoder) EncodePointForKey(point NSPoint, key NSString)  {
  C.NSCoder_encodePointForKey(goobj.Self(), C.CGPointMake(C.CGFloat(point.X), C.CGFloat(point.Y)), key.Self())
}
//REJECT: size
//func (goobj NSCoder) EncodeSizeForKey(size C.NSSize, key NSString)  {
//  C.NSCoder_encodeSizeForKey(goobj.Self(), size, key.Self())
//}
func (goobj NSCoder) EncodeRectForKey(rect NSRect, key NSString)  {
  C.NSCoder_encodeRectForKey(goobj.Self(), C.CGRectMake(C.CGFloat(rect.X), C.CGFloat(rect.Y), C.CGFloat(rect.Width), C.CGFloat(rect.Height)), key.Self())
}
func (goobj NSCoder) DecodePointForKey(key NSString) NSPoint {
  return NSPoint_(C.NSCoder_decodePointForKey(goobj.Self(), key.Self()))
}
//REJECT: NSSize
//func (goobj NSCoder) DecodeSizeForKey(key NSString) C.NSSize {
//  return (C.NSCoder_decodeSizeForKey(goobj.Self(), key.Self()))
//}
func (goobj NSCoder) DecodeRectForKey(key NSString) NSRect {
  return NSRect_(C.NSCoder_decodeRectForKey(goobj.Self(), key.Self()))
}

type NSTouch struct {
  NSObject
}
func NSTouch_(i Id) NSTouch {
  return NSTouch{ NSObject_(i) }
}
func NSTouch_init() NSTouch {
  p := Id(C.NSTouch_init())
  return NSTouch_(p)
}
func (goobj NSTouch) Identity() Id {
  return Id_(C.NSTouch_identity(goobj.Self()))
}
//REJECT: NSTouchPhase
//func (goobj NSTouch) Phase() C.NSTouchPhase {
//  return (C.NSTouch_phase(goobj.Self()))
//}
func (goobj NSTouch) NormalizedPosition() NSPoint {
  return NSPoint_(C.NSTouch_normalizedPosition(goobj.Self()))
}
func (goobj NSTouch) IsResting() C.bool {
  return (C.NSTouch_isResting(goobj.Self()))
}
func (goobj NSTouch) Device() Id {
  return Id_(C.NSTouch_device(goobj.Self()))
}
//REJECT: NSSize
//func (goobj NSTouch) DeviceSize() C.NSSize {
//  return (C.NSTouch_deviceSize(goobj.Self()))
//}

type NSDate struct {
  NSObject
}
func NSDate_(i Id) NSDate {
  return NSDate{ NSObject_(i) }
}
//REJECT: NSTimeInterval
//func (goobj NSDate) TimeIntervalSinceReferenceDate() C.NSTimeInterval {
//  return (C.NSDate_timeIntervalSinceReferenceDate(goobj.Self()))
//}
//REJECT: NSTimeInterval
//func (goobj NSDate) TimeIntervalSinceDate(anotherDate NSDate) C.NSTimeInterval {
//  return (C.NSDate_timeIntervalSinceDate(goobj.Self(), anotherDate.Self()))
//}
//REJECT: NSTimeInterval
//func (goobj NSDate) TimeIntervalSinceNow() C.NSTimeInterval {
//  return (C.NSDate_timeIntervalSinceNow(goobj.Self()))
//}
//REJECT: NSTimeInterval
//func (goobj NSDate) TimeIntervalSince1970() C.NSTimeInterval {
//  return (C.NSDate_timeIntervalSince1970(goobj.Self()))
//}
//REJECT: seconds
//func (goobj NSDate) AddTimeInterval(seconds C.NSTimeInterval) Id {
//  return Id_(C.NSDate_addTimeInterval(goobj.Self(), seconds))
//}
//REJECT: ti
//func (goobj NSDate) DateByAddingTimeInterval(ti C.NSTimeInterval) Id {
//  return Id_(C.NSDate_dateByAddingTimeInterval(goobj.Self(), ti))
//}
func (goobj NSDate) EarlierDate(anotherDate NSDate) NSDate {
  return NSDate_(Id(C.NSDate_earlierDate(goobj.Self(), anotherDate.Self())))
}
func (goobj NSDate) LaterDate(anotherDate NSDate) NSDate {
  return NSDate_(Id(C.NSDate_laterDate(goobj.Self(), anotherDate.Self())))
}
//REJECT: NSComparisonResult
//func (goobj NSDate) Compare(other NSDate) C.NSComparisonResult {
//  return (C.NSDate_compare(goobj.Self(), other.Self()))
//}
func (goobj NSDate) IsEqualToDate(otherDate NSDate) C.bool {
  return (C.NSDate_isEqualToDate(goobj.Self(), otherDate.Self()))
}
func (goobj NSDate) Description() NSString {
  return NSString_(Id(C.NSDate_description(goobj.Self())))
}
func (goobj NSDate) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSDate_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func NSDate_init() NSDate {
  return NSDate_(Id(C.NSDate_init()))
}
//REJECT: ti
//func NSDate_initWithTimeIntervalSinceReferenceDate(ti C.NSTimeInterval) NSDate {
//  return NSDate_(Id(C.NSDate_initWithTimeIntervalSinceReferenceDate(ti)))
//}
//REJECT: secs
//func NSDate_initWithTimeIntervalSinceNow(secs C.NSTimeInterval) NSDate {
//  return NSDate_(Id(C.NSDate_initWithTimeIntervalSinceNow(secs)))
//}
//REJECT: secs
//func NSDate_initWithTimeIntervalSince1970(secs C.NSTimeInterval) NSDate {
//  return NSDate_(Id(C.NSDate_initWithTimeIntervalSince1970(secs)))
//}
//REJECT: secsToBeAdded
//func NSDate_initWithTimeIntervalSinceDate(secsToBeAdded C.NSTimeInterval, date NSDate) NSDate {
//  return NSDate_(Id(C.NSDate_initWithTimeIntervalSinceDate(secsToBeAdded, date.Self())))
//}
func (goobj NSDate) DateWithCalendarFormatTimeZone(format NSString, aTimeZone NSTimeZone) NSCalendarDate {
  return NSCalendarDate_(Id(C.NSDate_dateWithCalendarFormatTimeZone(goobj.Self(), format.Self(), aTimeZone.Self())))
}
func (goobj NSDate) DescriptionWithCalendarFormatTimeZoneLocale(format NSString, aTimeZone NSTimeZone, locale Id) NSString {
  return NSString_(Id(C.NSDate_descriptionWithCalendarFormatTimeZoneLocale(goobj.Self(), format.Self(), aTimeZone.Self(), unsafe.Pointer(locale))))
}
func NSDate_initWithString(description NSString) NSDate {
  return NSDate_(Id(C.NSDate_initWithString(description.Self())))
}

type NSEvent struct {
  NSObject
}
func NSEvent_(i Id) NSEvent {
  return NSEvent{ NSObject_(i) }
}
func NSEvent_init() NSEvent {
  p := Id(C.NSEvent_init())
  return NSEvent_(p)
}
//REJECT: NSEventType
//func (goobj NSEvent) Type() C.NSEventType {
//  return (C.NSEvent_type(goobj.Self()))
//}
func (goobj NSEvent) ModifierFlags() C.uint {
  return (C.NSEvent_modifierFlags(goobj.Self()))
}
//REJECT: NSTimeInterval
//func (goobj NSEvent) Timestamp() C.NSTimeInterval {
//  return (C.NSEvent_timestamp(goobj.Self()))
//}
func (goobj NSEvent) Window() NSWindow {
  return NSWindow_(Id(C.NSEvent_window(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSEvent) WindowNumber() C.NSInteger {
//  return (C.NSEvent_windowNumber(goobj.Self()))
//}
func (goobj NSEvent) Context() NSGraphicsContext {
  return NSGraphicsContext_(Id(C.NSEvent_context(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSEvent) ClickCount() C.NSInteger {
//  return (C.NSEvent_clickCount(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSEvent) ButtonNumber() C.NSInteger {
//  return (C.NSEvent_buttonNumber(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSEvent) EventNumber() C.NSInteger {
//  return (C.NSEvent_eventNumber(goobj.Self()))
//}
func (goobj NSEvent) Pressure() C.float {
  return (C.NSEvent_pressure(goobj.Self()))
}
func (goobj NSEvent) LocationInWindow() NSPoint {
  return NSPoint_(C.NSEvent_locationInWindow(goobj.Self()))
}
//REJECT: CGFloat
//func (goobj NSEvent) DeltaX() C.CGFloat {
//  return (C.NSEvent_deltaX(goobj.Self()))
//}
//REJECT: CGFloat
//func (goobj NSEvent) DeltaY() C.CGFloat {
//  return (C.NSEvent_deltaY(goobj.Self()))
//}
//REJECT: CGFloat
//func (goobj NSEvent) DeltaZ() C.CGFloat {
//  return (C.NSEvent_deltaZ(goobj.Self()))
//}
func (goobj NSEvent) HasPreciseScrollingDeltas() C.bool {
  return (C.NSEvent_hasPreciseScrollingDeltas(goobj.Self()))
}
//REJECT: CGFloat
//func (goobj NSEvent) ScrollingDeltaX() C.CGFloat {
//  return (C.NSEvent_scrollingDeltaX(goobj.Self()))
//}
//REJECT: CGFloat
//func (goobj NSEvent) ScrollingDeltaY() C.CGFloat {
//  return (C.NSEvent_scrollingDeltaY(goobj.Self()))
//}
//REJECT: NSEventPhase
//func (goobj NSEvent) MomentumPhase() C.NSEventPhase {
//  return (C.NSEvent_momentumPhase(goobj.Self()))
//}
func (goobj NSEvent) IsDirectionInvertedFromDevice() C.bool {
  return (C.NSEvent_isDirectionInvertedFromDevice(goobj.Self()))
}
func (goobj NSEvent) Characters() NSString {
  return NSString_(Id(C.NSEvent_characters(goobj.Self())))
}
func (goobj NSEvent) CharactersIgnoringModifiers() NSString {
  return NSString_(Id(C.NSEvent_charactersIgnoringModifiers(goobj.Self())))
}
func (goobj NSEvent) IsARepeat() C.bool {
  return (C.NSEvent_isARepeat(goobj.Self()))
}
func (goobj NSEvent) KeyCode() C.ushort {
  return (C.NSEvent_keyCode(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSEvent) TrackingNumber() C.NSInteger {
//  return (C.NSEvent_trackingNumber(goobj.Self()))
//}
func (goobj NSEvent) UserData() unsafe.Pointer {
  return (C.NSEvent_userData(goobj.Self()))
}
func (goobj NSEvent) TrackingArea() NSTrackingArea {
  return NSTrackingArea_(Id(C.NSEvent_trackingArea(goobj.Self())))
}
func (goobj NSEvent) Subtype() C.short {
  return (C.NSEvent_subtype(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSEvent) Data1() C.NSInteger {
//  return (C.NSEvent_data1(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSEvent) Data2() C.NSInteger {
//  return (C.NSEvent_data2(goobj.Self()))
//}
func (goobj NSEvent) EventRef() unsafe.Pointer {
  return (C.NSEvent_eventRef(goobj.Self()))
}
//REJECT: CGEventRef
//func (goobj NSEvent) CGEvent() C.CGEventRef {
//  return (C.NSEvent_CGEvent(goobj.Self()))
//}
//REJECT: CGFloat
//func (goobj NSEvent) Magnification() C.CGFloat {
//  return (C.NSEvent_magnification(goobj.Self()))
//}
func (goobj NSEvent) DeviceID() C.uint {
  return (C.NSEvent_deviceID(goobj.Self()))
}
func (goobj NSEvent) Rotation() C.float {
  return (C.NSEvent_rotation(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSEvent) AbsoluteX() C.NSInteger {
//  return (C.NSEvent_absoluteX(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSEvent) AbsoluteY() C.NSInteger {
//  return (C.NSEvent_absoluteY(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSEvent) AbsoluteZ() C.NSInteger {
//  return (C.NSEvent_absoluteZ(goobj.Self()))
//}
func (goobj NSEvent) ButtonMask() C.uint {
  return (C.NSEvent_buttonMask(goobj.Self()))
}
func (goobj NSEvent) Tilt() NSPoint {
  return NSPoint_(C.NSEvent_tilt(goobj.Self()))
}
func (goobj NSEvent) TangentialPressure() C.float {
  return (C.NSEvent_tangentialPressure(goobj.Self()))
}
func (goobj NSEvent) VendorDefined() Id {
  return Id_(C.NSEvent_vendorDefined(goobj.Self()))
}
func (goobj NSEvent) VendorID() C.uint {
  return (C.NSEvent_vendorID(goobj.Self()))
}
func (goobj NSEvent) TabletID() C.uint {
  return (C.NSEvent_tabletID(goobj.Self()))
}
func (goobj NSEvent) PointingDeviceID() C.uint {
  return (C.NSEvent_pointingDeviceID(goobj.Self()))
}
func (goobj NSEvent) SystemTabletID() C.uint {
  return (C.NSEvent_systemTabletID(goobj.Self()))
}
func (goobj NSEvent) VendorPointingDeviceType() C.uint {
  return (C.NSEvent_vendorPointingDeviceType(goobj.Self()))
}
func (goobj NSEvent) PointingDeviceSerialNumber() C.uint {
  return (C.NSEvent_pointingDeviceSerialNumber(goobj.Self()))
}
func (goobj NSEvent) UniqueID() C.ulonglong {
  return (C.NSEvent_uniqueID(goobj.Self()))
}
func (goobj NSEvent) CapabilityMask() C.uint {
  return (C.NSEvent_capabilityMask(goobj.Self()))
}
//REJECT: NSPointingDeviceType
//func (goobj NSEvent) PointingDeviceType() C.NSPointingDeviceType {
//  return (C.NSEvent_pointingDeviceType(goobj.Self()))
//}
func (goobj NSEvent) IsEnteringProximity() C.bool {
  return (C.NSEvent_isEnteringProximity(goobj.Self()))
}
//REJECT: phase
//func (goobj NSEvent) TouchesMatchingPhaseInView(phase C.NSTouchPhase, view NSView) NSSet {
//  return NSSet_(Id(C.NSEvent_touchesMatchingPhaseInView(goobj.Self(), phase, view.Self())))
//}
//REJECT: NSEventPhase
//func (goobj NSEvent) Phase() C.NSEventPhase {
//  return (C.NSEvent_phase(goobj.Self()))
//}
//REJECT: options minDampenThreshold maxDampenThreshold trackingHandler
//func (goobj NSEvent) TrackSwipeEventWithOptionsDampenAmountThresholdMinMaxUsingHandler(options C.NSEventSwipeTrackingOptions, minDampenThreshold C.CGFloat, maxDampenThreshold C.CGFloat, trackingHandler *INVALID TYPE*)  {
//  C.NSEvent_trackSwipeEventWithOptionsDampenAmountThresholdMinMaxUsingHandler(goobj.Self(), options, minDampenThreshold, maxDampenThreshold, trackingHandler)
//}
func NSEvent_eventWithEventRef(eventRef unsafe.Pointer) NSEvent {
  return NSEvent_(Id(C.NSEvent__eventWithEventRef(eventRef)))
}
//REJECT: cgEvent
//func NSEvent_eventWithCGEvent(cgEvent C.CGEventRef) NSEvent {
//  return NSEvent_(Id(C.NSEvent__eventWithCGEvent(cgEvent)))
//}
func NSEvent_setMouseCoalescingEnabled(flag C.bool)  {
  C.NSEvent__setMouseCoalescingEnabled(flag)
}
func NSEvent_isMouseCoalescingEnabled() C.bool {
  return (C.NSEvent__isMouseCoalescingEnabled())
}
func NSEvent_isSwipeTrackingFromScrollEventsEnabled() C.bool {
  return (C.NSEvent__isSwipeTrackingFromScrollEventsEnabled())
}
//REJECT: delay period
//func NSEvent_startPeriodicEventsAfterDelayWithPeriod(delay C.NSTimeInterval, period C.NSTimeInterval)  {
//  C.NSEvent__startPeriodicEventsAfterDelayWithPeriod(delay, period)
//}
func NSEvent_stopPeriodicEvents()  {
  C.NSEvent__stopPeriodicEvents()
}
//REJECT: type time wNum eNum cNum
//func NSEvent_mouseEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberClickCountPressure(type_ C.NSEventType, location NSPoint, flags C.uint, time C.NSTimeInterval, wNum C.NSInteger, context NSGraphicsContext, eNum C.NSInteger, cNum C.NSInteger, pressure C.float) NSEvent {
//  return NSEvent_(Id(C.NSEvent__mouseEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberClickCountPressure(type_, C.CGPointMake(C.CGFloat(location.X), C.CGFloat(location.Y)), flags, time, wNum, context.Self(), eNum, cNum, pressure)))
//}
//REJECT: type time wNum
//func NSEvent_keyEventWithTypeLocationModifierFlagsTimestampWindowNumberContextCharactersCharactersIgnoringModifiersIsARepeatKeyCode(type_ C.NSEventType, location NSPoint, flags C.uint, time C.NSTimeInterval, wNum C.NSInteger, context NSGraphicsContext, keys NSString, ukeys NSString, flag C.bool, code C.ushort) NSEvent {
//  return NSEvent_(Id(C.NSEvent__keyEventWithTypeLocationModifierFlagsTimestampWindowNumberContextCharactersCharactersIgnoringModifiersIsARepeatKeyCode(type_, C.CGPointMake(C.CGFloat(location.X), C.CGFloat(location.Y)), flags, time, wNum, context.Self(), keys.Self(), ukeys.Self(), flag, code)))
//}
//REJECT: type time wNum eNum tNum
//func NSEvent_enterExitEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberTrackingNumberUserData(type_ C.NSEventType, location NSPoint, flags C.uint, time C.NSTimeInterval, wNum C.NSInteger, context NSGraphicsContext, eNum C.NSInteger, tNum C.NSInteger, data unsafe.Pointer) NSEvent {
//  return NSEvent_(Id(C.NSEvent__enterExitEventWithTypeLocationModifierFlagsTimestampWindowNumberContextEventNumberTrackingNumberUserData(type_, C.CGPointMake(C.CGFloat(location.X), C.CGFloat(location.Y)), flags, time, wNum, context.Self(), eNum, tNum, data)))
//}
//REJECT: type time wNum d1 d2
//func NSEvent_otherEventWithTypeLocationModifierFlagsTimestampWindowNumberContextSubtypeData1Data2(type_ C.NSEventType, location NSPoint, flags C.uint, time C.NSTimeInterval, wNum C.NSInteger, context NSGraphicsContext, subtype C.short, d1 C.NSInteger, d2 C.NSInteger) NSEvent {
//  return NSEvent_(Id(C.NSEvent__otherEventWithTypeLocationModifierFlagsTimestampWindowNumberContextSubtypeData1Data2(type_, C.CGPointMake(C.CGFloat(location.X), C.CGFloat(location.Y)), flags, time, wNum, context.Self(), subtype, d1, d2)))
//}
func NSEvent_mouseLocation() NSPoint {
  return NSPoint_(C.NSEvent__mouseLocation())
}
func NSEvent_modifierFlags() C.uint {
  return (C.NSEvent__modifierFlags())
}
func NSEvent_pressedMouseButtons() C.uint {
  return (C.NSEvent__pressedMouseButtons())
}
//REJECT: NSTimeInterval
//func NSEvent_doubleClickInterval() C.NSTimeInterval {
//  return (C.NSEvent__doubleClickInterval())
//}
//REJECT: NSTimeInterval
//func NSEvent_keyRepeatDelay() C.NSTimeInterval {
//  return (C.NSEvent__keyRepeatDelay())
//}
//REJECT: NSTimeInterval
//func NSEvent_keyRepeatInterval() C.NSTimeInterval {
//  return (C.NSEvent__keyRepeatInterval())
//}
//REJECT: block
//func NSEvent_addGlobalMonitorForEventsMatchingMaskHandler(mask C.NSEventMask, block *INVALID TYPE*) Id {
//  return Id_(C.NSEvent__addGlobalMonitorForEventsMatchingMaskHandler(mask, block))
//}
//unacceptalble-method
//func NSEvent_addLocalMonitorForEventsMatchingMaskHandler(mask C.NSEventMask, block NSEvent) Id {
//  return Id_(C.NSEvent__addLocalMonitorForEventsMatchingMaskHandler(mask, block.Self()))
//}
func NSEvent_removeMonitor(eventMonitor Id)  {
  C.NSEvent__removeMonitor(unsafe.Pointer(eventMonitor))
}
type NSResponder struct {
  NSObject
}
func NSResponder_(i Id) NSResponder {
  return NSResponder{ NSObject_(i) }
}
func NSResponder_init() NSResponder {
  p := Id(C.NSResponder_init())
  return NSResponder_(p)
}
func (goobj NSResponder) NextResponder() NSResponder {
  return NSResponder_(Id(C.NSResponder_nextResponder(goobj.Self())))
}
func (goobj NSResponder) SetNextResponder(aResponder NSResponder)  {
  C.NSResponder_setNextResponder(goobj.Self(), aResponder.Self())
}
//REJECT: anAction
//func (goobj NSResponder) TryToPerformWith(anAction C.SEL, anObject Id) C.bool {
//  return (C.NSResponder_tryToPerformWith(goobj.Self(), anAction, unsafe.Pointer(anObject)))
//}
func (goobj NSResponder) PerformKeyEquivalent(theEvent NSEvent) C.bool {
  return (C.NSResponder_performKeyEquivalent(goobj.Self(), theEvent.Self()))
}
func (goobj NSResponder) ValidRequestorForSendTypeReturnType(sendType NSString, returnType NSString) Id {
  return Id_(C.NSResponder_validRequestorForSendTypeReturnType(goobj.Self(), sendType.Self(), returnType.Self()))
}
func (goobj NSResponder) MouseDown(theEvent NSEvent)  {
  C.NSResponder_mouseDown(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) RightMouseDown(theEvent NSEvent)  {
  C.NSResponder_rightMouseDown(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) OtherMouseDown(theEvent NSEvent)  {
  C.NSResponder_otherMouseDown(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) MouseUp(theEvent NSEvent)  {
  C.NSResponder_mouseUp(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) RightMouseUp(theEvent NSEvent)  {
  C.NSResponder_rightMouseUp(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) OtherMouseUp(theEvent NSEvent)  {
  C.NSResponder_otherMouseUp(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) MouseMoved(theEvent NSEvent)  {
  C.NSResponder_mouseMoved(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) MouseDragged(theEvent NSEvent)  {
  C.NSResponder_mouseDragged(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) ScrollWheel(theEvent NSEvent)  {
  C.NSResponder_scrollWheel(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) RightMouseDragged(theEvent NSEvent)  {
  C.NSResponder_rightMouseDragged(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) OtherMouseDragged(theEvent NSEvent)  {
  C.NSResponder_otherMouseDragged(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) MouseEntered(theEvent NSEvent)  {
  C.NSResponder_mouseEntered(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) MouseExited(theEvent NSEvent)  {
  C.NSResponder_mouseExited(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) KeyDown(theEvent NSEvent)  {
  C.NSResponder_keyDown(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) KeyUp(theEvent NSEvent)  {
  C.NSResponder_keyUp(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) FlagsChanged(theEvent NSEvent)  {
  C.NSResponder_flagsChanged(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) TabletPoint(theEvent NSEvent)  {
  C.NSResponder_tabletPoint(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) TabletProximity(theEvent NSEvent)  {
  C.NSResponder_tabletProximity(goobj.Self(), theEvent.Self())
}
func (goobj NSResponder) CursorUpdate(event NSEvent)  {
  C.NSResponder_cursorUpdate(goobj.Self(), event.Self())
}
func (goobj NSResponder) MagnifyWithEvent(event NSEvent)  {
  C.NSResponder_magnifyWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) RotateWithEvent(event NSEvent)  {
  C.NSResponder_rotateWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) SwipeWithEvent(event NSEvent)  {
  C.NSResponder_swipeWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) BeginGestureWithEvent(event NSEvent)  {
  C.NSResponder_beginGestureWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) EndGestureWithEvent(event NSEvent)  {
  C.NSResponder_endGestureWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) SmartMagnifyWithEvent(event NSEvent)  {
  C.NSResponder_smartMagnifyWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) TouchesBeganWithEvent(event NSEvent)  {
  C.NSResponder_touchesBeganWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) TouchesMovedWithEvent(event NSEvent)  {
  C.NSResponder_touchesMovedWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) TouchesEndedWithEvent(event NSEvent)  {
  C.NSResponder_touchesEndedWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) TouchesCancelledWithEvent(event NSEvent)  {
  C.NSResponder_touchesCancelledWithEvent(goobj.Self(), event.Self())
}
func (goobj NSResponder) QuickLookWithEvent(event NSEvent)  {
  C.NSResponder_quickLookWithEvent(goobj.Self(), event.Self())
}
//REJECT: eventSelector
//func (goobj NSResponder) NoResponderFor(eventSelector C.SEL)  {
//  C.NSResponder_noResponderFor(goobj.Self(), eventSelector)
//}
func (goobj NSResponder) AcceptsFirstResponder() C.bool {
  return (C.NSResponder_acceptsFirstResponder(goobj.Self()))
}
func (goobj NSResponder) BecomeFirstResponder() C.bool {
  return (C.NSResponder_becomeFirstResponder(goobj.Self()))
}
func (goobj NSResponder) ResignFirstResponder() C.bool {
  return (C.NSResponder_resignFirstResponder(goobj.Self()))
}
func (goobj NSResponder) InterpretKeyEvents(eventArray NSArray)  {
  C.NSResponder_interpretKeyEvents(goobj.Self(), eventArray.Self())
}
func (goobj NSResponder) FlushBufferedKeyEvents()  {
  C.NSResponder_flushBufferedKeyEvents(goobj.Self())
}
func (goobj NSResponder) SetMenu(menu NSMenu)  {
  C.NSResponder_setMenu(goobj.Self(), menu.Self())
}
func (goobj NSResponder) Menu() NSMenu {
  return NSMenu_(Id(C.NSResponder_menu(goobj.Self())))
}
func (goobj NSResponder) ShowContextHelp(sender Id)  {
  C.NSResponder_showContextHelp(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) HelpRequested(eventPtr NSEvent)  {
  C.NSResponder_helpRequested(goobj.Self(), eventPtr.Self())
}
func (goobj NSResponder) ShouldBeTreatedAsInkEvent(theEvent NSEvent) C.bool {
  return (C.NSResponder_shouldBeTreatedAsInkEvent(goobj.Self(), theEvent.Self()))
}
//REJECT: axis
//func (goobj NSResponder) WantsScrollEventsForSwipeTrackingOnAxis(axis C.NSEventGestureAxis) C.bool {
//  return (C.NSResponder_wantsScrollEventsForSwipeTrackingOnAxis(goobj.Self(), axis))
//}
//REJECT: axis
//func (goobj NSResponder) WantsForwardedScrollEventsForAxis(axis C.NSEventGestureAxis) C.bool {
//  return (C.NSResponder_wantsForwardedScrollEventsForAxis(goobj.Self(), axis))
//}
//REJECT: action
//func (goobj NSResponder) SupplementalTargetForActionSender(action C.SEL, sender Id) Id {
//  return Id_(C.NSResponder_supplementalTargetForActionSender(goobj.Self(), action, unsafe.Pointer(sender)))
//}
func (goobj NSResponder) InsertText(insertString Id)  {
  C.NSResponder_insertText(goobj.Self(), unsafe.Pointer(insertString))
}
//REJECT: aSelector
//func (goobj NSResponder) DoCommandBySelector(aSelector C.SEL)  {
//  C.NSResponder_doCommandBySelector(goobj.Self(), aSelector)
//}
func (goobj NSResponder) MoveForward(sender Id)  {
  C.NSResponder_moveForward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveRight(sender Id)  {
  C.NSResponder_moveRight(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveBackward(sender Id)  {
  C.NSResponder_moveBackward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveLeft(sender Id)  {
  C.NSResponder_moveLeft(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveUp(sender Id)  {
  C.NSResponder_moveUp(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveDown(sender Id)  {
  C.NSResponder_moveDown(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordForward(sender Id)  {
  C.NSResponder_moveWordForward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordBackward(sender Id)  {
  C.NSResponder_moveWordBackward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfLine(sender Id)  {
  C.NSResponder_moveToBeginningOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfLine(sender Id)  {
  C.NSResponder_moveToEndOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfParagraph(sender Id)  {
  C.NSResponder_moveToBeginningOfParagraph(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfParagraph(sender Id)  {
  C.NSResponder_moveToEndOfParagraph(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfDocument(sender Id)  {
  C.NSResponder_moveToEndOfDocument(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfDocument(sender Id)  {
  C.NSResponder_moveToBeginningOfDocument(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) PageDown(sender Id)  {
  C.NSResponder_pageDown(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) PageUp(sender Id)  {
  C.NSResponder_pageUp(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) CenterSelectionInVisibleArea(sender Id)  {
  C.NSResponder_centerSelectionInVisibleArea(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveBackwardAndModifySelection(sender Id)  {
  C.NSResponder_moveBackwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveForwardAndModifySelection(sender Id)  {
  C.NSResponder_moveForwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordForwardAndModifySelection(sender Id)  {
  C.NSResponder_moveWordForwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordBackwardAndModifySelection(sender Id)  {
  C.NSResponder_moveWordBackwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveUpAndModifySelection(sender Id)  {
  C.NSResponder_moveUpAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveDownAndModifySelection(sender Id)  {
  C.NSResponder_moveDownAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfLineAndModifySelection(sender Id)  {
  C.NSResponder_moveToBeginningOfLineAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfLineAndModifySelection(sender Id)  {
  C.NSResponder_moveToEndOfLineAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfParagraphAndModifySelection(sender Id)  {
  C.NSResponder_moveToBeginningOfParagraphAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfParagraphAndModifySelection(sender Id)  {
  C.NSResponder_moveToEndOfParagraphAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToEndOfDocumentAndModifySelection(sender Id)  {
  C.NSResponder_moveToEndOfDocumentAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToBeginningOfDocumentAndModifySelection(sender Id)  {
  C.NSResponder_moveToBeginningOfDocumentAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) PageDownAndModifySelection(sender Id)  {
  C.NSResponder_pageDownAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) PageUpAndModifySelection(sender Id)  {
  C.NSResponder_pageUpAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveParagraphForwardAndModifySelection(sender Id)  {
  C.NSResponder_moveParagraphForwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveParagraphBackwardAndModifySelection(sender Id)  {
  C.NSResponder_moveParagraphBackwardAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordRight(sender Id)  {
  C.NSResponder_moveWordRight(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordLeft(sender Id)  {
  C.NSResponder_moveWordLeft(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveRightAndModifySelection(sender Id)  {
  C.NSResponder_moveRightAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveLeftAndModifySelection(sender Id)  {
  C.NSResponder_moveLeftAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordRightAndModifySelection(sender Id)  {
  C.NSResponder_moveWordRightAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveWordLeftAndModifySelection(sender Id)  {
  C.NSResponder_moveWordLeftAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToLeftEndOfLine(sender Id)  {
  C.NSResponder_moveToLeftEndOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToRightEndOfLine(sender Id)  {
  C.NSResponder_moveToRightEndOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToLeftEndOfLineAndModifySelection(sender Id)  {
  C.NSResponder_moveToLeftEndOfLineAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MoveToRightEndOfLineAndModifySelection(sender Id)  {
  C.NSResponder_moveToRightEndOfLineAndModifySelection(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollPageUp(sender Id)  {
  C.NSResponder_scrollPageUp(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollPageDown(sender Id)  {
  C.NSResponder_scrollPageDown(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollLineUp(sender Id)  {
  C.NSResponder_scrollLineUp(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollLineDown(sender Id)  {
  C.NSResponder_scrollLineDown(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollToBeginningOfDocument(sender Id)  {
  C.NSResponder_scrollToBeginningOfDocument(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ScrollToEndOfDocument(sender Id)  {
  C.NSResponder_scrollToEndOfDocument(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) Transpose(sender Id)  {
  C.NSResponder_transpose(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) TransposeWords(sender Id)  {
  C.NSResponder_transposeWords(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SelectAll(sender Id)  {
  C.NSResponder_selectAll(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SelectParagraph(sender Id)  {
  C.NSResponder_selectParagraph(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SelectLine(sender Id)  {
  C.NSResponder_selectLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SelectWord(sender Id)  {
  C.NSResponder_selectWord(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) Indent(sender Id)  {
  C.NSResponder_indent(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertTab(sender Id)  {
  C.NSResponder_insertTab(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertBacktab(sender Id)  {
  C.NSResponder_insertBacktab(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertNewline(sender Id)  {
  C.NSResponder_insertNewline(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertParagraphSeparator(sender Id)  {
  C.NSResponder_insertParagraphSeparator(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertNewlineIgnoringFieldEditor(sender Id)  {
  C.NSResponder_insertNewlineIgnoringFieldEditor(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertTabIgnoringFieldEditor(sender Id)  {
  C.NSResponder_insertTabIgnoringFieldEditor(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertLineBreak(sender Id)  {
  C.NSResponder_insertLineBreak(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertContainerBreak(sender Id)  {
  C.NSResponder_insertContainerBreak(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertSingleQuoteIgnoringSubstitution(sender Id)  {
  C.NSResponder_insertSingleQuoteIgnoringSubstitution(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) InsertDoubleQuoteIgnoringSubstitution(sender Id)  {
  C.NSResponder_insertDoubleQuoteIgnoringSubstitution(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) ChangeCaseOfLetter(sender Id)  {
  C.NSResponder_changeCaseOfLetter(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) UppercaseWord(sender Id)  {
  C.NSResponder_uppercaseWord(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) LowercaseWord(sender Id)  {
  C.NSResponder_lowercaseWord(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) CapitalizeWord(sender Id)  {
  C.NSResponder_capitalizeWord(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteForward(sender Id)  {
  C.NSResponder_deleteForward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteBackward(sender Id)  {
  C.NSResponder_deleteBackward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteBackwardByDecomposingPreviousCharacter(sender Id)  {
  C.NSResponder_deleteBackwardByDecomposingPreviousCharacter(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteWordForward(sender Id)  {
  C.NSResponder_deleteWordForward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteWordBackward(sender Id)  {
  C.NSResponder_deleteWordBackward(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteToBeginningOfLine(sender Id)  {
  C.NSResponder_deleteToBeginningOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteToEndOfLine(sender Id)  {
  C.NSResponder_deleteToEndOfLine(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteToBeginningOfParagraph(sender Id)  {
  C.NSResponder_deleteToBeginningOfParagraph(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteToEndOfParagraph(sender Id)  {
  C.NSResponder_deleteToEndOfParagraph(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) Yank(sender Id)  {
  C.NSResponder_yank(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) Complete(sender Id)  {
  C.NSResponder_complete(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SetMark(sender Id)  {
  C.NSResponder_setMark(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) DeleteToMark(sender Id)  {
  C.NSResponder_deleteToMark(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SelectToMark(sender Id)  {
  C.NSResponder_selectToMark(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) SwapWithMark(sender Id)  {
  C.NSResponder_swapWithMark(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) CancelOperation(sender Id)  {
  C.NSResponder_cancelOperation(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeBaseWritingDirectionNatural(sender Id)  {
  C.NSResponder_makeBaseWritingDirectionNatural(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeBaseWritingDirectionLeftToRight(sender Id)  {
  C.NSResponder_makeBaseWritingDirectionLeftToRight(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeBaseWritingDirectionRightToLeft(sender Id)  {
  C.NSResponder_makeBaseWritingDirectionRightToLeft(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeTextWritingDirectionNatural(sender Id)  {
  C.NSResponder_makeTextWritingDirectionNatural(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeTextWritingDirectionLeftToRight(sender Id)  {
  C.NSResponder_makeTextWritingDirectionLeftToRight(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) MakeTextWritingDirectionRightToLeft(sender Id)  {
  C.NSResponder_makeTextWritingDirectionRightToLeft(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) QuickLookPreviewItems(sender Id)  {
  C.NSResponder_quickLookPreviewItems(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSResponder) UndoManager() NSUndoManager {
  return NSUndoManager_(Id(C.NSResponder_undoManager(goobj.Self())))
}
func (goobj NSResponder) ValidateProposedFirstResponderForEvent(responder NSResponder, event NSEvent) C.bool {
  return (C.NSResponder_validateProposedFirstResponderForEvent(goobj.Self(), responder.Self(), event.Self()))
}
//REJECT: didPresentSelector
//func (goobj NSResponder) PresentErrorModalForWindowDelegateDidPresentSelectorContextInfo(error NSError, window NSWindow, delegate Id, didPresentSelector C.SEL, contextInfo unsafe.Pointer)  {
//  C.NSResponder_presentErrorModalForWindowDelegateDidPresentSelectorContextInfo(goobj.Self(), error.Self(), window.Self(), unsafe.Pointer(delegate), didPresentSelector, contextInfo)
//}
func (goobj NSResponder) PresentError(error NSError) C.bool {
  return (C.NSResponder_presentError(goobj.Self(), error.Self()))
}
func (goobj NSResponder) WillPresentError(error NSError) NSError {
  return NSError_(Id(C.NSResponder_willPresentError(goobj.Self(), error.Self())))
}
func (goobj NSResponder) PerformTextFinderAction(sender Id)  {
  C.NSResponder_performTextFinderAction(goobj.Self(), unsafe.Pointer(sender))
}

type NSAppleEventDescriptor struct {
  NSObject
}
func NSAppleEventDescriptor_(i Id) NSAppleEventDescriptor {
  return NSAppleEventDescriptor{ NSObject_(i) }
}
func NSAppleEventDescriptor_init() NSAppleEventDescriptor {
  p := Id(C.NSAppleEventDescriptor_init())
  return NSAppleEventDescriptor_(p)
}
//REJECT: aeDesc
//func NSAppleEventDescriptor_initWithAEDescNoCopy(aeDesc C.AEDesc) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_initWithAEDescNoCopy(aeDesc)))
//}
//REJECT: descriptorType
//func NSAppleEventDescriptor_initWithDescriptorTypeBytesLength(descriptorType C.DescType, bytes unsafe.Pointer, byteCount C.uint) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_initWithDescriptorTypeBytesLength(descriptorType, bytes, byteCount)))
//}
//REJECT: descriptorType
//func NSAppleEventDescriptor_initWithDescriptorTypeData(descriptorType C.DescType, data NSData) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_initWithDescriptorTypeData(descriptorType, data.Self())))
//}
//REJECT: eventClass eventID returnID transactionID
//func NSAppleEventDescriptor_initWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass C.AEEventClass, eventID C.AEEventID, targetDescriptor NSAppleEventDescriptor, returnID C.AEReturnID, transactionID C.AETransactionID) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_initWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass, eventID, targetDescriptor.Self(), returnID, transactionID)))
//}
func (goobj NSAppleEventDescriptor) InitListDescriptor() Id {
  return Id_(C.NSAppleEventDescriptor_initListDescriptor(goobj.Self()))
}
func (goobj NSAppleEventDescriptor) InitRecordDescriptor() Id {
  return Id_(C.NSAppleEventDescriptor_initRecordDescriptor(goobj.Self()))
}
//REJECT: AEDesc
//func (goobj NSAppleEventDescriptor) AeDesc() C.AEDesc {
//  return (C.NSAppleEventDescriptor_aeDesc(goobj.Self()))
//}
//REJECT: DescType
//func (goobj NSAppleEventDescriptor) DescriptorType() C.DescType {
//  return (C.NSAppleEventDescriptor_descriptorType(goobj.Self()))
//}
func (goobj NSAppleEventDescriptor) Data() NSData {
  return NSData_(Id(C.NSAppleEventDescriptor_data(goobj.Self())))
}
func (goobj NSAppleEventDescriptor) BooleanValue() C.Boolean {
  return (C.NSAppleEventDescriptor_booleanValue(goobj.Self()))
}
//REJECT: OSType
//func (goobj NSAppleEventDescriptor) EnumCodeValue() C.OSType {
//  return (C.NSAppleEventDescriptor_enumCodeValue(goobj.Self()))
//}
func (goobj NSAppleEventDescriptor) Int32Value() C.SInt32 {
  return (C.NSAppleEventDescriptor_int32Value(goobj.Self()))
}
//REJECT: OSType
//func (goobj NSAppleEventDescriptor) TypeCodeValue() C.OSType {
//  return (C.NSAppleEventDescriptor_typeCodeValue(goobj.Self()))
//}
func (goobj NSAppleEventDescriptor) StringValue() NSString {
  return NSString_(Id(C.NSAppleEventDescriptor_stringValue(goobj.Self())))
}
//REJECT: AEEventClass
//func (goobj NSAppleEventDescriptor) EventClass() C.AEEventClass {
//  return (C.NSAppleEventDescriptor_eventClass(goobj.Self()))
//}
//REJECT: AEEventID
//func (goobj NSAppleEventDescriptor) EventID() C.AEEventID {
//  return (C.NSAppleEventDescriptor_eventID(goobj.Self()))
//}
//REJECT: AEReturnID
//func (goobj NSAppleEventDescriptor) ReturnID() C.AEReturnID {
//  return (C.NSAppleEventDescriptor_returnID(goobj.Self()))
//}
//REJECT: AETransactionID
//func (goobj NSAppleEventDescriptor) TransactionID() C.AETransactionID {
//  return (C.NSAppleEventDescriptor_transactionID(goobj.Self()))
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) SetParamDescriptorForKeyword(descriptor NSAppleEventDescriptor, keyword C.AEKeyword)  {
//  C.NSAppleEventDescriptor_setParamDescriptorForKeyword(goobj.Self(), descriptor.Self(), keyword)
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) ParamDescriptorForKeyword(keyword C.AEKeyword) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_paramDescriptorForKeyword(goobj.Self(), keyword)))
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) RemoveParamDescriptorWithKeyword(keyword C.AEKeyword)  {
//  C.NSAppleEventDescriptor_removeParamDescriptorWithKeyword(goobj.Self(), keyword)
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) SetAttributeDescriptorForKeyword(descriptor NSAppleEventDescriptor, keyword C.AEKeyword)  {
//  C.NSAppleEventDescriptor_setAttributeDescriptorForKeyword(goobj.Self(), descriptor.Self(), keyword)
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) AttributeDescriptorForKeyword(keyword C.AEKeyword) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_attributeDescriptorForKeyword(goobj.Self(), keyword)))
//}
//REJECT: NSInteger
//func (goobj NSAppleEventDescriptor) NumberOfItems() C.NSInteger {
//  return (C.NSAppleEventDescriptor_numberOfItems(goobj.Self()))
//}
//REJECT: index
//func (goobj NSAppleEventDescriptor) InsertDescriptorAtIndex(descriptor NSAppleEventDescriptor, index C.NSInteger)  {
//  C.NSAppleEventDescriptor_insertDescriptorAtIndex(goobj.Self(), descriptor.Self(), index)
//}
//REJECT: index
//func (goobj NSAppleEventDescriptor) DescriptorAtIndex(index C.NSInteger) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_descriptorAtIndex(goobj.Self(), index)))
//}
//REJECT: index
//func (goobj NSAppleEventDescriptor) RemoveDescriptorAtIndex(index C.NSInteger)  {
//  C.NSAppleEventDescriptor_removeDescriptorAtIndex(goobj.Self(), index)
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) SetDescriptorForKeyword(descriptor NSAppleEventDescriptor, keyword C.AEKeyword)  {
//  C.NSAppleEventDescriptor_setDescriptorForKeyword(goobj.Self(), descriptor.Self(), keyword)
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) DescriptorForKeyword(keyword C.AEKeyword) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_descriptorForKeyword(goobj.Self(), keyword)))
//}
//REJECT: keyword
//func (goobj NSAppleEventDescriptor) RemoveDescriptorWithKeyword(keyword C.AEKeyword)  {
//  C.NSAppleEventDescriptor_removeDescriptorWithKeyword(goobj.Self(), keyword)
//}
//REJECT: AEKeyword index
//func (goobj NSAppleEventDescriptor) KeywordForDescriptorAtIndex(index C.NSInteger) C.AEKeyword {
//  return (C.NSAppleEventDescriptor_keywordForDescriptorAtIndex(goobj.Self(), index))
//}
//REJECT: descriptorType
//func (goobj NSAppleEventDescriptor) CoerceToDescriptorType(descriptorType C.DescType) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor_coerceToDescriptorType(goobj.Self(), descriptorType)))
//}
func NSAppleEventDescriptor_nullDescriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__nullDescriptor()))
}
//REJECT: descriptorType
//func NSAppleEventDescriptor_descriptorWithDescriptorTypeBytesLength(descriptorType C.DescType, bytes unsafe.Pointer, byteCount C.uint) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithDescriptorTypeBytesLength(descriptorType, bytes, byteCount)))
//}
//REJECT: descriptorType
//func NSAppleEventDescriptor_descriptorWithDescriptorTypeData(descriptorType C.DescType, data NSData) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithDescriptorTypeData(descriptorType, data.Self())))
//}
func NSAppleEventDescriptor_descriptorWithBoolean(boolean C.Boolean) NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithBoolean(boolean)))
}
//REJECT: enumerator
//func NSAppleEventDescriptor_descriptorWithEnumCode(enumerator C.OSType) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithEnumCode(enumerator)))
//}
func NSAppleEventDescriptor_descriptorWithInt32(signedInt C.SInt32) NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithInt32(signedInt)))
}
//REJECT: typeCode
//func NSAppleEventDescriptor_descriptorWithTypeCode(typeCode C.OSType) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithTypeCode(typeCode)))
//}
func NSAppleEventDescriptor_descriptorWithString(string NSString) NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__descriptorWithString(string.Self())))
}
//REJECT: eventClass eventID returnID transactionID
//func NSAppleEventDescriptor_appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass C.AEEventClass, eventID C.AEEventID, targetDescriptor NSAppleEventDescriptor, returnID C.AEReturnID, transactionID C.AETransactionID) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__appleEventWithEventClassEventIDTargetDescriptorReturnIDTransactionID(eventClass, eventID, targetDescriptor.Self(), returnID, transactionID)))
//}
func NSAppleEventDescriptor_listDescriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__listDescriptor()))
}
func NSAppleEventDescriptor_recordDescriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventDescriptor__recordDescriptor()))
}
type NSWorkspace struct {
  NSObject
}
func NSWorkspace_(i Id) NSWorkspace {
  return NSWorkspace{ NSObject_(i) }
}
func NSWorkspace_init() NSWorkspace {
  p := Id(C.NSWorkspace_init())
  return NSWorkspace_(p)
}
func (goobj NSWorkspace) NotificationCenter() NSNotificationCenter {
  return NSNotificationCenter_(Id(C.NSWorkspace_notificationCenter(goobj.Self())))
}
func (goobj NSWorkspace) OpenFile(fullPath NSString) C.bool {
  return (C.NSWorkspace_openFile(goobj.Self(), fullPath.Self()))
}
func (goobj NSWorkspace) OpenFileWithApplication(fullPath NSString, appName NSString) C.bool {
  return (C.NSWorkspace_openFileWithApplication(goobj.Self(), fullPath.Self(), appName.Self()))
}
func (goobj NSWorkspace) OpenFileWithApplicationAndDeactivate(fullPath NSString, appName NSString, flag C.bool) C.bool {
  return (C.NSWorkspace_openFileWithApplicationAndDeactivate(goobj.Self(), fullPath.Self(), appName.Self(), flag))
}
func (goobj NSWorkspace) OpenFileFromImageAtInView(fullPath NSString, anImage NSImage, point NSPoint, aView NSView) C.bool {
  return (C.NSWorkspace_openFileFromImageAtInView(goobj.Self(), fullPath.Self(), anImage.Self(), C.CGPointMake(C.CGFloat(point.X), C.CGFloat(point.Y)), aView.Self()))
}
func (goobj NSWorkspace) OpenURL(url NSURL) C.bool {
  return (C.NSWorkspace_openURL(goobj.Self(), url.Self()))
}
func (goobj NSWorkspace) LaunchApplication(appName NSString) C.bool {
  return (C.NSWorkspace_launchApplication(goobj.Self(), appName.Self()))
}
//REJECT: options
//func (goobj NSWorkspace) LaunchApplicationAtURLOptionsConfigurationError(url NSURL, options C.NSWorkspaceLaunchOptions, configuration NSDictionary, error NSError) NSRunningApplication {
//  return NSRunningApplication_(Id(C.NSWorkspace_launchApplicationAtURLOptionsConfigurationError(goobj.Self(), url.Self(), options, configuration.Self(), error.Self())))
//}
func (goobj NSWorkspace) LaunchApplicationShowIconAutolaunch(appName NSString, showIcon C.bool, autolaunch C.bool) C.bool {
  return (C.NSWorkspace_launchApplicationShowIconAutolaunch(goobj.Self(), appName.Self(), showIcon, autolaunch))
}
func (goobj NSWorkspace) FullPathForApplication(appName NSString) NSString {
  return NSString_(Id(C.NSWorkspace_fullPathForApplication(goobj.Self(), appName.Self())))
}
func (goobj NSWorkspace) SelectFileInFileViewerRootedAtPath(fullPath NSString, rootFullPath NSString) C.bool {
  return (C.NSWorkspace_selectFileInFileViewerRootedAtPath(goobj.Self(), fullPath.Self(), rootFullPath.Self()))
}
func (goobj NSWorkspace) ActivateFileViewerSelectingURLs(fileURLs NSArray)  {
  C.NSWorkspace_activateFileViewerSelectingURLs(goobj.Self(), fileURLs.Self())
}
func (goobj NSWorkspace) ShowSearchResultsForQueryString(queryString NSString) C.bool {
  return (C.NSWorkspace_showSearchResultsForQueryString(goobj.Self(), queryString.Self()))
}
func (goobj NSWorkspace) NoteFileSystemChanged(path NSString)  {
  C.NSWorkspace_noteFileSystemChanged(goobj.Self(), path.Self())
}
func (goobj NSWorkspace) GetInfoForFileApplicationType(fullPath NSString, appName NSString, type_ NSString) C.bool {
  return (C.NSWorkspace_getInfoForFileApplicationType(goobj.Self(), fullPath.Self(), appName.Self(), type_.Self()))
}
func (goobj NSWorkspace) IsFilePackageAtPath(fullPath NSString) C.bool {
  return (C.NSWorkspace_isFilePackageAtPath(goobj.Self(), fullPath.Self()))
}
func (goobj NSWorkspace) IconForFile(fullPath NSString) NSImage {
  return NSImage_(Id(C.NSWorkspace_iconForFile(goobj.Self(), fullPath.Self())))
}
func (goobj NSWorkspace) IconForFiles(fullPaths NSArray) NSImage {
  return NSImage_(Id(C.NSWorkspace_iconForFiles(goobj.Self(), fullPaths.Self())))
}
func (goobj NSWorkspace) IconForFileType(fileType NSString) NSImage {
  return NSImage_(Id(C.NSWorkspace_iconForFileType(goobj.Self(), fileType.Self())))
}
//REJECT: options
//func (goobj NSWorkspace) SetIconForFileOptions(image NSImage, fullPath NSString, options C.NSWorkspaceIconCreationOptions) C.bool {
//  return (C.NSWorkspace_setIconForFileOptions(goobj.Self(), image.Self(), fullPath.Self(), options))
//}
func (goobj NSWorkspace) FileLabels() NSArray {
  return NSArray_(Id(C.NSWorkspace_fileLabels(goobj.Self())))
}
func (goobj NSWorkspace) FileLabelColors() NSArray {
  return NSArray_(Id(C.NSWorkspace_fileLabelColors(goobj.Self())))
}
//REJECT: handler
//func (goobj NSWorkspace) RecycleURLsCompletionHandler(URLs NSArray, handler *INVALID TYPE*)  {
//  C.NSWorkspace_recycleURLsCompletionHandler(goobj.Self(), URLs.Self(), handler)
//}
//REJECT: handler
//func (goobj NSWorkspace) DuplicateURLsCompletionHandler(URLs NSArray, handler *INVALID TYPE*)  {
//  C.NSWorkspace_duplicateURLsCompletionHandler(goobj.Self(), URLs.Self(), handler)
//}
func (goobj NSWorkspace) GetFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(fullPath NSString, removableFlag C.bool, writableFlag C.bool, unmountableFlag C.bool, description NSString, fileSystemType NSString) C.bool {
  return (C.NSWorkspace_getFileSystemInfoForPathIsRemovableIsWritableIsUnmountableDescriptionType(goobj.Self(), fullPath.Self(), removableFlag, writableFlag, unmountableFlag, description.Self(), fileSystemType.Self()))
}
//REJECT: tag
//func (goobj NSWorkspace) PerformFileOperationSourceDestinationFilesTag(operation NSString, source NSString, destination NSString, files NSArray, tag C.NSInteger) C.bool {
//  return (C.NSWorkspace_performFileOperationSourceDestinationFilesTag(goobj.Self(), operation.Self(), source.Self(), destination.Self(), files.Self(), tag))
//}
func (goobj NSWorkspace) UnmountAndEjectDeviceAtPath(path NSString) C.bool {
  return (C.NSWorkspace_unmountAndEjectDeviceAtPath(goobj.Self(), path.Self()))
}
func (goobj NSWorkspace) UnmountAndEjectDeviceAtURLError(url NSURL, error NSError) C.bool {
  return (C.NSWorkspace_unmountAndEjectDeviceAtURLError(goobj.Self(), url.Self(), error.Self()))
}
//REJECT: NSInteger requested
//func (goobj NSWorkspace) ExtendPowerOffBy(requested C.NSInteger) C.NSInteger {
//  return (C.NSWorkspace_extendPowerOffBy(goobj.Self(), requested))
//}
func (goobj NSWorkspace) HideOtherApplications()  {
  C.NSWorkspace_hideOtherApplications(goobj.Self())
}
func (goobj NSWorkspace) URLForApplicationWithBundleIdentifier(bundleIdentifier NSString) NSURL {
  return NSURL_(Id(C.NSWorkspace_URLForApplicationWithBundleIdentifier(goobj.Self(), bundleIdentifier.Self())))
}
func (goobj NSWorkspace) URLForApplicationToOpenURL(url NSURL) NSURL {
  return NSURL_(Id(C.NSWorkspace_URLForApplicationToOpenURL(goobj.Self(), url.Self())))
}
func (goobj NSWorkspace) AbsolutePathForAppBundleWithIdentifier(bundleIdentifier NSString) NSString {
  return NSString_(Id(C.NSWorkspace_absolutePathForAppBundleWithIdentifier(goobj.Self(), bundleIdentifier.Self())))
}
//REJECT: options
//func (goobj NSWorkspace) LaunchAppWithBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifier(bundleIdentifier NSString, options C.NSWorkspaceLaunchOptions, descriptor NSAppleEventDescriptor, identifier NSNumber) C.bool {
//  return (C.NSWorkspace_launchAppWithBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifier(goobj.Self(), bundleIdentifier.Self(), options, descriptor.Self(), identifier.Self()))
//}
//REJECT: options
//func (goobj NSWorkspace) OpenURLsWithAppBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifiers(urls NSArray, bundleIdentifier NSString, options C.NSWorkspaceLaunchOptions, descriptor NSAppleEventDescriptor, identifiers NSArray) C.bool {
//  return (C.NSWorkspace_openURLsWithAppBundleIdentifierOptionsAdditionalEventParamDescriptorLaunchIdentifiers(goobj.Self(), urls.Self(), bundleIdentifier.Self(), options, descriptor.Self(), identifiers.Self()))
//}
func (goobj NSWorkspace) FrontmostApplication() NSRunningApplication {
  return NSRunningApplication_(Id(C.NSWorkspace_frontmostApplication(goobj.Self())))
}
func (goobj NSWorkspace) MenuBarOwningApplication() NSRunningApplication {
  return NSRunningApplication_(Id(C.NSWorkspace_menuBarOwningApplication(goobj.Self())))
}
func (goobj NSWorkspace) TypeOfFileError(absoluteFilePath NSString, outError NSError) NSString {
  return NSString_(Id(C.NSWorkspace_typeOfFileError(goobj.Self(), absoluteFilePath.Self(), outError.Self())))
}
func (goobj NSWorkspace) LocalizedDescriptionForType(typeName NSString) NSString {
  return NSString_(Id(C.NSWorkspace_localizedDescriptionForType(goobj.Self(), typeName.Self())))
}
func (goobj NSWorkspace) PreferredFilenameExtensionForType(typeName NSString) NSString {
  return NSString_(Id(C.NSWorkspace_preferredFilenameExtensionForType(goobj.Self(), typeName.Self())))
}
func (goobj NSWorkspace) FilenameExtensionIsValidForType(filenameExtension NSString, typeName NSString) C.bool {
  return (C.NSWorkspace_filenameExtensionIsValidForType(goobj.Self(), filenameExtension.Self(), typeName.Self()))
}
func (goobj NSWorkspace) TypeConformsToType(firstTypeName NSString, secondTypeName NSString) C.bool {
  return (C.NSWorkspace_typeConformsToType(goobj.Self(), firstTypeName.Self(), secondTypeName.Self()))
}
func (goobj NSWorkspace) SetDesktopImageURLForScreenOptionsError(url NSURL, screen NSScreen, options NSDictionary, error NSError) C.bool {
  return (C.NSWorkspace_setDesktopImageURLForScreenOptionsError(goobj.Self(), url.Self(), screen.Self(), options.Self(), error.Self()))
}
func (goobj NSWorkspace) DesktopImageURLForScreen(screen NSScreen) NSURL {
  return NSURL_(Id(C.NSWorkspace_desktopImageURLForScreen(goobj.Self(), screen.Self())))
}
func (goobj NSWorkspace) DesktopImageOptionsForScreen(screen NSScreen) NSDictionary {
  return NSDictionary_(Id(C.NSWorkspace_desktopImageOptionsForScreen(goobj.Self(), screen.Self())))
}
func (goobj NSWorkspace) RunningApplications() NSArray {
  return NSArray_(Id(C.NSWorkspace_runningApplications(goobj.Self())))
}
func NSWorkspace_sharedWorkspace() NSWorkspace {
  return NSWorkspace_(Id(C.NSWorkspace__sharedWorkspace()))
}
type NSRunningApplication struct {
  NSObject
}
func NSRunningApplication_(i Id) NSRunningApplication {
  return NSRunningApplication{ NSObject_(i) }
}
func NSRunningApplication_init() NSRunningApplication {
  p := Id(C.NSRunningApplication_init())
  return NSRunningApplication_(p)
}
func (goobj NSRunningApplication) Hide() C.bool {
  return (C.NSRunningApplication_hide(goobj.Self()))
}
func (goobj NSRunningApplication) Unhide() C.bool {
  return (C.NSRunningApplication_unhide(goobj.Self()))
}
//REJECT: options
//func (goobj NSRunningApplication) ActivateWithOptions(options C.NSApplicationActivationOptions) C.bool {
//  return (C.NSRunningApplication_activateWithOptions(goobj.Self(), options))
//}
func (goobj NSRunningApplication) Terminate() C.bool {
  return (C.NSRunningApplication_terminate(goobj.Self()))
}
func (goobj NSRunningApplication) ForceTerminate() C.bool {
  return (C.NSRunningApplication_forceTerminate(goobj.Self()))
}
func (goobj NSRunningApplication) IsTerminated() C.char {
  return (C.NSRunningApplication_isTerminated(goobj.Self()))
}
func (goobj NSRunningApplication) IsFinishedLaunching() C.char {
  return (C.NSRunningApplication_isFinishedLaunching(goobj.Self()))
}
func (goobj NSRunningApplication) IsHidden() C.char {
  return (C.NSRunningApplication_isHidden(goobj.Self()))
}
func (goobj NSRunningApplication) IsActive() C.char {
  return (C.NSRunningApplication_isActive(goobj.Self()))
}
func (goobj NSRunningApplication) OwnsMenuBar() C.bool {
  return (C.NSRunningApplication_ownsMenuBar(goobj.Self()))
}
//REJECT: NSApplicationActivationPolicy
//func (goobj NSRunningApplication) ActivationPolicy() C.NSApplicationActivationPolicy {
//  return (C.NSRunningApplication_activationPolicy(goobj.Self()))
//}
func (goobj NSRunningApplication) LocalizedName() NSString {
  return NSString_(Id(C.NSRunningApplication_localizedName(goobj.Self())))
}
func (goobj NSRunningApplication) BundleIdentifier() NSString {
  return NSString_(Id(C.NSRunningApplication_bundleIdentifier(goobj.Self())))
}
func (goobj NSRunningApplication) BundleURL() NSURL {
  return NSURL_(Id(C.NSRunningApplication_bundleURL(goobj.Self())))
}
func (goobj NSRunningApplication) ExecutableURL() NSURL {
  return NSURL_(Id(C.NSRunningApplication_executableURL(goobj.Self())))
}
//REJECT: pid_t
//func (goobj NSRunningApplication) ProcessIdentifier() C.pid_t {
//  return (C.NSRunningApplication_processIdentifier(goobj.Self()))
//}
func (goobj NSRunningApplication) LaunchDate() NSDate {
  return NSDate_(Id(C.NSRunningApplication_launchDate(goobj.Self())))
}
func (goobj NSRunningApplication) Icon() NSImage {
  return NSImage_(Id(C.NSRunningApplication_icon(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSRunningApplication) ExecutableArchitecture() C.NSInteger {
//  return (C.NSRunningApplication_executableArchitecture(goobj.Self()))
//}
func NSRunningApplication_runningApplicationsWithBundleIdentifier(bundleIdentifier NSString) NSArray {
  return NSArray_(Id(C.NSRunningApplication__runningApplicationsWithBundleIdentifier(bundleIdentifier.Self())))
}
//REJECT: pid
//func NSRunningApplication_runningApplicationWithProcessIdentifier(pid C.pid_t) NSRunningApplication {
//  return NSRunningApplication_(Id(C.NSRunningApplication__runningApplicationWithProcessIdentifier(pid)))
//}
func NSRunningApplication_currentApplication() NSRunningApplication {
  return NSRunningApplication_(Id(C.NSRunningApplication__currentApplication()))
}
func NSRunningApplication_terminateAutomaticallyTerminableApplications()  {
  C.NSRunningApplication__terminateAutomaticallyTerminableApplications()
}
type NSApplication struct {
  NSResponder
}
func NSApplication_(i Id) NSApplication {
  return NSApplication{ NSResponder_(i) }
}
func NSApplication_init() NSApplication {
  p := Id(C.NSApplication_init())
  return NSApplication_(p)
}
func (goobj NSApplication) SetDelegate(anObject Id)  {
  C.NSApplication_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSApplication) Delegate() Id {
  return Id_(C.NSApplication_delegate(goobj.Self()))
}
func (goobj NSApplication) Context() NSGraphicsContext {
  return NSGraphicsContext_(Id(C.NSApplication_context(goobj.Self())))
}
func (goobj NSApplication) Hide(sender Id)  {
  C.NSApplication_hide(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) Unhide(sender Id)  {
  C.NSApplication_unhide(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) UnhideWithoutActivation()  {
  C.NSApplication_unhideWithoutActivation(goobj.Self())
}
//REJECT: windowNum
//func (goobj NSApplication) WindowWithWindowNumber(windowNum C.NSInteger) NSWindow {
//  return NSWindow_(Id(C.NSApplication_windowWithWindowNumber(goobj.Self(), windowNum)))
//}
func (goobj NSApplication) MainWindow() NSWindow {
  return NSWindow_(Id(C.NSApplication_mainWindow(goobj.Self())))
}
func (goobj NSApplication) KeyWindow() NSWindow {
  return NSWindow_(Id(C.NSApplication_keyWindow(goobj.Self())))
}
func (goobj NSApplication) IsActive() C.bool {
  return (C.NSApplication_isActive(goobj.Self()))
}
func (goobj NSApplication) IsHidden() C.bool {
  return (C.NSApplication_isHidden(goobj.Self()))
}
func (goobj NSApplication) IsRunning() C.bool {
  return (C.NSApplication_isRunning(goobj.Self()))
}
func (goobj NSApplication) Deactivate()  {
  C.NSApplication_deactivate(goobj.Self())
}
func (goobj NSApplication) ActivateIgnoringOtherApps(flag C.bool)  {
  C.NSApplication_activateIgnoringOtherApps(goobj.Self(), flag)
}
func (goobj NSApplication) HideOtherApplications(sender Id)  {
  C.NSApplication_hideOtherApplications(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) UnhideAllApplications(sender Id)  {
  C.NSApplication_unhideAllApplications(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) FinishLaunching()  {
  C.NSApplication_finishLaunching(goobj.Self())
}
func (goobj NSApplication) Run()  {
  C.NSApplication_run(goobj.Self())
}
//REJECT: NSInteger
//func (goobj NSApplication) RunModalForWindow(theWindow NSWindow) C.NSInteger {
//  return (C.NSApplication_runModalForWindow(goobj.Self(), theWindow.Self()))
//}
func (goobj NSApplication) Stop(sender Id)  {
  C.NSApplication_stop(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) StopModal()  {
  C.NSApplication_stopModal(goobj.Self())
}
//REJECT: returnCode
//func (goobj NSApplication) StopModalWithCode(returnCode C.NSInteger)  {
//  C.NSApplication_stopModalWithCode(goobj.Self(), returnCode)
//}
func (goobj NSApplication) AbortModal()  {
  C.NSApplication_abortModal(goobj.Self())
}
func (goobj NSApplication) ModalWindow() NSWindow {
  return NSWindow_(Id(C.NSApplication_modalWindow(goobj.Self())))
}
//REJECT: NSModalSession
//func (goobj NSApplication) BeginModalSessionForWindow(theWindow NSWindow) C.NSModalSession {
//  return (C.NSApplication_beginModalSessionForWindow(goobj.Self(), theWindow.Self()))
//}
//REJECT: NSInteger session
//func (goobj NSApplication) RunModalSession(session C.NSModalSession) C.NSInteger {
//  return (C.NSApplication_runModalSession(goobj.Self(), session))
//}
//REJECT: session
//func (goobj NSApplication) EndModalSession(session C.NSModalSession)  {
//  C.NSApplication_endModalSession(goobj.Self(), session)
//}
func (goobj NSApplication) Terminate(sender Id)  {
  C.NSApplication_terminate(goobj.Self(), unsafe.Pointer(sender))
}
//REJECT: NSInteger requestType
//func (goobj NSApplication) RequestUserAttention(requestType C.NSRequestUserAttentionType) C.NSInteger {
//  return (C.NSApplication_requestUserAttention(goobj.Self(), requestType))
//}
//REJECT: request
//func (goobj NSApplication) CancelUserAttentionRequest(request C.NSInteger)  {
//  C.NSApplication_cancelUserAttentionRequest(goobj.Self(), request)
//}
func (goobj NSApplication) NextEventMatchingMaskUntilDateInModeDequeue(mask C.uint, expiration NSDate, mode NSString, deqFlag C.bool) NSEvent {
  return NSEvent_(Id(C.NSApplication_nextEventMatchingMaskUntilDateInModeDequeue(goobj.Self(), mask, expiration.Self(), mode.Self(), deqFlag)))
}
func (goobj NSApplication) DiscardEventsMatchingMaskBeforeEvent(mask C.uint, lastEvent NSEvent)  {
  C.NSApplication_discardEventsMatchingMaskBeforeEvent(goobj.Self(), mask, lastEvent.Self())
}
func (goobj NSApplication) PostEventAtStart(event NSEvent, flag C.bool)  {
  C.NSApplication_postEventAtStart(goobj.Self(), event.Self(), flag)
}
func (goobj NSApplication) CurrentEvent() NSEvent {
  return NSEvent_(Id(C.NSApplication_currentEvent(goobj.Self())))
}
func (goobj NSApplication) SendEvent(theEvent NSEvent)  {
  C.NSApplication_sendEvent(goobj.Self(), theEvent.Self())
}
func (goobj NSApplication) PreventWindowOrdering()  {
  C.NSApplication_preventWindowOrdering(goobj.Self())
}
//REJECT: aSelector
//func (goobj NSApplication) MakeWindowsPerformInOrder(aSelector C.SEL, flag C.bool) NSWindow {
//  return NSWindow_(Id(C.NSApplication_makeWindowsPerformInOrder(goobj.Self(), aSelector, flag)))
//}
func (goobj NSApplication) Windows() NSArray {
  return NSArray_(Id(C.NSApplication_windows(goobj.Self())))
}
func (goobj NSApplication) SetWindowsNeedUpdate(needUpdate C.bool)  {
  C.NSApplication_setWindowsNeedUpdate(goobj.Self(), needUpdate)
}
func (goobj NSApplication) UpdateWindows()  {
  C.NSApplication_updateWindows(goobj.Self())
}
func (goobj NSApplication) SetMainMenu(aMenu NSMenu)  {
  C.NSApplication_setMainMenu(goobj.Self(), aMenu.Self())
}
func (goobj NSApplication) MainMenu() NSMenu {
  return NSMenu_(Id(C.NSApplication_mainMenu(goobj.Self())))
}
func (goobj NSApplication) SetHelpMenu(helpMenu NSMenu)  {
  C.NSApplication_setHelpMenu(goobj.Self(), helpMenu.Self())
}
func (goobj NSApplication) HelpMenu() NSMenu {
  return NSMenu_(Id(C.NSApplication_helpMenu(goobj.Self())))
}
func (goobj NSApplication) SetApplicationIconImage(image NSImage)  {
  C.NSApplication_setApplicationIconImage(goobj.Self(), image.Self())
}
func (goobj NSApplication) ApplicationIconImage() NSImage {
  return NSImage_(Id(C.NSApplication_applicationIconImage(goobj.Self())))
}
//REJECT: NSApplicationActivationPolicy
//func (goobj NSApplication) ActivationPolicy() C.NSApplicationActivationPolicy {
//  return (C.NSApplication_activationPolicy(goobj.Self()))
//}
//REJECT: activationPolicy
//func (goobj NSApplication) SetActivationPolicy(activationPolicy C.NSApplicationActivationPolicy) C.bool {
//  return (C.NSApplication_setActivationPolicy(goobj.Self(), activationPolicy))
//}
func (goobj NSApplication) DockTile() NSDockTile {
  return NSDockTile_(Id(C.NSApplication_dockTile(goobj.Self())))
}
//REJECT: theAction
//func (goobj NSApplication) SendActionToFrom(theAction C.SEL, theTarget Id, sender Id) C.bool {
//  return (C.NSApplication_sendActionToFrom(goobj.Self(), theAction, unsafe.Pointer(theTarget), unsafe.Pointer(sender)))
//}
//REJECT: theAction
//func (goobj NSApplication) TargetForAction(theAction C.SEL) Id {
//  return Id_(C.NSApplication_targetForAction(goobj.Self(), theAction))
//}
//REJECT: theAction
//func (goobj NSApplication) TargetForActionToFrom(theAction C.SEL, theTarget Id, sender Id) Id {
//  return Id_(C.NSApplication_targetForActionToFrom(goobj.Self(), theAction, unsafe.Pointer(theTarget), unsafe.Pointer(sender)))
//}
//REJECT: anAction
//func (goobj NSApplication) TryToPerformWith(anAction C.SEL, anObject Id) C.bool {
//  return (C.NSApplication_tryToPerformWith(goobj.Self(), anAction, unsafe.Pointer(anObject)))
//}
func (goobj NSApplication) ValidRequestorForSendTypeReturnType(sendType NSString, returnType NSString) Id {
  return Id_(C.NSApplication_validRequestorForSendTypeReturnType(goobj.Self(), sendType.Self(), returnType.Self()))
}
func (goobj NSApplication) ReportException(theException NSException)  {
  C.NSApplication_reportException(goobj.Self(), theException.Self())
}
func (goobj NSApplication) ReplyToApplicationShouldTerminate(shouldTerminate C.bool)  {
  C.NSApplication_replyToApplicationShouldTerminate(goobj.Self(), shouldTerminate)
}
//REJECT: reply
//func (goobj NSApplication) ReplyToOpenOrPrint(reply C.NSApplicationDelegateReply)  {
//  C.NSApplication_replyToOpenOrPrint(goobj.Self(), reply)
//}
func (goobj NSApplication) OrderFrontCharacterPalette(sender Id)  {
  C.NSApplication_orderFrontCharacterPalette(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) PresentationOptions() C.NSApplicationPresentationOptions {
  return (C.NSApplication_presentationOptions(goobj.Self()))
}
func (goobj NSApplication) SetPresentationOptions(newOptions C.NSApplicationPresentationOptions)  {
  C.NSApplication_setPresentationOptions(goobj.Self(), newOptions)
}
func (goobj NSApplication) CurrentSystemPresentationOptions() C.NSApplicationPresentationOptions {
  return (C.NSApplication_currentSystemPresentationOptions(goobj.Self()))
}
func (goobj NSApplication) OcclusionState() C.NSApplicationOcclusionState {
  return (C.NSApplication_occlusionState(goobj.Self()))
}
func (goobj NSApplication) SetWindowsMenu(aMenu NSMenu)  {
  C.NSApplication_setWindowsMenu(goobj.Self(), aMenu.Self())
}
func (goobj NSApplication) WindowsMenu() NSMenu {
  return NSMenu_(Id(C.NSApplication_windowsMenu(goobj.Self())))
}
func (goobj NSApplication) ArrangeInFront(sender Id)  {
  C.NSApplication_arrangeInFront(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) RemoveWindowsItem(win NSWindow)  {
  C.NSApplication_removeWindowsItem(goobj.Self(), win.Self())
}
func (goobj NSApplication) AddWindowsItemTitleFilename(win NSWindow, aString NSString, isFilename C.bool)  {
  C.NSApplication_addWindowsItemTitleFilename(goobj.Self(), win.Self(), aString.Self(), isFilename)
}
func (goobj NSApplication) ChangeWindowsItemTitleFilename(win NSWindow, aString NSString, isFilename C.bool)  {
  C.NSApplication_changeWindowsItemTitleFilename(goobj.Self(), win.Self(), aString.Self(), isFilename)
}
func (goobj NSApplication) UpdateWindowsItem(win NSWindow)  {
  C.NSApplication_updateWindowsItem(goobj.Self(), win.Self())
}
func (goobj NSApplication) MiniaturizeAll(sender Id)  {
  C.NSApplication_miniaturizeAll(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) IsFullKeyboardAccessEnabled() C.bool {
  return (C.NSApplication_isFullKeyboardAccessEnabled(goobj.Self()))
}
func (goobj NSApplication) SetServicesMenu(aMenu NSMenu)  {
  C.NSApplication_setServicesMenu(goobj.Self(), aMenu.Self())
}
func (goobj NSApplication) ServicesMenu() NSMenu {
  return NSMenu_(Id(C.NSApplication_servicesMenu(goobj.Self())))
}
func (goobj NSApplication) RegisterServicesMenuSendTypesReturnTypes(sendTypes NSArray, returnTypes NSArray)  {
  C.NSApplication_registerServicesMenuSendTypesReturnTypes(goobj.Self(), sendTypes.Self(), returnTypes.Self())
}
func (goobj NSApplication) SetServicesProvider(provider Id)  {
  C.NSApplication_setServicesProvider(goobj.Self(), unsafe.Pointer(provider))
}
func (goobj NSApplication) ServicesProvider() Id {
  return Id_(C.NSApplication_servicesProvider(goobj.Self()))
}
func (goobj NSApplication) OrderFrontStandardAboutPanel(sender Id)  {
  C.NSApplication_orderFrontStandardAboutPanel(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSApplication) OrderFrontStandardAboutPanelWithOptions(optionsDictionary NSDictionary)  {
  C.NSApplication_orderFrontStandardAboutPanelWithOptions(goobj.Self(), optionsDictionary.Self())
}
//REJECT: NSUserInterfaceLayoutDirection
//func (goobj NSApplication) UserInterfaceLayoutDirection() C.NSUserInterfaceLayoutDirection {
//  return (C.NSApplication_userInterfaceLayoutDirection(goobj.Self()))
//}
func (goobj NSApplication) DisableRelaunchOnLogin()  {
  C.NSApplication_disableRelaunchOnLogin(goobj.Self())
}
func (goobj NSApplication) EnableRelaunchOnLogin()  {
  C.NSApplication_enableRelaunchOnLogin(goobj.Self())
}
//REJECT: types
//func (goobj NSApplication) RegisterForRemoteNotificationTypes(types C.NSRemoteNotificationType)  {
//  C.NSApplication_registerForRemoteNotificationTypes(goobj.Self(), types)
//}
func (goobj NSApplication) UnregisterForRemoteNotifications()  {
  C.NSApplication_unregisterForRemoteNotifications(goobj.Self())
}
//REJECT: NSRemoteNotificationType
//func (goobj NSApplication) EnabledRemoteNotificationTypes() C.NSRemoteNotificationType {
//  return (C.NSApplication_enabledRemoteNotificationTypes(goobj.Self()))
//}
func NSApplication_sharedApplication() NSApplication {
  return NSApplication_(Id(C.NSApplication__sharedApplication()))
}
//REJECT: selector
//func NSApplication_detachDrawingThreadToTargetWithObject(selector C.SEL, target Id, argument Id)  {
//  C.NSApplication__detachDrawingThreadToTargetWithObject(selector, unsafe.Pointer(target), unsafe.Pointer(argument))
//}
type NSEnumerator struct {
  NSObject
}
func NSEnumerator_(i Id) NSEnumerator {
  return NSEnumerator{ NSObject_(i) }
}
func NSEnumerator_init() NSEnumerator {
  p := Id(C.NSEnumerator_init())
  return NSEnumerator_(p)
}
func (goobj NSEnumerator) NextObject() Id {
  return Id_(C.NSEnumerator_nextObject(goobj.Self()))
}
func (goobj NSEnumerator) AllObjects() NSArray {
  return NSArray_(Id(C.NSEnumerator_allObjects(goobj.Self())))
}

type NSArray struct {
  NSObject
}
func NSArray_(i Id) NSArray {
  return NSArray{ NSObject_(i) }
}
func (goobj NSArray) Count() C.uint {
  return (C.NSArray_count(goobj.Self()))
}
func (goobj NSArray) ObjectAtIndex(index C.uint) Id {
  return Id_(C.NSArray_objectAtIndex(goobj.Self(), index))
}
func (goobj NSArray) ArrayByAddingObject(anObject Id) NSArray {
  return NSArray_(Id(C.NSArray_arrayByAddingObject(goobj.Self(), unsafe.Pointer(anObject))))
}
func (goobj NSArray) ArrayByAddingObjectsFromArray(otherArray NSArray) NSArray {
  return NSArray_(Id(C.NSArray_arrayByAddingObjectsFromArray(goobj.Self(), otherArray.Self())))
}
func (goobj NSArray) ComponentsJoinedByString(separator NSString) NSString {
  return NSString_(Id(C.NSArray_componentsJoinedByString(goobj.Self(), separator.Self())))
}
func (goobj NSArray) ContainsObject(anObject Id) C.bool {
  return (C.NSArray_containsObject(goobj.Self(), unsafe.Pointer(anObject)))
}
func (goobj NSArray) Description() NSString {
  return NSString_(Id(C.NSArray_description(goobj.Self())))
}
func (goobj NSArray) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSArray_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func (goobj NSArray) DescriptionWithLocaleIndent(locale Id, level C.uint) NSString {
  return NSString_(Id(C.NSArray_descriptionWithLocaleIndent(goobj.Self(), unsafe.Pointer(locale), level)))
}
func (goobj NSArray) FirstObjectCommonWithArray(otherArray NSArray) Id {
  return Id_(C.NSArray_firstObjectCommonWithArray(goobj.Self(), otherArray.Self()))
}
//REJECT: range
//func (goobj NSArray) GetObjectsRange(objects Id, range_ C.NSRange)  {
//  C.NSArray_getObjectsRange(goobj.Self(), unsafe.Pointer(objects), range_)
//}
func (goobj NSArray) IndexOfObject(anObject Id) C.uint {
  return (C.NSArray_indexOfObject(goobj.Self(), unsafe.Pointer(anObject)))
}
//REJECT: range
//func (goobj NSArray) IndexOfObjectInRange(anObject Id, range_ C.NSRange) C.uint {
//  return (C.NSArray_indexOfObjectInRange(goobj.Self(), unsafe.Pointer(anObject), range_))
//}
func (goobj NSArray) IndexOfObjectIdenticalTo(anObject Id) C.uint {
  return (C.NSArray_indexOfObjectIdenticalTo(goobj.Self(), unsafe.Pointer(anObject)))
}
//REJECT: range
//func (goobj NSArray) IndexOfObjectIdenticalToInRange(anObject Id, range_ C.NSRange) C.uint {
//  return (C.NSArray_indexOfObjectIdenticalToInRange(goobj.Self(), unsafe.Pointer(anObject), range_))
//}
func (goobj NSArray) IsEqualToArray(otherArray NSArray) C.bool {
  return (C.NSArray_isEqualToArray(goobj.Self(), otherArray.Self()))
}
func (goobj NSArray) FirstObject() Id {
  return Id_(C.NSArray_firstObject(goobj.Self()))
}
func (goobj NSArray) LastObject() Id {
  return Id_(C.NSArray_lastObject(goobj.Self()))
}
func (goobj NSArray) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSArray_objectEnumerator(goobj.Self())))
}
func (goobj NSArray) ReverseObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSArray_reverseObjectEnumerator(goobj.Self())))
}
func (goobj NSArray) SortedArrayHint() NSData {
  return NSData_(Id(C.NSArray_sortedArrayHint(goobj.Self())))
}
//REJECT: comparator
//func (goobj NSArray) SortedArrayUsingFunctionContext(comparator C.NSInteger, context unsafe.Pointer) NSArray {
//  return NSArray_(Id(C.NSArray_sortedArrayUsingFunctionContext(goobj.Self(), comparator, context)))
//}
//REJECT: comparator
//func (goobj NSArray) SortedArrayUsingFunctionContextHint(comparator C.NSInteger, context unsafe.Pointer, hint NSData) NSArray {
//  return NSArray_(Id(C.NSArray_sortedArrayUsingFunctionContextHint(goobj.Self(), comparator, context, hint.Self())))
//}
//REJECT: comparator
//func (goobj NSArray) SortedArrayUsingSelector(comparator C.SEL) NSArray {
//  return NSArray_(Id(C.NSArray_sortedArrayUsingSelector(goobj.Self(), comparator)))
//}
//REJECT: range
//func (goobj NSArray) SubarrayWithRange(range_ C.NSRange) NSArray {
//  return NSArray_(Id(C.NSArray_subarrayWithRange(goobj.Self(), range_)))
//}
func (goobj NSArray) WriteToFileAtomically(path NSString, useAuxiliaryFile C.bool) C.bool {
  return (C.NSArray_writeToFileAtomically(goobj.Self(), path.Self(), useAuxiliaryFile))
}
func (goobj NSArray) WriteToURLAtomically(url NSURL, atomically C.bool) C.bool {
  return (C.NSArray_writeToURLAtomically(goobj.Self(), url.Self(), atomically))
}
//REJECT: aSelector
//func (goobj NSArray) MakeObjectsPerformSelector(aSelector C.SEL)  {
//  C.NSArray_makeObjectsPerformSelector(goobj.Self(), aSelector)
//}
//REJECT: aSelector
//func (goobj NSArray) MakeObjectsPerformSelectorWithObject(aSelector C.SEL, argument Id)  {
//  C.NSArray_makeObjectsPerformSelectorWithObject(goobj.Self(), aSelector, unsafe.Pointer(argument))
//}
func (goobj NSArray) ObjectsAtIndexes(indexes NSIndexSet) NSArray {
  return NSArray_(Id(C.NSArray_objectsAtIndexes(goobj.Self(), indexes.Self())))
}
func (goobj NSArray) ObjectAtIndexedSubscript(idx C.uint) Id {
  return Id_(C.NSArray_objectAtIndexedSubscript(goobj.Self(), idx))
}
//REJECT: block
//func (goobj NSArray) EnumerateObjectsUsingBlock(block *INVALID TYPE*)  {
//  C.NSArray_enumerateObjectsUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSArray) EnumerateObjectsWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSArray_enumerateObjectsWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//REJECT: opts block
//func (goobj NSArray) EnumerateObjectsAtIndexesOptionsUsingBlock(s NSIndexSet, opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSArray_enumerateObjectsAtIndexesOptionsUsingBlock(goobj.Self(), s.Self(), opts, block)
//}
//unacceptalble-method
//func (goobj NSArray) IndexOfObjectPassingTest(predicate C.bool) C.uint {
//  return (C.NSArray_indexOfObjectPassingTest(goobj.Self(), predicate))
//}
//REJECT: opts
//func (goobj NSArray) IndexOfObjectWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSArray_indexOfObjectWithOptionsPassingTest(goobj.Self(), opts, predicate))
//}
//REJECT: opts
//func (goobj NSArray) IndexOfObjectAtIndexesOptionsPassingTest(s NSIndexSet, opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSArray_indexOfObjectAtIndexesOptionsPassingTest(goobj.Self(), s.Self(), opts, predicate))
//}
//unacceptalble-method
//func (goobj NSArray) IndexesOfObjectsPassingTest(predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSArray_indexesOfObjectsPassingTest(goobj.Self(), predicate)))
//}
//REJECT: opts
//func (goobj NSArray) IndexesOfObjectsWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSArray_indexesOfObjectsWithOptionsPassingTest(goobj.Self(), opts, predicate)))
//}
//REJECT: opts
//func (goobj NSArray) IndexesOfObjectsAtIndexesOptionsPassingTest(s NSIndexSet, opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSArray_indexesOfObjectsAtIndexesOptionsPassingTest(goobj.Self(), s.Self(), opts, predicate)))
//}
//REJECT: cmptr
//func (goobj NSArray) SortedArrayUsingComparator(cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSArray_sortedArrayUsingComparator(goobj.Self(), cmptr)))
//}
//REJECT: opts cmptr
//func (goobj NSArray) SortedArrayWithOptionsUsingComparator(opts C.NSSortOptions, cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSArray_sortedArrayWithOptionsUsingComparator(goobj.Self(), opts, cmptr)))
//}
//REJECT: r cmp
//func (goobj NSArray) IndexOfObjectInSortedRangeOptionsUsingComparator(obj Id, r C.NSRange, opts C.NSBinarySearchingOptions, cmp C.NSComparator) C.uint {
//  return (C.NSArray_indexOfObjectInSortedRangeOptionsUsingComparator(goobj.Self(), unsafe.Pointer(obj), r, opts, cmp))
//}
func NSArray_init() NSArray {
  return NSArray_(Id(C.NSArray_init()))
}
func NSArray_initWithObjectsCount(objects Id, cnt C.uint) NSArray {
  return NSArray_(Id(C.NSArray_initWithObjectsCount(unsafe.Pointer(objects), cnt)))
}
func NSArray_initWithObjects(firstObj Id) NSArray {
  return NSArray_(Id(C.NSArray_initWithObjects(unsafe.Pointer(firstObj))))
}
func NSArray_initWithArray(array NSArray) NSArray {
  return NSArray_(Id(C.NSArray_initWithArray(array.Self())))
}
func NSArray_initWithArrayCopyItems(array NSArray, flag C.bool) NSArray {
  return NSArray_(Id(C.NSArray_initWithArrayCopyItems(array.Self(), flag)))
}
func NSArray_initWithContentsOfFile(path NSString) NSArray {
  return NSArray_(Id(C.NSArray_initWithContentsOfFile(path.Self())))
}
func NSArray_initWithContentsOfURL(url NSURL) NSArray {
  return NSArray_(Id(C.NSArray_initWithContentsOfURL(url.Self())))
}
func (goobj NSArray) PathsMatchingExtensions(filterTypes NSArray) NSArray {
  return NSArray_(Id(C.NSArray_pathsMatchingExtensions(goobj.Self(), filterTypes.Self())))
}
func (goobj NSArray) ValueForKey(key NSString) Id {
  return Id_(C.NSArray_valueForKey(goobj.Self(), key.Self()))
}
func (goobj NSArray) SetValueForKey(value Id, key NSString)  {
  C.NSArray_setValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSArray) AddObserverToObjectsAtIndexesForKeyPathOptionsContext(observer NSObject, indexes NSIndexSet, keyPath NSString, options C.NSKeyValueObservingOptions, context unsafe.Pointer)  {
  C.NSArray_addObserverToObjectsAtIndexesForKeyPathOptionsContext(goobj.Self(), observer.Self(), indexes.Self(), keyPath.Self(), options, context)
}
func (goobj NSArray) RemoveObserverFromObjectsAtIndexesForKeyPathContext(observer NSObject, indexes NSIndexSet, keyPath NSString, context unsafe.Pointer)  {
  C.NSArray_removeObserverFromObjectsAtIndexesForKeyPathContext(goobj.Self(), observer.Self(), indexes.Self(), keyPath.Self(), context)
}
func (goobj NSArray) RemoveObserverFromObjectsAtIndexesForKeyPath(observer NSObject, indexes NSIndexSet, keyPath NSString)  {
  C.NSArray_removeObserverFromObjectsAtIndexesForKeyPath(goobj.Self(), observer.Self(), indexes.Self(), keyPath.Self())
}
func (goobj NSArray) AddObserverForKeyPathOptionsContext(observer NSObject, keyPath NSString, options C.NSKeyValueObservingOptions, context unsafe.Pointer)  {
  C.NSArray_addObserverForKeyPathOptionsContext(goobj.Self(), observer.Self(), keyPath.Self(), options, context)
}
func (goobj NSArray) RemoveObserverForKeyPathContext(observer NSObject, keyPath NSString, context unsafe.Pointer)  {
  C.NSArray_removeObserverForKeyPathContext(goobj.Self(), observer.Self(), keyPath.Self(), context)
}
func (goobj NSArray) RemoveObserverForKeyPath(observer NSObject, keyPath NSString)  {
  C.NSArray_removeObserverForKeyPath(goobj.Self(), observer.Self(), keyPath.Self())
}
func (goobj NSArray) SortedArrayUsingDescriptors(sortDescriptors NSArray) NSArray {
  return NSArray_(Id(C.NSArray_sortedArrayUsingDescriptors(goobj.Self(), sortDescriptors.Self())))
}
func (goobj NSArray) FilteredArrayUsingPredicate(predicate NSPredicate) NSArray {
  return NSArray_(Id(C.NSArray_filteredArrayUsingPredicate(goobj.Self(), predicate.Self())))
}

type NSMutableArray struct {
  NSArray
}
func NSMutableArray_(i Id) NSMutableArray {
  return NSMutableArray{ NSArray_(i) }
}
func (goobj NSMutableArray) AddObject(anObject Id)  {
  C.NSMutableArray_addObject(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSMutableArray) InsertObjectAtIndex(anObject Id, index C.uint)  {
  C.NSMutableArray_insertObjectAtIndex(goobj.Self(), unsafe.Pointer(anObject), index)
}
func (goobj NSMutableArray) RemoveLastObject()  {
  C.NSMutableArray_removeLastObject(goobj.Self())
}
func (goobj NSMutableArray) RemoveObjectAtIndex(index C.uint)  {
  C.NSMutableArray_removeObjectAtIndex(goobj.Self(), index)
}
func (goobj NSMutableArray) ReplaceObjectAtIndexWithObject(index C.uint, anObject Id)  {
  C.NSMutableArray_replaceObjectAtIndexWithObject(goobj.Self(), index, unsafe.Pointer(anObject))
}
func (goobj NSMutableArray) AddObjectsFromArray(otherArray NSArray)  {
  C.NSMutableArray_addObjectsFromArray(goobj.Self(), otherArray.Self())
}
func (goobj NSMutableArray) ExchangeObjectAtIndexWithObjectAtIndex(idx1 C.uint, idx2 C.uint)  {
  C.NSMutableArray_exchangeObjectAtIndexWithObjectAtIndex(goobj.Self(), idx1, idx2)
}
func (goobj NSMutableArray) RemoveAllObjects()  {
  C.NSMutableArray_removeAllObjects(goobj.Self())
}
//REJECT: range
//func (goobj NSMutableArray) RemoveObjectInRange(anObject Id, range_ C.NSRange)  {
//  C.NSMutableArray_removeObjectInRange(goobj.Self(), unsafe.Pointer(anObject), range_)
//}
func (goobj NSMutableArray) RemoveObject(anObject Id)  {
  C.NSMutableArray_removeObject(goobj.Self(), unsafe.Pointer(anObject))
}
//REJECT: range
//func (goobj NSMutableArray) RemoveObjectIdenticalToInRange(anObject Id, range_ C.NSRange)  {
//  C.NSMutableArray_removeObjectIdenticalToInRange(goobj.Self(), unsafe.Pointer(anObject), range_)
//}
func (goobj NSMutableArray) RemoveObjectIdenticalTo(anObject Id)  {
  C.NSMutableArray_removeObjectIdenticalTo(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSMutableArray) RemoveObjectsFromIndicesNumIndices(indices C.uint, cnt C.uint)  {
  C.NSMutableArray_removeObjectsFromIndicesNumIndices(goobj.Self(), indices, cnt)
}
func (goobj NSMutableArray) RemoveObjectsInArray(otherArray NSArray)  {
  C.NSMutableArray_removeObjectsInArray(goobj.Self(), otherArray.Self())
}
//REJECT: range
//func (goobj NSMutableArray) RemoveObjectsInRange(range_ C.NSRange)  {
//  C.NSMutableArray_removeObjectsInRange(goobj.Self(), range_)
//}
//REJECT: range otherRange
//func (goobj NSMutableArray) ReplaceObjectsInRangeWithObjectsFromArrayRange(range_ C.NSRange, otherArray NSArray, otherRange C.NSRange)  {
//  C.NSMutableArray_replaceObjectsInRangeWithObjectsFromArrayRange(goobj.Self(), range_, otherArray.Self(), otherRange)
//}
//REJECT: range
//func (goobj NSMutableArray) ReplaceObjectsInRangeWithObjectsFromArray(range_ C.NSRange, otherArray NSArray)  {
//  C.NSMutableArray_replaceObjectsInRangeWithObjectsFromArray(goobj.Self(), range_, otherArray.Self())
//}
func (goobj NSMutableArray) SetArray(otherArray NSArray)  {
  C.NSMutableArray_setArray(goobj.Self(), otherArray.Self())
}
//REJECT: compare
//func (goobj NSMutableArray) SortUsingFunctionContext(compare C.NSInteger, context unsafe.Pointer)  {
//  C.NSMutableArray_sortUsingFunctionContext(goobj.Self(), compare, context)
//}
//REJECT: comparator
//func (goobj NSMutableArray) SortUsingSelector(comparator C.SEL)  {
//  C.NSMutableArray_sortUsingSelector(goobj.Self(), comparator)
//}
func (goobj NSMutableArray) InsertObjectsAtIndexes(objects NSArray, indexes NSIndexSet)  {
  C.NSMutableArray_insertObjectsAtIndexes(goobj.Self(), objects.Self(), indexes.Self())
}
func (goobj NSMutableArray) RemoveObjectsAtIndexes(indexes NSIndexSet)  {
  C.NSMutableArray_removeObjectsAtIndexes(goobj.Self(), indexes.Self())
}
func (goobj NSMutableArray) ReplaceObjectsAtIndexesWithObjects(indexes NSIndexSet, objects NSArray)  {
  C.NSMutableArray_replaceObjectsAtIndexesWithObjects(goobj.Self(), indexes.Self(), objects.Self())
}
func (goobj NSMutableArray) SetObjectAtIndexedSubscript(obj Id, idx C.uint)  {
  C.NSMutableArray_setObjectAtIndexedSubscript(goobj.Self(), unsafe.Pointer(obj), idx)
}
//REJECT: cmptr
//func (goobj NSMutableArray) SortUsingComparator(cmptr C.NSComparator)  {
//  C.NSMutableArray_sortUsingComparator(goobj.Self(), cmptr)
//}
//REJECT: opts cmptr
//func (goobj NSMutableArray) SortWithOptionsUsingComparator(opts C.NSSortOptions, cmptr C.NSComparator)  {
//  C.NSMutableArray_sortWithOptionsUsingComparator(goobj.Self(), opts, cmptr)
//}
func NSMutableArray_init() NSMutableArray {
  return NSMutableArray_(Id(C.NSMutableArray_init()))
}
func NSMutableArray_initWithCapacity(numItems C.uint) NSMutableArray {
  return NSMutableArray_(Id(C.NSMutableArray_initWithCapacity(numItems)))
}
func (goobj NSMutableArray) SortUsingDescriptors(sortDescriptors NSArray)  {
  C.NSMutableArray_sortUsingDescriptors(goobj.Self(), sortDescriptors.Self())
}
func (goobj NSMutableArray) FilterUsingPredicate(predicate NSPredicate)  {
  C.NSMutableArray_filterUsingPredicate(goobj.Self(), predicate.Self())
}

type NSAutoreleasePool struct {
  NSObject
}
func NSAutoreleasePool_(i Id) NSAutoreleasePool {
  return NSAutoreleasePool{ NSObject_(i) }
}
func NSAutoreleasePool_init() NSAutoreleasePool {
  p := Id(C.NSAutoreleasePool_init())
  return NSAutoreleasePool_(p)
}
func (goobj NSAutoreleasePool) AddObject(anObject Id)  {
  C.NSAutoreleasePool_addObject(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSAutoreleasePool) Drain()  {
  C.NSAutoreleasePool_drain(goobj.Self())
}
func NSAutoreleasePool_addObject(anObject Id)  {
  C.NSAutoreleasePool__addObject(unsafe.Pointer(anObject))
}
type NSBundle struct {
  NSObject
}
func NSBundle_(i Id) NSBundle {
  return NSBundle{ NSObject_(i) }
}
func NSBundle_init() NSBundle {
  p := Id(C.NSBundle_init())
  return NSBundle_(p)
}
func NSBundle_initWithPath(path NSString) NSBundle {
  return NSBundle_(Id(C.NSBundle_initWithPath(path.Self())))
}
func NSBundle_initWithURL(url NSURL) NSBundle {
  return NSBundle_(Id(C.NSBundle_initWithURL(url.Self())))
}
func (goobj NSBundle) Load() C.bool {
  return (C.NSBundle_load(goobj.Self()))
}
func (goobj NSBundle) IsLoaded() C.bool {
  return (C.NSBundle_isLoaded(goobj.Self()))
}
func (goobj NSBundle) Unload() C.bool {
  return (C.NSBundle_unload(goobj.Self()))
}
func (goobj NSBundle) PreflightAndReturnError(error NSError) C.bool {
  return (C.NSBundle_preflightAndReturnError(goobj.Self(), error.Self()))
}
func (goobj NSBundle) LoadAndReturnError(error NSError) C.bool {
  return (C.NSBundle_loadAndReturnError(goobj.Self(), error.Self()))
}
func (goobj NSBundle) BundleURL() NSURL {
  return NSURL_(Id(C.NSBundle_bundleURL(goobj.Self())))
}
func (goobj NSBundle) ResourceURL() NSURL {
  return NSURL_(Id(C.NSBundle_resourceURL(goobj.Self())))
}
func (goobj NSBundle) ExecutableURL() NSURL {
  return NSURL_(Id(C.NSBundle_executableURL(goobj.Self())))
}
func (goobj NSBundle) URLForAuxiliaryExecutable(executableName NSString) NSURL {
  return NSURL_(Id(C.NSBundle_URLForAuxiliaryExecutable(goobj.Self(), executableName.Self())))
}
func (goobj NSBundle) PrivateFrameworksURL() NSURL {
  return NSURL_(Id(C.NSBundle_privateFrameworksURL(goobj.Self())))
}
func (goobj NSBundle) SharedFrameworksURL() NSURL {
  return NSURL_(Id(C.NSBundle_sharedFrameworksURL(goobj.Self())))
}
func (goobj NSBundle) SharedSupportURL() NSURL {
  return NSURL_(Id(C.NSBundle_sharedSupportURL(goobj.Self())))
}
func (goobj NSBundle) BuiltInPlugInsURL() NSURL {
  return NSURL_(Id(C.NSBundle_builtInPlugInsURL(goobj.Self())))
}
func (goobj NSBundle) AppStoreReceiptURL() NSURL {
  return NSURL_(Id(C.NSBundle_appStoreReceiptURL(goobj.Self())))
}
func (goobj NSBundle) BundlePath() NSString {
  return NSString_(Id(C.NSBundle_bundlePath(goobj.Self())))
}
func (goobj NSBundle) ResourcePath() NSString {
  return NSString_(Id(C.NSBundle_resourcePath(goobj.Self())))
}
func (goobj NSBundle) ExecutablePath() NSString {
  return NSString_(Id(C.NSBundle_executablePath(goobj.Self())))
}
func (goobj NSBundle) PathForAuxiliaryExecutable(executableName NSString) NSString {
  return NSString_(Id(C.NSBundle_pathForAuxiliaryExecutable(goobj.Self(), executableName.Self())))
}
func (goobj NSBundle) PrivateFrameworksPath() NSString {
  return NSString_(Id(C.NSBundle_privateFrameworksPath(goobj.Self())))
}
func (goobj NSBundle) SharedFrameworksPath() NSString {
  return NSString_(Id(C.NSBundle_sharedFrameworksPath(goobj.Self())))
}
func (goobj NSBundle) SharedSupportPath() NSString {
  return NSString_(Id(C.NSBundle_sharedSupportPath(goobj.Self())))
}
func (goobj NSBundle) BuiltInPlugInsPath() NSString {
  return NSString_(Id(C.NSBundle_builtInPlugInsPath(goobj.Self())))
}
func (goobj NSBundle) URLForResourceWithExtension(name NSString, ext NSString) NSURL {
  return NSURL_(Id(C.NSBundle_URLForResourceWithExtension(goobj.Self(), name.Self(), ext.Self())))
}
func (goobj NSBundle) URLForResourceWithExtensionSubdirectory(name NSString, ext NSString, subpath NSString) NSURL {
  return NSURL_(Id(C.NSBundle_URLForResourceWithExtensionSubdirectory(goobj.Self(), name.Self(), ext.Self(), subpath.Self())))
}
func (goobj NSBundle) URLForResourceWithExtensionSubdirectoryLocalization(name NSString, ext NSString, subpath NSString, localizationName NSString) NSURL {
  return NSURL_(Id(C.NSBundle_URLForResourceWithExtensionSubdirectoryLocalization(goobj.Self(), name.Self(), ext.Self(), subpath.Self(), localizationName.Self())))
}
func (goobj NSBundle) URLsForResourcesWithExtensionSubdirectory(ext NSString, subpath NSString) NSArray {
  return NSArray_(Id(C.NSBundle_URLsForResourcesWithExtensionSubdirectory(goobj.Self(), ext.Self(), subpath.Self())))
}
func (goobj NSBundle) URLsForResourcesWithExtensionSubdirectoryLocalization(ext NSString, subpath NSString, localizationName NSString) NSArray {
  return NSArray_(Id(C.NSBundle_URLsForResourcesWithExtensionSubdirectoryLocalization(goobj.Self(), ext.Self(), subpath.Self(), localizationName.Self())))
}
func (goobj NSBundle) PathForResourceOfType(name NSString, ext NSString) NSString {
  return NSString_(Id(C.NSBundle_pathForResourceOfType(goobj.Self(), name.Self(), ext.Self())))
}
func (goobj NSBundle) PathForResourceOfTypeInDirectory(name NSString, ext NSString, subpath NSString) NSString {
  return NSString_(Id(C.NSBundle_pathForResourceOfTypeInDirectory(goobj.Self(), name.Self(), ext.Self(), subpath.Self())))
}
func (goobj NSBundle) PathForResourceOfTypeInDirectoryForLocalization(name NSString, ext NSString, subpath NSString, localizationName NSString) NSString {
  return NSString_(Id(C.NSBundle_pathForResourceOfTypeInDirectoryForLocalization(goobj.Self(), name.Self(), ext.Self(), subpath.Self(), localizationName.Self())))
}
func (goobj NSBundle) PathsForResourcesOfTypeInDirectory(ext NSString, subpath NSString) NSArray {
  return NSArray_(Id(C.NSBundle_pathsForResourcesOfTypeInDirectory(goobj.Self(), ext.Self(), subpath.Self())))
}
func (goobj NSBundle) PathsForResourcesOfTypeInDirectoryForLocalization(ext NSString, subpath NSString, localizationName NSString) NSArray {
  return NSArray_(Id(C.NSBundle_pathsForResourcesOfTypeInDirectoryForLocalization(goobj.Self(), ext.Self(), subpath.Self(), localizationName.Self())))
}
func (goobj NSBundle) LocalizedStringForKeyValueTable(key NSString, value NSString, tableName NSString) NSString {
  return NSString_(Id(C.NSBundle_localizedStringForKeyValueTable(goobj.Self(), key.Self(), value.Self(), tableName.Self())))
}
func (goobj NSBundle) BundleIdentifier() NSString {
  return NSString_(Id(C.NSBundle_bundleIdentifier(goobj.Self())))
}
func (goobj NSBundle) InfoDictionary() NSDictionary {
  return NSDictionary_(Id(C.NSBundle_infoDictionary(goobj.Self())))
}
func (goobj NSBundle) LocalizedInfoDictionary() NSDictionary {
  return NSDictionary_(Id(C.NSBundle_localizedInfoDictionary(goobj.Self())))
}
func (goobj NSBundle) ObjectForInfoDictionaryKey(key NSString) Id {
  return Id_(C.NSBundle_objectForInfoDictionaryKey(goobj.Self(), key.Self()))
}
//REJECT: Class
//func (goobj NSBundle) ClassNamed(className NSString) C.Class {
//  return (C.NSBundle_classNamed(goobj.Self(), className.Self()))
//}
//REJECT: Class
//func (goobj NSBundle) PrincipalClass() C.Class {
//  return (C.NSBundle_principalClass(goobj.Self()))
//}
func (goobj NSBundle) PreferredLocalizations() NSArray {
  return NSArray_(Id(C.NSBundle_preferredLocalizations(goobj.Self())))
}
func (goobj NSBundle) Localizations() NSArray {
  return NSArray_(Id(C.NSBundle_localizations(goobj.Self())))
}
func (goobj NSBundle) DevelopmentLocalization() NSString {
  return NSString_(Id(C.NSBundle_developmentLocalization(goobj.Self())))
}
func (goobj NSBundle) ExecutableArchitectures() NSArray {
  return NSArray_(Id(C.NSBundle_executableArchitectures(goobj.Self())))
}
func NSBundle_mainBundle() NSBundle {
  return NSBundle_(Id(C.NSBundle__mainBundle()))
}
func NSBundle_bundleWithPath(path NSString) NSBundle {
  return NSBundle_(Id(C.NSBundle__bundleWithPath(path.Self())))
}
func NSBundle_bundleWithURL(url NSURL) NSBundle {
  return NSBundle_(Id(C.NSBundle__bundleWithURL(url.Self())))
}
//REJECT: aClass
//func NSBundle_bundleForClass(aClass C.Class) NSBundle {
//  return NSBundle_(Id(C.NSBundle__bundleForClass(aClass)))
//}
func NSBundle_bundleWithIdentifier(identifier NSString) NSBundle {
  return NSBundle_(Id(C.NSBundle__bundleWithIdentifier(identifier.Self())))
}
func NSBundle_allBundles() NSArray {
  return NSArray_(Id(C.NSBundle__allBundles()))
}
func NSBundle_allFrameworks() NSArray {
  return NSArray_(Id(C.NSBundle__allFrameworks()))
}
func NSBundle_uRLForResourceWithExtensionSubdirectoryInBundleWithURL(name NSString, ext NSString, subpath NSString, bundleURL NSURL) NSURL {
  return NSURL_(Id(C.NSBundle__URLForResourceWithExtensionSubdirectoryInBundleWithURL(name.Self(), ext.Self(), subpath.Self(), bundleURL.Self())))
}
func NSBundle_uRLsForResourcesWithExtensionSubdirectoryInBundleWithURL(ext NSString, subpath NSString, bundleURL NSURL) NSArray {
  return NSArray_(Id(C.NSBundle__URLsForResourcesWithExtensionSubdirectoryInBundleWithURL(ext.Self(), subpath.Self(), bundleURL.Self())))
}
func NSBundle_pathForResourceOfTypeInDirectory(name NSString, ext NSString, bundlePath NSString) NSString {
  return NSString_(Id(C.NSBundle__pathForResourceOfTypeInDirectory(name.Self(), ext.Self(), bundlePath.Self())))
}
func NSBundle_pathsForResourcesOfTypeInDirectory(ext NSString, bundlePath NSString) NSArray {
  return NSArray_(Id(C.NSBundle__pathsForResourcesOfTypeInDirectory(ext.Self(), bundlePath.Self())))
}
func NSBundle_preferredLocalizationsFromArray(localizationsArray NSArray) NSArray {
  return NSArray_(Id(C.NSBundle__preferredLocalizationsFromArray(localizationsArray.Self())))
}
func NSBundle_preferredLocalizationsFromArrayForPreferences(localizationsArray NSArray, preferencesArray NSArray) NSArray {
  return NSArray_(Id(C.NSBundle__preferredLocalizationsFromArrayForPreferences(localizationsArray.Self(), preferencesArray.Self())))
}
type NSCalendar struct {
  NSObject
}
func NSCalendar_(i Id) NSCalendar {
  return NSCalendar{ NSObject_(i) }
}
func NSCalendar_init() NSCalendar {
  p := Id(C.NSCalendar_init())
  return NSCalendar_(p)
}
func NSCalendar_initWithCalendarIdentifier(ident NSString) NSCalendar {
  return NSCalendar_(Id(C.NSCalendar_initWithCalendarIdentifier(ident.Self())))
}
func (goobj NSCalendar) CalendarIdentifier() NSString {
  return NSString_(Id(C.NSCalendar_calendarIdentifier(goobj.Self())))
}
//REJECT: locale
//func (goobj NSCalendar) SetLocale(locale NSLocale)  {
//  C.NSCalendar_setLocale(goobj.Self(), locale.Self())
//}
//REJECT: NSLocale
//func (goobj NSCalendar) Locale() NSLocale {
//  return NSLocale_(Id(C.NSCalendar_locale(goobj.Self())))
//}
func (goobj NSCalendar) SetTimeZone(tz NSTimeZone)  {
  C.NSCalendar_setTimeZone(goobj.Self(), tz.Self())
}
func (goobj NSCalendar) TimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSCalendar_timeZone(goobj.Self())))
}
func (goobj NSCalendar) SetFirstWeekday(weekday C.uint)  {
  C.NSCalendar_setFirstWeekday(goobj.Self(), weekday)
}
func (goobj NSCalendar) FirstWeekday() C.uint {
  return (C.NSCalendar_firstWeekday(goobj.Self()))
}
func (goobj NSCalendar) SetMinimumDaysInFirstWeek(mdw C.uint)  {
  C.NSCalendar_setMinimumDaysInFirstWeek(goobj.Self(), mdw)
}
func (goobj NSCalendar) MinimumDaysInFirstWeek() C.uint {
  return (C.NSCalendar_minimumDaysInFirstWeek(goobj.Self()))
}
func (goobj NSCalendar) EraSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_eraSymbols(goobj.Self())))
}
func (goobj NSCalendar) LongEraSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_longEraSymbols(goobj.Self())))
}
func (goobj NSCalendar) MonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_monthSymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortMonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortMonthSymbols(goobj.Self())))
}
func (goobj NSCalendar) VeryShortMonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_veryShortMonthSymbols(goobj.Self())))
}
func (goobj NSCalendar) StandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_standaloneMonthSymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortStandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortStandaloneMonthSymbols(goobj.Self())))
}
func (goobj NSCalendar) VeryShortStandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_veryShortStandaloneMonthSymbols(goobj.Self())))
}
func (goobj NSCalendar) WeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_weekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortWeekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) VeryShortWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_veryShortWeekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) StandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_standaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortStandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortStandaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) VeryShortStandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_veryShortStandaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSCalendar) QuarterSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_quarterSymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortQuarterSymbols(goobj.Self())))
}
func (goobj NSCalendar) StandaloneQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_standaloneQuarterSymbols(goobj.Self())))
}
func (goobj NSCalendar) ShortStandaloneQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSCalendar_shortStandaloneQuarterSymbols(goobj.Self())))
}
func (goobj NSCalendar) AMSymbol() NSString {
  return NSString_(Id(C.NSCalendar_AMSymbol(goobj.Self())))
}
func (goobj NSCalendar) PMSymbol() NSString {
  return NSString_(Id(C.NSCalendar_PMSymbol(goobj.Self())))
}
//REJECT: NSRange
//func (goobj NSCalendar) MinimumRangeOfUnit(unit C.NSCalendarUnit) C.NSRange {
//  return (C.NSCalendar_minimumRangeOfUnit(goobj.Self(), unit))
//}
//REJECT: NSRange
//func (goobj NSCalendar) MaximumRangeOfUnit(unit C.NSCalendarUnit) C.NSRange {
//  return (C.NSCalendar_maximumRangeOfUnit(goobj.Self(), unit))
//}
//REJECT: NSRange
//func (goobj NSCalendar) RangeOfUnitInUnitForDate(smaller C.NSCalendarUnit, larger C.NSCalendarUnit, date NSDate) C.NSRange {
//  return (C.NSCalendar_rangeOfUnitInUnitForDate(goobj.Self(), smaller, larger, date.Self()))
//}
func (goobj NSCalendar) OrdinalityOfUnitInUnitForDate(smaller C.NSCalendarUnit, larger C.NSCalendarUnit, date NSDate) C.uint {
  return (C.NSCalendar_ordinalityOfUnitInUnitForDate(goobj.Self(), smaller, larger, date.Self()))
}
//REJECT: tip
//func (goobj NSCalendar) RangeOfUnitStartDateIntervalForDate(unit C.NSCalendarUnit, datep NSDate, tip C.NSTimeInterval, date NSDate) C.bool {
//  return (C.NSCalendar_rangeOfUnitStartDateIntervalForDate(goobj.Self(), unit, datep.Self(), tip, date.Self()))
//}
func (goobj NSCalendar) DateFromComponents(comps NSDateComponents) NSDate {
  return NSDate_(Id(C.NSCalendar_dateFromComponents(goobj.Self(), comps.Self())))
}
func (goobj NSCalendar) ComponentsFromDate(unitFlags C.NSCalendarUnit, date NSDate) NSDateComponents {
  return NSDateComponents_(Id(C.NSCalendar_componentsFromDate(goobj.Self(), unitFlags, date.Self())))
}
func (goobj NSCalendar) DateByAddingComponentsToDateOptions(comps NSDateComponents, date NSDate, opts C.NSCalendarOptions) NSDate {
  return NSDate_(Id(C.NSCalendar_dateByAddingComponentsToDateOptions(goobj.Self(), comps.Self(), date.Self(), opts)))
}
func (goobj NSCalendar) ComponentsFromDateToDateOptions(unitFlags C.NSCalendarUnit, startingDate NSDate, resultDate NSDate, opts C.NSCalendarOptions) NSDateComponents {
  return NSDateComponents_(Id(C.NSCalendar_componentsFromDateToDateOptions(goobj.Self(), unitFlags, startingDate.Self(), resultDate.Self(), opts)))
}
//REJECT: eraValuePointer yearValuePointer monthValuePointer dayValuePointer
//func (goobj NSCalendar) GetEraYearMonthDayFromDate(eraValuePointer C.NSInteger, yearValuePointer C.NSInteger, monthValuePointer C.NSInteger, dayValuePointer C.NSInteger, date NSDate)  {
//  C.NSCalendar_getEraYearMonthDayFromDate(goobj.Self(), eraValuePointer, yearValuePointer, monthValuePointer, dayValuePointer, date.Self())
//}
//REJECT: eraValuePointer yearValuePointer weekValuePointer weekdayValuePointer
//func (goobj NSCalendar) GetEraYearForWeekOfYearWeekOfYearWeekdayFromDate(eraValuePointer C.NSInteger, yearValuePointer C.NSInteger, weekValuePointer C.NSInteger, weekdayValuePointer C.NSInteger, date NSDate)  {
//  C.NSCalendar_getEraYearForWeekOfYearWeekOfYearWeekdayFromDate(goobj.Self(), eraValuePointer, yearValuePointer, weekValuePointer, weekdayValuePointer, date.Self())
//}
//REJECT: hourValuePointer minuteValuePointer secondValuePointer nanosecondValuePointer
//func (goobj NSCalendar) GetHourMinuteSecondNanosecondFromDate(hourValuePointer C.NSInteger, minuteValuePointer C.NSInteger, secondValuePointer C.NSInteger, nanosecondValuePointer C.NSInteger, date NSDate)  {
//  C.NSCalendar_getHourMinuteSecondNanosecondFromDate(goobj.Self(), hourValuePointer, minuteValuePointer, secondValuePointer, nanosecondValuePointer, date.Self())
//}
//REJECT: NSInteger
//func (goobj NSCalendar) ComponentFromDate(unit C.NSCalendarUnit, date NSDate) C.NSInteger {
//  return (C.NSCalendar_componentFromDate(goobj.Self(), unit, date.Self()))
//}
//REJECT: eraValue yearValue monthValue dayValue hourValue minuteValue secondValue nanosecondValue
//func (goobj NSCalendar) DateWithEraYearMonthDayHourMinuteSecondNanosecond(eraValue C.NSInteger, yearValue C.NSInteger, monthValue C.NSInteger, dayValue C.NSInteger, hourValue C.NSInteger, minuteValue C.NSInteger, secondValue C.NSInteger, nanosecondValue C.NSInteger) NSDate {
//  return NSDate_(Id(C.NSCalendar_dateWithEraYearMonthDayHourMinuteSecondNanosecond(goobj.Self(), eraValue, yearValue, monthValue, dayValue, hourValue, minuteValue, secondValue, nanosecondValue)))
//}
//REJECT: eraValue yearValue weekValue weekdayValue hourValue minuteValue secondValue nanosecondValue
//func (goobj NSCalendar) DateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(eraValue C.NSInteger, yearValue C.NSInteger, weekValue C.NSInteger, weekdayValue C.NSInteger, hourValue C.NSInteger, minuteValue C.NSInteger, secondValue C.NSInteger, nanosecondValue C.NSInteger) NSDate {
//  return NSDate_(Id(C.NSCalendar_dateWithEraYearForWeekOfYearWeekOfYearWeekdayHourMinuteSecondNanosecond(goobj.Self(), eraValue, yearValue, weekValue, weekdayValue, hourValue, minuteValue, secondValue, nanosecondValue)))
//}
func (goobj NSCalendar) StartOfDayForDate(date NSDate) NSDate {
  return NSDate_(Id(C.NSCalendar_startOfDayForDate(goobj.Self(), date.Self())))
}
func (goobj NSCalendar) ComponentsInTimeZoneFromDate(timezone NSTimeZone, date NSDate) NSDateComponents {
  return NSDateComponents_(Id(C.NSCalendar_componentsInTimeZoneFromDate(goobj.Self(), timezone.Self(), date.Self())))
}
//REJECT: NSComparisonResult
//func (goobj NSCalendar) CompareDateToDateToUnitGranularity(date1 NSDate, date2 NSDate, unit C.NSCalendarUnit) C.NSComparisonResult {
//  return (C.NSCalendar_compareDateToDateToUnitGranularity(goobj.Self(), date1.Self(), date2.Self(), unit))
//}
func (goobj NSCalendar) IsDateEqualToDateToUnitGranularity(date1 NSDate, date2 NSDate, unit C.NSCalendarUnit) C.bool {
  return (C.NSCalendar_isDateEqualToDateToUnitGranularity(goobj.Self(), date1.Self(), date2.Self(), unit))
}
func (goobj NSCalendar) IsDateInSameDayAsDate(date1 NSDate, date2 NSDate) C.bool {
  return (C.NSCalendar_isDateInSameDayAsDate(goobj.Self(), date1.Self(), date2.Self()))
}
func (goobj NSCalendar) IsDateInToday(date NSDate) C.bool {
  return (C.NSCalendar_isDateInToday(goobj.Self(), date.Self()))
}
func (goobj NSCalendar) IsDateInYesterday(date NSDate) C.bool {
  return (C.NSCalendar_isDateInYesterday(goobj.Self(), date.Self()))
}
func (goobj NSCalendar) IsDateInTomorrow(date NSDate) C.bool {
  return (C.NSCalendar_isDateInTomorrow(goobj.Self(), date.Self()))
}
func (goobj NSCalendar) IsDateInWeekend(date NSDate) C.bool {
  return (C.NSCalendar_isDateInWeekend(goobj.Self(), date.Self()))
}
//REJECT: tip
//func (goobj NSCalendar) RangeOfWeekendStartDateIntervalContainingDate(datep NSDate, tip C.NSTimeInterval, date NSDate) C.bool {
//  return (C.NSCalendar_rangeOfWeekendStartDateIntervalContainingDate(goobj.Self(), datep.Self(), tip, date.Self()))
//}
//REJECT: tip
//func (goobj NSCalendar) NextWeekendStartDateIntervalOptionsAfterDate(datep NSDate, tip C.NSTimeInterval, options C.NSCalendarOptions, date NSDate) C.bool {
//  return (C.NSCalendar_nextWeekendStartDateIntervalOptionsAfterDate(goobj.Self(), datep.Self(), tip, options, date.Self()))
//}
func (goobj NSCalendar) ComponentsFromDateComponentsToDateComponentsOptions(unitFlags C.NSCalendarUnit, startingDateComp NSDateComponents, resultDateComp NSDateComponents, options C.NSCalendarOptions) NSDateComponents {
  return NSDateComponents_(Id(C.NSCalendar_componentsFromDateComponentsToDateComponentsOptions(goobj.Self(), unitFlags, startingDateComp.Self(), resultDateComp.Self(), options)))
}
//REJECT: value
//func (goobj NSCalendar) DateByAddingUnitValueToDateOptions(unit C.NSCalendarUnit, value C.NSInteger, date NSDate, options C.NSCalendarOptions) NSDate {
//  return NSDate_(Id(C.NSCalendar_dateByAddingUnitValueToDateOptions(goobj.Self(), unit, value, date.Self(), options)))
//}
//REJECT: block
//func (goobj NSCalendar) EnumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock(start NSDate, comps NSDateComponents, opts C.NSCalendarOptions, block *INVALID TYPE*)  {
//  C.NSCalendar_enumerateDatesStartingAfterDateMatchingComponentsOptionsUsingBlock(goobj.Self(), start.Self(), comps.Self(), opts, block)
//}
func (goobj NSCalendar) NextDateAfterDateMatchingComponentsOptions(date NSDate, comps NSDateComponents, options C.NSCalendarOptions) NSDate {
  return NSDate_(Id(C.NSCalendar_nextDateAfterDateMatchingComponentsOptions(goobj.Self(), date.Self(), comps.Self(), options)))
}
//REJECT: value
//func (goobj NSCalendar) NextDateAfterDateMatchingUnitValueOptions(date NSDate, unit C.NSCalendarUnit, value C.NSInteger, options C.NSCalendarOptions) NSDate {
//  return NSDate_(Id(C.NSCalendar_nextDateAfterDateMatchingUnitValueOptions(goobj.Self(), date.Self(), unit, value, options)))
//}
//REJECT: hourValue minuteValue secondValue
//func (goobj NSCalendar) NextDateAfterDateMatchingHourMinuteSecondOptions(date NSDate, hourValue C.NSInteger, minuteValue C.NSInteger, secondValue C.NSInteger, options C.NSCalendarOptions) NSDate {
//  return NSDate_(Id(C.NSCalendar_nextDateAfterDateMatchingHourMinuteSecondOptions(goobj.Self(), date.Self(), hourValue, minuteValue, secondValue, options)))
//}
//REJECT: v
//func (goobj NSCalendar) DateBySettingUnitValueOfDateOptions(unit C.NSCalendarUnit, v C.NSInteger, date NSDate, opts C.NSCalendarOptions) NSDate {
//  return NSDate_(Id(C.NSCalendar_dateBySettingUnitValueOfDateOptions(goobj.Self(), unit, v, date.Self(), opts)))
//}
//REJECT: h m s
//func (goobj NSCalendar) DateBySettingHourMinuteSecondOfDateOptions(h C.NSInteger, m C.NSInteger, s C.NSInteger, date NSDate, opts C.NSCalendarOptions) NSDate {
//  return NSDate_(Id(C.NSCalendar_dateBySettingHourMinuteSecondOfDateOptions(goobj.Self(), h, m, s, date.Self(), opts)))
//}
func (goobj NSCalendar) DateMatchesComponents(date NSDate, components NSDateComponents) C.bool {
  return (C.NSCalendar_dateMatchesComponents(goobj.Self(), date.Self(), components.Self()))
}
func NSCalendar_currentCalendar() Id {
  return Id_(C.NSCalendar__currentCalendar())
}
func NSCalendar_autoupdatingCurrentCalendar() Id {
  return Id_(C.NSCalendar__autoupdatingCurrentCalendar())
}
func NSCalendar_calendarWithIdentifier(calendarIdentifierConstant NSString) Id {
  return Id_(C.NSCalendar__calendarWithIdentifier(calendarIdentifierConstant.Self()))
}
type NSDateComponents struct {
  NSObject
}
func NSDateComponents_(i Id) NSDateComponents {
  return NSDateComponents{ NSObject_(i) }
}
func NSDateComponents_init() NSDateComponents {
  p := Id(C.NSDateComponents_init())
  return NSDateComponents_(p)
}
func (goobj NSDateComponents) Calendar() NSCalendar {
  return NSCalendar_(Id(C.NSDateComponents_calendar(goobj.Self())))
}
func (goobj NSDateComponents) TimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSDateComponents_timeZone(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSDateComponents) Era() C.NSInteger {
//  return (C.NSDateComponents_era(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Year() C.NSInteger {
//  return (C.NSDateComponents_year(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Month() C.NSInteger {
//  return (C.NSDateComponents_month(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Day() C.NSInteger {
//  return (C.NSDateComponents_day(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Hour() C.NSInteger {
//  return (C.NSDateComponents_hour(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Minute() C.NSInteger {
//  return (C.NSDateComponents_minute(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Second() C.NSInteger {
//  return (C.NSDateComponents_second(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Nanosecond() C.NSInteger {
//  return (C.NSDateComponents_nanosecond(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Week() C.NSInteger {
//  return (C.NSDateComponents_week(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Weekday() C.NSInteger {
//  return (C.NSDateComponents_weekday(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) WeekdayOrdinal() C.NSInteger {
//  return (C.NSDateComponents_weekdayOrdinal(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) Quarter() C.NSInteger {
//  return (C.NSDateComponents_quarter(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) WeekOfMonth() C.NSInteger {
//  return (C.NSDateComponents_weekOfMonth(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) WeekOfYear() C.NSInteger {
//  return (C.NSDateComponents_weekOfYear(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) YearForWeekOfYear() C.NSInteger {
//  return (C.NSDateComponents_yearForWeekOfYear(goobj.Self()))
//}
func (goobj NSDateComponents) IsLeapMonth() C.bool {
  return (C.NSDateComponents_isLeapMonth(goobj.Self()))
}
func (goobj NSDateComponents) SetCalendar(cal NSCalendar)  {
  C.NSDateComponents_setCalendar(goobj.Self(), cal.Self())
}
func (goobj NSDateComponents) SetTimeZone(tz NSTimeZone)  {
  C.NSDateComponents_setTimeZone(goobj.Self(), tz.Self())
}
//REJECT: v
//func (goobj NSDateComponents) SetEra(v C.NSInteger)  {
//  C.NSDateComponents_setEra(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetYear(v C.NSInteger)  {
//  C.NSDateComponents_setYear(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetMonth(v C.NSInteger)  {
//  C.NSDateComponents_setMonth(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetDay(v C.NSInteger)  {
//  C.NSDateComponents_setDay(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetHour(v C.NSInteger)  {
//  C.NSDateComponents_setHour(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetMinute(v C.NSInteger)  {
//  C.NSDateComponents_setMinute(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetSecond(v C.NSInteger)  {
//  C.NSDateComponents_setSecond(goobj.Self(), v)
//}
//REJECT: value
//func (goobj NSDateComponents) SetNanosecond(value C.NSInteger)  {
//  C.NSDateComponents_setNanosecond(goobj.Self(), value)
//}
//REJECT: v
//func (goobj NSDateComponents) SetWeek(v C.NSInteger)  {
//  C.NSDateComponents_setWeek(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetWeekday(v C.NSInteger)  {
//  C.NSDateComponents_setWeekday(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetWeekdayOrdinal(v C.NSInteger)  {
//  C.NSDateComponents_setWeekdayOrdinal(goobj.Self(), v)
//}
//REJECT: v
//func (goobj NSDateComponents) SetQuarter(v C.NSInteger)  {
//  C.NSDateComponents_setQuarter(goobj.Self(), v)
//}
//REJECT: w
//func (goobj NSDateComponents) SetWeekOfMonth(w C.NSInteger)  {
//  C.NSDateComponents_setWeekOfMonth(goobj.Self(), w)
//}
//REJECT: w
//func (goobj NSDateComponents) SetWeekOfYear(w C.NSInteger)  {
//  C.NSDateComponents_setWeekOfYear(goobj.Self(), w)
//}
//REJECT: y
//func (goobj NSDateComponents) SetYearForWeekOfYear(y C.NSInteger)  {
//  C.NSDateComponents_setYearForWeekOfYear(goobj.Self(), y)
//}
func (goobj NSDateComponents) SetLeapMonth(lm C.bool)  {
  C.NSDateComponents_setLeapMonth(goobj.Self(), lm)
}
func (goobj NSDateComponents) Date() NSDate {
  return NSDate_(Id(C.NSDateComponents_date(goobj.Self())))
}
//REJECT: value
//func (goobj NSDateComponents) SetValueForComponent(value C.NSInteger, unit C.NSCalendarUnit)  {
//  C.NSDateComponents_setValueForComponent(goobj.Self(), value, unit)
//}
//REJECT: NSInteger
//func (goobj NSDateComponents) ValueForComponent(unit C.NSCalendarUnit) C.NSInteger {
//  return (C.NSDateComponents_valueForComponent(goobj.Self(), unit))
//}
func (goobj NSDateComponents) IsValidDate() C.bool {
  return (C.NSDateComponents_isValidDate(goobj.Self()))
}
func (goobj NSDateComponents) IsValidDateInCalendar(calendar NSCalendar) C.bool {
  return (C.NSDateComponents_isValidDateInCalendar(goobj.Self(), calendar.Self()))
}

type NSCharacterSet struct {
  NSObject
}
func NSCharacterSet_(i Id) NSCharacterSet {
  return NSCharacterSet{ NSObject_(i) }
}
func NSCharacterSet_init() NSCharacterSet {
  p := Id(C.NSCharacterSet_init())
  return NSCharacterSet_(p)
}
//REJECT: aCharacter
//func (goobj NSCharacterSet) CharacterIsMember(aCharacter C.unichar) C.bool {
//  return (C.NSCharacterSet_characterIsMember(goobj.Self(), aCharacter))
//}
func (goobj NSCharacterSet) BitmapRepresentation() NSData {
  return NSData_(Id(C.NSCharacterSet_bitmapRepresentation(goobj.Self())))
}
func (goobj NSCharacterSet) InvertedSet() NSCharacterSet {
  return NSCharacterSet_(Id(C.NSCharacterSet_invertedSet(goobj.Self())))
}
//REJECT: theLongChar
//func (goobj NSCharacterSet) LongCharacterIsMember(theLongChar C.UTF32Char) C.bool {
//  return (C.NSCharacterSet_longCharacterIsMember(goobj.Self(), theLongChar))
//}
func (goobj NSCharacterSet) IsSupersetOfSet(theOtherSet NSCharacterSet) C.bool {
  return (C.NSCharacterSet_isSupersetOfSet(goobj.Self(), theOtherSet.Self()))
}
func (goobj NSCharacterSet) HasMemberInPlane(thePlane C.uint8_t) C.bool {
  return (C.NSCharacterSet_hasMemberInPlane(goobj.Self(), thePlane))
}
func NSCharacterSet_controlCharacterSet() Id {
  return Id_(C.NSCharacterSet__controlCharacterSet())
}
func NSCharacterSet_whitespaceCharacterSet() Id {
  return Id_(C.NSCharacterSet__whitespaceCharacterSet())
}
func NSCharacterSet_whitespaceAndNewlineCharacterSet() Id {
  return Id_(C.NSCharacterSet__whitespaceAndNewlineCharacterSet())
}
func NSCharacterSet_decimalDigitCharacterSet() Id {
  return Id_(C.NSCharacterSet__decimalDigitCharacterSet())
}
func NSCharacterSet_letterCharacterSet() Id {
  return Id_(C.NSCharacterSet__letterCharacterSet())
}
func NSCharacterSet_lowercaseLetterCharacterSet() Id {
  return Id_(C.NSCharacterSet__lowercaseLetterCharacterSet())
}
func NSCharacterSet_uppercaseLetterCharacterSet() Id {
  return Id_(C.NSCharacterSet__uppercaseLetterCharacterSet())
}
func NSCharacterSet_nonBaseCharacterSet() Id {
  return Id_(C.NSCharacterSet__nonBaseCharacterSet())
}
func NSCharacterSet_alphanumericCharacterSet() Id {
  return Id_(C.NSCharacterSet__alphanumericCharacterSet())
}
func NSCharacterSet_decomposableCharacterSet() Id {
  return Id_(C.NSCharacterSet__decomposableCharacterSet())
}
func NSCharacterSet_illegalCharacterSet() Id {
  return Id_(C.NSCharacterSet__illegalCharacterSet())
}
func NSCharacterSet_punctuationCharacterSet() Id {
  return Id_(C.NSCharacterSet__punctuationCharacterSet())
}
func NSCharacterSet_capitalizedLetterCharacterSet() Id {
  return Id_(C.NSCharacterSet__capitalizedLetterCharacterSet())
}
func NSCharacterSet_symbolCharacterSet() Id {
  return Id_(C.NSCharacterSet__symbolCharacterSet())
}
func NSCharacterSet_newlineCharacterSet() Id {
  return Id_(C.NSCharacterSet__newlineCharacterSet())
}
//REJECT: aRange
//func NSCharacterSet_characterSetWithRange(aRange C.NSRange) Id {
//  return Id_(C.NSCharacterSet__characterSetWithRange(aRange))
//}
func NSCharacterSet_characterSetWithCharactersInString(aString NSString) Id {
  return Id_(C.NSCharacterSet__characterSetWithCharactersInString(aString.Self()))
}
func NSCharacterSet_characterSetWithBitmapRepresentation(data NSData) Id {
  return Id_(C.NSCharacterSet__characterSetWithBitmapRepresentation(data.Self()))
}
func NSCharacterSet_characterSetWithContentsOfFile(fName NSString) Id {
  return Id_(C.NSCharacterSet__characterSetWithContentsOfFile(fName.Self()))
}
type NSMutableCharacterSet struct {
  NSCharacterSet
}
func NSMutableCharacterSet_(i Id) NSMutableCharacterSet {
  return NSMutableCharacterSet{ NSCharacterSet_(i) }
}
func NSMutableCharacterSet_init() NSMutableCharacterSet {
  p := Id(C.NSMutableCharacterSet_init())
  return NSMutableCharacterSet_(p)
}
//REJECT: aRange
//func (goobj NSMutableCharacterSet) AddCharactersInRange(aRange C.NSRange)  {
//  C.NSMutableCharacterSet_addCharactersInRange(goobj.Self(), aRange)
//}
//REJECT: aRange
//func (goobj NSMutableCharacterSet) RemoveCharactersInRange(aRange C.NSRange)  {
//  C.NSMutableCharacterSet_removeCharactersInRange(goobj.Self(), aRange)
//}
func (goobj NSMutableCharacterSet) AddCharactersInString(aString NSString)  {
  C.NSMutableCharacterSet_addCharactersInString(goobj.Self(), aString.Self())
}
func (goobj NSMutableCharacterSet) RemoveCharactersInString(aString NSString)  {
  C.NSMutableCharacterSet_removeCharactersInString(goobj.Self(), aString.Self())
}
func (goobj NSMutableCharacterSet) FormUnionWithCharacterSet(otherSet NSCharacterSet)  {
  C.NSMutableCharacterSet_formUnionWithCharacterSet(goobj.Self(), otherSet.Self())
}
func (goobj NSMutableCharacterSet) FormIntersectionWithCharacterSet(otherSet NSCharacterSet)  {
  C.NSMutableCharacterSet_formIntersectionWithCharacterSet(goobj.Self(), otherSet.Self())
}
func (goobj NSMutableCharacterSet) Invert()  {
  C.NSMutableCharacterSet_invert(goobj.Self())
}

type NSData struct {
  NSObject
}
func NSData_(i Id) NSData {
  return NSData{ NSObject_(i) }
}
func NSData_init() NSData {
  p := Id(C.NSData_init())
  return NSData_(p)
}
func (goobj NSData) Length() C.uint {
  return (C.NSData_length(goobj.Self()))
}
func (goobj NSData) Bytes() unsafe.Pointer {
  return (C.NSData_bytes(goobj.Self()))
}
func (goobj NSData) Description() NSString {
  return NSString_(Id(C.NSData_description(goobj.Self())))
}
func (goobj NSData) GetBytesLength(buffer unsafe.Pointer, length C.uint)  {
  C.NSData_getBytesLength(goobj.Self(), buffer, length)
}
//REJECT: range
//func (goobj NSData) GetBytesRange(buffer unsafe.Pointer, range_ C.NSRange)  {
//  C.NSData_getBytesRange(goobj.Self(), buffer, range_)
//}
func (goobj NSData) IsEqualToData(other NSData) C.bool {
  return (C.NSData_isEqualToData(goobj.Self(), other.Self()))
}
//REJECT: range
//func (goobj NSData) SubdataWithRange(range_ C.NSRange) NSData {
//  return NSData_(Id(C.NSData_subdataWithRange(goobj.Self(), range_)))
//}
func (goobj NSData) WriteToFileAtomically(path NSString, useAuxiliaryFile C.bool) C.bool {
  return (C.NSData_writeToFileAtomically(goobj.Self(), path.Self(), useAuxiliaryFile))
}
func (goobj NSData) WriteToURLAtomically(url NSURL, atomically C.bool) C.bool {
  return (C.NSData_writeToURLAtomically(goobj.Self(), url.Self(), atomically))
}
func (goobj NSData) WriteToFileOptionsError(path NSString, writeOptionsMask C.NSDataWritingOptions, errorPtr NSError) C.bool {
  return (C.NSData_writeToFileOptionsError(goobj.Self(), path.Self(), writeOptionsMask, errorPtr.Self()))
}
func (goobj NSData) WriteToURLOptionsError(url NSURL, writeOptionsMask C.NSDataWritingOptions, errorPtr NSError) C.bool {
  return (C.NSData_writeToURLOptionsError(goobj.Self(), url.Self(), writeOptionsMask, errorPtr.Self()))
}
//REJECT: NSRange searchRange
//func (goobj NSData) RangeOfDataOptionsRange(dataToFind NSData, mask C.NSDataSearchOptions, searchRange C.NSRange) C.NSRange {
//  return (C.NSData_rangeOfDataOptionsRange(goobj.Self(), dataToFind.Self(), mask, searchRange))
//}
//REJECT: block
//func (goobj NSData) EnumerateByteRangesUsingBlock(block *INVALID TYPE*)  {
//  C.NSData_enumerateByteRangesUsingBlock(goobj.Self(), block)
//}
func NSData_initWithBytesLength(bytes unsafe.Pointer, length C.uint) NSData {
  return NSData_(Id(C.NSData_initWithBytesLength(bytes, length)))
}
func NSData_initWithBytesNoCopyLength(bytes unsafe.Pointer, length C.uint) NSData {
  return NSData_(Id(C.NSData_initWithBytesNoCopyLength(bytes, length)))
}
func NSData_initWithBytesNoCopyLengthFreeWhenDone(bytes unsafe.Pointer, length C.uint, b C.bool) NSData {
  return NSData_(Id(C.NSData_initWithBytesNoCopyLengthFreeWhenDone(bytes, length, b)))
}
//REJECT: deallocator
//func NSData_initWithBytesNoCopyLengthDeallocator(bytes unsafe.Pointer, length C.uint, deallocator *INVALID TYPE*) NSData {
//  return NSData_(Id(C.NSData_initWithBytesNoCopyLengthDeallocator(bytes, length, deallocator)))
//}
func NSData_initWithContentsOfFileOptionsError(path NSString, readOptionsMask C.NSDataReadingOptions, errorPtr NSError) NSData {
  return NSData_(Id(C.NSData_initWithContentsOfFileOptionsError(path.Self(), readOptionsMask, errorPtr.Self())))
}
func NSData_initWithContentsOfURLOptionsError(url NSURL, readOptionsMask C.NSDataReadingOptions, errorPtr NSError) NSData {
  return NSData_(Id(C.NSData_initWithContentsOfURLOptionsError(url.Self(), readOptionsMask, errorPtr.Self())))
}
func NSData_initWithContentsOfFile(path NSString) NSData {
  return NSData_(Id(C.NSData_initWithContentsOfFile(path.Self())))
}
func NSData_initWithContentsOfURL(url NSURL) NSData {
  return NSData_(Id(C.NSData_initWithContentsOfURL(url.Self())))
}
func NSData_initWithData(data NSData) NSData {
  return NSData_(Id(C.NSData_initWithData(data.Self())))
}
func NSData_initWithBase64EncodedStringOptions(base64String NSString, options C.NSDataBase64DecodingOptions) NSData {
  return NSData_(Id(C.NSData_initWithBase64EncodedStringOptions(base64String.Self(), options)))
}
func (goobj NSData) Base64EncodedStringWithOptions(options C.NSDataBase64EncodingOptions) NSString {
  return NSString_(Id(C.NSData_base64EncodedStringWithOptions(goobj.Self(), options)))
}
func NSData_initWithBase64EncodedDataOptions(base64Data NSData, options C.NSDataBase64DecodingOptions) NSData {
  return NSData_(Id(C.NSData_initWithBase64EncodedDataOptions(base64Data.Self(), options)))
}
func (goobj NSData) Base64EncodedDataWithOptions(options C.NSDataBase64EncodingOptions) NSData {
  return NSData_(Id(C.NSData_base64EncodedDataWithOptions(goobj.Self(), options)))
}

type NSMutableData struct {
  NSData
}
func NSMutableData_(i Id) NSMutableData {
  return NSMutableData{ NSData_(i) }
}
func NSMutableData_init() NSMutableData {
  p := Id(C.NSMutableData_init())
  return NSMutableData_(p)
}
func (goobj NSMutableData) MutableBytes() unsafe.Pointer {
  return (C.NSMutableData_mutableBytes(goobj.Self()))
}
func (goobj NSMutableData) SetLength(length C.uint)  {
  C.NSMutableData_setLength(goobj.Self(), length)
}
func (goobj NSMutableData) AppendBytesLength(bytes unsafe.Pointer, length C.uint)  {
  C.NSMutableData_appendBytesLength(goobj.Self(), bytes, length)
}
func (goobj NSMutableData) AppendData(other NSData)  {
  C.NSMutableData_appendData(goobj.Self(), other.Self())
}
func (goobj NSMutableData) IncreaseLengthBy(extraLength C.uint)  {
  C.NSMutableData_increaseLengthBy(goobj.Self(), extraLength)
}
//REJECT: range
//func (goobj NSMutableData) ReplaceBytesInRangeWithBytes(range_ C.NSRange, bytes unsafe.Pointer)  {
//  C.NSMutableData_replaceBytesInRangeWithBytes(goobj.Self(), range_, bytes)
//}
//REJECT: range
//func (goobj NSMutableData) ResetBytesInRange(range_ C.NSRange)  {
//  C.NSMutableData_resetBytesInRange(goobj.Self(), range_)
//}
func (goobj NSMutableData) SetData(data NSData)  {
  C.NSMutableData_setData(goobj.Self(), data.Self())
}
//REJECT: range
//func (goobj NSMutableData) ReplaceBytesInRangeWithBytesLength(range_ C.NSRange, replacementBytes unsafe.Pointer, replacementLength C.uint)  {
//  C.NSMutableData_replaceBytesInRangeWithBytesLength(goobj.Self(), range_, replacementBytes, replacementLength)
//}
func NSMutableData_initWithCapacity(capacity C.uint) NSMutableData {
  return NSMutableData_(Id(C.NSMutableData_initWithCapacity(capacity)))
}
func NSMutableData_initWithLength(length C.uint) NSMutableData {
  return NSMutableData_(Id(C.NSMutableData_initWithLength(length)))
}

type NSPurgeableData struct {
  NSMutableData
}
func NSPurgeableData_(i Id) NSPurgeableData {
  return NSPurgeableData{ NSMutableData_(i) }
}
func NSPurgeableData_init() NSPurgeableData {
  p := Id(C.NSPurgeableData_init())
  return NSPurgeableData_(p)
}


type NSFormatter struct {
  NSObject
}
func NSFormatter_(i Id) NSFormatter {
  return NSFormatter{ NSObject_(i) }
}
func NSFormatter_init() NSFormatter {
  p := Id(C.NSFormatter_init())
  return NSFormatter_(p)
}
func (goobj NSFormatter) StringForObjectValue(obj Id) NSString {
  return NSString_(Id(C.NSFormatter_stringForObjectValue(goobj.Self(), unsafe.Pointer(obj))))
}
func (goobj NSFormatter) AttributedStringForObjectValueWithDefaultAttributes(obj Id, attrs NSDictionary) NSAttributedString {
  return NSAttributedString_(Id(C.NSFormatter_attributedStringForObjectValueWithDefaultAttributes(goobj.Self(), unsafe.Pointer(obj), attrs.Self())))
}
func (goobj NSFormatter) EditingStringForObjectValue(obj Id) NSString {
  return NSString_(Id(C.NSFormatter_editingStringForObjectValue(goobj.Self(), unsafe.Pointer(obj))))
}
func (goobj NSFormatter) GetObjectValueForStringErrorDescription(obj Id, string NSString, error NSString) C.bool {
  return (C.NSFormatter_getObjectValueForStringErrorDescription(goobj.Self(), unsafe.Pointer(obj), string.Self(), error.Self()))
}
func (goobj NSFormatter) IsPartialStringValidNewEditingStringErrorDescription(partialString NSString, newString NSString, error NSString) C.bool {
  return (C.NSFormatter_isPartialStringValidNewEditingStringErrorDescription(goobj.Self(), partialString.Self(), newString.Self(), error.Self()))
}
//REJECT: proposedSelRangePtr origSelRange
//func (goobj NSFormatter) IsPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(partialStringPtr NSString, proposedSelRangePtr C.NSRangePointer, origString NSString, origSelRange C.NSRange, error NSString) C.bool {
//  return (C.NSFormatter_isPartialStringValidProposedSelectedRangeOriginalStringOriginalSelectedRangeErrorDescription(goobj.Self(), partialStringPtr.Self(), proposedSelRangePtr, origString.Self(), origSelRange, error.Self()))
//}

type NSDateFormatter struct {
  NSFormatter
}
func NSDateFormatter_(i Id) NSDateFormatter {
  return NSDateFormatter{ NSFormatter_(i) }
}
func NSDateFormatter_init() NSDateFormatter {
  p := Id(C.NSDateFormatter_init())
  return NSDateFormatter_(p)
}
//REJECT: rangep
//func (goobj NSDateFormatter) GetObjectValueForStringRangeError(obj Id, string NSString, rangep C.NSRange, error NSError) C.bool {
//  return (C.NSDateFormatter_getObjectValueForStringRangeError(goobj.Self(), unsafe.Pointer(obj), string.Self(), rangep, error.Self()))
//}
func (goobj NSDateFormatter) StringFromDate(date NSDate) NSString {
  return NSString_(Id(C.NSDateFormatter_stringFromDate(goobj.Self(), date.Self())))
}
func (goobj NSDateFormatter) DateFromString(string NSString) NSDate {
  return NSDate_(Id(C.NSDateFormatter_dateFromString(goobj.Self(), string.Self())))
}
func (goobj NSDateFormatter) DateFormat() NSString {
  return NSString_(Id(C.NSDateFormatter_dateFormat(goobj.Self())))
}
func (goobj NSDateFormatter) DateStyle() C.NSDateFormatterStyle {
  return (C.NSDateFormatter_dateStyle(goobj.Self()))
}
func (goobj NSDateFormatter) SetDateStyle(style C.NSDateFormatterStyle)  {
  C.NSDateFormatter_setDateStyle(goobj.Self(), style)
}
func (goobj NSDateFormatter) TimeStyle() C.NSDateFormatterStyle {
  return (C.NSDateFormatter_timeStyle(goobj.Self()))
}
func (goobj NSDateFormatter) SetTimeStyle(style C.NSDateFormatterStyle)  {
  C.NSDateFormatter_setTimeStyle(goobj.Self(), style)
}
//REJECT: NSLocale
//func (goobj NSDateFormatter) Locale() NSLocale {
//  return NSLocale_(Id(C.NSDateFormatter_locale(goobj.Self())))
//}
//REJECT: locale
//func (goobj NSDateFormatter) SetLocale(locale NSLocale)  {
//  C.NSDateFormatter_setLocale(goobj.Self(), locale.Self())
//}
func (goobj NSDateFormatter) GeneratesCalendarDates() C.bool {
  return (C.NSDateFormatter_generatesCalendarDates(goobj.Self()))
}
func (goobj NSDateFormatter) SetGeneratesCalendarDates(b C.bool)  {
  C.NSDateFormatter_setGeneratesCalendarDates(goobj.Self(), b)
}
func (goobj NSDateFormatter) FormatterBehavior() C.NSDateFormatterBehavior {
  return (C.NSDateFormatter_formatterBehavior(goobj.Self()))
}
func (goobj NSDateFormatter) SetFormatterBehavior(behavior C.NSDateFormatterBehavior)  {
  C.NSDateFormatter_setFormatterBehavior(goobj.Self(), behavior)
}
func (goobj NSDateFormatter) SetDateFormat(string NSString)  {
  C.NSDateFormatter_setDateFormat(goobj.Self(), string.Self())
}
func (goobj NSDateFormatter) TimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSDateFormatter_timeZone(goobj.Self())))
}
func (goobj NSDateFormatter) SetTimeZone(tz NSTimeZone)  {
  C.NSDateFormatter_setTimeZone(goobj.Self(), tz.Self())
}
func (goobj NSDateFormatter) Calendar() NSCalendar {
  return NSCalendar_(Id(C.NSDateFormatter_calendar(goobj.Self())))
}
func (goobj NSDateFormatter) SetCalendar(calendar NSCalendar)  {
  C.NSDateFormatter_setCalendar(goobj.Self(), calendar.Self())
}
func (goobj NSDateFormatter) IsLenient() C.bool {
  return (C.NSDateFormatter_isLenient(goobj.Self()))
}
func (goobj NSDateFormatter) SetLenient(b C.bool)  {
  C.NSDateFormatter_setLenient(goobj.Self(), b)
}
func (goobj NSDateFormatter) TwoDigitStartDate() NSDate {
  return NSDate_(Id(C.NSDateFormatter_twoDigitStartDate(goobj.Self())))
}
func (goobj NSDateFormatter) SetTwoDigitStartDate(date NSDate)  {
  C.NSDateFormatter_setTwoDigitStartDate(goobj.Self(), date.Self())
}
func (goobj NSDateFormatter) DefaultDate() NSDate {
  return NSDate_(Id(C.NSDateFormatter_defaultDate(goobj.Self())))
}
func (goobj NSDateFormatter) SetDefaultDate(date NSDate)  {
  C.NSDateFormatter_setDefaultDate(goobj.Self(), date.Self())
}
func (goobj NSDateFormatter) EraSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_eraSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetEraSymbols(array NSArray)  {
  C.NSDateFormatter_setEraSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) MonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_monthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortMonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortMonthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setShortMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) WeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_weekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortWeekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setShortWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) AMSymbol() NSString {
  return NSString_(Id(C.NSDateFormatter_AMSymbol(goobj.Self())))
}
func (goobj NSDateFormatter) SetAMSymbol(string NSString)  {
  C.NSDateFormatter_setAMSymbol(goobj.Self(), string.Self())
}
func (goobj NSDateFormatter) PMSymbol() NSString {
  return NSString_(Id(C.NSDateFormatter_PMSymbol(goobj.Self())))
}
func (goobj NSDateFormatter) SetPMSymbol(string NSString)  {
  C.NSDateFormatter_setPMSymbol(goobj.Self(), string.Self())
}
func (goobj NSDateFormatter) LongEraSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_longEraSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetLongEraSymbols(array NSArray)  {
  C.NSDateFormatter_setLongEraSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) VeryShortMonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_veryShortMonthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetVeryShortMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setVeryShortMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) StandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_standaloneMonthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetStandaloneMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setStandaloneMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortStandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortStandaloneMonthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortStandaloneMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setShortStandaloneMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) VeryShortStandaloneMonthSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_veryShortStandaloneMonthSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetVeryShortStandaloneMonthSymbols(array NSArray)  {
  C.NSDateFormatter_setVeryShortStandaloneMonthSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) VeryShortWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_veryShortWeekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetVeryShortWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setVeryShortWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) StandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_standaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetStandaloneWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setStandaloneWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortStandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortStandaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortStandaloneWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setShortStandaloneWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) VeryShortStandaloneWeekdaySymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_veryShortStandaloneWeekdaySymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetVeryShortStandaloneWeekdaySymbols(array NSArray)  {
  C.NSDateFormatter_setVeryShortStandaloneWeekdaySymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) QuarterSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_quarterSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetQuarterSymbols(array NSArray)  {
  C.NSDateFormatter_setQuarterSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortQuarterSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortQuarterSymbols(array NSArray)  {
  C.NSDateFormatter_setShortQuarterSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) StandaloneQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_standaloneQuarterSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetStandaloneQuarterSymbols(array NSArray)  {
  C.NSDateFormatter_setStandaloneQuarterSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) ShortStandaloneQuarterSymbols() NSArray {
  return NSArray_(Id(C.NSDateFormatter_shortStandaloneQuarterSymbols(goobj.Self())))
}
func (goobj NSDateFormatter) SetShortStandaloneQuarterSymbols(array NSArray)  {
  C.NSDateFormatter_setShortStandaloneQuarterSymbols(goobj.Self(), array.Self())
}
func (goobj NSDateFormatter) GregorianStartDate() NSDate {
  return NSDate_(Id(C.NSDateFormatter_gregorianStartDate(goobj.Self())))
}
func (goobj NSDateFormatter) SetGregorianStartDate(date NSDate)  {
  C.NSDateFormatter_setGregorianStartDate(goobj.Self(), date.Self())
}
func (goobj NSDateFormatter) DoesRelativeDateFormatting() C.bool {
  return (C.NSDateFormatter_doesRelativeDateFormatting(goobj.Self()))
}
func (goobj NSDateFormatter) SetDoesRelativeDateFormatting(b C.bool)  {
  C.NSDateFormatter_setDoesRelativeDateFormatting(goobj.Self(), b)
}
func NSDateFormatter_initWithDateFormatAllowNaturalLanguage(format NSString, flag C.bool) NSDateFormatter {
  return NSDateFormatter_(Id(C.NSDateFormatter_initWithDateFormatAllowNaturalLanguage(format.Self(), flag)))
}
func (goobj NSDateFormatter) AllowsNaturalLanguage() C.bool {
  return (C.NSDateFormatter_allowsNaturalLanguage(goobj.Self()))
}
func NSDateFormatter_localizedStringFromDateDateStyleTimeStyle(date NSDate, dstyle C.NSDateFormatterStyle, tstyle C.NSDateFormatterStyle) NSString {
  return NSString_(Id(C.NSDateFormatter__localizedStringFromDateDateStyleTimeStyle(date.Self(), dstyle, tstyle)))
}
//REJECT: locale
//func NSDateFormatter_dateFormatFromTemplateOptionsLocale(tmplate NSString, opts C.uint, locale NSLocale) NSString {
//  return NSString_(Id(C.NSDateFormatter__dateFormatFromTemplateOptionsLocale(tmplate.Self(), opts, locale.Self())))
//}
func NSDateFormatter_defaultFormatterBehavior() C.NSDateFormatterBehavior {
  return (C.NSDateFormatter__defaultFormatterBehavior())
}
func NSDateFormatter_setDefaultFormatterBehavior(behavior C.NSDateFormatterBehavior)  {
  C.NSDateFormatter__setDefaultFormatterBehavior(behavior)
}
type NSScanner struct {
  NSObject
}
func NSScanner_(i Id) NSScanner {
  return NSScanner{ NSObject_(i) }
}
func NSScanner_init() NSScanner {
  p := Id(C.NSScanner_init())
  return NSScanner_(p)
}
func (goobj NSScanner) String() NSString {
  return NSString_(Id(C.NSScanner_string(goobj.Self())))
}
func (goobj NSScanner) ScanLocation() C.uint {
  return (C.NSScanner_scanLocation(goobj.Self()))
}
func (goobj NSScanner) SetScanLocation(pos C.uint)  {
  C.NSScanner_setScanLocation(goobj.Self(), pos)
}
func (goobj NSScanner) SetCharactersToBeSkipped(set NSCharacterSet)  {
  C.NSScanner_setCharactersToBeSkipped(goobj.Self(), set.Self())
}
func (goobj NSScanner) SetCaseSensitive(flag C.bool)  {
  C.NSScanner_setCaseSensitive(goobj.Self(), flag)
}
func (goobj NSScanner) SetLocale(locale Id)  {
  C.NSScanner_setLocale(goobj.Self(), unsafe.Pointer(locale))
}
func (goobj NSScanner) CharactersToBeSkipped() NSCharacterSet {
  return NSCharacterSet_(Id(C.NSScanner_charactersToBeSkipped(goobj.Self())))
}
func (goobj NSScanner) CaseSensitive() C.bool {
  return (C.NSScanner_caseSensitive(goobj.Self()))
}
func (goobj NSScanner) Locale() Id {
  return Id_(C.NSScanner_locale(goobj.Self()))
}
//REJECT: result
//func (goobj NSScanner) ScanInt(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanInt(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanInteger(result C.NSInteger) C.bool {
//  return (C.NSScanner_scanInteger(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanLongLong(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanLongLong(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanUnsignedLongLong(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanUnsignedLongLong(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanFloat(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanFloat(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanDouble(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanDouble(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanHexInt(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanHexInt(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanHexLongLong(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanHexLongLong(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanHexFloat(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanHexFloat(goobj.Self(), result))
//}
//REJECT: result
//func (goobj NSScanner) ScanHexDouble(result *INVALID TYPE*) C.bool {
//  return (C.NSScanner_scanHexDouble(goobj.Self(), result))
//}
func (goobj NSScanner) ScanStringIntoString(string NSString, result NSString) C.bool {
  return (C.NSScanner_scanStringIntoString(goobj.Self(), string.Self(), result.Self()))
}
func (goobj NSScanner) ScanCharactersFromSetIntoString(set NSCharacterSet, result NSString) C.bool {
  return (C.NSScanner_scanCharactersFromSetIntoString(goobj.Self(), set.Self(), result.Self()))
}
func (goobj NSScanner) ScanUpToStringIntoString(string NSString, result NSString) C.bool {
  return (C.NSScanner_scanUpToStringIntoString(goobj.Self(), string.Self(), result.Self()))
}
func (goobj NSScanner) ScanUpToCharactersFromSetIntoString(set NSCharacterSet, result NSString) C.bool {
  return (C.NSScanner_scanUpToCharactersFromSetIntoString(goobj.Self(), set.Self(), result.Self()))
}
func (goobj NSScanner) IsAtEnd() C.bool {
  return (C.NSScanner_isAtEnd(goobj.Self()))
}
func NSScanner_initWithString(string NSString) NSScanner {
  return NSScanner_(Id(C.NSScanner_initWithString(string.Self())))
}
//REJECT: dcm
//func (goobj NSScanner) ScanDecimal(dcm C.NSDecimal) C.bool {
//  return (C.NSScanner_scanDecimal(goobj.Self(), dcm))
//}

type NSDictionary struct {
  NSObject
}
func NSDictionary_(i Id) NSDictionary {
  return NSDictionary{ NSObject_(i) }
}
func (goobj NSDictionary) Count() C.uint {
  return (C.NSDictionary_count(goobj.Self()))
}
func (goobj NSDictionary) ObjectForKey(aKey Id) Id {
  return Id_(C.NSDictionary_objectForKey(goobj.Self(), unsafe.Pointer(aKey)))
}
func (goobj NSDictionary) KeyEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSDictionary_keyEnumerator(goobj.Self())))
}
func (goobj NSDictionary) AllKeys() NSArray {
  return NSArray_(Id(C.NSDictionary_allKeys(goobj.Self())))
}
func (goobj NSDictionary) AllKeysForObject(anObject Id) NSArray {
  return NSArray_(Id(C.NSDictionary_allKeysForObject(goobj.Self(), unsafe.Pointer(anObject))))
}
func (goobj NSDictionary) AllValues() NSArray {
  return NSArray_(Id(C.NSDictionary_allValues(goobj.Self())))
}
func (goobj NSDictionary) Description() NSString {
  return NSString_(Id(C.NSDictionary_description(goobj.Self())))
}
func (goobj NSDictionary) DescriptionInStringsFileFormat() NSString {
  return NSString_(Id(C.NSDictionary_descriptionInStringsFileFormat(goobj.Self())))
}
func (goobj NSDictionary) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSDictionary_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func (goobj NSDictionary) DescriptionWithLocaleIndent(locale Id, level C.uint) NSString {
  return NSString_(Id(C.NSDictionary_descriptionWithLocaleIndent(goobj.Self(), unsafe.Pointer(locale), level)))
}
func (goobj NSDictionary) IsEqualToDictionary(otherDictionary NSDictionary) C.bool {
  return (C.NSDictionary_isEqualToDictionary(goobj.Self(), otherDictionary.Self()))
}
func (goobj NSDictionary) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSDictionary_objectEnumerator(goobj.Self())))
}
func (goobj NSDictionary) ObjectsForKeysNotFoundMarker(keys NSArray, marker Id) NSArray {
  return NSArray_(Id(C.NSDictionary_objectsForKeysNotFoundMarker(goobj.Self(), keys.Self(), unsafe.Pointer(marker))))
}
func (goobj NSDictionary) WriteToFileAtomically(path NSString, useAuxiliaryFile C.bool) C.bool {
  return (C.NSDictionary_writeToFileAtomically(goobj.Self(), path.Self(), useAuxiliaryFile))
}
func (goobj NSDictionary) WriteToURLAtomically(url NSURL, atomically C.bool) C.bool {
  return (C.NSDictionary_writeToURLAtomically(goobj.Self(), url.Self(), atomically))
}
//REJECT: comparator
//func (goobj NSDictionary) KeysSortedByValueUsingSelector(comparator C.SEL) NSArray {
//  return NSArray_(Id(C.NSDictionary_keysSortedByValueUsingSelector(goobj.Self(), comparator)))
//}
func (goobj NSDictionary) GetObjectsAndKeys(objects Id, keys Id)  {
  C.NSDictionary_getObjectsAndKeys(goobj.Self(), unsafe.Pointer(objects), unsafe.Pointer(keys))
}
func (goobj NSDictionary) ObjectForKeyedSubscript(key Id) Id {
  return Id_(C.NSDictionary_objectForKeyedSubscript(goobj.Self(), unsafe.Pointer(key)))
}
//REJECT: block
//func (goobj NSDictionary) EnumerateKeysAndObjectsUsingBlock(block *INVALID TYPE*)  {
//  C.NSDictionary_enumerateKeysAndObjectsUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSDictionary) EnumerateKeysAndObjectsWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSDictionary_enumerateKeysAndObjectsWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//REJECT: cmptr
//func (goobj NSDictionary) KeysSortedByValueUsingComparator(cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSDictionary_keysSortedByValueUsingComparator(goobj.Self(), cmptr)))
//}
//REJECT: opts cmptr
//func (goobj NSDictionary) KeysSortedByValueWithOptionsUsingComparator(opts C.NSSortOptions, cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSDictionary_keysSortedByValueWithOptionsUsingComparator(goobj.Self(), opts, cmptr)))
//}
//unacceptalble-method
//func (goobj NSDictionary) KeysOfEntriesPassingTest(predicate C.bool) NSSet {
//  return NSSet_(Id(C.NSDictionary_keysOfEntriesPassingTest(goobj.Self(), predicate)))
//}
//REJECT: opts
//func (goobj NSDictionary) KeysOfEntriesWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) NSSet {
//  return NSSet_(Id(C.NSDictionary_keysOfEntriesWithOptionsPassingTest(goobj.Self(), opts, predicate)))
//}
func NSDictionary_init() NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_init()))
}
func NSDictionary_initWithObjectsForKeysCount(objects Id, keys Id, cnt C.uint) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithObjectsForKeysCount(unsafe.Pointer(objects), unsafe.Pointer(keys), cnt)))
}
func NSDictionary_initWithObjectsAndKeys(firstObject Id) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithObjectsAndKeys(unsafe.Pointer(firstObject))))
}
func NSDictionary_initWithDictionary(otherDictionary NSDictionary) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithDictionary(otherDictionary.Self())))
}
func NSDictionary_initWithDictionaryCopyItems(otherDictionary NSDictionary, flag C.bool) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithDictionaryCopyItems(otherDictionary.Self(), flag)))
}
func NSDictionary_initWithObjectsForKeys(objects NSArray, keys NSArray) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithObjectsForKeys(objects.Self(), keys.Self())))
}
func NSDictionary_initWithContentsOfFile(path NSString) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithContentsOfFile(path.Self())))
}
func NSDictionary_initWithContentsOfURL(url NSURL) NSDictionary {
  return NSDictionary_(Id(C.NSDictionary_initWithContentsOfURL(url.Self())))
}
func (goobj NSDictionary) FileSize() C.ulonglong {
  return (C.NSDictionary_fileSize(goobj.Self()))
}
func (goobj NSDictionary) FileModificationDate() NSDate {
  return NSDate_(Id(C.NSDictionary_fileModificationDate(goobj.Self())))
}
func (goobj NSDictionary) FileType() NSString {
  return NSString_(Id(C.NSDictionary_fileType(goobj.Self())))
}
func (goobj NSDictionary) FilePosixPermissions() C.uint {
  return (C.NSDictionary_filePosixPermissions(goobj.Self()))
}
func (goobj NSDictionary) FileOwnerAccountName() NSString {
  return NSString_(Id(C.NSDictionary_fileOwnerAccountName(goobj.Self())))
}
func (goobj NSDictionary) FileGroupOwnerAccountName() NSString {
  return NSString_(Id(C.NSDictionary_fileGroupOwnerAccountName(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSDictionary) FileSystemNumber() C.NSInteger {
//  return (C.NSDictionary_fileSystemNumber(goobj.Self()))
//}
func (goobj NSDictionary) FileSystemFileNumber() C.uint {
  return (C.NSDictionary_fileSystemFileNumber(goobj.Self()))
}
func (goobj NSDictionary) FileExtensionHidden() C.bool {
  return (C.NSDictionary_fileExtensionHidden(goobj.Self()))
}
//REJECT: OSType
//func (goobj NSDictionary) FileHFSCreatorCode() C.OSType {
//  return (C.NSDictionary_fileHFSCreatorCode(goobj.Self()))
//}
//REJECT: OSType
//func (goobj NSDictionary) FileHFSTypeCode() C.OSType {
//  return (C.NSDictionary_fileHFSTypeCode(goobj.Self()))
//}
func (goobj NSDictionary) FileIsImmutable() C.bool {
  return (C.NSDictionary_fileIsImmutable(goobj.Self()))
}
func (goobj NSDictionary) FileIsAppendOnly() C.bool {
  return (C.NSDictionary_fileIsAppendOnly(goobj.Self()))
}
func (goobj NSDictionary) FileCreationDate() NSDate {
  return NSDate_(Id(C.NSDictionary_fileCreationDate(goobj.Self())))
}
func (goobj NSDictionary) FileOwnerAccountID() NSNumber {
  return NSNumber_(Id(C.NSDictionary_fileOwnerAccountID(goobj.Self())))
}
func (goobj NSDictionary) FileGroupOwnerAccountID() NSNumber {
  return NSNumber_(Id(C.NSDictionary_fileGroupOwnerAccountID(goobj.Self())))
}
func (goobj NSDictionary) ValueForKey(key NSString) Id {
  return Id_(C.NSDictionary_valueForKey(goobj.Self(), key.Self()))
}

type NSMutableDictionary struct {
  NSDictionary
}
func NSMutableDictionary_(i Id) NSMutableDictionary {
  return NSMutableDictionary{ NSDictionary_(i) }
}
func (goobj NSMutableDictionary) RemoveObjectForKey(aKey Id)  {
  C.NSMutableDictionary_removeObjectForKey(goobj.Self(), unsafe.Pointer(aKey))
}
func (goobj NSMutableDictionary) SetObjectForKey(anObject Id, aKey Id)  {
  C.NSMutableDictionary_setObjectForKey(goobj.Self(), unsafe.Pointer(anObject), unsafe.Pointer(aKey))
}
func (goobj NSMutableDictionary) AddEntriesFromDictionary(otherDictionary NSDictionary)  {
  C.NSMutableDictionary_addEntriesFromDictionary(goobj.Self(), otherDictionary.Self())
}
func (goobj NSMutableDictionary) RemoveAllObjects()  {
  C.NSMutableDictionary_removeAllObjects(goobj.Self())
}
func (goobj NSMutableDictionary) RemoveObjectsForKeys(keyArray NSArray)  {
  C.NSMutableDictionary_removeObjectsForKeys(goobj.Self(), keyArray.Self())
}
func (goobj NSMutableDictionary) SetDictionary(otherDictionary NSDictionary)  {
  C.NSMutableDictionary_setDictionary(goobj.Self(), otherDictionary.Self())
}
func (goobj NSMutableDictionary) SetObjectForKeyedSubscript(obj Id, key Id)  {
  C.NSMutableDictionary_setObjectForKeyedSubscript(goobj.Self(), unsafe.Pointer(obj), unsafe.Pointer(key))
}
func NSMutableDictionary_init() NSMutableDictionary {
  return NSMutableDictionary_(Id(C.NSMutableDictionary_init()))
}
func NSMutableDictionary_initWithCapacity(numItems C.uint) NSMutableDictionary {
  return NSMutableDictionary_(Id(C.NSMutableDictionary_initWithCapacity(numItems)))
}
func (goobj NSMutableDictionary) SetValueForKey(value Id, key NSString)  {
  C.NSMutableDictionary_setValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}

type NSDecimalNumber struct {
  NSNumber
}
func NSDecimalNumber_(i Id) NSDecimalNumber {
  return NSDecimalNumber{ NSNumber_(i) }
}
func NSDecimalNumber_init() NSDecimalNumber {
  p := Id(C.NSDecimalNumber_init())
  return NSDecimalNumber_(p)
}
func NSDecimalNumber_initWithMantissaExponentIsNegative(mantissa C.ulonglong, exponent C.short, flag C.bool) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_initWithMantissaExponentIsNegative(mantissa, exponent, flag)))
}
//REJECT: dcm
//func NSDecimalNumber_initWithDecimal(dcm C.NSDecimal) NSDecimalNumber {
//  return NSDecimalNumber_(Id(C.NSDecimalNumber_initWithDecimal(dcm)))
//}
func NSDecimalNumber_initWithString(numberValue NSString) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_initWithString(numberValue.Self())))
}
func NSDecimalNumber_initWithStringLocale(numberValue NSString, locale Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_initWithStringLocale(numberValue.Self(), unsafe.Pointer(locale))))
}
func (goobj NSDecimalNumber) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSDecimalNumber_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
//REJECT: NSDecimal
//func (goobj NSDecimalNumber) DecimalValue() C.NSDecimal {
//  return (C.NSDecimalNumber_decimalValue(goobj.Self()))
//}
func (goobj NSDecimalNumber) DecimalNumberByAdding(decimalNumber NSDecimalNumber) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByAdding(goobj.Self(), decimalNumber.Self())))
}
func (goobj NSDecimalNumber) DecimalNumberByAddingWithBehavior(decimalNumber NSDecimalNumber, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByAddingWithBehavior(goobj.Self(), decimalNumber.Self(), unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberBySubtracting(decimalNumber NSDecimalNumber) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberBySubtracting(goobj.Self(), decimalNumber.Self())))
}
func (goobj NSDecimalNumber) DecimalNumberBySubtractingWithBehavior(decimalNumber NSDecimalNumber, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberBySubtractingWithBehavior(goobj.Self(), decimalNumber.Self(), unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberByMultiplyingBy(decimalNumber NSDecimalNumber) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByMultiplyingBy(goobj.Self(), decimalNumber.Self())))
}
func (goobj NSDecimalNumber) DecimalNumberByMultiplyingByWithBehavior(decimalNumber NSDecimalNumber, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByMultiplyingByWithBehavior(goobj.Self(), decimalNumber.Self(), unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberByDividingBy(decimalNumber NSDecimalNumber) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByDividingBy(goobj.Self(), decimalNumber.Self())))
}
func (goobj NSDecimalNumber) DecimalNumberByDividingByWithBehavior(decimalNumber NSDecimalNumber, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByDividingByWithBehavior(goobj.Self(), decimalNumber.Self(), unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberByRaisingToPower(power C.uint) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByRaisingToPower(goobj.Self(), power)))
}
func (goobj NSDecimalNumber) DecimalNumberByRaisingToPowerWithBehavior(power C.uint, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByRaisingToPowerWithBehavior(goobj.Self(), power, unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberByMultiplyingByPowerOf10(power C.short) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10(goobj.Self(), power)))
}
func (goobj NSDecimalNumber) DecimalNumberByMultiplyingByPowerOf10WithBehavior(power C.short, behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByMultiplyingByPowerOf10WithBehavior(goobj.Self(), power, unsafe.Pointer(behavior))))
}
func (goobj NSDecimalNumber) DecimalNumberByRoundingAccordingToBehavior(behavior Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber_decimalNumberByRoundingAccordingToBehavior(goobj.Self(), unsafe.Pointer(behavior))))
}
//REJECT: NSComparisonResult
//func (goobj NSDecimalNumber) Compare(decimalNumber NSNumber) C.NSComparisonResult {
//  return (C.NSDecimalNumber_compare(goobj.Self(), decimalNumber.Self()))
//}
func (goobj NSDecimalNumber) ObjCType() string {
  return C.GoString(C.NSDecimalNumber_objCType(goobj.Self()))
}
func (goobj NSDecimalNumber) DoubleValue() C.double {
  return (C.NSDecimalNumber_doubleValue(goobj.Self()))
}
func NSDecimalNumber_decimalNumberWithMantissaExponentIsNegative(mantissa C.ulonglong, exponent C.short, flag C.bool) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__decimalNumberWithMantissaExponentIsNegative(mantissa, exponent, flag)))
}
//REJECT: dcm
//func NSDecimalNumber_decimalNumberWithDecimal(dcm C.NSDecimal) NSDecimalNumber {
//  return NSDecimalNumber_(Id(C.NSDecimalNumber__decimalNumberWithDecimal(dcm)))
//}
func NSDecimalNumber_decimalNumberWithString(numberValue NSString) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__decimalNumberWithString(numberValue.Self())))
}
func NSDecimalNumber_decimalNumberWithStringLocale(numberValue NSString, locale Id) NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__decimalNumberWithStringLocale(numberValue.Self(), unsafe.Pointer(locale))))
}
func NSDecimalNumber_zero() NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__zero()))
}
func NSDecimalNumber_one() NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__one()))
}
func NSDecimalNumber_minimumDecimalNumber() NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__minimumDecimalNumber()))
}
func NSDecimalNumber_maximumDecimalNumber() NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__maximumDecimalNumber()))
}
func NSDecimalNumber_notANumber() NSDecimalNumber {
  return NSDecimalNumber_(Id(C.NSDecimalNumber__notANumber()))
}
func NSDecimalNumber_setDefaultBehavior(behavior Id)  {
  C.NSDecimalNumber__setDefaultBehavior(unsafe.Pointer(behavior))
}
func NSDecimalNumber_defaultBehavior() Id {
  return Id_(C.NSDecimalNumber__defaultBehavior())
}
type NSDecimalNumberHandler struct {
  NSObject
}
func NSDecimalNumberHandler_(i Id) NSDecimalNumberHandler {
  return NSDecimalNumberHandler{ NSObject_(i) }
}
func NSDecimalNumberHandler_init() NSDecimalNumberHandler {
  p := Id(C.NSDecimalNumberHandler_init())
  return NSDecimalNumberHandler_(p)
}
func NSDecimalNumberHandler_initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode C.NSRoundingMode, scale C.short, exact C.bool, overflow C.bool, underflow C.bool, divideByZero C.bool) NSDecimalNumberHandler {
  return NSDecimalNumberHandler_(Id(C.NSDecimalNumberHandler_initWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode, scale, exact, overflow, underflow, divideByZero)))
}
func NSDecimalNumberHandler_defaultDecimalNumberHandler() Id {
  return Id_(C.NSDecimalNumberHandler__defaultDecimalNumberHandler())
}
func NSDecimalNumberHandler_decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode C.NSRoundingMode, scale C.short, exact C.bool, overflow C.bool, underflow C.bool, divideByZero C.bool) Id {
  return Id_(C.NSDecimalNumberHandler__decimalNumberHandlerWithRoundingModeScaleRaiseOnExactnessRaiseOnOverflowRaiseOnUnderflowRaiseOnDivideByZero(roundingMode, scale, exact, overflow, underflow, divideByZero))
}
type NSError struct {
  NSObject
}
func NSError_(i Id) NSError {
  return NSError{ NSObject_(i) }
}
func NSError_init() NSError {
  p := Id(C.NSError_init())
  return NSError_(p)
}
//REJECT: code
//func NSError_initWithDomainCodeUserInfo(domain NSString, code C.NSInteger, dict NSDictionary) NSError {
//  return NSError_(Id(C.NSError_initWithDomainCodeUserInfo(domain.Self(), code, dict.Self())))
//}
func (goobj NSError) Domain() NSString {
  return NSString_(Id(C.NSError_domain(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSError) Code() C.NSInteger {
//  return (C.NSError_code(goobj.Self()))
//}
func (goobj NSError) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSError_userInfo(goobj.Self())))
}
func (goobj NSError) LocalizedDescription() NSString {
  return NSString_(Id(C.NSError_localizedDescription(goobj.Self())))
}
func (goobj NSError) LocalizedFailureReason() NSString {
  return NSString_(Id(C.NSError_localizedFailureReason(goobj.Self())))
}
func (goobj NSError) LocalizedRecoverySuggestion() NSString {
  return NSString_(Id(C.NSError_localizedRecoverySuggestion(goobj.Self())))
}
func (goobj NSError) LocalizedRecoveryOptions() NSArray {
  return NSArray_(Id(C.NSError_localizedRecoveryOptions(goobj.Self())))
}
func (goobj NSError) RecoveryAttempter() Id {
  return Id_(C.NSError_recoveryAttempter(goobj.Self()))
}
func (goobj NSError) HelpAnchor() NSString {
  return NSString_(Id(C.NSError_helpAnchor(goobj.Self())))
}
//REJECT: code
//func NSError_errorWithDomainCodeUserInfo(domain NSString, code C.NSInteger, dict NSDictionary) Id {
//  return Id_(C.NSError__errorWithDomainCodeUserInfo(domain.Self(), code, dict.Self()))
//}
type NSException struct {
  NSObject
}
func NSException_(i Id) NSException {
  return NSException{ NSObject_(i) }
}
func NSException_init() NSException {
  p := Id(C.NSException_init())
  return NSException_(p)
}
func NSException_initWithNameReasonUserInfo(aName NSString, aReason NSString, aUserInfo NSDictionary) NSException {
  return NSException_(Id(C.NSException_initWithNameReasonUserInfo(aName.Self(), aReason.Self(), aUserInfo.Self())))
}
func (goobj NSException) Name() NSString {
  return NSString_(Id(C.NSException_name(goobj.Self())))
}
func (goobj NSException) Reason() NSString {
  return NSString_(Id(C.NSException_reason(goobj.Self())))
}
func (goobj NSException) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSException_userInfo(goobj.Self())))
}
func (goobj NSException) CallStackReturnAddresses() NSArray {
  return NSArray_(Id(C.NSException_callStackReturnAddresses(goobj.Self())))
}
func (goobj NSException) CallStackSymbols() NSArray {
  return NSArray_(Id(C.NSException_callStackSymbols(goobj.Self())))
}
func (goobj NSException) Raise()  {
  C.NSException_raise(goobj.Self())
}
func NSException_exceptionWithNameReasonUserInfo(name NSString, reason NSString, userInfo NSDictionary) NSException {
  return NSException_(Id(C.NSException__exceptionWithNameReasonUserInfo(name.Self(), reason.Self(), userInfo.Self())))
}
type NSAssertionHandler struct {
  NSObject
}
func NSAssertionHandler_(i Id) NSAssertionHandler {
  return NSAssertionHandler{ NSObject_(i) }
}
func NSAssertionHandler_init() NSAssertionHandler {
  p := Id(C.NSAssertionHandler_init())
  return NSAssertionHandler_(p)
}
//REJECT: selector line
//func (goobj NSAssertionHandler) HandleFailureInMethodObjectFileLineNumberDescription(selector C.SEL, object Id, fileName NSString, line C.NSInteger, format NSString)  {
//  C.NSAssertionHandler_handleFailureInMethodObjectFileLineNumberDescription(goobj.Self(), selector, unsafe.Pointer(object), fileName.Self(), line, format.Self())
//}
//REJECT: line
//func (goobj NSAssertionHandler) HandleFailureInFunctionFileLineNumberDescription(functionName NSString, fileName NSString, line C.NSInteger, format NSString)  {
//  C.NSAssertionHandler_handleFailureInFunctionFileLineNumberDescription(goobj.Self(), functionName.Self(), fileName.Self(), line, format.Self())
//}
func NSAssertionHandler_currentHandler() NSAssertionHandler {
  return NSAssertionHandler_(Id(C.NSAssertionHandler__currentHandler()))
}
type NSFileHandle struct {
  NSObject
}
func NSFileHandle_(i Id) NSFileHandle {
  return NSFileHandle{ NSObject_(i) }
}
func NSFileHandle_init() NSFileHandle {
  p := Id(C.NSFileHandle_init())
  return NSFileHandle_(p)
}
func (goobj NSFileHandle) AvailableData() NSData {
  return NSData_(Id(C.NSFileHandle_availableData(goobj.Self())))
}
func (goobj NSFileHandle) ReadDataToEndOfFile() NSData {
  return NSData_(Id(C.NSFileHandle_readDataToEndOfFile(goobj.Self())))
}
func (goobj NSFileHandle) ReadDataOfLength(length C.uint) NSData {
  return NSData_(Id(C.NSFileHandle_readDataOfLength(goobj.Self(), length)))
}
func (goobj NSFileHandle) WriteData(data NSData)  {
  C.NSFileHandle_writeData(goobj.Self(), data.Self())
}
func (goobj NSFileHandle) OffsetInFile() C.ulonglong {
  return (C.NSFileHandle_offsetInFile(goobj.Self()))
}
func (goobj NSFileHandle) SeekToEndOfFile() C.ulonglong {
  return (C.NSFileHandle_seekToEndOfFile(goobj.Self()))
}
func (goobj NSFileHandle) SeekToFileOffset(offset C.ulonglong)  {
  C.NSFileHandle_seekToFileOffset(goobj.Self(), offset)
}
func (goobj NSFileHandle) TruncateFileAtOffset(offset C.ulonglong)  {
  C.NSFileHandle_truncateFileAtOffset(goobj.Self(), offset)
}
func (goobj NSFileHandle) SynchronizeFile()  {
  C.NSFileHandle_synchronizeFile(goobj.Self())
}
func (goobj NSFileHandle) CloseFile()  {
  C.NSFileHandle_closeFile(goobj.Self())
}
func (goobj NSFileHandle) ReadInBackgroundAndNotifyForModes(modes NSArray)  {
  C.NSFileHandle_readInBackgroundAndNotifyForModes(goobj.Self(), modes.Self())
}
func (goobj NSFileHandle) ReadInBackgroundAndNotify()  {
  C.NSFileHandle_readInBackgroundAndNotify(goobj.Self())
}
func (goobj NSFileHandle) ReadToEndOfFileInBackgroundAndNotifyForModes(modes NSArray)  {
  C.NSFileHandle_readToEndOfFileInBackgroundAndNotifyForModes(goobj.Self(), modes.Self())
}
func (goobj NSFileHandle) ReadToEndOfFileInBackgroundAndNotify()  {
  C.NSFileHandle_readToEndOfFileInBackgroundAndNotify(goobj.Self())
}
func (goobj NSFileHandle) AcceptConnectionInBackgroundAndNotifyForModes(modes NSArray)  {
  C.NSFileHandle_acceptConnectionInBackgroundAndNotifyForModes(goobj.Self(), modes.Self())
}
func (goobj NSFileHandle) AcceptConnectionInBackgroundAndNotify()  {
  C.NSFileHandle_acceptConnectionInBackgroundAndNotify(goobj.Self())
}
func (goobj NSFileHandle) WaitForDataInBackgroundAndNotifyForModes(modes NSArray)  {
  C.NSFileHandle_waitForDataInBackgroundAndNotifyForModes(goobj.Self(), modes.Self())
}
func (goobj NSFileHandle) WaitForDataInBackgroundAndNotify()  {
  C.NSFileHandle_waitForDataInBackgroundAndNotify(goobj.Self())
}
//REJECT: *INVALID TYPE*
//func (goobj NSFileHandle) ReadabilityHandler() *INVALID TYPE* {
//  return (C.NSFileHandle_readabilityHandler(goobj.Self()))
//}
//REJECT: readabilityHandler
//func (goobj NSFileHandle) SetReadabilityHandler(readabilityHandler *INVALID TYPE*)  {
//  C.NSFileHandle_setReadabilityHandler(goobj.Self(), readabilityHandler)
//}
//REJECT: *INVALID TYPE*
//func (goobj NSFileHandle) WriteabilityHandler() *INVALID TYPE* {
//  return (C.NSFileHandle_writeabilityHandler(goobj.Self()))
//}
//REJECT: writeabilityHandler
//func (goobj NSFileHandle) SetWriteabilityHandler(writeabilityHandler *INVALID TYPE*)  {
//  C.NSFileHandle_setWriteabilityHandler(goobj.Self(), writeabilityHandler)
//}
func NSFileHandle_initWithFileDescriptorCloseOnDealloc(fd C.int, closeopt C.bool) NSFileHandle {
  return NSFileHandle_(Id(C.NSFileHandle_initWithFileDescriptorCloseOnDealloc(fd, closeopt)))
}
func NSFileHandle_initWithFileDescriptor(fd C.int) NSFileHandle {
  return NSFileHandle_(Id(C.NSFileHandle_initWithFileDescriptor(fd)))
}
func (goobj NSFileHandle) FileDescriptor() C.int {
  return (C.NSFileHandle_fileDescriptor(goobj.Self()))
}

type NSPipe struct {
  NSObject
}
func NSPipe_(i Id) NSPipe {
  return NSPipe{ NSObject_(i) }
}
func (goobj NSPipe) FileHandleForReading() NSFileHandle {
  return NSFileHandle_(Id(C.NSPipe_fileHandleForReading(goobj.Self())))
}
func (goobj NSPipe) FileHandleForWriting() NSFileHandle {
  return NSFileHandle_(Id(C.NSPipe_fileHandleForWriting(goobj.Self())))
}
func NSPipe_init() NSPipe {
  return NSPipe_(Id(C.NSPipe_init()))
}
func NSPipe_pipe() Id {
  return Id_(C.NSPipe__pipe())
}
type NSFileManager struct {
  NSObject
}
func NSFileManager_(i Id) NSFileManager {
  return NSFileManager{ NSObject_(i) }
}
func NSFileManager_init() NSFileManager {
  p := Id(C.NSFileManager_init())
  return NSFileManager_(p)
}
func (goobj NSFileManager) MountedVolumeURLsIncludingResourceValuesForKeysOptions(propertyKeys NSArray, options C.NSVolumeEnumerationOptions) NSArray {
  return NSArray_(Id(C.NSFileManager_mountedVolumeURLsIncludingResourceValuesForKeysOptions(goobj.Self(), propertyKeys.Self(), options)))
}
func (goobj NSFileManager) ContentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(url NSURL, keys NSArray, mask C.NSDirectoryEnumerationOptions, error NSError) NSArray {
  return NSArray_(Id(C.NSFileManager_contentsOfDirectoryAtURLIncludingPropertiesForKeysOptionsError(goobj.Self(), url.Self(), keys.Self(), mask, error.Self())))
}
func (goobj NSFileManager) URLsForDirectoryInDomains(directory C.NSSearchPathDirectory, domainMask C.NSSearchPathDomainMask) NSArray {
  return NSArray_(Id(C.NSFileManager_URLsForDirectoryInDomains(goobj.Self(), directory, domainMask)))
}
func (goobj NSFileManager) URLForDirectoryInDomainAppropriateForURLCreateError(directory C.NSSearchPathDirectory, domain C.NSSearchPathDomainMask, url NSURL, shouldCreate C.bool, error NSError) NSURL {
  return NSURL_(Id(C.NSFileManager_URLForDirectoryInDomainAppropriateForURLCreateError(goobj.Self(), directory, domain, url.Self(), shouldCreate, error.Self())))
}
func (goobj NSFileManager) CreateDirectoryAtURLWithIntermediateDirectoriesAttributesError(url NSURL, createIntermediates C.bool, attributes NSDictionary, error NSError) C.bool {
  return (C.NSFileManager_createDirectoryAtURLWithIntermediateDirectoriesAttributesError(goobj.Self(), url.Self(), createIntermediates, attributes.Self(), error.Self()))
}
func (goobj NSFileManager) CreateSymbolicLinkAtURLWithDestinationURLError(url NSURL, destURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_createSymbolicLinkAtURLWithDestinationURLError(goobj.Self(), url.Self(), destURL.Self(), error.Self()))
}
func (goobj NSFileManager) SetDelegate(delegate Id)  {
  C.NSFileManager_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSFileManager) Delegate() Id {
  return Id_(C.NSFileManager_delegate(goobj.Self()))
}
func (goobj NSFileManager) SetAttributesOfItemAtPathError(attributes NSDictionary, path NSString, error NSError) C.bool {
  return (C.NSFileManager_setAttributesOfItemAtPathError(goobj.Self(), attributes.Self(), path.Self(), error.Self()))
}
func (goobj NSFileManager) CreateDirectoryAtPathWithIntermediateDirectoriesAttributesError(path NSString, createIntermediates C.bool, attributes NSDictionary, error NSError) C.bool {
  return (C.NSFileManager_createDirectoryAtPathWithIntermediateDirectoriesAttributesError(goobj.Self(), path.Self(), createIntermediates, attributes.Self(), error.Self()))
}
func (goobj NSFileManager) ContentsOfDirectoryAtPathError(path NSString, error NSError) NSArray {
  return NSArray_(Id(C.NSFileManager_contentsOfDirectoryAtPathError(goobj.Self(), path.Self(), error.Self())))
}
func (goobj NSFileManager) SubpathsOfDirectoryAtPathError(path NSString, error NSError) NSArray {
  return NSArray_(Id(C.NSFileManager_subpathsOfDirectoryAtPathError(goobj.Self(), path.Self(), error.Self())))
}
func (goobj NSFileManager) AttributesOfItemAtPathError(path NSString, error NSError) NSDictionary {
  return NSDictionary_(Id(C.NSFileManager_attributesOfItemAtPathError(goobj.Self(), path.Self(), error.Self())))
}
func (goobj NSFileManager) AttributesOfFileSystemForPathError(path NSString, error NSError) NSDictionary {
  return NSDictionary_(Id(C.NSFileManager_attributesOfFileSystemForPathError(goobj.Self(), path.Self(), error.Self())))
}
func (goobj NSFileManager) CreateSymbolicLinkAtPathWithDestinationPathError(path NSString, destPath NSString, error NSError) C.bool {
  return (C.NSFileManager_createSymbolicLinkAtPathWithDestinationPathError(goobj.Self(), path.Self(), destPath.Self(), error.Self()))
}
func (goobj NSFileManager) DestinationOfSymbolicLinkAtPathError(path NSString, error NSError) NSString {
  return NSString_(Id(C.NSFileManager_destinationOfSymbolicLinkAtPathError(goobj.Self(), path.Self(), error.Self())))
}
func (goobj NSFileManager) CopyItemAtPathToPathError(srcPath NSString, dstPath NSString, error NSError) C.bool {
  return (C.NSFileManager_copyItemAtPathToPathError(goobj.Self(), srcPath.Self(), dstPath.Self(), error.Self()))
}
func (goobj NSFileManager) MoveItemAtPathToPathError(srcPath NSString, dstPath NSString, error NSError) C.bool {
  return (C.NSFileManager_moveItemAtPathToPathError(goobj.Self(), srcPath.Self(), dstPath.Self(), error.Self()))
}
func (goobj NSFileManager) LinkItemAtPathToPathError(srcPath NSString, dstPath NSString, error NSError) C.bool {
  return (C.NSFileManager_linkItemAtPathToPathError(goobj.Self(), srcPath.Self(), dstPath.Self(), error.Self()))
}
func (goobj NSFileManager) RemoveItemAtPathError(path NSString, error NSError) C.bool {
  return (C.NSFileManager_removeItemAtPathError(goobj.Self(), path.Self(), error.Self()))
}
func (goobj NSFileManager) CopyItemAtURLToURLError(srcURL NSURL, dstURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_copyItemAtURLToURLError(goobj.Self(), srcURL.Self(), dstURL.Self(), error.Self()))
}
func (goobj NSFileManager) MoveItemAtURLToURLError(srcURL NSURL, dstURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_moveItemAtURLToURLError(goobj.Self(), srcURL.Self(), dstURL.Self(), error.Self()))
}
func (goobj NSFileManager) LinkItemAtURLToURLError(srcURL NSURL, dstURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_linkItemAtURLToURLError(goobj.Self(), srcURL.Self(), dstURL.Self(), error.Self()))
}
func (goobj NSFileManager) RemoveItemAtURLError(URL NSURL, error NSError) C.bool {
  return (C.NSFileManager_removeItemAtURLError(goobj.Self(), URL.Self(), error.Self()))
}
func (goobj NSFileManager) TrashItemAtURLResultingItemURLError(url NSURL, outResultingURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_trashItemAtURLResultingItemURLError(goobj.Self(), url.Self(), outResultingURL.Self(), error.Self()))
}
func (goobj NSFileManager) FileAttributesAtPathTraverseLink(path NSString, yorn C.bool) NSDictionary {
  return NSDictionary_(Id(C.NSFileManager_fileAttributesAtPathTraverseLink(goobj.Self(), path.Self(), yorn)))
}
func (goobj NSFileManager) ChangeFileAttributesAtPath(attributes NSDictionary, path NSString) C.bool {
  return (C.NSFileManager_changeFileAttributesAtPath(goobj.Self(), attributes.Self(), path.Self()))
}
func (goobj NSFileManager) DirectoryContentsAtPath(path NSString) NSArray {
  return NSArray_(Id(C.NSFileManager_directoryContentsAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) FileSystemAttributesAtPath(path NSString) NSDictionary {
  return NSDictionary_(Id(C.NSFileManager_fileSystemAttributesAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) PathContentOfSymbolicLinkAtPath(path NSString) NSString {
  return NSString_(Id(C.NSFileManager_pathContentOfSymbolicLinkAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) CreateSymbolicLinkAtPathPathContent(path NSString, otherpath NSString) C.bool {
  return (C.NSFileManager_createSymbolicLinkAtPathPathContent(goobj.Self(), path.Self(), otherpath.Self()))
}
func (goobj NSFileManager) CreateDirectoryAtPathAttributes(path NSString, attributes NSDictionary) C.bool {
  return (C.NSFileManager_createDirectoryAtPathAttributes(goobj.Self(), path.Self(), attributes.Self()))
}
func (goobj NSFileManager) LinkPathToPathHandler(src NSString, dest NSString, handler Id) C.bool {
  return (C.NSFileManager_linkPathToPathHandler(goobj.Self(), src.Self(), dest.Self(), unsafe.Pointer(handler)))
}
func (goobj NSFileManager) CopyPathToPathHandler(src NSString, dest NSString, handler Id) C.bool {
  return (C.NSFileManager_copyPathToPathHandler(goobj.Self(), src.Self(), dest.Self(), unsafe.Pointer(handler)))
}
func (goobj NSFileManager) MovePathToPathHandler(src NSString, dest NSString, handler Id) C.bool {
  return (C.NSFileManager_movePathToPathHandler(goobj.Self(), src.Self(), dest.Self(), unsafe.Pointer(handler)))
}
func (goobj NSFileManager) RemoveFileAtPathHandler(path NSString, handler Id) C.bool {
  return (C.NSFileManager_removeFileAtPathHandler(goobj.Self(), path.Self(), unsafe.Pointer(handler)))
}
func (goobj NSFileManager) CurrentDirectoryPath() NSString {
  return NSString_(Id(C.NSFileManager_currentDirectoryPath(goobj.Self())))
}
func (goobj NSFileManager) ChangeCurrentDirectoryPath(path NSString) C.bool {
  return (C.NSFileManager_changeCurrentDirectoryPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) FileExistsAtPath(path NSString) C.bool {
  return (C.NSFileManager_fileExistsAtPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) FileExistsAtPathIsDirectory(path NSString, isDirectory C.bool) C.bool {
  return (C.NSFileManager_fileExistsAtPathIsDirectory(goobj.Self(), path.Self(), isDirectory))
}
func (goobj NSFileManager) IsReadableFileAtPath(path NSString) C.bool {
  return (C.NSFileManager_isReadableFileAtPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) IsWritableFileAtPath(path NSString) C.bool {
  return (C.NSFileManager_isWritableFileAtPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) IsExecutableFileAtPath(path NSString) C.bool {
  return (C.NSFileManager_isExecutableFileAtPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) IsDeletableFileAtPath(path NSString) C.bool {
  return (C.NSFileManager_isDeletableFileAtPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) ContentsEqualAtPathAndPath(path1 NSString, path2 NSString) C.bool {
  return (C.NSFileManager_contentsEqualAtPathAndPath(goobj.Self(), path1.Self(), path2.Self()))
}
func (goobj NSFileManager) DisplayNameAtPath(path NSString) NSString {
  return NSString_(Id(C.NSFileManager_displayNameAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) ComponentsToDisplayForPath(path NSString) NSArray {
  return NSArray_(Id(C.NSFileManager_componentsToDisplayForPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) EnumeratorAtPath(path NSString) NSDirectoryEnumerator {
  return NSDirectoryEnumerator_(Id(C.NSFileManager_enumeratorAtPath(goobj.Self(), path.Self())))
}
//unacceptalble-method
//func (goobj NSFileManager) EnumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler(url NSURL, keys NSArray, mask C.NSDirectoryEnumerationOptions, handler C.bool) NSDirectoryEnumerator {
//  return NSDirectoryEnumerator_(Id(C.NSFileManager_enumeratorAtURLIncludingPropertiesForKeysOptionsErrorHandler(goobj.Self(), url.Self(), keys.Self(), mask, handler)))
//}
func (goobj NSFileManager) SubpathsAtPath(path NSString) NSArray {
  return NSArray_(Id(C.NSFileManager_subpathsAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) ContentsAtPath(path NSString) NSData {
  return NSData_(Id(C.NSFileManager_contentsAtPath(goobj.Self(), path.Self())))
}
func (goobj NSFileManager) CreateFileAtPathContentsAttributes(path NSString, data NSData, attr NSDictionary) C.bool {
  return (C.NSFileManager_createFileAtPathContentsAttributes(goobj.Self(), path.Self(), data.Self(), attr.Self()))
}
func (goobj NSFileManager) FileSystemRepresentationWithPath(path NSString) string {
  return C.GoString(C.NSFileManager_fileSystemRepresentationWithPath(goobj.Self(), path.Self()))
}
func (goobj NSFileManager) StringWithFileSystemRepresentationLength(str string, len C.uint) NSString {
  return NSString_(Id(C.NSFileManager_stringWithFileSystemRepresentationLength(goobj.Self(), C.CString(str), len)))
}
func (goobj NSFileManager) ReplaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(originalItemURL NSURL, newItemURL NSURL, backupItemName NSString, options C.NSFileManagerItemReplacementOptions, resultingURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_replaceItemAtURLWithItemAtURLBackupItemNameOptionsResultingItemURLError(goobj.Self(), originalItemURL.Self(), newItemURL.Self(), backupItemName.Self(), options, resultingURL.Self(), error.Self()))
}
func (goobj NSFileManager) SetUbiquitousItemAtURLDestinationURLError(flag C.bool, url NSURL, destinationURL NSURL, error NSError) C.bool {
  return (C.NSFileManager_setUbiquitousItemAtURLDestinationURLError(goobj.Self(), flag, url.Self(), destinationURL.Self(), error.Self()))
}
func (goobj NSFileManager) IsUbiquitousItemAtURL(url NSURL) C.bool {
  return (C.NSFileManager_isUbiquitousItemAtURL(goobj.Self(), url.Self()))
}
func (goobj NSFileManager) StartDownloadingUbiquitousItemAtURLError(url NSURL, error NSError) C.bool {
  return (C.NSFileManager_startDownloadingUbiquitousItemAtURLError(goobj.Self(), url.Self(), error.Self()))
}
func (goobj NSFileManager) EvictUbiquitousItemAtURLError(url NSURL, error NSError) C.bool {
  return (C.NSFileManager_evictUbiquitousItemAtURLError(goobj.Self(), url.Self(), error.Self()))
}
func (goobj NSFileManager) URLForUbiquityContainerIdentifier(containerIdentifier NSString) NSURL {
  return NSURL_(Id(C.NSFileManager_URLForUbiquityContainerIdentifier(goobj.Self(), containerIdentifier.Self())))
}
func (goobj NSFileManager) URLForPublishingUbiquitousItemAtURLExpirationDateError(url NSURL, outDate NSDate, error NSError) NSURL {
  return NSURL_(Id(C.NSFileManager_URLForPublishingUbiquitousItemAtURLExpirationDateError(goobj.Self(), url.Self(), outDate.Self(), error.Self())))
}
func (goobj NSFileManager) UbiquityIdentityToken() Id {
  return Id_(C.NSFileManager_ubiquityIdentityToken(goobj.Self()))
}
func (goobj NSFileManager) ContainerURLForSecurityApplicationGroupIdentifier(groupIdentifier NSString) NSURL {
  return NSURL_(Id(C.NSFileManager_containerURLForSecurityApplicationGroupIdentifier(goobj.Self(), groupIdentifier.Self())))
}
func NSFileManager_defaultManager() NSFileManager {
  return NSFileManager_(Id(C.NSFileManager__defaultManager()))
}
type NSDirectoryEnumerator struct {
  NSEnumerator
}
func NSDirectoryEnumerator_(i Id) NSDirectoryEnumerator {
  return NSDirectoryEnumerator{ NSEnumerator_(i) }
}
func NSDirectoryEnumerator_init() NSDirectoryEnumerator {
  p := Id(C.NSDirectoryEnumerator_init())
  return NSDirectoryEnumerator_(p)
}
func (goobj NSDirectoryEnumerator) FileAttributes() NSDictionary {
  return NSDictionary_(Id(C.NSDirectoryEnumerator_fileAttributes(goobj.Self())))
}
func (goobj NSDirectoryEnumerator) DirectoryAttributes() NSDictionary {
  return NSDictionary_(Id(C.NSDirectoryEnumerator_directoryAttributes(goobj.Self())))
}
func (goobj NSDirectoryEnumerator) SkipDescendents()  {
  C.NSDirectoryEnumerator_skipDescendents(goobj.Self())
}
func (goobj NSDirectoryEnumerator) Level() C.uint {
  return (C.NSDirectoryEnumerator_level(goobj.Self()))
}
func (goobj NSDirectoryEnumerator) SkipDescendants()  {
  C.NSDirectoryEnumerator_skipDescendants(goobj.Self())
}

type NSPointerFunctions struct {
  NSObject
}
func NSPointerFunctions_(i Id) NSPointerFunctions {
  return NSPointerFunctions{ NSObject_(i) }
}
func NSPointerFunctions_init() NSPointerFunctions {
  p := Id(C.NSPointerFunctions_init())
  return NSPointerFunctions_(p)
}
//REJECT: options
//func NSPointerFunctions_initWithOptions(options C.NSPointerFunctionsOptions) NSPointerFunctions {
//  return NSPointerFunctions_(Id(C.NSPointerFunctions_initWithOptions(options)))
//}
func (goobj NSPointerFunctions) HashFunction() C.uint {
  return (C.NSPointerFunctions_hashFunction(goobj.Self()))
}
func (goobj NSPointerFunctions) SetHashFunction(hashFunction C.uint)  {
  C.NSPointerFunctions_setHashFunction(goobj.Self(), hashFunction)
}
func (goobj NSPointerFunctions) IsEqualFunction() C.bool {
  return (C.NSPointerFunctions_isEqualFunction(goobj.Self()))
}
func (goobj NSPointerFunctions) SetIsEqualFunction(isEqualFunction C.bool)  {
  C.NSPointerFunctions_setIsEqualFunction(goobj.Self(), isEqualFunction)
}
func (goobj NSPointerFunctions) SizeFunction() C.uint {
  return (C.NSPointerFunctions_sizeFunction(goobj.Self()))
}
func (goobj NSPointerFunctions) SetSizeFunction(sizeFunction C.uint)  {
  C.NSPointerFunctions_setSizeFunction(goobj.Self(), sizeFunction)
}
func (goobj NSPointerFunctions) DescriptionFunction() NSString {
  return NSString_(Id(C.NSPointerFunctions_descriptionFunction(goobj.Self())))
}
func (goobj NSPointerFunctions) SetDescriptionFunction(descriptionFunction NSString)  {
  C.NSPointerFunctions_setDescriptionFunction(goobj.Self(), descriptionFunction.Self())
}
//REJECT: *INVALID TYPE*
//func (goobj NSPointerFunctions) RelinquishFunction() *INVALID TYPE* {
//  return (C.NSPointerFunctions_relinquishFunction(goobj.Self()))
//}
//REJECT: relinquishFunction
//func (goobj NSPointerFunctions) SetRelinquishFunction(relinquishFunction *INVALID TYPE*)  {
//  C.NSPointerFunctions_setRelinquishFunction(goobj.Self(), relinquishFunction)
//}
//REJECT: *INVALID TYPE*
//func (goobj NSPointerFunctions) AcquireFunction() *INVALID TYPE* {
//  return (C.NSPointerFunctions_acquireFunction(goobj.Self()))
//}
//REJECT: acquireFunction
//func (goobj NSPointerFunctions) SetAcquireFunction(acquireFunction *INVALID TYPE*)  {
//  C.NSPointerFunctions_setAcquireFunction(goobj.Self(), acquireFunction)
//}
func (goobj NSPointerFunctions) UsesStrongWriteBarrier() C.bool {
  return (C.NSPointerFunctions_usesStrongWriteBarrier(goobj.Self()))
}
func (goobj NSPointerFunctions) SetUsesStrongWriteBarrier(usesStrongWriteBarrier C.bool)  {
  C.NSPointerFunctions_setUsesStrongWriteBarrier(goobj.Self(), usesStrongWriteBarrier)
}
func (goobj NSPointerFunctions) UsesWeakReadAndWriteBarriers() C.bool {
  return (C.NSPointerFunctions_usesWeakReadAndWriteBarriers(goobj.Self()))
}
func (goobj NSPointerFunctions) SetUsesWeakReadAndWriteBarriers(usesWeakReadAndWriteBarriers C.bool)  {
  C.NSPointerFunctions_setUsesWeakReadAndWriteBarriers(goobj.Self(), usesWeakReadAndWriteBarriers)
}
//REJECT: options
//func NSPointerFunctions_pointerFunctionsWithOptions(options C.NSPointerFunctionsOptions) Id {
//  return Id_(C.NSPointerFunctions__pointerFunctionsWithOptions(options))
//}
type NSHashTable struct {
  NSObject
}
func NSHashTable_(i Id) NSHashTable {
  return NSHashTable{ NSObject_(i) }
}
func NSHashTable_init() NSHashTable {
  p := Id(C.NSHashTable_init())
  return NSHashTable_(p)
}
//REJECT: options
//func NSHashTable_initWithOptionsCapacity(options C.NSPointerFunctionsOptions, initialCapacity C.uint) NSHashTable {
//  return NSHashTable_(Id(C.NSHashTable_initWithOptionsCapacity(options, initialCapacity)))
//}
func NSHashTable_initWithPointerFunctionsCapacity(functions NSPointerFunctions, initialCapacity C.uint) NSHashTable {
  return NSHashTable_(Id(C.NSHashTable_initWithPointerFunctionsCapacity(functions.Self(), initialCapacity)))
}
func (goobj NSHashTable) PointerFunctions() NSPointerFunctions {
  return NSPointerFunctions_(Id(C.NSHashTable_pointerFunctions(goobj.Self())))
}
func (goobj NSHashTable) Count() C.uint {
  return (C.NSHashTable_count(goobj.Self()))
}
func (goobj NSHashTable) Member(object Id) Id {
  return Id_(C.NSHashTable_member(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSHashTable) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSHashTable_objectEnumerator(goobj.Self())))
}
func (goobj NSHashTable) AddObject(object Id)  {
  C.NSHashTable_addObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSHashTable) RemoveObject(object Id)  {
  C.NSHashTable_removeObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSHashTable) RemoveAllObjects()  {
  C.NSHashTable_removeAllObjects(goobj.Self())
}
func (goobj NSHashTable) AllObjects() NSArray {
  return NSArray_(Id(C.NSHashTable_allObjects(goobj.Self())))
}
func (goobj NSHashTable) AnyObject() Id {
  return Id_(C.NSHashTable_anyObject(goobj.Self()))
}
func (goobj NSHashTable) ContainsObject(anObject Id) C.bool {
  return (C.NSHashTable_containsObject(goobj.Self(), unsafe.Pointer(anObject)))
}
func (goobj NSHashTable) IntersectsHashTable(other NSHashTable) C.bool {
  return (C.NSHashTable_intersectsHashTable(goobj.Self(), other.Self()))
}
func (goobj NSHashTable) IsEqualToHashTable(other NSHashTable) C.bool {
  return (C.NSHashTable_isEqualToHashTable(goobj.Self(), other.Self()))
}
func (goobj NSHashTable) IsSubsetOfHashTable(other NSHashTable) C.bool {
  return (C.NSHashTable_isSubsetOfHashTable(goobj.Self(), other.Self()))
}
func (goobj NSHashTable) IntersectHashTable(other NSHashTable)  {
  C.NSHashTable_intersectHashTable(goobj.Self(), other.Self())
}
func (goobj NSHashTable) UnionHashTable(other NSHashTable)  {
  C.NSHashTable_unionHashTable(goobj.Self(), other.Self())
}
func (goobj NSHashTable) MinusHashTable(other NSHashTable)  {
  C.NSHashTable_minusHashTable(goobj.Self(), other.Self())
}
func (goobj NSHashTable) SetRepresentation() NSSet {
  return NSSet_(Id(C.NSHashTable_setRepresentation(goobj.Self())))
}
//REJECT: options
//func NSHashTable_hashTableWithOptions(options C.NSPointerFunctionsOptions) Id {
//  return Id_(C.NSHashTable__hashTableWithOptions(options))
//}
func NSHashTable_hashTableWithWeakObjects() Id {
  return Id_(C.NSHashTable__hashTableWithWeakObjects())
}
func NSHashTable_weakObjectsHashTable() Id {
  return Id_(C.NSHashTable__weakObjectsHashTable())
}
type NSHTTPCookie struct {
  NSObject
}
func NSHTTPCookie_(i Id) NSHTTPCookie {
  return NSHTTPCookie{ NSObject_(i) }
}
func NSHTTPCookie_init() NSHTTPCookie {
  p := Id(C.NSHTTPCookie_init())
  return NSHTTPCookie_(p)
}
func NSHTTPCookie_initWithProperties(properties NSDictionary) NSHTTPCookie {
  return NSHTTPCookie_(Id(C.NSHTTPCookie_initWithProperties(properties.Self())))
}
func (goobj NSHTTPCookie) Properties() NSDictionary {
  return NSDictionary_(Id(C.NSHTTPCookie_properties(goobj.Self())))
}
func (goobj NSHTTPCookie) Version() C.uint {
  return (C.NSHTTPCookie_version(goobj.Self()))
}
func (goobj NSHTTPCookie) Name() NSString {
  return NSString_(Id(C.NSHTTPCookie_name(goobj.Self())))
}
func (goobj NSHTTPCookie) Value() NSString {
  return NSString_(Id(C.NSHTTPCookie_value(goobj.Self())))
}
func (goobj NSHTTPCookie) ExpiresDate() NSDate {
  return NSDate_(Id(C.NSHTTPCookie_expiresDate(goobj.Self())))
}
func (goobj NSHTTPCookie) IsSessionOnly() C.bool {
  return (C.NSHTTPCookie_isSessionOnly(goobj.Self()))
}
func (goobj NSHTTPCookie) Domain() NSString {
  return NSString_(Id(C.NSHTTPCookie_domain(goobj.Self())))
}
func (goobj NSHTTPCookie) Path() NSString {
  return NSString_(Id(C.NSHTTPCookie_path(goobj.Self())))
}
func (goobj NSHTTPCookie) IsSecure() C.bool {
  return (C.NSHTTPCookie_isSecure(goobj.Self()))
}
func (goobj NSHTTPCookie) IsHTTPOnly() C.bool {
  return (C.NSHTTPCookie_isHTTPOnly(goobj.Self()))
}
func (goobj NSHTTPCookie) Comment() NSString {
  return NSString_(Id(C.NSHTTPCookie_comment(goobj.Self())))
}
func (goobj NSHTTPCookie) CommentURL() NSURL {
  return NSURL_(Id(C.NSHTTPCookie_commentURL(goobj.Self())))
}
func (goobj NSHTTPCookie) PortList() NSArray {
  return NSArray_(Id(C.NSHTTPCookie_portList(goobj.Self())))
}
func NSHTTPCookie_cookieWithProperties(properties NSDictionary) Id {
  return Id_(C.NSHTTPCookie__cookieWithProperties(properties.Self()))
}
func NSHTTPCookie_requestHeaderFieldsWithCookies(cookies NSArray) NSDictionary {
  return NSDictionary_(Id(C.NSHTTPCookie__requestHeaderFieldsWithCookies(cookies.Self())))
}
func NSHTTPCookie_cookiesWithResponseHeaderFieldsForURL(headerFields NSDictionary, URL NSURL) NSArray {
  return NSArray_(Id(C.NSHTTPCookie__cookiesWithResponseHeaderFieldsForURL(headerFields.Self(), URL.Self())))
}
type NSHTTPCookieStorage struct {
  NSObject
}
func NSHTTPCookieStorage_(i Id) NSHTTPCookieStorage {
  return NSHTTPCookieStorage{ NSObject_(i) }
}
func NSHTTPCookieStorage_init() NSHTTPCookieStorage {
  p := Id(C.NSHTTPCookieStorage_init())
  return NSHTTPCookieStorage_(p)
}
func (goobj NSHTTPCookieStorage) Cookies() NSArray {
  return NSArray_(Id(C.NSHTTPCookieStorage_cookies(goobj.Self())))
}
func (goobj NSHTTPCookieStorage) SetCookie(cookie NSHTTPCookie)  {
  C.NSHTTPCookieStorage_setCookie(goobj.Self(), cookie.Self())
}
func (goobj NSHTTPCookieStorage) DeleteCookie(cookie NSHTTPCookie)  {
  C.NSHTTPCookieStorage_deleteCookie(goobj.Self(), cookie.Self())
}
func (goobj NSHTTPCookieStorage) CookiesForURL(URL NSURL) NSArray {
  return NSArray_(Id(C.NSHTTPCookieStorage_cookiesForURL(goobj.Self(), URL.Self())))
}
func (goobj NSHTTPCookieStorage) SetCookiesForURLMainDocumentURL(cookies NSArray, URL NSURL, mainDocumentURL NSURL)  {
  C.NSHTTPCookieStorage_setCookiesForURLMainDocumentURL(goobj.Self(), cookies.Self(), URL.Self(), mainDocumentURL.Self())
}
func (goobj NSHTTPCookieStorage) CookieAcceptPolicy() C.NSHTTPCookieAcceptPolicy {
  return (C.NSHTTPCookieStorage_cookieAcceptPolicy(goobj.Self()))
}
func (goobj NSHTTPCookieStorage) SetCookieAcceptPolicy(cookieAcceptPolicy C.NSHTTPCookieAcceptPolicy)  {
  C.NSHTTPCookieStorage_setCookieAcceptPolicy(goobj.Self(), cookieAcceptPolicy)
}
func (goobj NSHTTPCookieStorage) SortedCookiesUsingDescriptors(sortOrder NSArray) NSArray {
  return NSArray_(Id(C.NSHTTPCookieStorage_sortedCookiesUsingDescriptors(goobj.Self(), sortOrder.Self())))
}
func NSHTTPCookieStorage_sharedHTTPCookieStorage() NSHTTPCookieStorage {
  return NSHTTPCookieStorage_(Id(C.NSHTTPCookieStorage__sharedHTTPCookieStorage()))
}
type NSIndexPath struct {
  NSObject
}
func NSIndexPath_(i Id) NSIndexPath {
  return NSIndexPath{ NSObject_(i) }
}
func NSIndexPath_init() NSIndexPath {
  return NSIndexPath_(Id(C.NSIndexPath_init()))
}
func NSIndexPath_initWithIndexesLength(indexes C.uint, length C.uint) NSIndexPath {
  return NSIndexPath_(Id(C.NSIndexPath_initWithIndexesLength(indexes, length)))
}
func NSIndexPath_initWithIndex(index C.uint) NSIndexPath {
  return NSIndexPath_(Id(C.NSIndexPath_initWithIndex(index)))
}
func (goobj NSIndexPath) IndexPathByAddingIndex(index C.uint) NSIndexPath {
  return NSIndexPath_(Id(C.NSIndexPath_indexPathByAddingIndex(goobj.Self(), index)))
}
func (goobj NSIndexPath) IndexPathByRemovingLastIndex() NSIndexPath {
  return NSIndexPath_(Id(C.NSIndexPath_indexPathByRemovingLastIndex(goobj.Self())))
}
func (goobj NSIndexPath) IndexAtPosition(position C.uint) C.uint {
  return (C.NSIndexPath_indexAtPosition(goobj.Self(), position))
}
func (goobj NSIndexPath) Length() C.uint {
  return (C.NSIndexPath_length(goobj.Self()))
}
func (goobj NSIndexPath) GetIndexes(indexes C.uint)  {
  C.NSIndexPath_getIndexes(goobj.Self(), indexes)
}
//REJECT: NSComparisonResult
//func (goobj NSIndexPath) Compare(otherObject NSIndexPath) C.NSComparisonResult {
//  return (C.NSIndexPath_compare(goobj.Self(), otherObject.Self()))
//}
//REJECT: instancetype
//func NSIndexPath_indexPathWithIndex(index C.uint) C.instancetype {
//  return (C.NSIndexPath__indexPathWithIndex(index))
//}
//REJECT: instancetype
//func NSIndexPath_indexPathWithIndexesLength(indexes C.uint, length C.uint) C.instancetype {
//  return (C.NSIndexPath__indexPathWithIndexesLength(indexes, length))
//}
type NSIndexSet struct {
  NSObject
}
func NSIndexSet_(i Id) NSIndexSet {
  return NSIndexSet{ NSObject_(i) }
}
func NSIndexSet_init() NSIndexSet {
  return NSIndexSet_(Id(C.NSIndexSet_init()))
}
//REJECT: range
//func NSIndexSet_initWithIndexesInRange(range_ C.NSRange) NSIndexSet {
//  return NSIndexSet_(Id(C.NSIndexSet_initWithIndexesInRange(range_)))
//}
func NSIndexSet_initWithIndexSet(indexSet NSIndexSet) NSIndexSet {
  return NSIndexSet_(Id(C.NSIndexSet_initWithIndexSet(indexSet.Self())))
}
func NSIndexSet_initWithIndex(value C.uint) NSIndexSet {
  return NSIndexSet_(Id(C.NSIndexSet_initWithIndex(value)))
}
func (goobj NSIndexSet) IsEqualToIndexSet(indexSet NSIndexSet) C.bool {
  return (C.NSIndexSet_isEqualToIndexSet(goobj.Self(), indexSet.Self()))
}
func (goobj NSIndexSet) Count() C.uint {
  return (C.NSIndexSet_count(goobj.Self()))
}
func (goobj NSIndexSet) FirstIndex() C.uint {
  return (C.NSIndexSet_firstIndex(goobj.Self()))
}
func (goobj NSIndexSet) LastIndex() C.uint {
  return (C.NSIndexSet_lastIndex(goobj.Self()))
}
func (goobj NSIndexSet) IndexGreaterThanIndex(value C.uint) C.uint {
  return (C.NSIndexSet_indexGreaterThanIndex(goobj.Self(), value))
}
func (goobj NSIndexSet) IndexLessThanIndex(value C.uint) C.uint {
  return (C.NSIndexSet_indexLessThanIndex(goobj.Self(), value))
}
func (goobj NSIndexSet) IndexGreaterThanOrEqualToIndex(value C.uint) C.uint {
  return (C.NSIndexSet_indexGreaterThanOrEqualToIndex(goobj.Self(), value))
}
func (goobj NSIndexSet) IndexLessThanOrEqualToIndex(value C.uint) C.uint {
  return (C.NSIndexSet_indexLessThanOrEqualToIndex(goobj.Self(), value))
}
//REJECT: range
//func (goobj NSIndexSet) GetIndexesMaxCountInIndexRange(indexBuffer C.uint, bufferSize C.uint, range_ C.NSRangePointer) C.uint {
//  return (C.NSIndexSet_getIndexesMaxCountInIndexRange(goobj.Self(), indexBuffer, bufferSize, range_))
//}
//REJECT: range
//func (goobj NSIndexSet) CountOfIndexesInRange(range_ C.NSRange) C.uint {
//  return (C.NSIndexSet_countOfIndexesInRange(goobj.Self(), range_))
//}
func (goobj NSIndexSet) ContainsIndex(value C.uint) C.bool {
  return (C.NSIndexSet_containsIndex(goobj.Self(), value))
}
//REJECT: range
//func (goobj NSIndexSet) ContainsIndexesInRange(range_ C.NSRange) C.bool {
//  return (C.NSIndexSet_containsIndexesInRange(goobj.Self(), range_))
//}
func (goobj NSIndexSet) ContainsIndexes(indexSet NSIndexSet) C.bool {
  return (C.NSIndexSet_containsIndexes(goobj.Self(), indexSet.Self()))
}
//REJECT: range
//func (goobj NSIndexSet) IntersectsIndexesInRange(range_ C.NSRange) C.bool {
//  return (C.NSIndexSet_intersectsIndexesInRange(goobj.Self(), range_))
//}
//REJECT: block
//func (goobj NSIndexSet) EnumerateIndexesUsingBlock(block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateIndexesUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSIndexSet) EnumerateIndexesWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateIndexesWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//REJECT: range opts block
//func (goobj NSIndexSet) EnumerateIndexesInRangeOptionsUsingBlock(range_ C.NSRange, opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateIndexesInRangeOptionsUsingBlock(goobj.Self(), range_, opts, block)
//}
//unacceptalble-method
//func (goobj NSIndexSet) IndexPassingTest(predicate C.bool) C.uint {
//  return (C.NSIndexSet_indexPassingTest(goobj.Self(), predicate))
//}
//REJECT: opts
//func (goobj NSIndexSet) IndexWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSIndexSet_indexWithOptionsPassingTest(goobj.Self(), opts, predicate))
//}
//REJECT: range opts
//func (goobj NSIndexSet) IndexInRangeOptionsPassingTest(range_ C.NSRange, opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSIndexSet_indexInRangeOptionsPassingTest(goobj.Self(), range_, opts, predicate))
//}
//unacceptalble-method
//func (goobj NSIndexSet) IndexesPassingTest(predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSIndexSet_indexesPassingTest(goobj.Self(), predicate)))
//}
//REJECT: opts
//func (goobj NSIndexSet) IndexesWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSIndexSet_indexesWithOptionsPassingTest(goobj.Self(), opts, predicate)))
//}
//REJECT: range opts
//func (goobj NSIndexSet) IndexesInRangeOptionsPassingTest(range_ C.NSRange, opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSIndexSet_indexesInRangeOptionsPassingTest(goobj.Self(), range_, opts, predicate)))
//}
//REJECT: block
//func (goobj NSIndexSet) EnumerateRangesUsingBlock(block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateRangesUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSIndexSet) EnumerateRangesWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateRangesWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//REJECT: range opts block
//func (goobj NSIndexSet) EnumerateRangesInRangeOptionsUsingBlock(range_ C.NSRange, opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSIndexSet_enumerateRangesInRangeOptionsUsingBlock(goobj.Self(), range_, opts, block)
//}
//REJECT: instancetype
//func NSIndexSet_indexSet() C.instancetype {
//  return (C.NSIndexSet__indexSet())
//}
//REJECT: instancetype
//func NSIndexSet_indexSetWithIndex(value C.uint) C.instancetype {
//  return (C.NSIndexSet__indexSetWithIndex(value))
//}
//REJECT: instancetype range
//func NSIndexSet_indexSetWithIndexesInRange(range_ C.NSRange) C.instancetype {
//  return (C.NSIndexSet__indexSetWithIndexesInRange(range_))
//}
type NSMutableIndexSet struct {
  NSIndexSet
}
func NSMutableIndexSet_(i Id) NSMutableIndexSet {
  return NSMutableIndexSet{ NSIndexSet_(i) }
}
func NSMutableIndexSet_init() NSMutableIndexSet {
  p := Id(C.NSMutableIndexSet_init())
  return NSMutableIndexSet_(p)
}
func (goobj NSMutableIndexSet) AddIndexes(indexSet NSIndexSet)  {
  C.NSMutableIndexSet_addIndexes(goobj.Self(), indexSet.Self())
}
func (goobj NSMutableIndexSet) RemoveIndexes(indexSet NSIndexSet)  {
  C.NSMutableIndexSet_removeIndexes(goobj.Self(), indexSet.Self())
}
func (goobj NSMutableIndexSet) RemoveAllIndexes()  {
  C.NSMutableIndexSet_removeAllIndexes(goobj.Self())
}
func (goobj NSMutableIndexSet) AddIndex(value C.uint)  {
  C.NSMutableIndexSet_addIndex(goobj.Self(), value)
}
func (goobj NSMutableIndexSet) RemoveIndex(value C.uint)  {
  C.NSMutableIndexSet_removeIndex(goobj.Self(), value)
}
//REJECT: range
//func (goobj NSMutableIndexSet) AddIndexesInRange(range_ C.NSRange)  {
//  C.NSMutableIndexSet_addIndexesInRange(goobj.Self(), range_)
//}
//REJECT: range
//func (goobj NSMutableIndexSet) RemoveIndexesInRange(range_ C.NSRange)  {
//  C.NSMutableIndexSet_removeIndexesInRange(goobj.Self(), range_)
//}
//REJECT: delta
//func (goobj NSMutableIndexSet) ShiftIndexesStartingAtIndexBy(index C.uint, delta C.NSInteger)  {
//  C.NSMutableIndexSet_shiftIndexesStartingAtIndexBy(goobj.Self(), index, delta)
//}



type NSJSONSerialization struct {
  NSObject
}
func NSJSONSerialization_(i Id) NSJSONSerialization {
  return NSJSONSerialization{ NSObject_(i) }
}
func NSJSONSerialization_init() NSJSONSerialization {
  p := Id(C.NSJSONSerialization_init())
  return NSJSONSerialization_(p)
}

func NSJSONSerialization_isValidJSONObject(obj Id) C.bool {
  return (C.NSJSONSerialization__isValidJSONObject(unsafe.Pointer(obj)))
}
func NSJSONSerialization_dataWithJSONObjectOptionsError(obj Id, opt C.NSJSONWritingOptions, error NSError) NSData {
  return NSData_(Id(C.NSJSONSerialization__dataWithJSONObjectOptionsError(unsafe.Pointer(obj), opt, error.Self())))
}
func NSJSONSerialization_jSONObjectWithDataOptionsError(data NSData, opt C.NSJSONReadingOptions, error NSError) Id {
  return Id_(C.NSJSONSerialization__JSONObjectWithDataOptionsError(data.Self(), opt, error.Self()))
}
//REJECT: NSInteger
//func NSJSONSerialization_writeJSONObjectToStreamOptionsError(obj Id, stream NSOutputStream, opt C.NSJSONWritingOptions, error NSError) C.NSInteger {
//  return (C.NSJSONSerialization__writeJSONObjectToStreamOptionsError(unsafe.Pointer(obj), stream.Self(), opt, error.Self()))
//}
func NSJSONSerialization_jSONObjectWithStreamOptionsError(stream NSInputStream, opt C.NSJSONReadingOptions, error NSError) Id {
  return Id_(C.NSJSONSerialization__JSONObjectWithStreamOptionsError(stream.Self(), opt, error.Self()))
}
type NSOrderedSet struct {
  NSObject
}
func NSOrderedSet_(i Id) NSOrderedSet {
  return NSOrderedSet{ NSObject_(i) }
}
func (goobj NSOrderedSet) Count() C.uint {
  return (C.NSOrderedSet_count(goobj.Self()))
}
func (goobj NSOrderedSet) ObjectAtIndex(idx C.uint) Id {
  return Id_(C.NSOrderedSet_objectAtIndex(goobj.Self(), idx))
}
func (goobj NSOrderedSet) IndexOfObject(object Id) C.uint {
  return (C.NSOrderedSet_indexOfObject(goobj.Self(), unsafe.Pointer(object)))
}
//REJECT: range
//func (goobj NSOrderedSet) GetObjectsRange(objects Id, range_ C.NSRange)  {
//  C.NSOrderedSet_getObjectsRange(goobj.Self(), unsafe.Pointer(objects), range_)
//}
func (goobj NSOrderedSet) ObjectsAtIndexes(indexes NSIndexSet) NSArray {
  return NSArray_(Id(C.NSOrderedSet_objectsAtIndexes(goobj.Self(), indexes.Self())))
}
func (goobj NSOrderedSet) FirstObject() Id {
  return Id_(C.NSOrderedSet_firstObject(goobj.Self()))
}
func (goobj NSOrderedSet) LastObject() Id {
  return Id_(C.NSOrderedSet_lastObject(goobj.Self()))
}
func (goobj NSOrderedSet) IsEqualToOrderedSet(other NSOrderedSet) C.bool {
  return (C.NSOrderedSet_isEqualToOrderedSet(goobj.Self(), other.Self()))
}
func (goobj NSOrderedSet) ContainsObject(object Id) C.bool {
  return (C.NSOrderedSet_containsObject(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSOrderedSet) IntersectsOrderedSet(other NSOrderedSet) C.bool {
  return (C.NSOrderedSet_intersectsOrderedSet(goobj.Self(), other.Self()))
}
func (goobj NSOrderedSet) IntersectsSet(set NSSet) C.bool {
  return (C.NSOrderedSet_intersectsSet(goobj.Self(), set.Self()))
}
func (goobj NSOrderedSet) IsSubsetOfOrderedSet(other NSOrderedSet) C.bool {
  return (C.NSOrderedSet_isSubsetOfOrderedSet(goobj.Self(), other.Self()))
}
func (goobj NSOrderedSet) IsSubsetOfSet(set NSSet) C.bool {
  return (C.NSOrderedSet_isSubsetOfSet(goobj.Self(), set.Self()))
}
func (goobj NSOrderedSet) ObjectAtIndexedSubscript(idx C.uint) Id {
  return Id_(C.NSOrderedSet_objectAtIndexedSubscript(goobj.Self(), idx))
}
func (goobj NSOrderedSet) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSOrderedSet_objectEnumerator(goobj.Self())))
}
func (goobj NSOrderedSet) ReverseObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSOrderedSet_reverseObjectEnumerator(goobj.Self())))
}
func (goobj NSOrderedSet) ReversedOrderedSet() NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_reversedOrderedSet(goobj.Self())))
}
func (goobj NSOrderedSet) Array() NSArray {
  return NSArray_(Id(C.NSOrderedSet_array(goobj.Self())))
}
func (goobj NSOrderedSet) Set() NSSet {
  return NSSet_(Id(C.NSOrderedSet_set(goobj.Self())))
}
//REJECT: block
//func (goobj NSOrderedSet) EnumerateObjectsUsingBlock(block *INVALID TYPE*)  {
//  C.NSOrderedSet_enumerateObjectsUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSOrderedSet) EnumerateObjectsWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSOrderedSet_enumerateObjectsWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//REJECT: opts block
//func (goobj NSOrderedSet) EnumerateObjectsAtIndexesOptionsUsingBlock(s NSIndexSet, opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSOrderedSet_enumerateObjectsAtIndexesOptionsUsingBlock(goobj.Self(), s.Self(), opts, block)
//}
//unacceptalble-method
//func (goobj NSOrderedSet) IndexOfObjectPassingTest(predicate C.bool) C.uint {
//  return (C.NSOrderedSet_indexOfObjectPassingTest(goobj.Self(), predicate))
//}
//REJECT: opts
//func (goobj NSOrderedSet) IndexOfObjectWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSOrderedSet_indexOfObjectWithOptionsPassingTest(goobj.Self(), opts, predicate))
//}
//REJECT: opts
//func (goobj NSOrderedSet) IndexOfObjectAtIndexesOptionsPassingTest(s NSIndexSet, opts C.NSEnumerationOptions, predicate C.bool) C.uint {
//  return (C.NSOrderedSet_indexOfObjectAtIndexesOptionsPassingTest(goobj.Self(), s.Self(), opts, predicate))
//}
//unacceptalble-method
//func (goobj NSOrderedSet) IndexesOfObjectsPassingTest(predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSOrderedSet_indexesOfObjectsPassingTest(goobj.Self(), predicate)))
//}
//REJECT: opts
//func (goobj NSOrderedSet) IndexesOfObjectsWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSOrderedSet_indexesOfObjectsWithOptionsPassingTest(goobj.Self(), opts, predicate)))
//}
//REJECT: opts
//func (goobj NSOrderedSet) IndexesOfObjectsAtIndexesOptionsPassingTest(s NSIndexSet, opts C.NSEnumerationOptions, predicate C.bool) NSIndexSet {
//  return NSIndexSet_(Id(C.NSOrderedSet_indexesOfObjectsAtIndexesOptionsPassingTest(goobj.Self(), s.Self(), opts, predicate)))
//}
//REJECT: range cmp
//func (goobj NSOrderedSet) IndexOfObjectInSortedRangeOptionsUsingComparator(object Id, range_ C.NSRange, opts C.NSBinarySearchingOptions, cmp C.NSComparator) C.uint {
//  return (C.NSOrderedSet_indexOfObjectInSortedRangeOptionsUsingComparator(goobj.Self(), unsafe.Pointer(object), range_, opts, cmp))
//}
//REJECT: cmptr
//func (goobj NSOrderedSet) SortedArrayUsingComparator(cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSOrderedSet_sortedArrayUsingComparator(goobj.Self(), cmptr)))
//}
//REJECT: opts cmptr
//func (goobj NSOrderedSet) SortedArrayWithOptionsUsingComparator(opts C.NSSortOptions, cmptr C.NSComparator) NSArray {
//  return NSArray_(Id(C.NSOrderedSet_sortedArrayWithOptionsUsingComparator(goobj.Self(), opts, cmptr)))
//}
func (goobj NSOrderedSet) Description() NSString {
  return NSString_(Id(C.NSOrderedSet_description(goobj.Self())))
}
func (goobj NSOrderedSet) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSOrderedSet_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func (goobj NSOrderedSet) DescriptionWithLocaleIndent(locale Id, level C.uint) NSString {
  return NSString_(Id(C.NSOrderedSet_descriptionWithLocaleIndent(goobj.Self(), unsafe.Pointer(locale), level)))
}
func NSOrderedSet_init() NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_init()))
}
func NSOrderedSet_initWithObjectsCount(objects Id, cnt C.uint) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithObjectsCount(unsafe.Pointer(objects), cnt)))
}
func NSOrderedSet_initWithObject(object Id) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithObject(unsafe.Pointer(object))))
}
func NSOrderedSet_initWithObjects(firstObj Id) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithObjects(unsafe.Pointer(firstObj))))
}
func NSOrderedSet_initWithOrderedSet(set NSOrderedSet) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithOrderedSet(set.Self())))
}
func NSOrderedSet_initWithOrderedSetCopyItems(set NSOrderedSet, flag C.bool) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithOrderedSetCopyItems(set.Self(), flag)))
}
//REJECT: range
//func NSOrderedSet_initWithOrderedSetRangeCopyItems(set NSOrderedSet, range_ C.NSRange, flag C.bool) NSOrderedSet {
//  return NSOrderedSet_(Id(C.NSOrderedSet_initWithOrderedSetRangeCopyItems(set.Self(), range_, flag)))
//}
func NSOrderedSet_initWithArray(array NSArray) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithArray(array.Self())))
}
func NSOrderedSet_initWithArrayCopyItems(set NSArray, flag C.bool) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithArrayCopyItems(set.Self(), flag)))
}
//REJECT: range
//func NSOrderedSet_initWithArrayRangeCopyItems(set NSArray, range_ C.NSRange, flag C.bool) NSOrderedSet {
//  return NSOrderedSet_(Id(C.NSOrderedSet_initWithArrayRangeCopyItems(set.Self(), range_, flag)))
//}
func NSOrderedSet_initWithSet(set NSSet) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithSet(set.Self())))
}
func NSOrderedSet_initWithSetCopyItems(set NSSet, flag C.bool) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_initWithSetCopyItems(set.Self(), flag)))
}
func (goobj NSOrderedSet) ValueForKey(key NSString) Id {
  return Id_(C.NSOrderedSet_valueForKey(goobj.Self(), key.Self()))
}
func (goobj NSOrderedSet) SetValueForKey(value Id, key NSString)  {
  C.NSOrderedSet_setValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSOrderedSet) AddObserverForKeyPathOptionsContext(observer NSObject, keyPath NSString, options C.NSKeyValueObservingOptions, context unsafe.Pointer)  {
  C.NSOrderedSet_addObserverForKeyPathOptionsContext(goobj.Self(), observer.Self(), keyPath.Self(), options, context)
}
func (goobj NSOrderedSet) RemoveObserverForKeyPathContext(observer NSObject, keyPath NSString, context unsafe.Pointer)  {
  C.NSOrderedSet_removeObserverForKeyPathContext(goobj.Self(), observer.Self(), keyPath.Self(), context)
}
func (goobj NSOrderedSet) RemoveObserverForKeyPath(observer NSObject, keyPath NSString)  {
  C.NSOrderedSet_removeObserverForKeyPath(goobj.Self(), observer.Self(), keyPath.Self())
}
func (goobj NSOrderedSet) SortedArrayUsingDescriptors(sortDescriptors NSArray) NSArray {
  return NSArray_(Id(C.NSOrderedSet_sortedArrayUsingDescriptors(goobj.Self(), sortDescriptors.Self())))
}
func (goobj NSOrderedSet) FilteredOrderedSetUsingPredicate(p NSPredicate) NSOrderedSet {
  return NSOrderedSet_(Id(C.NSOrderedSet_filteredOrderedSetUsingPredicate(goobj.Self(), p.Self())))
}

type NSMutableOrderedSet struct {
  NSOrderedSet
}
func NSMutableOrderedSet_(i Id) NSMutableOrderedSet {
  return NSMutableOrderedSet{ NSOrderedSet_(i) }
}
func (goobj NSMutableOrderedSet) InsertObjectAtIndex(object Id, idx C.uint)  {
  C.NSMutableOrderedSet_insertObjectAtIndex(goobj.Self(), unsafe.Pointer(object), idx)
}
func (goobj NSMutableOrderedSet) RemoveObjectAtIndex(idx C.uint)  {
  C.NSMutableOrderedSet_removeObjectAtIndex(goobj.Self(), idx)
}
func (goobj NSMutableOrderedSet) ReplaceObjectAtIndexWithObject(idx C.uint, object Id)  {
  C.NSMutableOrderedSet_replaceObjectAtIndexWithObject(goobj.Self(), idx, unsafe.Pointer(object))
}
func (goobj NSMutableOrderedSet) AddObject(object Id)  {
  C.NSMutableOrderedSet_addObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSMutableOrderedSet) AddObjectsCount(objects Id, count C.uint)  {
  C.NSMutableOrderedSet_addObjectsCount(goobj.Self(), unsafe.Pointer(objects), count)
}
func (goobj NSMutableOrderedSet) AddObjectsFromArray(array NSArray)  {
  C.NSMutableOrderedSet_addObjectsFromArray(goobj.Self(), array.Self())
}
func (goobj NSMutableOrderedSet) ExchangeObjectAtIndexWithObjectAtIndex(idx1 C.uint, idx2 C.uint)  {
  C.NSMutableOrderedSet_exchangeObjectAtIndexWithObjectAtIndex(goobj.Self(), idx1, idx2)
}
func (goobj NSMutableOrderedSet) MoveObjectsAtIndexesToIndex(indexes NSIndexSet, idx C.uint)  {
  C.NSMutableOrderedSet_moveObjectsAtIndexesToIndex(goobj.Self(), indexes.Self(), idx)
}
func (goobj NSMutableOrderedSet) InsertObjectsAtIndexes(objects NSArray, indexes NSIndexSet)  {
  C.NSMutableOrderedSet_insertObjectsAtIndexes(goobj.Self(), objects.Self(), indexes.Self())
}
func (goobj NSMutableOrderedSet) SetObjectAtIndex(obj Id, idx C.uint)  {
  C.NSMutableOrderedSet_setObjectAtIndex(goobj.Self(), unsafe.Pointer(obj), idx)
}
func (goobj NSMutableOrderedSet) SetObjectAtIndexedSubscript(obj Id, idx C.uint)  {
  C.NSMutableOrderedSet_setObjectAtIndexedSubscript(goobj.Self(), unsafe.Pointer(obj), idx)
}
//REJECT: range
//func (goobj NSMutableOrderedSet) ReplaceObjectsInRangeWithObjectsCount(range_ C.NSRange, objects Id, count C.uint)  {
//  C.NSMutableOrderedSet_replaceObjectsInRangeWithObjectsCount(goobj.Self(), range_, unsafe.Pointer(objects), count)
//}
func (goobj NSMutableOrderedSet) ReplaceObjectsAtIndexesWithObjects(indexes NSIndexSet, objects NSArray)  {
  C.NSMutableOrderedSet_replaceObjectsAtIndexesWithObjects(goobj.Self(), indexes.Self(), objects.Self())
}
//REJECT: range
//func (goobj NSMutableOrderedSet) RemoveObjectsInRange(range_ C.NSRange)  {
//  C.NSMutableOrderedSet_removeObjectsInRange(goobj.Self(), range_)
//}
func (goobj NSMutableOrderedSet) RemoveObjectsAtIndexes(indexes NSIndexSet)  {
  C.NSMutableOrderedSet_removeObjectsAtIndexes(goobj.Self(), indexes.Self())
}
func (goobj NSMutableOrderedSet) RemoveAllObjects()  {
  C.NSMutableOrderedSet_removeAllObjects(goobj.Self())
}
func (goobj NSMutableOrderedSet) RemoveObject(object Id)  {
  C.NSMutableOrderedSet_removeObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSMutableOrderedSet) RemoveObjectsInArray(array NSArray)  {
  C.NSMutableOrderedSet_removeObjectsInArray(goobj.Self(), array.Self())
}
func (goobj NSMutableOrderedSet) IntersectOrderedSet(other NSOrderedSet)  {
  C.NSMutableOrderedSet_intersectOrderedSet(goobj.Self(), other.Self())
}
func (goobj NSMutableOrderedSet) MinusOrderedSet(other NSOrderedSet)  {
  C.NSMutableOrderedSet_minusOrderedSet(goobj.Self(), other.Self())
}
func (goobj NSMutableOrderedSet) UnionOrderedSet(other NSOrderedSet)  {
  C.NSMutableOrderedSet_unionOrderedSet(goobj.Self(), other.Self())
}
func (goobj NSMutableOrderedSet) IntersectSet(other NSSet)  {
  C.NSMutableOrderedSet_intersectSet(goobj.Self(), other.Self())
}
func (goobj NSMutableOrderedSet) MinusSet(other NSSet)  {
  C.NSMutableOrderedSet_minusSet(goobj.Self(), other.Self())
}
func (goobj NSMutableOrderedSet) UnionSet(other NSSet)  {
  C.NSMutableOrderedSet_unionSet(goobj.Self(), other.Self())
}
//REJECT: cmptr
//func (goobj NSMutableOrderedSet) SortUsingComparator(cmptr C.NSComparator)  {
//  C.NSMutableOrderedSet_sortUsingComparator(goobj.Self(), cmptr)
//}
//REJECT: opts cmptr
//func (goobj NSMutableOrderedSet) SortWithOptionsUsingComparator(opts C.NSSortOptions, cmptr C.NSComparator)  {
//  C.NSMutableOrderedSet_sortWithOptionsUsingComparator(goobj.Self(), opts, cmptr)
//}
//REJECT: range opts cmptr
//func (goobj NSMutableOrderedSet) SortRangeOptionsUsingComparator(range_ C.NSRange, opts C.NSSortOptions, cmptr C.NSComparator)  {
//  C.NSMutableOrderedSet_sortRangeOptionsUsingComparator(goobj.Self(), range_, opts, cmptr)
//}
func NSMutableOrderedSet_init() NSMutableOrderedSet {
  return NSMutableOrderedSet_(Id(C.NSMutableOrderedSet_init()))
}
func NSMutableOrderedSet_initWithCapacity(numItems C.uint) NSMutableOrderedSet {
  return NSMutableOrderedSet_(Id(C.NSMutableOrderedSet_initWithCapacity(numItems)))
}
func (goobj NSMutableOrderedSet) SortUsingDescriptors(sortDescriptors NSArray)  {
  C.NSMutableOrderedSet_sortUsingDescriptors(goobj.Self(), sortDescriptors.Self())
}
func (goobj NSMutableOrderedSet) FilterUsingPredicate(p NSPredicate)  {
  C.NSMutableOrderedSet_filterUsingPredicate(goobj.Self(), p.Self())
}

type NSSet struct {
  NSObject
}
func NSSet_(i Id) NSSet {
  return NSSet{ NSObject_(i) }
}
func (goobj NSSet) Count() C.uint {
  return (C.NSSet_count(goobj.Self()))
}
func (goobj NSSet) Member(object Id) Id {
  return Id_(C.NSSet_member(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSSet) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSSet_objectEnumerator(goobj.Self())))
}
func (goobj NSSet) AllObjects() NSArray {
  return NSArray_(Id(C.NSSet_allObjects(goobj.Self())))
}
func (goobj NSSet) AnyObject() Id {
  return Id_(C.NSSet_anyObject(goobj.Self()))
}
func (goobj NSSet) ContainsObject(anObject Id) C.bool {
  return (C.NSSet_containsObject(goobj.Self(), unsafe.Pointer(anObject)))
}
func (goobj NSSet) Description() NSString {
  return NSString_(Id(C.NSSet_description(goobj.Self())))
}
func (goobj NSSet) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSSet_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func (goobj NSSet) IntersectsSet(otherSet NSSet) C.bool {
  return (C.NSSet_intersectsSet(goobj.Self(), otherSet.Self()))
}
func (goobj NSSet) IsEqualToSet(otherSet NSSet) C.bool {
  return (C.NSSet_isEqualToSet(goobj.Self(), otherSet.Self()))
}
func (goobj NSSet) IsSubsetOfSet(otherSet NSSet) C.bool {
  return (C.NSSet_isSubsetOfSet(goobj.Self(), otherSet.Self()))
}
//REJECT: aSelector
//func (goobj NSSet) MakeObjectsPerformSelector(aSelector C.SEL)  {
//  C.NSSet_makeObjectsPerformSelector(goobj.Self(), aSelector)
//}
//REJECT: aSelector
//func (goobj NSSet) MakeObjectsPerformSelectorWithObject(aSelector C.SEL, argument Id)  {
//  C.NSSet_makeObjectsPerformSelectorWithObject(goobj.Self(), aSelector, unsafe.Pointer(argument))
//}
func (goobj NSSet) SetByAddingObject(anObject Id) NSSet {
  return NSSet_(Id(C.NSSet_setByAddingObject(goobj.Self(), unsafe.Pointer(anObject))))
}
func (goobj NSSet) SetByAddingObjectsFromSet(other NSSet) NSSet {
  return NSSet_(Id(C.NSSet_setByAddingObjectsFromSet(goobj.Self(), other.Self())))
}
func (goobj NSSet) SetByAddingObjectsFromArray(other NSArray) NSSet {
  return NSSet_(Id(C.NSSet_setByAddingObjectsFromArray(goobj.Self(), other.Self())))
}
//REJECT: block
//func (goobj NSSet) EnumerateObjectsUsingBlock(block *INVALID TYPE*)  {
//  C.NSSet_enumerateObjectsUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSSet) EnumerateObjectsWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSSet_enumerateObjectsWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
//unacceptalble-method
//func (goobj NSSet) ObjectsPassingTest(predicate C.bool) NSSet {
//  return NSSet_(Id(C.NSSet_objectsPassingTest(goobj.Self(), predicate)))
//}
//REJECT: opts
//func (goobj NSSet) ObjectsWithOptionsPassingTest(opts C.NSEnumerationOptions, predicate C.bool) NSSet {
//  return NSSet_(Id(C.NSSet_objectsWithOptionsPassingTest(goobj.Self(), opts, predicate)))
//}
func NSSet_init() NSSet {
  return NSSet_(Id(C.NSSet_init()))
}
func NSSet_initWithObjectsCount(objects Id, cnt C.uint) NSSet {
  return NSSet_(Id(C.NSSet_initWithObjectsCount(unsafe.Pointer(objects), cnt)))
}
func NSSet_initWithObjects(firstObj Id) NSSet {
  return NSSet_(Id(C.NSSet_initWithObjects(unsafe.Pointer(firstObj))))
}
func NSSet_initWithSet(set NSSet) NSSet {
  return NSSet_(Id(C.NSSet_initWithSet(set.Self())))
}
func NSSet_initWithSetCopyItems(set NSSet, flag C.bool) NSSet {
  return NSSet_(Id(C.NSSet_initWithSetCopyItems(set.Self(), flag)))
}
func NSSet_initWithArray(array NSArray) NSSet {
  return NSSet_(Id(C.NSSet_initWithArray(array.Self())))
}
func (goobj NSSet) ValueForKey(key NSString) Id {
  return Id_(C.NSSet_valueForKey(goobj.Self(), key.Self()))
}
func (goobj NSSet) SetValueForKey(value Id, key NSString)  {
  C.NSSet_setValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
func (goobj NSSet) AddObserverForKeyPathOptionsContext(observer NSObject, keyPath NSString, options C.NSKeyValueObservingOptions, context unsafe.Pointer)  {
  C.NSSet_addObserverForKeyPathOptionsContext(goobj.Self(), observer.Self(), keyPath.Self(), options, context)
}
func (goobj NSSet) RemoveObserverForKeyPathContext(observer NSObject, keyPath NSString, context unsafe.Pointer)  {
  C.NSSet_removeObserverForKeyPathContext(goobj.Self(), observer.Self(), keyPath.Self(), context)
}
func (goobj NSSet) RemoveObserverForKeyPath(observer NSObject, keyPath NSString)  {
  C.NSSet_removeObserverForKeyPath(goobj.Self(), observer.Self(), keyPath.Self())
}
func (goobj NSSet) SortedArrayUsingDescriptors(sortDescriptors NSArray) NSArray {
  return NSArray_(Id(C.NSSet_sortedArrayUsingDescriptors(goobj.Self(), sortDescriptors.Self())))
}
func (goobj NSSet) FilteredSetUsingPredicate(predicate NSPredicate) NSSet {
  return NSSet_(Id(C.NSSet_filteredSetUsingPredicate(goobj.Self(), predicate.Self())))
}

type NSMutableSet struct {
  NSSet
}
func NSMutableSet_(i Id) NSMutableSet {
  return NSMutableSet{ NSSet_(i) }
}
func (goobj NSMutableSet) AddObject(object Id)  {
  C.NSMutableSet_addObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSMutableSet) RemoveObject(object Id)  {
  C.NSMutableSet_removeObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSMutableSet) AddObjectsFromArray(array NSArray)  {
  C.NSMutableSet_addObjectsFromArray(goobj.Self(), array.Self())
}
func (goobj NSMutableSet) IntersectSet(otherSet NSSet)  {
  C.NSMutableSet_intersectSet(goobj.Self(), otherSet.Self())
}
func (goobj NSMutableSet) MinusSet(otherSet NSSet)  {
  C.NSMutableSet_minusSet(goobj.Self(), otherSet.Self())
}
func (goobj NSMutableSet) RemoveAllObjects()  {
  C.NSMutableSet_removeAllObjects(goobj.Self())
}
func (goobj NSMutableSet) UnionSet(otherSet NSSet)  {
  C.NSMutableSet_unionSet(goobj.Self(), otherSet.Self())
}
func (goobj NSMutableSet) SetSet(otherSet NSSet)  {
  C.NSMutableSet_setSet(goobj.Self(), otherSet.Self())
}
func NSMutableSet_init() NSMutableSet {
  return NSMutableSet_(Id(C.NSMutableSet_init()))
}
func NSMutableSet_initWithCapacity(numItems C.uint) NSMutableSet {
  return NSMutableSet_(Id(C.NSMutableSet_initWithCapacity(numItems)))
}
func (goobj NSMutableSet) FilterUsingPredicate(predicate NSPredicate)  {
  C.NSMutableSet_filterUsingPredicate(goobj.Self(), predicate.Self())
}

type NSCountedSet struct {
  NSMutableSet
}
func NSCountedSet_(i Id) NSCountedSet {
  return NSCountedSet{ NSMutableSet_(i) }
}
func NSCountedSet_init() NSCountedSet {
  p := Id(C.NSCountedSet_init())
  return NSCountedSet_(p)
}
func NSCountedSet_initWithCapacity(numItems C.uint) NSCountedSet {
  return NSCountedSet_(Id(C.NSCountedSet_initWithCapacity(numItems)))
}
func NSCountedSet_initWithArray(array NSArray) NSCountedSet {
  return NSCountedSet_(Id(C.NSCountedSet_initWithArray(array.Self())))
}
func NSCountedSet_initWithSet(set NSSet) NSCountedSet {
  return NSCountedSet_(Id(C.NSCountedSet_initWithSet(set.Self())))
}
func (goobj NSCountedSet) CountForObject(object Id) C.uint {
  return (C.NSCountedSet_countForObject(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSCountedSet) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSCountedSet_objectEnumerator(goobj.Self())))
}
func (goobj NSCountedSet) AddObject(object Id)  {
  C.NSCountedSet_addObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSCountedSet) RemoveObject(object Id)  {
  C.NSCountedSet_removeObject(goobj.Self(), unsafe.Pointer(object))
}

type NSPropertyListSerialization struct {
  NSObject
}
func NSPropertyListSerialization_(i Id) NSPropertyListSerialization {
  return NSPropertyListSerialization{ NSObject_(i) }
}
func NSPropertyListSerialization_init() NSPropertyListSerialization {
  p := Id(C.NSPropertyListSerialization_init())
  return NSPropertyListSerialization_(p)
}

func NSPropertyListSerialization_propertyListIsValidForFormat(plist Id, format C.NSPropertyListFormat) C.bool {
  return (C.NSPropertyListSerialization__propertyListIsValidForFormat(unsafe.Pointer(plist), format))
}
//REJECT: opt
//func NSPropertyListSerialization_dataWithPropertyListFormatOptionsError(plist Id, format C.NSPropertyListFormat, opt C.NSPropertyListWriteOptions, error NSError) NSData {
//  return NSData_(Id(C.NSPropertyListSerialization__dataWithPropertyListFormatOptionsError(unsafe.Pointer(plist), format, opt, error.Self())))
//}
//REJECT: NSInteger opt
//func NSPropertyListSerialization_writePropertyListToStreamFormatOptionsError(plist Id, stream NSOutputStream, format C.NSPropertyListFormat, opt C.NSPropertyListWriteOptions, error NSError) C.NSInteger {
//  return (C.NSPropertyListSerialization__writePropertyListToStreamFormatOptionsError(unsafe.Pointer(plist), stream.Self(), format, opt, error.Self()))
//}
//REJECT: opt
//func NSPropertyListSerialization_propertyListWithDataOptionsFormatError(data NSData, opt C.NSPropertyListReadOptions, format C.NSPropertyListFormat, error NSError) Id {
//  return Id_(C.NSPropertyListSerialization__propertyListWithDataOptionsFormatError(data.Self(), opt, format, error.Self()))
//}
//REJECT: opt
//func NSPropertyListSerialization_propertyListWithStreamOptionsFormatError(stream NSInputStream, opt C.NSPropertyListReadOptions, format C.NSPropertyListFormat, error NSError) Id {
//  return Id_(C.NSPropertyListSerialization__propertyListWithStreamOptionsFormatError(stream.Self(), opt, format, error.Self()))
//}
func NSPropertyListSerialization_dataFromPropertyListFormatErrorDescription(plist Id, format C.NSPropertyListFormat, errorString NSString) NSData {
  return NSData_(Id(C.NSPropertyListSerialization__dataFromPropertyListFormatErrorDescription(unsafe.Pointer(plist), format, errorString.Self())))
}
func NSPropertyListSerialization_propertyListFromDataMutabilityOptionFormatErrorDescription(data NSData, opt C.NSPropertyListMutabilityOptions, format C.NSPropertyListFormat, errorString NSString) Id {
  return Id_(C.NSPropertyListSerialization__propertyListFromDataMutabilityOptionFormatErrorDescription(data.Self(), opt, format, errorString.Self()))
}
type NSKeyedArchiver struct {
  NSCoder
}
func NSKeyedArchiver_(i Id) NSKeyedArchiver {
  return NSKeyedArchiver{ NSCoder_(i) }
}
func NSKeyedArchiver_init() NSKeyedArchiver {
  p := Id(C.NSKeyedArchiver_init())
  return NSKeyedArchiver_(p)
}
func (goobj NSKeyedArchiver) InitForWritingWithMutableData(data NSMutableData) Id {
  return Id_(C.NSKeyedArchiver_initForWritingWithMutableData(goobj.Self(), data.Self()))
}
func (goobj NSKeyedArchiver) SetDelegate(delegate Id)  {
  C.NSKeyedArchiver_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSKeyedArchiver) Delegate() Id {
  return Id_(C.NSKeyedArchiver_delegate(goobj.Self()))
}
func (goobj NSKeyedArchiver) SetOutputFormat(format C.NSPropertyListFormat)  {
  C.NSKeyedArchiver_setOutputFormat(goobj.Self(), format)
}
func (goobj NSKeyedArchiver) OutputFormat() C.NSPropertyListFormat {
  return (C.NSKeyedArchiver_outputFormat(goobj.Self()))
}
func (goobj NSKeyedArchiver) FinishEncoding()  {
  C.NSKeyedArchiver_finishEncoding(goobj.Self())
}
//REJECT: cls
//func (goobj NSKeyedArchiver) SetClassNameForClass(codedName NSString, cls C.Class)  {
//  C.NSKeyedArchiver_setClassNameForClass(goobj.Self(), codedName.Self(), cls)
//}
//REJECT: cls
//func (goobj NSKeyedArchiver) ClassNameForClass(cls C.Class) NSString {
//  return NSString_(Id(C.NSKeyedArchiver_classNameForClass(goobj.Self(), cls)))
//}
func (goobj NSKeyedArchiver) EncodeObjectForKey(objv Id, key NSString)  {
  C.NSKeyedArchiver_encodeObjectForKey(goobj.Self(), unsafe.Pointer(objv), key.Self())
}
func (goobj NSKeyedArchiver) EncodeConditionalObjectForKey(objv Id, key NSString)  {
  C.NSKeyedArchiver_encodeConditionalObjectForKey(goobj.Self(), unsafe.Pointer(objv), key.Self())
}
func (goobj NSKeyedArchiver) EncodeBoolForKey(boolv C.bool, key NSString)  {
  C.NSKeyedArchiver_encodeBoolForKey(goobj.Self(), boolv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeIntForKey(intv C.int, key NSString)  {
  C.NSKeyedArchiver_encodeIntForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeInt32ForKey(intv C.int32_t, key NSString)  {
  C.NSKeyedArchiver_encodeInt32ForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeInt64ForKey(intv C.int64_t, key NSString)  {
  C.NSKeyedArchiver_encodeInt64ForKey(goobj.Self(), intv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeFloatForKey(realv C.float, key NSString)  {
  C.NSKeyedArchiver_encodeFloatForKey(goobj.Self(), realv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeDoubleForKey(realv C.double, key NSString)  {
  C.NSKeyedArchiver_encodeDoubleForKey(goobj.Self(), realv, key.Self())
}
func (goobj NSKeyedArchiver) EncodeBytesLengthForKey(bytesp C.uint8_t, lenv C.uint, key NSString)  {
  C.NSKeyedArchiver_encodeBytesLengthForKey(goobj.Self(), bytesp, lenv, key.Self())
}
func (goobj NSKeyedArchiver) SetRequiresSecureCoding(b C.bool)  {
  C.NSKeyedArchiver_setRequiresSecureCoding(goobj.Self(), b)
}
func NSKeyedArchiver_archivedDataWithRootObject(rootObject Id) NSData {
  return NSData_(Id(C.NSKeyedArchiver__archivedDataWithRootObject(unsafe.Pointer(rootObject))))
}
func NSKeyedArchiver_archiveRootObjectToFile(rootObject Id, path NSString) C.bool {
  return (C.NSKeyedArchiver__archiveRootObjectToFile(unsafe.Pointer(rootObject), path.Self()))
}
//REJECT: cls
//func NSKeyedArchiver_setClassNameForClass(codedName NSString, cls C.Class)  {
//  C.NSKeyedArchiver__setClassNameForClass(codedName.Self(), cls)
//}
//REJECT: cls
//func NSKeyedArchiver_classNameForClass(cls C.Class) NSString {
//  return NSString_(Id(C.NSKeyedArchiver__classNameForClass(cls)))
//}
type NSKeyedUnarchiver struct {
  NSCoder
}
func NSKeyedUnarchiver_(i Id) NSKeyedUnarchiver {
  return NSKeyedUnarchiver{ NSCoder_(i) }
}
func NSKeyedUnarchiver_init() NSKeyedUnarchiver {
  p := Id(C.NSKeyedUnarchiver_init())
  return NSKeyedUnarchiver_(p)
}
func (goobj NSKeyedUnarchiver) InitForReadingWithData(data NSData) Id {
  return Id_(C.NSKeyedUnarchiver_initForReadingWithData(goobj.Self(), data.Self()))
}
func (goobj NSKeyedUnarchiver) SetDelegate(delegate Id)  {
  C.NSKeyedUnarchiver_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSKeyedUnarchiver) Delegate() Id {
  return Id_(C.NSKeyedUnarchiver_delegate(goobj.Self()))
}
func (goobj NSKeyedUnarchiver) FinishDecoding()  {
  C.NSKeyedUnarchiver_finishDecoding(goobj.Self())
}
//REJECT: cls
//func (goobj NSKeyedUnarchiver) SetClassForClassName(cls C.Class, codedName NSString)  {
//  C.NSKeyedUnarchiver_setClassForClassName(goobj.Self(), cls, codedName.Self())
//}
//REJECT: Class
//func (goobj NSKeyedUnarchiver) ClassForClassName(codedName NSString) C.Class {
//  return (C.NSKeyedUnarchiver_classForClassName(goobj.Self(), codedName.Self()))
//}
func (goobj NSKeyedUnarchiver) ContainsValueForKey(key NSString) C.bool {
  return (C.NSKeyedUnarchiver_containsValueForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeObjectForKey(key NSString) Id {
  return Id_(C.NSKeyedUnarchiver_decodeObjectForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeBoolForKey(key NSString) C.bool {
  return (C.NSKeyedUnarchiver_decodeBoolForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeIntForKey(key NSString) C.int {
  return (C.NSKeyedUnarchiver_decodeIntForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeInt32ForKey(key NSString) C.int32_t {
  return (C.NSKeyedUnarchiver_decodeInt32ForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeInt64ForKey(key NSString) C.int64_t {
  return (C.NSKeyedUnarchiver_decodeInt64ForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeFloatForKey(key NSString) C.float {
  return (C.NSKeyedUnarchiver_decodeFloatForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeDoubleForKey(key NSString) C.double {
  return (C.NSKeyedUnarchiver_decodeDoubleForKey(goobj.Self(), key.Self()))
}
func (goobj NSKeyedUnarchiver) DecodeBytesForKeyReturnedLength(key NSString, lengthp C.uint) C.uint8_t {
  return (C.NSKeyedUnarchiver_decodeBytesForKeyReturnedLength(goobj.Self(), key.Self(), lengthp))
}
func (goobj NSKeyedUnarchiver) SetRequiresSecureCoding(b C.bool)  {
  C.NSKeyedUnarchiver_setRequiresSecureCoding(goobj.Self(), b)
}
func NSKeyedUnarchiver_unarchiveObjectWithData(data NSData) Id {
  return Id_(C.NSKeyedUnarchiver__unarchiveObjectWithData(data.Self()))
}
func NSKeyedUnarchiver_unarchiveObjectWithFile(path NSString) Id {
  return Id_(C.NSKeyedUnarchiver__unarchiveObjectWithFile(path.Self()))
}
//REJECT: cls
//func NSKeyedUnarchiver_setClassForClassName(cls C.Class, codedName NSString)  {
//  C.NSKeyedUnarchiver__setClassForClassName(cls, codedName.Self())
//}
//REJECT: Class
//func NSKeyedUnarchiver_classForClassName(codedName NSString) C.Class {
//  return (C.NSKeyedUnarchiver__classForClassName(codedName.Self()))
//}


type NSLock struct {
  NSObject
}
func NSLock_(i Id) NSLock {
  return NSLock{ NSObject_(i) }
}
func NSLock_init() NSLock {
  p := Id(C.NSLock_init())
  return NSLock_(p)
}
func (goobj NSLock) TryLock() C.bool {
  return (C.NSLock_tryLock(goobj.Self()))
}
func (goobj NSLock) LockBeforeDate(limit NSDate) C.bool {
  return (C.NSLock_lockBeforeDate(goobj.Self(), limit.Self()))
}
func (goobj NSLock) SetName(n NSString)  {
  C.NSLock_setName(goobj.Self(), n.Self())
}
func (goobj NSLock) Name() NSString {
  return NSString_(Id(C.NSLock_name(goobj.Self())))
}

type NSConditionLock struct {
  NSObject
}
func NSConditionLock_(i Id) NSConditionLock {
  return NSConditionLock{ NSObject_(i) }
}
func NSConditionLock_init() NSConditionLock {
  p := Id(C.NSConditionLock_init())
  return NSConditionLock_(p)
}
//REJECT: condition
//func NSConditionLock_initWithCondition(condition C.NSInteger) NSConditionLock {
//  return NSConditionLock_(Id(C.NSConditionLock_initWithCondition(condition)))
//}
//REJECT: NSInteger
//func (goobj NSConditionLock) Condition() C.NSInteger {
//  return (C.NSConditionLock_condition(goobj.Self()))
//}
//REJECT: condition
//func (goobj NSConditionLock) LockWhenCondition(condition C.NSInteger)  {
//  C.NSConditionLock_lockWhenCondition(goobj.Self(), condition)
//}
func (goobj NSConditionLock) TryLock() C.bool {
  return (C.NSConditionLock_tryLock(goobj.Self()))
}
//REJECT: condition
//func (goobj NSConditionLock) TryLockWhenCondition(condition C.NSInteger) C.bool {
//  return (C.NSConditionLock_tryLockWhenCondition(goobj.Self(), condition))
//}
//REJECT: condition
//func (goobj NSConditionLock) UnlockWithCondition(condition C.NSInteger)  {
//  C.NSConditionLock_unlockWithCondition(goobj.Self(), condition)
//}
func (goobj NSConditionLock) LockBeforeDate(limit NSDate) C.bool {
  return (C.NSConditionLock_lockBeforeDate(goobj.Self(), limit.Self()))
}
//REJECT: condition
//func (goobj NSConditionLock) LockWhenConditionBeforeDate(condition C.NSInteger, limit NSDate) C.bool {
//  return (C.NSConditionLock_lockWhenConditionBeforeDate(goobj.Self(), condition, limit.Self()))
//}
func (goobj NSConditionLock) SetName(n NSString)  {
  C.NSConditionLock_setName(goobj.Self(), n.Self())
}
func (goobj NSConditionLock) Name() NSString {
  return NSString_(Id(C.NSConditionLock_name(goobj.Self())))
}

type NSRecursiveLock struct {
  NSObject
}
func NSRecursiveLock_(i Id) NSRecursiveLock {
  return NSRecursiveLock{ NSObject_(i) }
}
func NSRecursiveLock_init() NSRecursiveLock {
  p := Id(C.NSRecursiveLock_init())
  return NSRecursiveLock_(p)
}
func (goobj NSRecursiveLock) TryLock() C.bool {
  return (C.NSRecursiveLock_tryLock(goobj.Self()))
}
func (goobj NSRecursiveLock) LockBeforeDate(limit NSDate) C.bool {
  return (C.NSRecursiveLock_lockBeforeDate(goobj.Self(), limit.Self()))
}
func (goobj NSRecursiveLock) SetName(n NSString)  {
  C.NSRecursiveLock_setName(goobj.Self(), n.Self())
}
func (goobj NSRecursiveLock) Name() NSString {
  return NSString_(Id(C.NSRecursiveLock_name(goobj.Self())))
}

type NSCondition struct {
  NSObject
}
func NSCondition_(i Id) NSCondition {
  return NSCondition{ NSObject_(i) }
}
func NSCondition_init() NSCondition {
  p := Id(C.NSCondition_init())
  return NSCondition_(p)
}
func (goobj NSCondition) Wait()  {
  C.NSCondition_wait(goobj.Self())
}
func (goobj NSCondition) WaitUntilDate(limit NSDate) C.bool {
  return (C.NSCondition_waitUntilDate(goobj.Self(), limit.Self()))
}
func (goobj NSCondition) Signal()  {
  C.NSCondition_signal(goobj.Self())
}
func (goobj NSCondition) Broadcast()  {
  C.NSCondition_broadcast(goobj.Self())
}
func (goobj NSCondition) SetName(n NSString)  {
  C.NSCondition_setName(goobj.Self(), n.Self())
}
func (goobj NSCondition) Name() NSString {
  return NSString_(Id(C.NSCondition_name(goobj.Self())))
}

type NSMapTable struct {
  NSObject
}
func NSMapTable_(i Id) NSMapTable {
  return NSMapTable{ NSObject_(i) }
}
func NSMapTable_init() NSMapTable {
  p := Id(C.NSMapTable_init())
  return NSMapTable_(p)
}
//REJECT: keyOptions valueOptions
//func NSMapTable_initWithKeyOptionsValueOptionsCapacity(keyOptions C.NSPointerFunctionsOptions, valueOptions C.NSPointerFunctionsOptions, initialCapacity C.uint) NSMapTable {
//  return NSMapTable_(Id(C.NSMapTable_initWithKeyOptionsValueOptionsCapacity(keyOptions, valueOptions, initialCapacity)))
//}
func NSMapTable_initWithKeyPointerFunctionsValuePointerFunctionsCapacity(keyFunctions NSPointerFunctions, valueFunctions NSPointerFunctions, initialCapacity C.uint) NSMapTable {
  return NSMapTable_(Id(C.NSMapTable_initWithKeyPointerFunctionsValuePointerFunctionsCapacity(keyFunctions.Self(), valueFunctions.Self(), initialCapacity)))
}
func (goobj NSMapTable) KeyPointerFunctions() NSPointerFunctions {
  return NSPointerFunctions_(Id(C.NSMapTable_keyPointerFunctions(goobj.Self())))
}
func (goobj NSMapTable) ValuePointerFunctions() NSPointerFunctions {
  return NSPointerFunctions_(Id(C.NSMapTable_valuePointerFunctions(goobj.Self())))
}
func (goobj NSMapTable) ObjectForKey(aKey Id) Id {
  return Id_(C.NSMapTable_objectForKey(goobj.Self(), unsafe.Pointer(aKey)))
}
func (goobj NSMapTable) RemoveObjectForKey(aKey Id)  {
  C.NSMapTable_removeObjectForKey(goobj.Self(), unsafe.Pointer(aKey))
}
func (goobj NSMapTable) SetObjectForKey(anObject Id, aKey Id)  {
  C.NSMapTable_setObjectForKey(goobj.Self(), unsafe.Pointer(anObject), unsafe.Pointer(aKey))
}
func (goobj NSMapTable) Count() C.uint {
  return (C.NSMapTable_count(goobj.Self()))
}
func (goobj NSMapTable) KeyEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSMapTable_keyEnumerator(goobj.Self())))
}
func (goobj NSMapTable) ObjectEnumerator() NSEnumerator {
  return NSEnumerator_(Id(C.NSMapTable_objectEnumerator(goobj.Self())))
}
func (goobj NSMapTable) RemoveAllObjects()  {
  C.NSMapTable_removeAllObjects(goobj.Self())
}
func (goobj NSMapTable) DictionaryRepresentation() NSDictionary {
  return NSDictionary_(Id(C.NSMapTable_dictionaryRepresentation(goobj.Self())))
}
//REJECT: keyOptions valueOptions
//func NSMapTable_mapTableWithKeyOptionsValueOptions(keyOptions C.NSPointerFunctionsOptions, valueOptions C.NSPointerFunctionsOptions) Id {
//  return Id_(C.NSMapTable__mapTableWithKeyOptionsValueOptions(keyOptions, valueOptions))
//}
func NSMapTable_mapTableWithStrongToStrongObjects() Id {
  return Id_(C.NSMapTable__mapTableWithStrongToStrongObjects())
}
func NSMapTable_mapTableWithWeakToStrongObjects() Id {
  return Id_(C.NSMapTable__mapTableWithWeakToStrongObjects())
}
func NSMapTable_mapTableWithStrongToWeakObjects() Id {
  return Id_(C.NSMapTable__mapTableWithStrongToWeakObjects())
}
func NSMapTable_mapTableWithWeakToWeakObjects() Id {
  return Id_(C.NSMapTable__mapTableWithWeakToWeakObjects())
}
func NSMapTable_strongToStrongObjectsMapTable() Id {
  return Id_(C.NSMapTable__strongToStrongObjectsMapTable())
}
func NSMapTable_weakToStrongObjectsMapTable() Id {
  return Id_(C.NSMapTable__weakToStrongObjectsMapTable())
}
func NSMapTable_strongToWeakObjectsMapTable() Id {
  return Id_(C.NSMapTable__strongToWeakObjectsMapTable())
}
func NSMapTable_weakToWeakObjectsMapTable() Id {
  return Id_(C.NSMapTable__weakToWeakObjectsMapTable())
}


type NSNotification struct {
  NSObject
}
func NSNotification_(i Id) NSNotification {
  return NSNotification{ NSObject_(i) }
}
func (goobj NSNotification) Name() NSString {
  return NSString_(Id(C.NSNotification_name(goobj.Self())))
}
func (goobj NSNotification) Object() Id {
  return Id_(C.NSNotification_object(goobj.Self()))
}
func (goobj NSNotification) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSNotification_userInfo(goobj.Self())))
}
func NSNotification_initWithNameObjectUserInfo(name NSString, object Id, userInfo NSDictionary) NSNotification {
  return NSNotification_(Id(C.NSNotification_initWithNameObjectUserInfo(name.Self(), unsafe.Pointer(object), userInfo.Self())))
}
func NSNotification_init() NSNotification {
  return NSNotification_(Id(C.NSNotification_init()))
}

type NSNotificationCenter struct {
  NSObject
}
func NSNotificationCenter_(i Id) NSNotificationCenter {
  return NSNotificationCenter{ NSObject_(i) }
}
func NSNotificationCenter_init() NSNotificationCenter {
  return NSNotificationCenter_(Id(C.NSNotificationCenter_init()))
}
//REJECT: aSelector
//func (goobj NSNotificationCenter) AddObserverSelectorNameObject(observer Id, aSelector C.SEL, aName NSString, anObject Id)  {
//  C.NSNotificationCenter_addObserverSelectorNameObject(goobj.Self(), unsafe.Pointer(observer), aSelector, aName.Self(), unsafe.Pointer(anObject))
//}
func (goobj NSNotificationCenter) PostNotification(notification NSNotification)  {
  C.NSNotificationCenter_postNotification(goobj.Self(), notification.Self())
}
func (goobj NSNotificationCenter) PostNotificationNameObject(aName NSString, anObject Id)  {
  C.NSNotificationCenter_postNotificationNameObject(goobj.Self(), aName.Self(), unsafe.Pointer(anObject))
}
func (goobj NSNotificationCenter) PostNotificationNameObjectUserInfo(aName NSString, anObject Id, aUserInfo NSDictionary)  {
  C.NSNotificationCenter_postNotificationNameObjectUserInfo(goobj.Self(), aName.Self(), unsafe.Pointer(anObject), aUserInfo.Self())
}
func (goobj NSNotificationCenter) RemoveObserver(observer Id)  {
  C.NSNotificationCenter_removeObserver(goobj.Self(), unsafe.Pointer(observer))
}
func (goobj NSNotificationCenter) RemoveObserverNameObject(observer Id, aName NSString, anObject Id)  {
  C.NSNotificationCenter_removeObserverNameObject(goobj.Self(), unsafe.Pointer(observer), aName.Self(), unsafe.Pointer(anObject))
}
//REJECT: block
//func (goobj NSNotificationCenter) AddObserverForNameObjectQueueUsingBlock(name NSString, obj Id, queue NSOperationQueue, block *INVALID TYPE*) Id {
//  return Id_(C.NSNotificationCenter_addObserverForNameObjectQueueUsingBlock(goobj.Self(), name.Self(), unsafe.Pointer(obj), queue.Self(), block))
//}
//REJECT: instancetype
//func NSNotificationCenter_defaultCenter() C.instancetype {
//  return (C.NSNotificationCenter__defaultCenter())
//}
type NSNotificationQueue struct {
  NSObject
}
func NSNotificationQueue_(i Id) NSNotificationQueue {
  return NSNotificationQueue{ NSObject_(i) }
}
func NSNotificationQueue_init() NSNotificationQueue {
  p := Id(C.NSNotificationQueue_init())
  return NSNotificationQueue_(p)
}
func NSNotificationQueue_initWithNotificationCenter(notificationCenter NSNotificationCenter) NSNotificationQueue {
  return NSNotificationQueue_(Id(C.NSNotificationQueue_initWithNotificationCenter(notificationCenter.Self())))
}
func (goobj NSNotificationQueue) EnqueueNotificationPostingStyle(notification NSNotification, postingStyle C.NSPostingStyle)  {
  C.NSNotificationQueue_enqueueNotificationPostingStyle(goobj.Self(), notification.Self(), postingStyle)
}
func (goobj NSNotificationQueue) EnqueueNotificationPostingStyleCoalesceMaskForModes(notification NSNotification, postingStyle C.NSPostingStyle, coalesceMask C.uint, modes NSArray)  {
  C.NSNotificationQueue_enqueueNotificationPostingStyleCoalesceMaskForModes(goobj.Self(), notification.Self(), postingStyle, coalesceMask, modes.Self())
}
func (goobj NSNotificationQueue) DequeueNotificationsMatchingCoalesceMask(notification NSNotification, coalesceMask C.uint)  {
  C.NSNotificationQueue_dequeueNotificationsMatchingCoalesceMask(goobj.Self(), notification.Self(), coalesceMask)
}
func NSNotificationQueue_defaultQueue() Id {
  return Id_(C.NSNotificationQueue__defaultQueue())
}
type NSNull struct {
  NSObject
}
func NSNull_(i Id) NSNull {
  return NSNull{ NSObject_(i) }
}
func NSNull_init() NSNull {
  p := Id(C.NSNull_init())
  return NSNull_(p)
}

func NSNull_null() NSNull {
  return NSNull_(Id(C.NSNull__null()))
}
type NSNumberFormatter struct {
  NSFormatter
}
func NSNumberFormatter_(i Id) NSNumberFormatter {
  return NSNumberFormatter{ NSFormatter_(i) }
}
func NSNumberFormatter_init() NSNumberFormatter {
  p := Id(C.NSNumberFormatter_init())
  return NSNumberFormatter_(p)
}
//REJECT: rangep
//func (goobj NSNumberFormatter) GetObjectValueForStringRangeError(obj Id, string NSString, rangep C.NSRange, error NSError) C.bool {
//  return (C.NSNumberFormatter_getObjectValueForStringRangeError(goobj.Self(), unsafe.Pointer(obj), string.Self(), rangep, error.Self()))
//}
func (goobj NSNumberFormatter) StringFromNumber(number NSNumber) NSString {
  return NSString_(Id(C.NSNumberFormatter_stringFromNumber(goobj.Self(), number.Self())))
}
func (goobj NSNumberFormatter) NumberFromString(string NSString) NSNumber {
  return NSNumber_(Id(C.NSNumberFormatter_numberFromString(goobj.Self(), string.Self())))
}
func (goobj NSNumberFormatter) NumberStyle() C.NSNumberFormatterStyle {
  return (C.NSNumberFormatter_numberStyle(goobj.Self()))
}
func (goobj NSNumberFormatter) SetNumberStyle(style C.NSNumberFormatterStyle)  {
  C.NSNumberFormatter_setNumberStyle(goobj.Self(), style)
}
//REJECT: NSLocale
//func (goobj NSNumberFormatter) Locale() NSLocale {
//  return NSLocale_(Id(C.NSNumberFormatter_locale(goobj.Self())))
//}
//REJECT: locale
//func (goobj NSNumberFormatter) SetLocale(locale NSLocale)  {
//  C.NSNumberFormatter_setLocale(goobj.Self(), locale.Self())
//}
func (goobj NSNumberFormatter) GeneratesDecimalNumbers() C.bool {
  return (C.NSNumberFormatter_generatesDecimalNumbers(goobj.Self()))
}
func (goobj NSNumberFormatter) SetGeneratesDecimalNumbers(b C.bool)  {
  C.NSNumberFormatter_setGeneratesDecimalNumbers(goobj.Self(), b)
}
func (goobj NSNumberFormatter) FormatterBehavior() C.NSNumberFormatterBehavior {
  return (C.NSNumberFormatter_formatterBehavior(goobj.Self()))
}
func (goobj NSNumberFormatter) SetFormatterBehavior(behavior C.NSNumberFormatterBehavior)  {
  C.NSNumberFormatter_setFormatterBehavior(goobj.Self(), behavior)
}
func (goobj NSNumberFormatter) NegativeFormat() NSString {
  return NSString_(Id(C.NSNumberFormatter_negativeFormat(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNegativeFormat(format NSString)  {
  C.NSNumberFormatter_setNegativeFormat(goobj.Self(), format.Self())
}
func (goobj NSNumberFormatter) TextAttributesForNegativeValues() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForNegativeValues(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForNegativeValues(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForNegativeValues(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) PositiveFormat() NSString {
  return NSString_(Id(C.NSNumberFormatter_positiveFormat(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPositiveFormat(format NSString)  {
  C.NSNumberFormatter_setPositiveFormat(goobj.Self(), format.Self())
}
func (goobj NSNumberFormatter) TextAttributesForPositiveValues() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForPositiveValues(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForPositiveValues(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForPositiveValues(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) AllowsFloats() C.bool {
  return (C.NSNumberFormatter_allowsFloats(goobj.Self()))
}
func (goobj NSNumberFormatter) SetAllowsFloats(flag C.bool)  {
  C.NSNumberFormatter_setAllowsFloats(goobj.Self(), flag)
}
func (goobj NSNumberFormatter) DecimalSeparator() NSString {
  return NSString_(Id(C.NSNumberFormatter_decimalSeparator(goobj.Self())))
}
func (goobj NSNumberFormatter) SetDecimalSeparator(string NSString)  {
  C.NSNumberFormatter_setDecimalSeparator(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) AlwaysShowsDecimalSeparator() C.bool {
  return (C.NSNumberFormatter_alwaysShowsDecimalSeparator(goobj.Self()))
}
func (goobj NSNumberFormatter) SetAlwaysShowsDecimalSeparator(b C.bool)  {
  C.NSNumberFormatter_setAlwaysShowsDecimalSeparator(goobj.Self(), b)
}
func (goobj NSNumberFormatter) CurrencyDecimalSeparator() NSString {
  return NSString_(Id(C.NSNumberFormatter_currencyDecimalSeparator(goobj.Self())))
}
func (goobj NSNumberFormatter) SetCurrencyDecimalSeparator(string NSString)  {
  C.NSNumberFormatter_setCurrencyDecimalSeparator(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) UsesGroupingSeparator() C.bool {
  return (C.NSNumberFormatter_usesGroupingSeparator(goobj.Self()))
}
func (goobj NSNumberFormatter) SetUsesGroupingSeparator(b C.bool)  {
  C.NSNumberFormatter_setUsesGroupingSeparator(goobj.Self(), b)
}
func (goobj NSNumberFormatter) GroupingSeparator() NSString {
  return NSString_(Id(C.NSNumberFormatter_groupingSeparator(goobj.Self())))
}
func (goobj NSNumberFormatter) SetGroupingSeparator(string NSString)  {
  C.NSNumberFormatter_setGroupingSeparator(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) ZeroSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_zeroSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetZeroSymbol(string NSString)  {
  C.NSNumberFormatter_setZeroSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) TextAttributesForZero() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForZero(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForZero(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForZero(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) NilSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_nilSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNilSymbol(string NSString)  {
  C.NSNumberFormatter_setNilSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) TextAttributesForNil() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForNil(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForNil(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForNil(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) NotANumberSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_notANumberSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNotANumberSymbol(string NSString)  {
  C.NSNumberFormatter_setNotANumberSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) TextAttributesForNotANumber() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForNotANumber(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForNotANumber(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForNotANumber(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) PositiveInfinitySymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_positiveInfinitySymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPositiveInfinitySymbol(string NSString)  {
  C.NSNumberFormatter_setPositiveInfinitySymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) TextAttributesForPositiveInfinity() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForPositiveInfinity(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForPositiveInfinity(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForPositiveInfinity(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) NegativeInfinitySymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_negativeInfinitySymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNegativeInfinitySymbol(string NSString)  {
  C.NSNumberFormatter_setNegativeInfinitySymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) TextAttributesForNegativeInfinity() NSDictionary {
  return NSDictionary_(Id(C.NSNumberFormatter_textAttributesForNegativeInfinity(goobj.Self())))
}
func (goobj NSNumberFormatter) SetTextAttributesForNegativeInfinity(newAttributes NSDictionary)  {
  C.NSNumberFormatter_setTextAttributesForNegativeInfinity(goobj.Self(), newAttributes.Self())
}
func (goobj NSNumberFormatter) PositivePrefix() NSString {
  return NSString_(Id(C.NSNumberFormatter_positivePrefix(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPositivePrefix(string NSString)  {
  C.NSNumberFormatter_setPositivePrefix(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) PositiveSuffix() NSString {
  return NSString_(Id(C.NSNumberFormatter_positiveSuffix(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPositiveSuffix(string NSString)  {
  C.NSNumberFormatter_setPositiveSuffix(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) NegativePrefix() NSString {
  return NSString_(Id(C.NSNumberFormatter_negativePrefix(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNegativePrefix(string NSString)  {
  C.NSNumberFormatter_setNegativePrefix(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) NegativeSuffix() NSString {
  return NSString_(Id(C.NSNumberFormatter_negativeSuffix(goobj.Self())))
}
func (goobj NSNumberFormatter) SetNegativeSuffix(string NSString)  {
  C.NSNumberFormatter_setNegativeSuffix(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) CurrencyCode() NSString {
  return NSString_(Id(C.NSNumberFormatter_currencyCode(goobj.Self())))
}
func (goobj NSNumberFormatter) SetCurrencyCode(string NSString)  {
  C.NSNumberFormatter_setCurrencyCode(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) CurrencySymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_currencySymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetCurrencySymbol(string NSString)  {
  C.NSNumberFormatter_setCurrencySymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) InternationalCurrencySymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_internationalCurrencySymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetInternationalCurrencySymbol(string NSString)  {
  C.NSNumberFormatter_setInternationalCurrencySymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) PercentSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_percentSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPercentSymbol(string NSString)  {
  C.NSNumberFormatter_setPercentSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) PerMillSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_perMillSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPerMillSymbol(string NSString)  {
  C.NSNumberFormatter_setPerMillSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) MinusSign() NSString {
  return NSString_(Id(C.NSNumberFormatter_minusSign(goobj.Self())))
}
func (goobj NSNumberFormatter) SetMinusSign(string NSString)  {
  C.NSNumberFormatter_setMinusSign(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) PlusSign() NSString {
  return NSString_(Id(C.NSNumberFormatter_plusSign(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPlusSign(string NSString)  {
  C.NSNumberFormatter_setPlusSign(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) ExponentSymbol() NSString {
  return NSString_(Id(C.NSNumberFormatter_exponentSymbol(goobj.Self())))
}
func (goobj NSNumberFormatter) SetExponentSymbol(string NSString)  {
  C.NSNumberFormatter_setExponentSymbol(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) GroupingSize() C.uint {
  return (C.NSNumberFormatter_groupingSize(goobj.Self()))
}
func (goobj NSNumberFormatter) SetGroupingSize(number C.uint)  {
  C.NSNumberFormatter_setGroupingSize(goobj.Self(), number)
}
func (goobj NSNumberFormatter) SecondaryGroupingSize() C.uint {
  return (C.NSNumberFormatter_secondaryGroupingSize(goobj.Self()))
}
func (goobj NSNumberFormatter) SetSecondaryGroupingSize(number C.uint)  {
  C.NSNumberFormatter_setSecondaryGroupingSize(goobj.Self(), number)
}
func (goobj NSNumberFormatter) Multiplier() NSNumber {
  return NSNumber_(Id(C.NSNumberFormatter_multiplier(goobj.Self())))
}
func (goobj NSNumberFormatter) SetMultiplier(number NSNumber)  {
  C.NSNumberFormatter_setMultiplier(goobj.Self(), number.Self())
}
func (goobj NSNumberFormatter) FormatWidth() C.uint {
  return (C.NSNumberFormatter_formatWidth(goobj.Self()))
}
func (goobj NSNumberFormatter) SetFormatWidth(number C.uint)  {
  C.NSNumberFormatter_setFormatWidth(goobj.Self(), number)
}
func (goobj NSNumberFormatter) PaddingCharacter() NSString {
  return NSString_(Id(C.NSNumberFormatter_paddingCharacter(goobj.Self())))
}
func (goobj NSNumberFormatter) SetPaddingCharacter(string NSString)  {
  C.NSNumberFormatter_setPaddingCharacter(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) PaddingPosition() C.NSNumberFormatterPadPosition {
  return (C.NSNumberFormatter_paddingPosition(goobj.Self()))
}
func (goobj NSNumberFormatter) SetPaddingPosition(position C.NSNumberFormatterPadPosition)  {
  C.NSNumberFormatter_setPaddingPosition(goobj.Self(), position)
}
func (goobj NSNumberFormatter) RoundingMode() C.NSNumberFormatterRoundingMode {
  return (C.NSNumberFormatter_roundingMode(goobj.Self()))
}
func (goobj NSNumberFormatter) SetRoundingMode(mode C.NSNumberFormatterRoundingMode)  {
  C.NSNumberFormatter_setRoundingMode(goobj.Self(), mode)
}
func (goobj NSNumberFormatter) RoundingIncrement() NSNumber {
  return NSNumber_(Id(C.NSNumberFormatter_roundingIncrement(goobj.Self())))
}
func (goobj NSNumberFormatter) SetRoundingIncrement(number NSNumber)  {
  C.NSNumberFormatter_setRoundingIncrement(goobj.Self(), number.Self())
}
func (goobj NSNumberFormatter) MinimumIntegerDigits() C.uint {
  return (C.NSNumberFormatter_minimumIntegerDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMinimumIntegerDigits(number C.uint)  {
  C.NSNumberFormatter_setMinimumIntegerDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) MaximumIntegerDigits() C.uint {
  return (C.NSNumberFormatter_maximumIntegerDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMaximumIntegerDigits(number C.uint)  {
  C.NSNumberFormatter_setMaximumIntegerDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) MinimumFractionDigits() C.uint {
  return (C.NSNumberFormatter_minimumFractionDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMinimumFractionDigits(number C.uint)  {
  C.NSNumberFormatter_setMinimumFractionDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) MaximumFractionDigits() C.uint {
  return (C.NSNumberFormatter_maximumFractionDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMaximumFractionDigits(number C.uint)  {
  C.NSNumberFormatter_setMaximumFractionDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) Minimum() NSNumber {
  return NSNumber_(Id(C.NSNumberFormatter_minimum(goobj.Self())))
}
func (goobj NSNumberFormatter) SetMinimum(number NSNumber)  {
  C.NSNumberFormatter_setMinimum(goobj.Self(), number.Self())
}
func (goobj NSNumberFormatter) Maximum() NSNumber {
  return NSNumber_(Id(C.NSNumberFormatter_maximum(goobj.Self())))
}
func (goobj NSNumberFormatter) SetMaximum(number NSNumber)  {
  C.NSNumberFormatter_setMaximum(goobj.Self(), number.Self())
}
func (goobj NSNumberFormatter) CurrencyGroupingSeparator() NSString {
  return NSString_(Id(C.NSNumberFormatter_currencyGroupingSeparator(goobj.Self())))
}
func (goobj NSNumberFormatter) SetCurrencyGroupingSeparator(string NSString)  {
  C.NSNumberFormatter_setCurrencyGroupingSeparator(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) IsLenient() C.bool {
  return (C.NSNumberFormatter_isLenient(goobj.Self()))
}
func (goobj NSNumberFormatter) SetLenient(b C.bool)  {
  C.NSNumberFormatter_setLenient(goobj.Self(), b)
}
func (goobj NSNumberFormatter) UsesSignificantDigits() C.bool {
  return (C.NSNumberFormatter_usesSignificantDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetUsesSignificantDigits(b C.bool)  {
  C.NSNumberFormatter_setUsesSignificantDigits(goobj.Self(), b)
}
func (goobj NSNumberFormatter) MinimumSignificantDigits() C.uint {
  return (C.NSNumberFormatter_minimumSignificantDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMinimumSignificantDigits(number C.uint)  {
  C.NSNumberFormatter_setMinimumSignificantDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) MaximumSignificantDigits() C.uint {
  return (C.NSNumberFormatter_maximumSignificantDigits(goobj.Self()))
}
func (goobj NSNumberFormatter) SetMaximumSignificantDigits(number C.uint)  {
  C.NSNumberFormatter_setMaximumSignificantDigits(goobj.Self(), number)
}
func (goobj NSNumberFormatter) IsPartialStringValidationEnabled() C.bool {
  return (C.NSNumberFormatter_isPartialStringValidationEnabled(goobj.Self()))
}
func (goobj NSNumberFormatter) SetPartialStringValidationEnabled(b C.bool)  {
  C.NSNumberFormatter_setPartialStringValidationEnabled(goobj.Self(), b)
}
func (goobj NSNumberFormatter) HasThousandSeparators() C.bool {
  return (C.NSNumberFormatter_hasThousandSeparators(goobj.Self()))
}
func (goobj NSNumberFormatter) SetHasThousandSeparators(flag C.bool)  {
  C.NSNumberFormatter_setHasThousandSeparators(goobj.Self(), flag)
}
func (goobj NSNumberFormatter) ThousandSeparator() NSString {
  return NSString_(Id(C.NSNumberFormatter_thousandSeparator(goobj.Self())))
}
func (goobj NSNumberFormatter) SetThousandSeparator(newSeparator NSString)  {
  C.NSNumberFormatter_setThousandSeparator(goobj.Self(), newSeparator.Self())
}
func (goobj NSNumberFormatter) LocalizesFormat() C.bool {
  return (C.NSNumberFormatter_localizesFormat(goobj.Self()))
}
func (goobj NSNumberFormatter) SetLocalizesFormat(flag C.bool)  {
  C.NSNumberFormatter_setLocalizesFormat(goobj.Self(), flag)
}
func (goobj NSNumberFormatter) Format() NSString {
  return NSString_(Id(C.NSNumberFormatter_format(goobj.Self())))
}
func (goobj NSNumberFormatter) SetFormat(string NSString)  {
  C.NSNumberFormatter_setFormat(goobj.Self(), string.Self())
}
func (goobj NSNumberFormatter) AttributedStringForZero() NSAttributedString {
  return NSAttributedString_(Id(C.NSNumberFormatter_attributedStringForZero(goobj.Self())))
}
func (goobj NSNumberFormatter) SetAttributedStringForZero(newAttributedString NSAttributedString)  {
  C.NSNumberFormatter_setAttributedStringForZero(goobj.Self(), newAttributedString.Self())
}
func (goobj NSNumberFormatter) AttributedStringForNil() NSAttributedString {
  return NSAttributedString_(Id(C.NSNumberFormatter_attributedStringForNil(goobj.Self())))
}
func (goobj NSNumberFormatter) SetAttributedStringForNil(newAttributedString NSAttributedString)  {
  C.NSNumberFormatter_setAttributedStringForNil(goobj.Self(), newAttributedString.Self())
}
func (goobj NSNumberFormatter) AttributedStringForNotANumber() NSAttributedString {
  return NSAttributedString_(Id(C.NSNumberFormatter_attributedStringForNotANumber(goobj.Self())))
}
func (goobj NSNumberFormatter) SetAttributedStringForNotANumber(newAttributedString NSAttributedString)  {
  C.NSNumberFormatter_setAttributedStringForNotANumber(goobj.Self(), newAttributedString.Self())
}
func (goobj NSNumberFormatter) RoundingBehavior() NSDecimalNumberHandler {
  return NSDecimalNumberHandler_(Id(C.NSNumberFormatter_roundingBehavior(goobj.Self())))
}
func (goobj NSNumberFormatter) SetRoundingBehavior(newRoundingBehavior NSDecimalNumberHandler)  {
  C.NSNumberFormatter_setRoundingBehavior(goobj.Self(), newRoundingBehavior.Self())
}
func NSNumberFormatter_localizedStringFromNumberNumberStyle(num NSNumber, nstyle C.NSNumberFormatterStyle) NSString {
  return NSString_(Id(C.NSNumberFormatter__localizedStringFromNumberNumberStyle(num.Self(), nstyle)))
}
func NSNumberFormatter_defaultFormatterBehavior() C.NSNumberFormatterBehavior {
  return (C.NSNumberFormatter__defaultFormatterBehavior())
}
func NSNumberFormatter_setDefaultFormatterBehavior(behavior C.NSNumberFormatterBehavior)  {
  C.NSNumberFormatter__setDefaultFormatterBehavior(behavior)
}
type NSOperation struct {
  NSObject
}
func NSOperation_(i Id) NSOperation {
  return NSOperation{ NSObject_(i) }
}
func NSOperation_init() NSOperation {
  return NSOperation_(Id(C.NSOperation_init()))
}
func (goobj NSOperation) Start()  {
  C.NSOperation_start(goobj.Self())
}
func (goobj NSOperation) Main()  {
  C.NSOperation_main(goobj.Self())
}
func (goobj NSOperation) IsCancelled() C.bool {
  return (C.NSOperation_isCancelled(goobj.Self()))
}
func (goobj NSOperation) Cancel()  {
  C.NSOperation_cancel(goobj.Self())
}
func (goobj NSOperation) IsExecuting() C.bool {
  return (C.NSOperation_isExecuting(goobj.Self()))
}
func (goobj NSOperation) IsFinished() C.bool {
  return (C.NSOperation_isFinished(goobj.Self()))
}
func (goobj NSOperation) IsConcurrent() C.bool {
  return (C.NSOperation_isConcurrent(goobj.Self()))
}
func (goobj NSOperation) IsReady() C.bool {
  return (C.NSOperation_isReady(goobj.Self()))
}
func (goobj NSOperation) AddDependency(op NSOperation)  {
  C.NSOperation_addDependency(goobj.Self(), op.Self())
}
func (goobj NSOperation) RemoveDependency(op NSOperation)  {
  C.NSOperation_removeDependency(goobj.Self(), op.Self())
}
func (goobj NSOperation) Dependencies() NSArray {
  return NSArray_(Id(C.NSOperation_dependencies(goobj.Self())))
}
func (goobj NSOperation) QueuePriority() C.NSOperationQueuePriority {
  return (C.NSOperation_queuePriority(goobj.Self()))
}
func (goobj NSOperation) SetQueuePriority(p C.NSOperationQueuePriority)  {
  C.NSOperation_setQueuePriority(goobj.Self(), p)
}
func (goobj NSOperation) CompletionBlock()  {
  C.NSOperation_completionBlock(goobj.Self())
}
//REJECT: block
//func (goobj NSOperation) SetCompletionBlock(block *INVALID TYPE*)  {
//  C.NSOperation_setCompletionBlock(goobj.Self(), block)
//}
func (goobj NSOperation) WaitUntilFinished()  {
  C.NSOperation_waitUntilFinished(goobj.Self())
}
func (goobj NSOperation) ThreadPriority() C.double {
  return (C.NSOperation_threadPriority(goobj.Self()))
}
func (goobj NSOperation) SetThreadPriority(p C.double)  {
  C.NSOperation_setThreadPriority(goobj.Self(), p)
}

type NSBlockOperation struct {
  NSOperation
}
func NSBlockOperation_(i Id) NSBlockOperation {
  return NSBlockOperation{ NSOperation_(i) }
}
func NSBlockOperation_init() NSBlockOperation {
  p := Id(C.NSBlockOperation_init())
  return NSBlockOperation_(p)
}
//REJECT: block
//func (goobj NSBlockOperation) AddExecutionBlock(block *INVALID TYPE*)  {
//  C.NSBlockOperation_addExecutionBlock(goobj.Self(), block)
//}
func (goobj NSBlockOperation) ExecutionBlocks() NSArray {
  return NSArray_(Id(C.NSBlockOperation_executionBlocks(goobj.Self())))
}
//REJECT: block
//func NSBlockOperation_blockOperationWithBlock(block *INVALID TYPE*) Id {
//  return Id_(C.NSBlockOperation__blockOperationWithBlock(block))
//}
type NSInvocationOperation struct {
  NSOperation
}
func NSInvocationOperation_(i Id) NSInvocationOperation {
  return NSInvocationOperation{ NSOperation_(i) }
}
func NSInvocationOperation_init() NSInvocationOperation {
  p := Id(C.NSInvocationOperation_init())
  return NSInvocationOperation_(p)
}
//REJECT: sel
//func NSInvocationOperation_initWithTargetSelectorObject(target Id, sel C.SEL, arg Id) NSInvocationOperation {
//  return NSInvocationOperation_(Id(C.NSInvocationOperation_initWithTargetSelectorObject(unsafe.Pointer(target), sel, unsafe.Pointer(arg))))
//}
//REJECT: inv
//func NSInvocationOperation_initWithInvocation(inv NSInvocation) NSInvocationOperation {
//  return NSInvocationOperation_(Id(C.NSInvocationOperation_initWithInvocation(inv.Self())))
//}
//REJECT: NSInvocation
//func (goobj NSInvocationOperation) Invocation() NSInvocation {
//  return NSInvocation_(Id(C.NSInvocationOperation_invocation(goobj.Self())))
//}
func (goobj NSInvocationOperation) Result() Id {
  return Id_(C.NSInvocationOperation_result(goobj.Self()))
}

type NSOperationQueue struct {
  NSObject
}
func NSOperationQueue_(i Id) NSOperationQueue {
  return NSOperationQueue{ NSObject_(i) }
}
func NSOperationQueue_init() NSOperationQueue {
  p := Id(C.NSOperationQueue_init())
  return NSOperationQueue_(p)
}
func (goobj NSOperationQueue) AddOperation(op NSOperation)  {
  C.NSOperationQueue_addOperation(goobj.Self(), op.Self())
}
func (goobj NSOperationQueue) AddOperationsWaitUntilFinished(ops NSArray, wait C.bool)  {
  C.NSOperationQueue_addOperationsWaitUntilFinished(goobj.Self(), ops.Self(), wait)
}
//REJECT: block
//func (goobj NSOperationQueue) AddOperationWithBlock(block *INVALID TYPE*)  {
//  C.NSOperationQueue_addOperationWithBlock(goobj.Self(), block)
//}
func (goobj NSOperationQueue) Operations() NSArray {
  return NSArray_(Id(C.NSOperationQueue_operations(goobj.Self())))
}
func (goobj NSOperationQueue) OperationCount() C.uint {
  return (C.NSOperationQueue_operationCount(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSOperationQueue) MaxConcurrentOperationCount() C.NSInteger {
//  return (C.NSOperationQueue_maxConcurrentOperationCount(goobj.Self()))
//}
//REJECT: cnt
//func (goobj NSOperationQueue) SetMaxConcurrentOperationCount(cnt C.NSInteger)  {
//  C.NSOperationQueue_setMaxConcurrentOperationCount(goobj.Self(), cnt)
//}
func (goobj NSOperationQueue) SetSuspended(b C.bool)  {
  C.NSOperationQueue_setSuspended(goobj.Self(), b)
}
func (goobj NSOperationQueue) IsSuspended() C.bool {
  return (C.NSOperationQueue_isSuspended(goobj.Self()))
}
func (goobj NSOperationQueue) SetName(n NSString)  {
  C.NSOperationQueue_setName(goobj.Self(), n.Self())
}
func (goobj NSOperationQueue) Name() NSString {
  return NSString_(Id(C.NSOperationQueue_name(goobj.Self())))
}
func (goobj NSOperationQueue) CancelAllOperations()  {
  C.NSOperationQueue_cancelAllOperations(goobj.Self())
}
func (goobj NSOperationQueue) WaitUntilAllOperationsAreFinished()  {
  C.NSOperationQueue_waitUntilAllOperationsAreFinished(goobj.Self())
}
func NSOperationQueue_currentQueue() Id {
  return Id_(C.NSOperationQueue__currentQueue())
}
func NSOperationQueue_mainQueue() Id {
  return Id_(C.NSOperationQueue__mainQueue())
}
type NSOrthography struct {
  NSObject
}
func NSOrthography_(i Id) NSOrthography {
  return NSOrthography{ NSObject_(i) }
}
func NSOrthography_init() NSOrthography {
  p := Id(C.NSOrthography_init())
  return NSOrthography_(p)
}
func (goobj NSOrthography) DominantScript() NSString {
  return NSString_(Id(C.NSOrthography_dominantScript(goobj.Self())))
}
func (goobj NSOrthography) LanguageMap() NSDictionary {
  return NSDictionary_(Id(C.NSOrthography_languageMap(goobj.Self())))
}
func (goobj NSOrthography) LanguagesForScript(script NSString) NSArray {
  return NSArray_(Id(C.NSOrthography_languagesForScript(goobj.Self(), script.Self())))
}
func (goobj NSOrthography) DominantLanguageForScript(script NSString) NSString {
  return NSString_(Id(C.NSOrthography_dominantLanguageForScript(goobj.Self(), script.Self())))
}
func (goobj NSOrthography) DominantLanguage() NSString {
  return NSString_(Id(C.NSOrthography_dominantLanguage(goobj.Self())))
}
func (goobj NSOrthography) AllScripts() NSArray {
  return NSArray_(Id(C.NSOrthography_allScripts(goobj.Self())))
}
func (goobj NSOrthography) AllLanguages() NSArray {
  return NSArray_(Id(C.NSOrthography_allLanguages(goobj.Self())))
}
func NSOrthography_initWithDominantScriptLanguageMap(script NSString, map_ NSDictionary) NSOrthography {
  return NSOrthography_(Id(C.NSOrthography_initWithDominantScriptLanguageMap(script.Self(), map_.Self())))
}

type NSPointerArray struct {
  NSObject
}
func NSPointerArray_(i Id) NSPointerArray {
  return NSPointerArray{ NSObject_(i) }
}
func NSPointerArray_init() NSPointerArray {
  p := Id(C.NSPointerArray_init())
  return NSPointerArray_(p)
}
//REJECT: options
//func NSPointerArray_initWithOptions(options C.NSPointerFunctionsOptions) NSPointerArray {
//  return NSPointerArray_(Id(C.NSPointerArray_initWithOptions(options)))
//}
func NSPointerArray_initWithPointerFunctions(functions NSPointerFunctions) NSPointerArray {
  return NSPointerArray_(Id(C.NSPointerArray_initWithPointerFunctions(functions.Self())))
}
func (goobj NSPointerArray) PointerFunctions() NSPointerFunctions {
  return NSPointerFunctions_(Id(C.NSPointerArray_pointerFunctions(goobj.Self())))
}
func (goobj NSPointerArray) PointerAtIndex(index C.uint) unsafe.Pointer {
  return (C.NSPointerArray_pointerAtIndex(goobj.Self(), index))
}
func (goobj NSPointerArray) AddPointer(pointer unsafe.Pointer)  {
  C.NSPointerArray_addPointer(goobj.Self(), pointer)
}
func (goobj NSPointerArray) RemovePointerAtIndex(index C.uint)  {
  C.NSPointerArray_removePointerAtIndex(goobj.Self(), index)
}
func (goobj NSPointerArray) InsertPointerAtIndex(item unsafe.Pointer, index C.uint)  {
  C.NSPointerArray_insertPointerAtIndex(goobj.Self(), item, index)
}
func (goobj NSPointerArray) ReplacePointerAtIndexWithPointer(index C.uint, item unsafe.Pointer)  {
  C.NSPointerArray_replacePointerAtIndexWithPointer(goobj.Self(), index, item)
}
func (goobj NSPointerArray) Compact()  {
  C.NSPointerArray_compact(goobj.Self())
}
func (goobj NSPointerArray) Count() C.uint {
  return (C.NSPointerArray_count(goobj.Self()))
}
func (goobj NSPointerArray) SetCount(count C.uint)  {
  C.NSPointerArray_setCount(goobj.Self(), count)
}
func (goobj NSPointerArray) AllObjects() NSArray {
  return NSArray_(Id(C.NSPointerArray_allObjects(goobj.Self())))
}
//REJECT: options
//func NSPointerArray_pointerArrayWithOptions(options C.NSPointerFunctionsOptions)  {
//  C.NSPointerArray__pointerArrayWithOptions(options)
//}
func NSPointerArray_pointerArrayWithPointerFunctions(functions NSPointerFunctions)  {
  C.NSPointerArray__pointerArrayWithPointerFunctions(functions.Self())
}
type NSPort struct {
  NSObject
}
func NSPort_(i Id) NSPort {
  return NSPort{ NSObject_(i) }
}
func NSPort_init() NSPort {
  p := Id(C.NSPort_init())
  return NSPort_(p)
}
func (goobj NSPort) Invalidate()  {
  C.NSPort_invalidate(goobj.Self())
}
func (goobj NSPort) IsValid() C.bool {
  return (C.NSPort_isValid(goobj.Self()))
}
func (goobj NSPort) SetDelegate(anObject Id)  {
  C.NSPort_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSPort) Delegate() Id {
  return Id_(C.NSPort_delegate(goobj.Self()))
}
func (goobj NSPort) ScheduleInRunLoopForMode(runLoop NSRunLoop, mode NSString)  {
  C.NSPort_scheduleInRunLoopForMode(goobj.Self(), runLoop.Self(), mode.Self())
}
func (goobj NSPort) RemoveFromRunLoopForMode(runLoop NSRunLoop, mode NSString)  {
  C.NSPort_removeFromRunLoopForMode(goobj.Self(), runLoop.Self(), mode.Self())
}
func (goobj NSPort) ReservedSpaceLength() C.uint {
  return (C.NSPort_reservedSpaceLength(goobj.Self()))
}
func (goobj NSPort) SendBeforeDateComponentsFromReserved(limitDate NSDate, components NSMutableArray, receivePort NSPort, headerSpaceReserved C.uint) C.bool {
  return (C.NSPort_sendBeforeDateComponentsFromReserved(goobj.Self(), limitDate.Self(), components.Self(), receivePort.Self(), headerSpaceReserved))
}
func (goobj NSPort) SendBeforeDateMsgidComponentsFromReserved(limitDate NSDate, msgID C.uint, components NSMutableArray, receivePort NSPort, headerSpaceReserved C.uint) C.bool {
  return (C.NSPort_sendBeforeDateMsgidComponentsFromReserved(goobj.Self(), limitDate.Self(), msgID, components.Self(), receivePort.Self(), headerSpaceReserved))
}
func (goobj NSPort) AddConnectionToRunLoopForMode(conn NSConnection, runLoop NSRunLoop, mode NSString)  {
  C.NSPort_addConnectionToRunLoopForMode(goobj.Self(), conn.Self(), runLoop.Self(), mode.Self())
}
func (goobj NSPort) RemoveConnectionFromRunLoopForMode(conn NSConnection, runLoop NSRunLoop, mode NSString)  {
  C.NSPort_removeConnectionFromRunLoopForMode(goobj.Self(), conn.Self(), runLoop.Self(), mode.Self())
}
func NSPort_port() NSPort {
  return NSPort_(Id(C.NSPort__port()))
}
type NSMachPort struct {
  NSPort
}
func NSMachPort_(i Id) NSMachPort {
  return NSMachPort{ NSPort_(i) }
}
func NSMachPort_init() NSMachPort {
  p := Id(C.NSMachPort_init())
  return NSMachPort_(p)
}
func NSMachPort_initWithMachPort(machPort C.uint32_t) NSMachPort {
  return NSMachPort_(Id(C.NSMachPort_initWithMachPort(machPort)))
}
func (goobj NSMachPort) SetDelegate(anObject Id)  {
  C.NSMachPort_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSMachPort) Delegate() Id {
  return Id_(C.NSMachPort_delegate(goobj.Self()))
}
func NSMachPort_initWithMachPortOptions(machPort C.uint32_t, f C.uint) NSMachPort {
  return NSMachPort_(Id(C.NSMachPort_initWithMachPortOptions(machPort, f)))
}
func (goobj NSMachPort) MachPort() C.uint32_t {
  return (C.NSMachPort_machPort(goobj.Self()))
}
func (goobj NSMachPort) ScheduleInRunLoopForMode(runLoop NSRunLoop, mode NSString)  {
  C.NSMachPort_scheduleInRunLoopForMode(goobj.Self(), runLoop.Self(), mode.Self())
}
func (goobj NSMachPort) RemoveFromRunLoopForMode(runLoop NSRunLoop, mode NSString)  {
  C.NSMachPort_removeFromRunLoopForMode(goobj.Self(), runLoop.Self(), mode.Self())
}
func NSMachPort_portWithMachPort(machPort C.uint32_t) NSPort {
  return NSPort_(Id(C.NSMachPort__portWithMachPort(machPort)))
}
func NSMachPort_portWithMachPortOptions(machPort C.uint32_t, f C.uint) NSPort {
  return NSPort_(Id(C.NSMachPort__portWithMachPortOptions(machPort, f)))
}
type NSMessagePort struct {
  NSPort
}
func NSMessagePort_(i Id) NSMessagePort {
  return NSMessagePort{ NSPort_(i) }
}
func NSMessagePort_init() NSMessagePort {
  p := Id(C.NSMessagePort_init())
  return NSMessagePort_(p)
}


type NSSocketPort struct {
  NSPort
}
func NSSocketPort_(i Id) NSSocketPort {
  return NSSocketPort{ NSPort_(i) }
}
func NSSocketPort_init() NSSocketPort {
  return NSSocketPort_(Id(C.NSSocketPort_init()))
}
func NSSocketPort_initWithTCPPort(port C.ushort) NSSocketPort {
  return NSSocketPort_(Id(C.NSSocketPort_initWithTCPPort(port)))
}
func NSSocketPort_initWithProtocolFamilySocketTypeProtocolAddress(family C.int, type_ C.int, protocol C.int, address NSData) NSSocketPort {
  return NSSocketPort_(Id(C.NSSocketPort_initWithProtocolFamilySocketTypeProtocolAddress(family, type_, protocol, address.Self())))
}
func NSSocketPort_initWithProtocolFamilySocketTypeProtocolSocket(family C.int, type_ C.int, protocol C.int, sock C.NSSocketNativeHandle) NSSocketPort {
  return NSSocketPort_(Id(C.NSSocketPort_initWithProtocolFamilySocketTypeProtocolSocket(family, type_, protocol, sock)))
}
func (goobj NSSocketPort) InitRemoteWithTCPPortHost(port C.ushort, hostName NSString) Id {
  return Id_(C.NSSocketPort_initRemoteWithTCPPortHost(goobj.Self(), port, hostName.Self()))
}
func (goobj NSSocketPort) InitRemoteWithProtocolFamilySocketTypeProtocolAddress(family C.int, type_ C.int, protocol C.int, address NSData) Id {
  return Id_(C.NSSocketPort_initRemoteWithProtocolFamilySocketTypeProtocolAddress(goobj.Self(), family, type_, protocol, address.Self()))
}
func (goobj NSSocketPort) ProtocolFamily() C.int {
  return (C.NSSocketPort_protocolFamily(goobj.Self()))
}
func (goobj NSSocketPort) SocketType() C.int {
  return (C.NSSocketPort_socketType(goobj.Self()))
}
func (goobj NSSocketPort) Protocol() C.int {
  return (C.NSSocketPort_protocol(goobj.Self()))
}
func (goobj NSSocketPort) Address() NSData {
  return NSData_(Id(C.NSSocketPort_address(goobj.Self())))
}
func (goobj NSSocketPort) Socket() C.NSSocketNativeHandle {
  return (C.NSSocketPort_socket(goobj.Self()))
}

type NSProcessInfo struct {
  NSObject
}
func NSProcessInfo_(i Id) NSProcessInfo {
  return NSProcessInfo{ NSObject_(i) }
}
func NSProcessInfo_init() NSProcessInfo {
  p := Id(C.NSProcessInfo_init())
  return NSProcessInfo_(p)
}
func (goobj NSProcessInfo) Environment() NSDictionary {
  return NSDictionary_(Id(C.NSProcessInfo_environment(goobj.Self())))
}
func (goobj NSProcessInfo) Arguments() NSArray {
  return NSArray_(Id(C.NSProcessInfo_arguments(goobj.Self())))
}
func (goobj NSProcessInfo) HostName() NSString {
  return NSString_(Id(C.NSProcessInfo_hostName(goobj.Self())))
}
func (goobj NSProcessInfo) ProcessName() NSString {
  return NSString_(Id(C.NSProcessInfo_processName(goobj.Self())))
}
func (goobj NSProcessInfo) ProcessIdentifier() C.int {
  return (C.NSProcessInfo_processIdentifier(goobj.Self()))
}
func (goobj NSProcessInfo) SetProcessName(newName NSString)  {
  C.NSProcessInfo_setProcessName(goobj.Self(), newName.Self())
}
func (goobj NSProcessInfo) GloballyUniqueString() NSString {
  return NSString_(Id(C.NSProcessInfo_globallyUniqueString(goobj.Self())))
}
func (goobj NSProcessInfo) OperatingSystem() C.uint {
  return (C.NSProcessInfo_operatingSystem(goobj.Self()))
}
func (goobj NSProcessInfo) OperatingSystemName() NSString {
  return NSString_(Id(C.NSProcessInfo_operatingSystemName(goobj.Self())))
}
func (goobj NSProcessInfo) OperatingSystemVersionString() NSString {
  return NSString_(Id(C.NSProcessInfo_operatingSystemVersionString(goobj.Self())))
}
func (goobj NSProcessInfo) ProcessorCount() C.uint {
  return (C.NSProcessInfo_processorCount(goobj.Self()))
}
func (goobj NSProcessInfo) ActiveProcessorCount() C.uint {
  return (C.NSProcessInfo_activeProcessorCount(goobj.Self()))
}
func (goobj NSProcessInfo) PhysicalMemory() C.ulonglong {
  return (C.NSProcessInfo_physicalMemory(goobj.Self()))
}
//REJECT: NSTimeInterval
//func (goobj NSProcessInfo) SystemUptime() C.NSTimeInterval {
//  return (C.NSProcessInfo_systemUptime(goobj.Self()))
//}
func (goobj NSProcessInfo) DisableSuddenTermination()  {
  C.NSProcessInfo_disableSuddenTermination(goobj.Self())
}
func (goobj NSProcessInfo) EnableSuddenTermination()  {
  C.NSProcessInfo_enableSuddenTermination(goobj.Self())
}
func (goobj NSProcessInfo) DisableAutomaticTermination(reason NSString)  {
  C.NSProcessInfo_disableAutomaticTermination(goobj.Self(), reason.Self())
}
func (goobj NSProcessInfo) EnableAutomaticTermination(reason NSString)  {
  C.NSProcessInfo_enableAutomaticTermination(goobj.Self(), reason.Self())
}
func (goobj NSProcessInfo) SetAutomaticTerminationSupportEnabled(flag C.bool)  {
  C.NSProcessInfo_setAutomaticTerminationSupportEnabled(goobj.Self(), flag)
}
func (goobj NSProcessInfo) AutomaticTerminationSupportEnabled() C.bool {
  return (C.NSProcessInfo_automaticTerminationSupportEnabled(goobj.Self()))
}
func (goobj NSProcessInfo) BeginActivityWithOptionsReason(options C.NSActivityOptions, reason NSString) Id {
  return Id_(C.NSProcessInfo_beginActivityWithOptionsReason(goobj.Self(), options, reason.Self()))
}
func (goobj NSProcessInfo) EndActivity(activity Id)  {
  C.NSProcessInfo_endActivity(goobj.Self(), unsafe.Pointer(activity))
}
//REJECT: block
//func (goobj NSProcessInfo) PerformActivityWithOptionsReasonUsingBlock(options C.NSActivityOptions, reason NSString, block *INVALID TYPE*)  {
//  C.NSProcessInfo_performActivityWithOptionsReasonUsingBlock(goobj.Self(), options, reason.Self(), block)
//}
func NSProcessInfo_processInfo() NSProcessInfo {
  return NSProcessInfo_(Id(C.NSProcessInfo__processInfo()))
}


type NSTextCheckingResult struct {
  NSObject
}
func NSTextCheckingResult_(i Id) NSTextCheckingResult {
  return NSTextCheckingResult{ NSObject_(i) }
}
func NSTextCheckingResult_init() NSTextCheckingResult {
  p := Id(C.NSTextCheckingResult_init())
  return NSTextCheckingResult_(p)
}
func (goobj NSTextCheckingResult) ResultType() C.NSTextCheckingType {
  return (C.NSTextCheckingResult_resultType(goobj.Self()))
}
//REJECT: NSRange
//func (goobj NSTextCheckingResult) Range() C.NSRange {
//  return (C.NSTextCheckingResult_range(goobj.Self()))
//}
//REJECT: NSRange
//func (goobj NSTextCheckingResult) RangeAtIndex(idx C.uint) C.NSRange {
//  return (C.NSTextCheckingResult_rangeAtIndex(goobj.Self(), idx))
//}
//REJECT: offset
//func (goobj NSTextCheckingResult) ResultByAdjustingRangesWithOffset(offset C.NSInteger) NSTextCheckingResult {
//  return NSTextCheckingResult_(Id(C.NSTextCheckingResult_resultByAdjustingRangesWithOffset(goobj.Self(), offset)))
//}
func (goobj NSTextCheckingResult) Orthography() NSOrthography {
  return NSOrthography_(Id(C.NSTextCheckingResult_orthography(goobj.Self())))
}
func (goobj NSTextCheckingResult) GrammarDetails() NSArray {
  return NSArray_(Id(C.NSTextCheckingResult_grammarDetails(goobj.Self())))
}
func (goobj NSTextCheckingResult) Date() NSDate {
  return NSDate_(Id(C.NSTextCheckingResult_date(goobj.Self())))
}
func (goobj NSTextCheckingResult) TimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSTextCheckingResult_timeZone(goobj.Self())))
}
//REJECT: NSTimeInterval
//func (goobj NSTextCheckingResult) Duration() C.NSTimeInterval {
//  return (C.NSTextCheckingResult_duration(goobj.Self()))
//}
func (goobj NSTextCheckingResult) Components() NSDictionary {
  return NSDictionary_(Id(C.NSTextCheckingResult_components(goobj.Self())))
}
func (goobj NSTextCheckingResult) URL() NSURL {
  return NSURL_(Id(C.NSTextCheckingResult_URL(goobj.Self())))
}
func (goobj NSTextCheckingResult) ReplacementString() NSString {
  return NSString_(Id(C.NSTextCheckingResult_replacementString(goobj.Self())))
}
func (goobj NSTextCheckingResult) AlternativeStrings() NSArray {
  return NSArray_(Id(C.NSTextCheckingResult_alternativeStrings(goobj.Self())))
}
func (goobj NSTextCheckingResult) RegularExpression() NSRegularExpression {
  return NSRegularExpression_(Id(C.NSTextCheckingResult_regularExpression(goobj.Self())))
}
func (goobj NSTextCheckingResult) PhoneNumber() NSString {
  return NSString_(Id(C.NSTextCheckingResult_phoneNumber(goobj.Self())))
}
func (goobj NSTextCheckingResult) AddressComponents() NSDictionary {
  return NSDictionary_(Id(C.NSTextCheckingResult_addressComponents(goobj.Self())))
}
func (goobj NSTextCheckingResult) NumberOfRanges() C.uint {
  return (C.NSTextCheckingResult_numberOfRanges(goobj.Self()))
}

type NSRegularExpression struct {
  NSObject
}
func NSRegularExpression_(i Id) NSRegularExpression {
  return NSRegularExpression{ NSObject_(i) }
}
func NSRegularExpression_init() NSRegularExpression {
  p := Id(C.NSRegularExpression_init())
  return NSRegularExpression_(p)
}
func NSRegularExpression_initWithPatternOptionsError(pattern NSString, options C.NSRegularExpressionOptions, error NSError) NSRegularExpression {
  return NSRegularExpression_(Id(C.NSRegularExpression_initWithPatternOptionsError(pattern.Self(), options, error.Self())))
}
func (goobj NSRegularExpression) Pattern() NSString {
  return NSString_(Id(C.NSRegularExpression_pattern(goobj.Self())))
}
func (goobj NSRegularExpression) Options() C.NSRegularExpressionOptions {
  return (C.NSRegularExpression_options(goobj.Self()))
}
func (goobj NSRegularExpression) NumberOfCaptureGroups() C.uint {
  return (C.NSRegularExpression_numberOfCaptureGroups(goobj.Self()))
}
//REJECT: range block
//func (goobj NSRegularExpression) EnumerateMatchesInStringOptionsRangeUsingBlock(string NSString, options C.NSMatchingOptions, range_ C.NSRange, block *INVALID TYPE*)  {
//  C.NSRegularExpression_enumerateMatchesInStringOptionsRangeUsingBlock(goobj.Self(), string.Self(), options, range_, block)
//}
//REJECT: range
//func (goobj NSRegularExpression) MatchesInStringOptionsRange(string NSString, options C.NSMatchingOptions, range_ C.NSRange) NSArray {
//  return NSArray_(Id(C.NSRegularExpression_matchesInStringOptionsRange(goobj.Self(), string.Self(), options, range_)))
//}
//REJECT: range
//func (goobj NSRegularExpression) NumberOfMatchesInStringOptionsRange(string NSString, options C.NSMatchingOptions, range_ C.NSRange) C.uint {
//  return (C.NSRegularExpression_numberOfMatchesInStringOptionsRange(goobj.Self(), string.Self(), options, range_))
//}
//REJECT: range
//func (goobj NSRegularExpression) FirstMatchInStringOptionsRange(string NSString, options C.NSMatchingOptions, range_ C.NSRange) NSTextCheckingResult {
//  return NSTextCheckingResult_(Id(C.NSRegularExpression_firstMatchInStringOptionsRange(goobj.Self(), string.Self(), options, range_)))
//}
//REJECT: NSRange range
//func (goobj NSRegularExpression) RangeOfFirstMatchInStringOptionsRange(string NSString, options C.NSMatchingOptions, range_ C.NSRange) C.NSRange {
//  return (C.NSRegularExpression_rangeOfFirstMatchInStringOptionsRange(goobj.Self(), string.Self(), options, range_))
//}
//REJECT: range
//func (goobj NSRegularExpression) StringByReplacingMatchesInStringOptionsRangeWithTemplate(string NSString, options C.NSMatchingOptions, range_ C.NSRange, templ NSString) NSString {
//  return NSString_(Id(C.NSRegularExpression_stringByReplacingMatchesInStringOptionsRangeWithTemplate(goobj.Self(), string.Self(), options, range_, templ.Self())))
//}
//REJECT: range
//func (goobj NSRegularExpression) ReplaceMatchesInStringOptionsRangeWithTemplate(string NSMutableString, options C.NSMatchingOptions, range_ C.NSRange, templ NSString) C.uint {
//  return (C.NSRegularExpression_replaceMatchesInStringOptionsRangeWithTemplate(goobj.Self(), string.Self(), options, range_, templ.Self()))
//}
//REJECT: offset
//func (goobj NSRegularExpression) ReplacementStringForResultInStringOffsetTemplate(result NSTextCheckingResult, string NSString, offset C.NSInteger, templ NSString) NSString {
//  return NSString_(Id(C.NSRegularExpression_replacementStringForResultInStringOffsetTemplate(goobj.Self(), result.Self(), string.Self(), offset, templ.Self())))
//}
func NSRegularExpression_regularExpressionWithPatternOptionsError(pattern NSString, options C.NSRegularExpressionOptions, error NSError) NSRegularExpression {
  return NSRegularExpression_(Id(C.NSRegularExpression__regularExpressionWithPatternOptionsError(pattern.Self(), options, error.Self())))
}
func NSRegularExpression_escapedPatternForString(string NSString) NSString {
  return NSString_(Id(C.NSRegularExpression__escapedPatternForString(string.Self())))
}
type NSDataDetector struct {
  NSRegularExpression
}
func NSDataDetector_(i Id) NSDataDetector {
  return NSDataDetector{ NSRegularExpression_(i) }
}
func NSDataDetector_init() NSDataDetector {
  p := Id(C.NSDataDetector_init())
  return NSDataDetector_(p)
}
//REJECT: checkingTypes
//func NSDataDetector_initWithTypesError(checkingTypes C.NSTextCheckingTypes, error NSError) NSDataDetector {
//  return NSDataDetector_(Id(C.NSDataDetector_initWithTypesError(checkingTypes, error.Self())))
//}
//REJECT: NSTextCheckingTypes
//func (goobj NSDataDetector) CheckingTypes() C.NSTextCheckingTypes {
//  return (C.NSDataDetector_checkingTypes(goobj.Self()))
//}
//REJECT: checkingTypes
//func NSDataDetector_dataDetectorWithTypesError(checkingTypes C.NSTextCheckingTypes, error NSError) NSDataDetector {
//  return NSDataDetector_(Id(C.NSDataDetector__dataDetectorWithTypesError(checkingTypes, error.Self())))
//}
type NSRunLoop struct {
  NSObject
}
func NSRunLoop_(i Id) NSRunLoop {
  return NSRunLoop{ NSObject_(i) }
}
func NSRunLoop_init() NSRunLoop {
  p := Id(C.NSRunLoop_init())
  return NSRunLoop_(p)
}
func (goobj NSRunLoop) CurrentMode() NSString {
  return NSString_(Id(C.NSRunLoop_currentMode(goobj.Self())))
}
//REJECT: CFRunLoopRef
//func (goobj NSRunLoop) GetCFRunLoop() C.CFRunLoopRef {
//  return (C.NSRunLoop_getCFRunLoop(goobj.Self()))
//}
func (goobj NSRunLoop) AddTimerForMode(timer NSTimer, mode NSString)  {
  C.NSRunLoop_addTimerForMode(goobj.Self(), timer.Self(), mode.Self())
}
func (goobj NSRunLoop) AddPortForMode(aPort NSPort, mode NSString)  {
  C.NSRunLoop_addPortForMode(goobj.Self(), aPort.Self(), mode.Self())
}
func (goobj NSRunLoop) RemovePortForMode(aPort NSPort, mode NSString)  {
  C.NSRunLoop_removePortForMode(goobj.Self(), aPort.Self(), mode.Self())
}
func (goobj NSRunLoop) LimitDateForMode(mode NSString) NSDate {
  return NSDate_(Id(C.NSRunLoop_limitDateForMode(goobj.Self(), mode.Self())))
}
func (goobj NSRunLoop) AcceptInputForModeBeforeDate(mode NSString, limitDate NSDate)  {
  C.NSRunLoop_acceptInputForModeBeforeDate(goobj.Self(), mode.Self(), limitDate.Self())
}
func (goobj NSRunLoop) Run()  {
  C.NSRunLoop_run(goobj.Self())
}
func (goobj NSRunLoop) RunUntilDate(limitDate NSDate)  {
  C.NSRunLoop_runUntilDate(goobj.Self(), limitDate.Self())
}
func (goobj NSRunLoop) RunModeBeforeDate(mode NSString, limitDate NSDate) C.bool {
  return (C.NSRunLoop_runModeBeforeDate(goobj.Self(), mode.Self(), limitDate.Self()))
}
func (goobj NSRunLoop) ConfigureAsServer()  {
  C.NSRunLoop_configureAsServer(goobj.Self())
}
//REJECT: aSelector
//func (goobj NSRunLoop) PerformSelectorTargetArgumentOrderModes(aSelector C.SEL, target Id, arg Id, order C.uint, modes NSArray)  {
//  C.NSRunLoop_performSelectorTargetArgumentOrderModes(goobj.Self(), aSelector, unsafe.Pointer(target), unsafe.Pointer(arg), order, modes.Self())
//}
//REJECT: aSelector
//func (goobj NSRunLoop) CancelPerformSelectorTargetArgument(aSelector C.SEL, target Id, arg Id)  {
//  C.NSRunLoop_cancelPerformSelectorTargetArgument(goobj.Self(), aSelector, unsafe.Pointer(target), unsafe.Pointer(arg))
//}
func (goobj NSRunLoop) CancelPerformSelectorsWithTarget(target Id)  {
  C.NSRunLoop_cancelPerformSelectorsWithTarget(goobj.Self(), unsafe.Pointer(target))
}
func NSRunLoop_currentRunLoop() NSRunLoop {
  return NSRunLoop_(Id(C.NSRunLoop__currentRunLoop()))
}
func NSRunLoop_mainRunLoop() NSRunLoop {
  return NSRunLoop_(Id(C.NSRunLoop__mainRunLoop()))
}
type NSSortDescriptor struct {
  NSObject
}
func NSSortDescriptor_(i Id) NSSortDescriptor {
  return NSSortDescriptor{ NSObject_(i) }
}
func NSSortDescriptor_init() NSSortDescriptor {
  p := Id(C.NSSortDescriptor_init())
  return NSSortDescriptor_(p)
}
func NSSortDescriptor_initWithKeyAscending(key NSString, ascending C.bool) NSSortDescriptor {
  return NSSortDescriptor_(Id(C.NSSortDescriptor_initWithKeyAscending(key.Self(), ascending)))
}
//REJECT: selector
//func NSSortDescriptor_initWithKeyAscendingSelector(key NSString, ascending C.bool, selector C.SEL) NSSortDescriptor {
//  return NSSortDescriptor_(Id(C.NSSortDescriptor_initWithKeyAscendingSelector(key.Self(), ascending, selector)))
//}
func (goobj NSSortDescriptor) Key() NSString {
  return NSString_(Id(C.NSSortDescriptor_key(goobj.Self())))
}
func (goobj NSSortDescriptor) Ascending() C.bool {
  return (C.NSSortDescriptor_ascending(goobj.Self()))
}
//REJECT: SEL
//func (goobj NSSortDescriptor) Selector() C.SEL {
//  return (C.NSSortDescriptor_selector(goobj.Self()))
//}
func (goobj NSSortDescriptor) AllowEvaluation()  {
  C.NSSortDescriptor_allowEvaluation(goobj.Self())
}
//REJECT: cmptr
//func NSSortDescriptor_initWithKeyAscendingComparator(key NSString, ascending C.bool, cmptr C.NSComparator) NSSortDescriptor {
//  return NSSortDescriptor_(Id(C.NSSortDescriptor_initWithKeyAscendingComparator(key.Self(), ascending, cmptr)))
//}
//REJECT: NSComparator
//func (goobj NSSortDescriptor) Comparator() C.NSComparator {
//  return (C.NSSortDescriptor_comparator(goobj.Self()))
//}
//REJECT: NSComparisonResult
//func (goobj NSSortDescriptor) CompareObjectToObject(object1 Id, object2 Id) C.NSComparisonResult {
//  return (C.NSSortDescriptor_compareObjectToObject(goobj.Self(), unsafe.Pointer(object1), unsafe.Pointer(object2)))
//}
func (goobj NSSortDescriptor) ReversedSortDescriptor() Id {
  return Id_(C.NSSortDescriptor_reversedSortDescriptor(goobj.Self()))
}
func NSSortDescriptor_sortDescriptorWithKeyAscending(key NSString, ascending C.bool) Id {
  return Id_(C.NSSortDescriptor__sortDescriptorWithKeyAscending(key.Self(), ascending))
}
//REJECT: selector
//func NSSortDescriptor_sortDescriptorWithKeyAscendingSelector(key NSString, ascending C.bool, selector C.SEL) Id {
//  return Id_(C.NSSortDescriptor__sortDescriptorWithKeyAscendingSelector(key.Self(), ascending, selector))
//}
//REJECT: cmptr
//func NSSortDescriptor_sortDescriptorWithKeyAscendingComparator(key NSString, ascending C.bool, cmptr C.NSComparator) Id {
//  return Id_(C.NSSortDescriptor__sortDescriptorWithKeyAscendingComparator(key.Self(), ascending, cmptr))
//}
type NSStream struct {
  NSObject
}
func NSStream_(i Id) NSStream {
  return NSStream{ NSObject_(i) }
}
func NSStream_init() NSStream {
  p := Id(C.NSStream_init())
  return NSStream_(p)
}
func (goobj NSStream) Open()  {
  C.NSStream_open(goobj.Self())
}
func (goobj NSStream) Close()  {
  C.NSStream_close(goobj.Self())
}
func (goobj NSStream) Delegate() Id {
  return Id_(C.NSStream_delegate(goobj.Self()))
}
func (goobj NSStream) SetDelegate(delegate Id)  {
  C.NSStream_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSStream) PropertyForKey(key NSString) Id {
  return Id_(C.NSStream_propertyForKey(goobj.Self(), key.Self()))
}
func (goobj NSStream) SetPropertyForKey(property Id, key NSString) C.bool {
  return (C.NSStream_setPropertyForKey(goobj.Self(), unsafe.Pointer(property), key.Self()))
}
func (goobj NSStream) ScheduleInRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSStream_scheduleInRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSStream) RemoveFromRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSStream_removeFromRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSStream) StreamStatus() C.NSStreamStatus {
  return (C.NSStream_streamStatus(goobj.Self()))
}
func (goobj NSStream) StreamError() NSError {
  return NSError_(Id(C.NSStream_streamError(goobj.Self())))
}

type NSInputStream struct {
  NSStream
}
func NSInputStream_(i Id) NSInputStream {
  return NSInputStream{ NSStream_(i) }
}
func NSInputStream_init() NSInputStream {
  p := Id(C.NSInputStream_init())
  return NSInputStream_(p)
}
//REJECT: NSInteger
//func (goobj NSInputStream) ReadMaxLength(buffer C.uint8_t, len C.uint) C.NSInteger {
//  return (C.NSInputStream_readMaxLength(goobj.Self(), buffer, len))
//}
func (goobj NSInputStream) GetBufferLength(buffer C.uint8_t, len C.uint) C.bool {
  return (C.NSInputStream_getBufferLength(goobj.Self(), buffer, len))
}
func (goobj NSInputStream) HasBytesAvailable() C.bool {
  return (C.NSInputStream_hasBytesAvailable(goobj.Self()))
}
func NSInputStream_initWithData(data NSData) NSInputStream {
  return NSInputStream_(Id(C.NSInputStream_initWithData(data.Self())))
}
func NSInputStream_initWithFileAtPath(path NSString) NSInputStream {
  return NSInputStream_(Id(C.NSInputStream_initWithFileAtPath(path.Self())))
}
func NSInputStream_initWithURL(url NSURL) NSInputStream {
  return NSInputStream_(Id(C.NSInputStream_initWithURL(url.Self())))
}

type NSOutputStream struct {
  NSStream
}
func NSOutputStream_(i Id) NSOutputStream {
  return NSOutputStream{ NSStream_(i) }
}
func NSOutputStream_init() NSOutputStream {
  p := Id(C.NSOutputStream_init())
  return NSOutputStream_(p)
}
//REJECT: NSInteger
//func (goobj NSOutputStream) WriteMaxLength(buffer C.uint8_t, len C.uint) C.NSInteger {
//  return (C.NSOutputStream_writeMaxLength(goobj.Self(), buffer, len))
//}
func (goobj NSOutputStream) HasSpaceAvailable() C.bool {
  return (C.NSOutputStream_hasSpaceAvailable(goobj.Self()))
}
func (goobj NSOutputStream) InitToMemory() Id {
  return Id_(C.NSOutputStream_initToMemory(goobj.Self()))
}
func (goobj NSOutputStream) InitToBufferCapacity(buffer C.uint8_t, capacity C.uint) Id {
  return Id_(C.NSOutputStream_initToBufferCapacity(goobj.Self(), buffer, capacity))
}
func (goobj NSOutputStream) InitToFileAtPathAppend(path NSString, shouldAppend C.bool) Id {
  return Id_(C.NSOutputStream_initToFileAtPathAppend(goobj.Self(), path.Self(), shouldAppend))
}
func NSOutputStream_initWithURLAppend(url NSURL, shouldAppend C.bool) NSOutputStream {
  return NSOutputStream_(Id(C.NSOutputStream_initWithURLAppend(url.Self(), shouldAppend)))
}

type NSThread struct {
  NSObject
}
func NSThread_(i Id) NSThread {
  return NSThread{ NSObject_(i) }
}
func (goobj NSThread) ThreadDictionary() NSMutableDictionary {
  return NSMutableDictionary_(Id(C.NSThread_threadDictionary(goobj.Self())))
}
func (goobj NSThread) ThreadPriority() C.double {
  return (C.NSThread_threadPriority(goobj.Self()))
}
func (goobj NSThread) SetThreadPriority(p C.double)  {
  C.NSThread_setThreadPriority(goobj.Self(), p)
}
func (goobj NSThread) SetName(n NSString)  {
  C.NSThread_setName(goobj.Self(), n.Self())
}
func (goobj NSThread) Name() NSString {
  return NSString_(Id(C.NSThread_name(goobj.Self())))
}
func (goobj NSThread) StackSize() C.uint {
  return (C.NSThread_stackSize(goobj.Self()))
}
func (goobj NSThread) SetStackSize(s C.uint)  {
  C.NSThread_setStackSize(goobj.Self(), s)
}
func (goobj NSThread) IsMainThread() C.bool {
  return (C.NSThread_isMainThread(goobj.Self()))
}
func NSThread_init() NSThread {
  return NSThread_(Id(C.NSThread_init()))
}
//REJECT: selector
//func NSThread_initWithTargetSelectorObject(target Id, selector C.SEL, argument Id) NSThread {
//  return NSThread_(Id(C.NSThread_initWithTargetSelectorObject(unsafe.Pointer(target), selector, unsafe.Pointer(argument))))
//}
func (goobj NSThread) IsExecuting() C.bool {
  return (C.NSThread_isExecuting(goobj.Self()))
}
func (goobj NSThread) IsFinished() C.bool {
  return (C.NSThread_isFinished(goobj.Self()))
}
func (goobj NSThread) IsCancelled() C.bool {
  return (C.NSThread_isCancelled(goobj.Self()))
}
func (goobj NSThread) Cancel()  {
  C.NSThread_cancel(goobj.Self())
}
func (goobj NSThread) Start()  {
  C.NSThread_start(goobj.Self())
}
func (goobj NSThread) Main()  {
  C.NSThread_main(goobj.Self())
}
func NSThread_currentThread() NSThread {
  return NSThread_(Id(C.NSThread__currentThread()))
}
//REJECT: selector
//func NSThread_detachNewThreadSelectorToTargetWithObject(selector C.SEL, target Id, argument Id)  {
//  C.NSThread__detachNewThreadSelectorToTargetWithObject(selector, unsafe.Pointer(target), unsafe.Pointer(argument))
//}
func NSThread_isMultiThreaded() C.bool {
  return (C.NSThread__isMultiThreaded())
}
func NSThread_sleepUntilDate(date NSDate)  {
  C.NSThread__sleepUntilDate(date.Self())
}
//REJECT: ti
//func NSThread_sleepForTimeInterval(ti C.NSTimeInterval)  {
//  C.NSThread__sleepForTimeInterval(ti)
//}
func NSThread_exit()  {
  C.NSThread__exit()
}
func NSThread_threadPriority()  {
  C.NSThread__threadPriority()
}
func NSThread_setThreadPriority(p C.double) C.bool {
  return (C.NSThread__setThreadPriority(p))
}
func NSThread_callStackReturnAddresses() NSArray {
  return NSArray_(Id(C.NSThread__callStackReturnAddresses()))
}
func NSThread_callStackSymbols() NSArray {
  return NSArray_(Id(C.NSThread__callStackSymbols()))
}
func NSThread_isMainThread() C.bool {
  return (C.NSThread__isMainThread())
}
func NSThread_mainThread() NSThread {
  return NSThread_(Id(C.NSThread__mainThread()))
}
type NSTimeZone struct {
  NSObject
}
func NSTimeZone_(i Id) NSTimeZone {
  return NSTimeZone{ NSObject_(i) }
}
func NSTimeZone_init() NSTimeZone {
  p := Id(C.NSTimeZone_init())
  return NSTimeZone_(p)
}
func (goobj NSTimeZone) Name() NSString {
  return NSString_(Id(C.NSTimeZone_name(goobj.Self())))
}
func (goobj NSTimeZone) Data() NSData {
  return NSData_(Id(C.NSTimeZone_data(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSTimeZone) SecondsFromGMTForDate(aDate NSDate) C.NSInteger {
//  return (C.NSTimeZone_secondsFromGMTForDate(goobj.Self(), aDate.Self()))
//}
func (goobj NSTimeZone) AbbreviationForDate(aDate NSDate) NSString {
  return NSString_(Id(C.NSTimeZone_abbreviationForDate(goobj.Self(), aDate.Self())))
}
func (goobj NSTimeZone) IsDaylightSavingTimeForDate(aDate NSDate) C.bool {
  return (C.NSTimeZone_isDaylightSavingTimeForDate(goobj.Self(), aDate.Self()))
}
//REJECT: NSTimeInterval
//func (goobj NSTimeZone) DaylightSavingTimeOffsetForDate(aDate NSDate) C.NSTimeInterval {
//  return (C.NSTimeZone_daylightSavingTimeOffsetForDate(goobj.Self(), aDate.Self()))
//}
func (goobj NSTimeZone) NextDaylightSavingTimeTransitionAfterDate(aDate NSDate) NSDate {
  return NSDate_(Id(C.NSTimeZone_nextDaylightSavingTimeTransitionAfterDate(goobj.Self(), aDate.Self())))
}
//REJECT: NSInteger
//func (goobj NSTimeZone) SecondsFromGMT() C.NSInteger {
//  return (C.NSTimeZone_secondsFromGMT(goobj.Self()))
//}
func (goobj NSTimeZone) Abbreviation() NSString {
  return NSString_(Id(C.NSTimeZone_abbreviation(goobj.Self())))
}
func (goobj NSTimeZone) IsDaylightSavingTime() C.bool {
  return (C.NSTimeZone_isDaylightSavingTime(goobj.Self()))
}
//REJECT: NSTimeInterval
//func (goobj NSTimeZone) DaylightSavingTimeOffset() C.NSTimeInterval {
//  return (C.NSTimeZone_daylightSavingTimeOffset(goobj.Self()))
//}
func (goobj NSTimeZone) NextDaylightSavingTimeTransition() NSDate {
  return NSDate_(Id(C.NSTimeZone_nextDaylightSavingTimeTransition(goobj.Self())))
}
func (goobj NSTimeZone) Description() NSString {
  return NSString_(Id(C.NSTimeZone_description(goobj.Self())))
}
func (goobj NSTimeZone) IsEqualToTimeZone(aTimeZone NSTimeZone) C.bool {
  return (C.NSTimeZone_isEqualToTimeZone(goobj.Self(), aTimeZone.Self()))
}
//REJECT: locale
//func (goobj NSTimeZone) LocalizedNameLocale(style C.NSTimeZoneNameStyle, locale NSLocale) NSString {
//  return NSString_(Id(C.NSTimeZone_localizedNameLocale(goobj.Self(), style, locale.Self())))
//}
func NSTimeZone_initWithName(tzName NSString) NSTimeZone {
  return NSTimeZone_(Id(C.NSTimeZone_initWithName(tzName.Self())))
}
func NSTimeZone_initWithNameData(tzName NSString, aData NSData) NSTimeZone {
  return NSTimeZone_(Id(C.NSTimeZone_initWithNameData(tzName.Self(), aData.Self())))
}

type NSTimer struct {
  NSObject
}
func NSTimer_(i Id) NSTimer {
  return NSTimer{ NSObject_(i) }
}
func NSTimer_init() NSTimer {
  p := Id(C.NSTimer_init())
  return NSTimer_(p)
}
//REJECT: ti s
//func NSTimer_initWithFireDateIntervalTargetSelectorUserInfoRepeats(date NSDate, ti C.NSTimeInterval, t Id, s C.SEL, ui Id, rep C.bool) NSTimer {
//  return NSTimer_(Id(C.NSTimer_initWithFireDateIntervalTargetSelectorUserInfoRepeats(date.Self(), ti, unsafe.Pointer(t), s, unsafe.Pointer(ui), rep)))
//}
func (goobj NSTimer) Fire()  {
  C.NSTimer_fire(goobj.Self())
}
func (goobj NSTimer) FireDate() NSDate {
  return NSDate_(Id(C.NSTimer_fireDate(goobj.Self())))
}
func (goobj NSTimer) SetFireDate(date NSDate)  {
  C.NSTimer_setFireDate(goobj.Self(), date.Self())
}
//REJECT: NSTimeInterval
//func (goobj NSTimer) TimeInterval() C.NSTimeInterval {
//  return (C.NSTimer_timeInterval(goobj.Self()))
//}
//REJECT: NSTimeInterval
//func (goobj NSTimer) Tolerance() C.NSTimeInterval {
//  return (C.NSTimer_tolerance(goobj.Self()))
//}
//REJECT: tolerance
//func (goobj NSTimer) SetTolerance(tolerance C.NSTimeInterval)  {
//  C.NSTimer_setTolerance(goobj.Self(), tolerance)
//}
func (goobj NSTimer) Invalidate()  {
  C.NSTimer_invalidate(goobj.Self())
}
func (goobj NSTimer) IsValid() C.bool {
  return (C.NSTimer_isValid(goobj.Self()))
}
func (goobj NSTimer) UserInfo() Id {
  return Id_(C.NSTimer_userInfo(goobj.Self()))
}
//REJECT: ti invocation
//func NSTimer_timerWithTimeIntervalInvocationRepeats(ti C.NSTimeInterval, invocation NSInvocation, yesOrNo C.bool) NSTimer {
//  return NSTimer_(Id(C.NSTimer__timerWithTimeIntervalInvocationRepeats(ti, invocation.Self(), yesOrNo)))
//}
//REJECT: ti invocation
//func NSTimer_scheduledTimerWithTimeIntervalInvocationRepeats(ti C.NSTimeInterval, invocation NSInvocation, yesOrNo C.bool) NSTimer {
//  return NSTimer_(Id(C.NSTimer__scheduledTimerWithTimeIntervalInvocationRepeats(ti, invocation.Self(), yesOrNo)))
//}
//REJECT: ti aSelector
//func NSTimer_timerWithTimeIntervalTargetSelectorUserInfoRepeats(ti C.NSTimeInterval, aTarget Id, aSelector C.SEL, userInfo Id, yesOrNo C.bool) NSTimer {
//  return NSTimer_(Id(C.NSTimer__timerWithTimeIntervalTargetSelectorUserInfoRepeats(ti, unsafe.Pointer(aTarget), aSelector, unsafe.Pointer(userInfo), yesOrNo)))
//}
//REJECT: ti aSelector
//func NSTimer_scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(ti C.NSTimeInterval, aTarget Id, aSelector C.SEL, userInfo Id, yesOrNo C.bool) NSTimer {
//  return NSTimer_(Id(C.NSTimer__scheduledTimerWithTimeIntervalTargetSelectorUserInfoRepeats(ti, unsafe.Pointer(aTarget), aSelector, unsafe.Pointer(userInfo), yesOrNo)))
//}


type NSURL struct {
  NSObject
}
func NSURL_(i Id) NSURL {
  return NSURL{ NSObject_(i) }
}
func NSURL_init() NSURL {
  p := Id(C.NSURL_init())
  return NSURL_(p)
}
func NSURL_initWithSchemeHostPath(scheme NSString, host NSString, path NSString) NSURL {
  return NSURL_(Id(C.NSURL_initWithSchemeHostPath(scheme.Self(), host.Self(), path.Self())))
}
func (goobj NSURL) InitFileURLWithPathIsDirectory(path NSString, isDir C.bool) Id {
  return Id_(C.NSURL_initFileURLWithPathIsDirectory(goobj.Self(), path.Self(), isDir))
}
func (goobj NSURL) InitFileURLWithPath(path NSString) Id {
  return Id_(C.NSURL_initFileURLWithPath(goobj.Self(), path.Self()))
}
func (goobj NSURL) InitFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(path string, isDir C.bool, baseURL NSURL) Id {
  return Id_(C.NSURL_initFileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(goobj.Self(), C.CString(path), isDir, baseURL.Self()))
}
func NSURL_initWithString(URLString NSString) NSURL {
  return NSURL_(Id(C.NSURL_initWithString(URLString.Self())))
}
func NSURL_initWithStringRelativeToURL(URLString NSString, baseURL NSURL) NSURL {
  return NSURL_(Id(C.NSURL_initWithStringRelativeToURL(URLString.Self(), baseURL.Self())))
}
func (goobj NSURL) AbsoluteString() NSString {
  return NSString_(Id(C.NSURL_absoluteString(goobj.Self())))
}
func (goobj NSURL) RelativeString() NSString {
  return NSString_(Id(C.NSURL_relativeString(goobj.Self())))
}
func (goobj NSURL) BaseURL() NSURL {
  return NSURL_(Id(C.NSURL_baseURL(goobj.Self())))
}
func (goobj NSURL) AbsoluteURL() NSURL {
  return NSURL_(Id(C.NSURL_absoluteURL(goobj.Self())))
}
func (goobj NSURL) Scheme() NSString {
  return NSString_(Id(C.NSURL_scheme(goobj.Self())))
}
func (goobj NSURL) ResourceSpecifier() NSString {
  return NSString_(Id(C.NSURL_resourceSpecifier(goobj.Self())))
}
func (goobj NSURL) Host() NSString {
  return NSString_(Id(C.NSURL_host(goobj.Self())))
}
func (goobj NSURL) Port() NSNumber {
  return NSNumber_(Id(C.NSURL_port(goobj.Self())))
}
func (goobj NSURL) User() NSString {
  return NSString_(Id(C.NSURL_user(goobj.Self())))
}
func (goobj NSURL) Password() NSString {
  return NSString_(Id(C.NSURL_password(goobj.Self())))
}
func (goobj NSURL) Path() NSString {
  return NSString_(Id(C.NSURL_path(goobj.Self())))
}
func (goobj NSURL) Fragment() NSString {
  return NSString_(Id(C.NSURL_fragment(goobj.Self())))
}
func (goobj NSURL) ParameterString() NSString {
  return NSString_(Id(C.NSURL_parameterString(goobj.Self())))
}
func (goobj NSURL) Query() NSString {
  return NSString_(Id(C.NSURL_query(goobj.Self())))
}
func (goobj NSURL) RelativePath() NSString {
  return NSString_(Id(C.NSURL_relativePath(goobj.Self())))
}
func (goobj NSURL) GetFileSystemRepresentationMaxLength(buffer string, maxBufferLength C.uint) C.bool {
  return (C.NSURL_getFileSystemRepresentationMaxLength(goobj.Self(), C.CString(buffer), maxBufferLength))
}
func (goobj NSURL) FileSystemRepresentation() string {
  return C.GoString(C.NSURL_fileSystemRepresentation(goobj.Self()))
}
func (goobj NSURL) IsFileURL() C.bool {
  return (C.NSURL_isFileURL(goobj.Self()))
}
func (goobj NSURL) StandardizedURL() NSURL {
  return NSURL_(Id(C.NSURL_standardizedURL(goobj.Self())))
}
func (goobj NSURL) CheckResourceIsReachableAndReturnError(error NSError) C.bool {
  return (C.NSURL_checkResourceIsReachableAndReturnError(goobj.Self(), error.Self()))
}
func (goobj NSURL) IsFileReferenceURL() C.bool {
  return (C.NSURL_isFileReferenceURL(goobj.Self()))
}
func (goobj NSURL) FileReferenceURL() NSURL {
  return NSURL_(Id(C.NSURL_fileReferenceURL(goobj.Self())))
}
func (goobj NSURL) FilePathURL() NSURL {
  return NSURL_(Id(C.NSURL_filePathURL(goobj.Self())))
}
func (goobj NSURL) GetResourceValueForKeyError(value Id, key NSString, error NSError) C.bool {
  return (C.NSURL_getResourceValueForKeyError(goobj.Self(), unsafe.Pointer(value), key.Self(), error.Self()))
}
func (goobj NSURL) ResourceValuesForKeysError(keys NSArray, error NSError) NSDictionary {
  return NSDictionary_(Id(C.NSURL_resourceValuesForKeysError(goobj.Self(), keys.Self(), error.Self())))
}
func (goobj NSURL) SetResourceValueForKeyError(value Id, key NSString, error NSError) C.bool {
  return (C.NSURL_setResourceValueForKeyError(goobj.Self(), unsafe.Pointer(value), key.Self(), error.Self()))
}
func (goobj NSURL) SetResourceValuesError(keyedValues NSDictionary, error NSError) C.bool {
  return (C.NSURL_setResourceValuesError(goobj.Self(), keyedValues.Self(), error.Self()))
}
func (goobj NSURL) RemoveCachedResourceValueForKey(key NSString)  {
  C.NSURL_removeCachedResourceValueForKey(goobj.Self(), key.Self())
}
func (goobj NSURL) RemoveAllCachedResourceValues()  {
  C.NSURL_removeAllCachedResourceValues(goobj.Self())
}
func (goobj NSURL) SetTemporaryResourceValueForKey(value Id, key NSString)  {
  C.NSURL_setTemporaryResourceValueForKey(goobj.Self(), unsafe.Pointer(value), key.Self())
}
//REJECT: options
//func (goobj NSURL) BookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(options C.NSURLBookmarkCreationOptions, keys NSArray, relativeURL NSURL, error NSError) NSData {
//  return NSData_(Id(C.NSURL_bookmarkDataWithOptionsIncludingResourceValuesForKeysRelativeToURLError(goobj.Self(), options, keys.Self(), relativeURL.Self(), error.Self())))
//}
func (goobj NSURL) InitByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(bookmarkData NSData, options C.NSURLBookmarkResolutionOptions, relativeURL NSURL, isStale C.bool, error NSError) Id {
  return Id_(C.NSURL_initByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(goobj.Self(), bookmarkData.Self(), options, relativeURL.Self(), isStale, error.Self()))
}
func (goobj NSURL) StartAccessingSecurityScopedResource() C.bool {
  return (C.NSURL_startAccessingSecurityScopedResource(goobj.Self()))
}
func (goobj NSURL) StopAccessingSecurityScopedResource()  {
  C.NSURL_stopAccessingSecurityScopedResource(goobj.Self())
}
func (goobj NSURL) PathComponents() NSArray {
  return NSArray_(Id(C.NSURL_pathComponents(goobj.Self())))
}
func (goobj NSURL) LastPathComponent() NSString {
  return NSString_(Id(C.NSURL_lastPathComponent(goobj.Self())))
}
func (goobj NSURL) PathExtension() NSString {
  return NSString_(Id(C.NSURL_pathExtension(goobj.Self())))
}
func (goobj NSURL) URLByAppendingPathComponent(pathComponent NSString) NSURL {
  return NSURL_(Id(C.NSURL_URLByAppendingPathComponent(goobj.Self(), pathComponent.Self())))
}
func (goobj NSURL) URLByAppendingPathComponentIsDirectory(pathComponent NSString, isDirectory C.bool) NSURL {
  return NSURL_(Id(C.NSURL_URLByAppendingPathComponentIsDirectory(goobj.Self(), pathComponent.Self(), isDirectory)))
}
func (goobj NSURL) URLByDeletingLastPathComponent() NSURL {
  return NSURL_(Id(C.NSURL_URLByDeletingLastPathComponent(goobj.Self())))
}
func (goobj NSURL) URLByAppendingPathExtension(pathExtension NSString) NSURL {
  return NSURL_(Id(C.NSURL_URLByAppendingPathExtension(goobj.Self(), pathExtension.Self())))
}
func (goobj NSURL) URLByDeletingPathExtension() NSURL {
  return NSURL_(Id(C.NSURL_URLByDeletingPathExtension(goobj.Self())))
}
func (goobj NSURL) URLByStandardizingPath() NSURL {
  return NSURL_(Id(C.NSURL_URLByStandardizingPath(goobj.Self())))
}
func (goobj NSURL) URLByResolvingSymlinksInPath() NSURL {
  return NSURL_(Id(C.NSURL_URLByResolvingSymlinksInPath(goobj.Self())))
}
func (goobj NSURL) ResourceDataUsingCache(shouldUseCache C.bool) NSData {
  return NSData_(Id(C.NSURL_resourceDataUsingCache(goobj.Self(), shouldUseCache)))
}
func (goobj NSURL) LoadResourceDataNotifyingClientUsingCache(client Id, shouldUseCache C.bool)  {
  C.NSURL_loadResourceDataNotifyingClientUsingCache(goobj.Self(), unsafe.Pointer(client), shouldUseCache)
}
func (goobj NSURL) PropertyForKey(propertyKey NSString) Id {
  return Id_(C.NSURL_propertyForKey(goobj.Self(), propertyKey.Self()))
}
func (goobj NSURL) SetResourceData(data NSData) C.bool {
  return (C.NSURL_setResourceData(goobj.Self(), data.Self()))
}
func (goobj NSURL) SetPropertyForKey(property Id, propertyKey NSString) C.bool {
  return (C.NSURL_setPropertyForKey(goobj.Self(), unsafe.Pointer(property), propertyKey.Self()))
}
//REJECT: NSURLHandle
//func (goobj NSURL) URLHandleUsingCache(shouldUseCache C.bool) NSURLHandle {
//  return NSURLHandle_(Id(C.NSURL_URLHandleUsingCache(goobj.Self(), shouldUseCache)))
//}
func NSURL_fileURLWithPathIsDirectory(path NSString, isDir C.bool) Id {
  return Id_(C.NSURL__fileURLWithPathIsDirectory(path.Self(), isDir))
}
func NSURL_fileURLWithPath(path NSString) Id {
  return Id_(C.NSURL__fileURLWithPath(path.Self()))
}
func NSURL_fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(path string, isDir C.bool, baseURL NSURL) Id {
  return Id_(C.NSURL__fileURLWithFileSystemRepresentationIsDirectoryRelativeToURL(C.CString(path), isDir, baseURL.Self()))
}
func NSURL_uRLWithString(URLString NSString) Id {
  return Id_(C.NSURL__URLWithString(URLString.Self()))
}
func NSURL_uRLWithStringRelativeToURL(URLString NSString, baseURL NSURL) Id {
  return Id_(C.NSURL__URLWithStringRelativeToURL(URLString.Self(), baseURL.Self()))
}
func NSURL_uRLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(bookmarkData NSData, options C.NSURLBookmarkResolutionOptions, relativeURL NSURL, isStale C.bool, error NSError) Id {
  return Id_(C.NSURL__URLByResolvingBookmarkDataOptionsRelativeToURLBookmarkDataIsStaleError(bookmarkData.Self(), options, relativeURL.Self(), isStale, error.Self()))
}
func NSURL_resourceValuesForKeysFromBookmarkData(keys NSArray, bookmarkData NSData) NSDictionary {
  return NSDictionary_(Id(C.NSURL__resourceValuesForKeysFromBookmarkData(keys.Self(), bookmarkData.Self())))
}
//REJECT: options
//func NSURL_writeBookmarkDataToURLOptionsError(bookmarkData NSData, bookmarkFileURL NSURL, options C.NSURLBookmarkFileCreationOptions, error NSError) C.bool {
//  return (C.NSURL__writeBookmarkDataToURLOptionsError(bookmarkData.Self(), bookmarkFileURL.Self(), options, error.Self()))
//}
func NSURL_bookmarkDataWithContentsOfURLError(bookmarkFileURL NSURL, error NSError) NSData {
  return NSData_(Id(C.NSURL__bookmarkDataWithContentsOfURLError(bookmarkFileURL.Self(), error.Self())))
}
type NSURLComponents struct {
  NSObject
}
func NSURLComponents_(i Id) NSURLComponents {
  return NSURLComponents{ NSObject_(i) }
}
func NSURLComponents_init() NSURLComponents {
  return NSURLComponents_(Id(C.NSURLComponents_init()))
}
func NSURLComponents_initWithURLResolvingAgainstBaseURL(url NSURL, resolve C.bool) NSURLComponents {
  return NSURLComponents_(Id(C.NSURLComponents_initWithURLResolvingAgainstBaseURL(url.Self(), resolve)))
}
func NSURLComponents_initWithString(URLString NSString) NSURLComponents {
  return NSURLComponents_(Id(C.NSURLComponents_initWithString(URLString.Self())))
}
func (goobj NSURLComponents) URL() NSURL {
  return NSURL_(Id(C.NSURLComponents_URL(goobj.Self())))
}
func (goobj NSURLComponents) URLRelativeToURL(baseURL NSURL) NSURL {
  return NSURL_(Id(C.NSURLComponents_URLRelativeToURL(goobj.Self(), baseURL.Self())))
}
func (goobj NSURLComponents) Scheme() NSString {
  return NSString_(Id(C.NSURLComponents_scheme(goobj.Self())))
}
func (goobj NSURLComponents) SetScheme(scheme NSString)  {
  C.NSURLComponents_setScheme(goobj.Self(), scheme.Self())
}
func (goobj NSURLComponents) User() NSString {
  return NSString_(Id(C.NSURLComponents_user(goobj.Self())))
}
func (goobj NSURLComponents) SetUser(user NSString)  {
  C.NSURLComponents_setUser(goobj.Self(), user.Self())
}
func (goobj NSURLComponents) Password() NSString {
  return NSString_(Id(C.NSURLComponents_password(goobj.Self())))
}
func (goobj NSURLComponents) SetPassword(password NSString)  {
  C.NSURLComponents_setPassword(goobj.Self(), password.Self())
}
func (goobj NSURLComponents) Host() NSString {
  return NSString_(Id(C.NSURLComponents_host(goobj.Self())))
}
func (goobj NSURLComponents) SetHost(host NSString)  {
  C.NSURLComponents_setHost(goobj.Self(), host.Self())
}
func (goobj NSURLComponents) Port() NSNumber {
  return NSNumber_(Id(C.NSURLComponents_port(goobj.Self())))
}
func (goobj NSURLComponents) SetPort(port NSNumber)  {
  C.NSURLComponents_setPort(goobj.Self(), port.Self())
}
func (goobj NSURLComponents) Path() NSString {
  return NSString_(Id(C.NSURLComponents_path(goobj.Self())))
}
func (goobj NSURLComponents) SetPath(path NSString)  {
  C.NSURLComponents_setPath(goobj.Self(), path.Self())
}
func (goobj NSURLComponents) Query() NSString {
  return NSString_(Id(C.NSURLComponents_query(goobj.Self())))
}
func (goobj NSURLComponents) SetQuery(query NSString)  {
  C.NSURLComponents_setQuery(goobj.Self(), query.Self())
}
func (goobj NSURLComponents) Fragment() NSString {
  return NSString_(Id(C.NSURLComponents_fragment(goobj.Self())))
}
func (goobj NSURLComponents) SetFragment(fragment NSString)  {
  C.NSURLComponents_setFragment(goobj.Self(), fragment.Self())
}
func (goobj NSURLComponents) PercentEncodedUser() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedUser(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedUser(percentEncodedUser NSString)  {
  C.NSURLComponents_setPercentEncodedUser(goobj.Self(), percentEncodedUser.Self())
}
func (goobj NSURLComponents) PercentEncodedPassword() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedPassword(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedPassword(percentEncodedPassword NSString)  {
  C.NSURLComponents_setPercentEncodedPassword(goobj.Self(), percentEncodedPassword.Self())
}
func (goobj NSURLComponents) PercentEncodedHost() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedHost(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedHost(percentEncodedHost NSString)  {
  C.NSURLComponents_setPercentEncodedHost(goobj.Self(), percentEncodedHost.Self())
}
func (goobj NSURLComponents) PercentEncodedPath() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedPath(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedPath(percentEncodedPath NSString)  {
  C.NSURLComponents_setPercentEncodedPath(goobj.Self(), percentEncodedPath.Self())
}
func (goobj NSURLComponents) PercentEncodedQuery() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedQuery(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedQuery(percentEncodedQuery NSString)  {
  C.NSURLComponents_setPercentEncodedQuery(goobj.Self(), percentEncodedQuery.Self())
}
func (goobj NSURLComponents) PercentEncodedFragment() NSString {
  return NSString_(Id(C.NSURLComponents_percentEncodedFragment(goobj.Self())))
}
func (goobj NSURLComponents) SetPercentEncodedFragment(percentEncodedFragment NSString)  {
  C.NSURLComponents_setPercentEncodedFragment(goobj.Self(), percentEncodedFragment.Self())
}
func NSURLComponents_componentsWithURLResolvingAgainstBaseURL(url NSURL, resolve C.bool) Id {
  return Id_(C.NSURLComponents__componentsWithURLResolvingAgainstBaseURL(url.Self(), resolve))
}
func NSURLComponents_componentsWithString(URLString NSString) Id {
  return Id_(C.NSURLComponents__componentsWithString(URLString.Self()))
}
type NSFileSecurity struct {
  NSObject
}
func NSFileSecurity_(i Id) NSFileSecurity {
  return NSFileSecurity{ NSObject_(i) }
}
func NSFileSecurity_init() NSFileSecurity {
  p := Id(C.NSFileSecurity_init())
  return NSFileSecurity_(p)
}


type NSURLAuthenticationChallenge struct {
  NSObject
}
func NSURLAuthenticationChallenge_(i Id) NSURLAuthenticationChallenge {
  return NSURLAuthenticationChallenge{ NSObject_(i) }
}
func NSURLAuthenticationChallenge_init() NSURLAuthenticationChallenge {
  p := Id(C.NSURLAuthenticationChallenge_init())
  return NSURLAuthenticationChallenge_(p)
}
//REJECT: previousFailureCount
//func NSURLAuthenticationChallenge_initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(space NSURLProtectionSpace, credential NSURLCredential, previousFailureCount C.NSInteger, response NSURLResponse, error NSError, sender Id) NSURLAuthenticationChallenge {
//  return NSURLAuthenticationChallenge_(Id(C.NSURLAuthenticationChallenge_initWithProtectionSpaceProposedCredentialPreviousFailureCountFailureResponseErrorSender(space.Self(), credential.Self(), previousFailureCount, response.Self(), error.Self(), unsafe.Pointer(sender))))
//}
func NSURLAuthenticationChallenge_initWithAuthenticationChallengeSender(challenge NSURLAuthenticationChallenge, sender Id) NSURLAuthenticationChallenge {
  return NSURLAuthenticationChallenge_(Id(C.NSURLAuthenticationChallenge_initWithAuthenticationChallengeSender(challenge.Self(), unsafe.Pointer(sender))))
}
func (goobj NSURLAuthenticationChallenge) ProtectionSpace() NSURLProtectionSpace {
  return NSURLProtectionSpace_(Id(C.NSURLAuthenticationChallenge_protectionSpace(goobj.Self())))
}
func (goobj NSURLAuthenticationChallenge) ProposedCredential() NSURLCredential {
  return NSURLCredential_(Id(C.NSURLAuthenticationChallenge_proposedCredential(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSURLAuthenticationChallenge) PreviousFailureCount() C.NSInteger {
//  return (C.NSURLAuthenticationChallenge_previousFailureCount(goobj.Self()))
//}
func (goobj NSURLAuthenticationChallenge) FailureResponse() NSURLResponse {
  return NSURLResponse_(Id(C.NSURLAuthenticationChallenge_failureResponse(goobj.Self())))
}
func (goobj NSURLAuthenticationChallenge) Error() NSError {
  return NSError_(Id(C.NSURLAuthenticationChallenge_error(goobj.Self())))
}
func (goobj NSURLAuthenticationChallenge) Sender() Id {
  return Id_(C.NSURLAuthenticationChallenge_sender(goobj.Self()))
}

type NSCachedURLResponse struct {
  NSObject
}
func NSCachedURLResponse_(i Id) NSCachedURLResponse {
  return NSCachedURLResponse{ NSObject_(i) }
}
func NSCachedURLResponse_init() NSCachedURLResponse {
  p := Id(C.NSCachedURLResponse_init())
  return NSCachedURLResponse_(p)
}
func NSCachedURLResponse_initWithResponseData(response NSURLResponse, data NSData) NSCachedURLResponse {
  return NSCachedURLResponse_(Id(C.NSCachedURLResponse_initWithResponseData(response.Self(), data.Self())))
}
//REJECT: storagePolicy
//func NSCachedURLResponse_initWithResponseDataUserInfoStoragePolicy(response NSURLResponse, data NSData, userInfo NSDictionary, storagePolicy C.NSURLCacheStoragePolicy) NSCachedURLResponse {
//  return NSCachedURLResponse_(Id(C.NSCachedURLResponse_initWithResponseDataUserInfoStoragePolicy(response.Self(), data.Self(), userInfo.Self(), storagePolicy)))
//}
func (goobj NSCachedURLResponse) Response() NSURLResponse {
  return NSURLResponse_(Id(C.NSCachedURLResponse_response(goobj.Self())))
}
func (goobj NSCachedURLResponse) Data() NSData {
  return NSData_(Id(C.NSCachedURLResponse_data(goobj.Self())))
}
func (goobj NSCachedURLResponse) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSCachedURLResponse_userInfo(goobj.Self())))
}
//REJECT: NSURLCacheStoragePolicy
//func (goobj NSCachedURLResponse) StoragePolicy() C.NSURLCacheStoragePolicy {
//  return (C.NSCachedURLResponse_storagePolicy(goobj.Self()))
//}

type NSURLCache struct {
  NSObject
}
func NSURLCache_(i Id) NSURLCache {
  return NSURLCache{ NSObject_(i) }
}
func NSURLCache_init() NSURLCache {
  p := Id(C.NSURLCache_init())
  return NSURLCache_(p)
}
func NSURLCache_initWithMemoryCapacityDiskCapacityDiskPath(memoryCapacity C.uint, diskCapacity C.uint, path NSString) NSURLCache {
  return NSURLCache_(Id(C.NSURLCache_initWithMemoryCapacityDiskCapacityDiskPath(memoryCapacity, diskCapacity, path.Self())))
}
func (goobj NSURLCache) CachedResponseForRequest(request NSURLRequest) NSCachedURLResponse {
  return NSCachedURLResponse_(Id(C.NSURLCache_cachedResponseForRequest(goobj.Self(), request.Self())))
}
func (goobj NSURLCache) StoreCachedResponseForRequest(cachedResponse NSCachedURLResponse, request NSURLRequest)  {
  C.NSURLCache_storeCachedResponseForRequest(goobj.Self(), cachedResponse.Self(), request.Self())
}
func (goobj NSURLCache) RemoveCachedResponseForRequest(request NSURLRequest)  {
  C.NSURLCache_removeCachedResponseForRequest(goobj.Self(), request.Self())
}
func (goobj NSURLCache) RemoveAllCachedResponses()  {
  C.NSURLCache_removeAllCachedResponses(goobj.Self())
}
func (goobj NSURLCache) MemoryCapacity() C.uint {
  return (C.NSURLCache_memoryCapacity(goobj.Self()))
}
func (goobj NSURLCache) DiskCapacity() C.uint {
  return (C.NSURLCache_diskCapacity(goobj.Self()))
}
func (goobj NSURLCache) SetMemoryCapacity(memoryCapacity C.uint)  {
  C.NSURLCache_setMemoryCapacity(goobj.Self(), memoryCapacity)
}
func (goobj NSURLCache) SetDiskCapacity(diskCapacity C.uint)  {
  C.NSURLCache_setDiskCapacity(goobj.Self(), diskCapacity)
}
func (goobj NSURLCache) CurrentMemoryUsage() C.uint {
  return (C.NSURLCache_currentMemoryUsage(goobj.Self()))
}
func (goobj NSURLCache) CurrentDiskUsage() C.uint {
  return (C.NSURLCache_currentDiskUsage(goobj.Self()))
}
func NSURLCache_sharedURLCache() NSURLCache {
  return NSURLCache_(Id(C.NSURLCache__sharedURLCache()))
}
func NSURLCache_setSharedURLCache(cache NSURLCache)  {
  C.NSURLCache__setSharedURLCache(cache.Self())
}
type NSURLConnection struct {
  NSObject
}
func NSURLConnection_(i Id) NSURLConnection {
  return NSURLConnection{ NSObject_(i) }
}
func NSURLConnection_init() NSURLConnection {
  p := Id(C.NSURLConnection_init())
  return NSURLConnection_(p)
}
func NSURLConnection_initWithRequestDelegateStartImmediately(request NSURLRequest, delegate Id, startImmediately C.bool) NSURLConnection {
  return NSURLConnection_(Id(C.NSURLConnection_initWithRequestDelegateStartImmediately(request.Self(), unsafe.Pointer(delegate), startImmediately)))
}
func NSURLConnection_initWithRequestDelegate(request NSURLRequest, delegate Id) NSURLConnection {
  return NSURLConnection_(Id(C.NSURLConnection_initWithRequestDelegate(request.Self(), unsafe.Pointer(delegate))))
}
func (goobj NSURLConnection) OriginalRequest() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLConnection_originalRequest(goobj.Self())))
}
func (goobj NSURLConnection) CurrentRequest() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLConnection_currentRequest(goobj.Self())))
}
func (goobj NSURLConnection) Start()  {
  C.NSURLConnection_start(goobj.Self())
}
func (goobj NSURLConnection) Cancel()  {
  C.NSURLConnection_cancel(goobj.Self())
}
func (goobj NSURLConnection) ScheduleInRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSURLConnection_scheduleInRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSURLConnection) UnscheduleFromRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSURLConnection_unscheduleFromRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSURLConnection) SetDelegateQueue(queue NSOperationQueue)  {
  C.NSURLConnection_setDelegateQueue(goobj.Self(), queue.Self())
}
func NSURLConnection_connectionWithRequestDelegate(request NSURLRequest, delegate Id) NSURLConnection {
  return NSURLConnection_(Id(C.NSURLConnection__connectionWithRequestDelegate(request.Self(), unsafe.Pointer(delegate))))
}
func NSURLConnection_canHandleRequest(request NSURLRequest) C.bool {
  return (C.NSURLConnection__canHandleRequest(request.Self()))
}
type NSURLCredential struct {
  NSObject
}
func NSURLCredential_(i Id) NSURLCredential {
  return NSURLCredential{ NSObject_(i) }
}
func NSURLCredential_init() NSURLCredential {
  p := Id(C.NSURLCredential_init())
  return NSURLCredential_(p)
}
func (goobj NSURLCredential) Persistence() C.NSURLCredentialPersistence {
  return (C.NSURLCredential_persistence(goobj.Self()))
}
func NSURLCredential_initWithUserPasswordPersistence(user NSString, password NSString, persistence C.NSURLCredentialPersistence) NSURLCredential {
  return NSURLCredential_(Id(C.NSURLCredential_initWithUserPasswordPersistence(user.Self(), password.Self(), persistence)))
}
func (goobj NSURLCredential) User() NSString {
  return NSString_(Id(C.NSURLCredential_user(goobj.Self())))
}
func (goobj NSURLCredential) Password() NSString {
  return NSString_(Id(C.NSURLCredential_password(goobj.Self())))
}
func (goobj NSURLCredential) HasPassword() C.bool {
  return (C.NSURLCredential_hasPassword(goobj.Self()))
}
//REJECT: identity
//func NSURLCredential_initWithIdentityCertificatesPersistence(identity C.SecIdentityRef, certArray NSArray, persistence C.NSURLCredentialPersistence) NSURLCredential {
//  return NSURLCredential_(Id(C.NSURLCredential_initWithIdentityCertificatesPersistence(identity, certArray.Self(), persistence)))
//}
//REJECT: SecIdentityRef
//func (goobj NSURLCredential) Identity() C.SecIdentityRef {
//  return (C.NSURLCredential_identity(goobj.Self()))
//}
func (goobj NSURLCredential) Certificates() NSArray {
  return NSArray_(Id(C.NSURLCredential_certificates(goobj.Self())))
}
//REJECT: trust
//func NSURLCredential_initWithTrust(trust C.SecTrustRef) NSURLCredential {
//  return NSURLCredential_(Id(C.NSURLCredential_initWithTrust(trust)))
//}

type NSURLCredentialStorage struct {
  NSObject
}
func NSURLCredentialStorage_(i Id) NSURLCredentialStorage {
  return NSURLCredentialStorage{ NSObject_(i) }
}
func NSURLCredentialStorage_init() NSURLCredentialStorage {
  p := Id(C.NSURLCredentialStorage_init())
  return NSURLCredentialStorage_(p)
}
func (goobj NSURLCredentialStorage) CredentialsForProtectionSpace(space NSURLProtectionSpace) NSDictionary {
  return NSDictionary_(Id(C.NSURLCredentialStorage_credentialsForProtectionSpace(goobj.Self(), space.Self())))
}
func (goobj NSURLCredentialStorage) AllCredentials() NSDictionary {
  return NSDictionary_(Id(C.NSURLCredentialStorage_allCredentials(goobj.Self())))
}
func (goobj NSURLCredentialStorage) SetCredentialForProtectionSpace(credential NSURLCredential, space NSURLProtectionSpace)  {
  C.NSURLCredentialStorage_setCredentialForProtectionSpace(goobj.Self(), credential.Self(), space.Self())
}
func (goobj NSURLCredentialStorage) RemoveCredentialForProtectionSpace(credential NSURLCredential, space NSURLProtectionSpace)  {
  C.NSURLCredentialStorage_removeCredentialForProtectionSpace(goobj.Self(), credential.Self(), space.Self())
}
func (goobj NSURLCredentialStorage) RemoveCredentialForProtectionSpaceOptions(credential NSURLCredential, space NSURLProtectionSpace, options NSDictionary)  {
  C.NSURLCredentialStorage_removeCredentialForProtectionSpaceOptions(goobj.Self(), credential.Self(), space.Self(), options.Self())
}
func (goobj NSURLCredentialStorage) DefaultCredentialForProtectionSpace(space NSURLProtectionSpace) NSURLCredential {
  return NSURLCredential_(Id(C.NSURLCredentialStorage_defaultCredentialForProtectionSpace(goobj.Self(), space.Self())))
}
func (goobj NSURLCredentialStorage) SetDefaultCredentialForProtectionSpace(credential NSURLCredential, space NSURLProtectionSpace)  {
  C.NSURLCredentialStorage_setDefaultCredentialForProtectionSpace(goobj.Self(), credential.Self(), space.Self())
}
func NSURLCredentialStorage_sharedCredentialStorage() NSURLCredentialStorage {
  return NSURLCredentialStorage_(Id(C.NSURLCredentialStorage__sharedCredentialStorage()))
}
type NSURLProtectionSpace struct {
  NSObject
}
func NSURLProtectionSpace_(i Id) NSURLProtectionSpace {
  return NSURLProtectionSpace{ NSObject_(i) }
}
func NSURLProtectionSpace_init() NSURLProtectionSpace {
  p := Id(C.NSURLProtectionSpace_init())
  return NSURLProtectionSpace_(p)
}
//REJECT: port
//func NSURLProtectionSpace_initWithHostPortProtocolRealmAuthenticationMethod(host NSString, port C.NSInteger, protocol NSString, realm NSString, authenticationMethod NSString) NSURLProtectionSpace {
//  return NSURLProtectionSpace_(Id(C.NSURLProtectionSpace_initWithHostPortProtocolRealmAuthenticationMethod(host.Self(), port, protocol.Self(), realm.Self(), authenticationMethod.Self())))
//}
//REJECT: port
//func NSURLProtectionSpace_initWithProxyHostPortTypeRealmAuthenticationMethod(host NSString, port C.NSInteger, type_ NSString, realm NSString, authenticationMethod NSString) NSURLProtectionSpace {
//  return NSURLProtectionSpace_(Id(C.NSURLProtectionSpace_initWithProxyHostPortTypeRealmAuthenticationMethod(host.Self(), port, type_.Self(), realm.Self(), authenticationMethod.Self())))
//}
func (goobj NSURLProtectionSpace) Realm() NSString {
  return NSString_(Id(C.NSURLProtectionSpace_realm(goobj.Self())))
}
func (goobj NSURLProtectionSpace) ReceivesCredentialSecurely() C.bool {
  return (C.NSURLProtectionSpace_receivesCredentialSecurely(goobj.Self()))
}
func (goobj NSURLProtectionSpace) IsProxy() C.bool {
  return (C.NSURLProtectionSpace_isProxy(goobj.Self()))
}
func (goobj NSURLProtectionSpace) Host() NSString {
  return NSString_(Id(C.NSURLProtectionSpace_host(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSURLProtectionSpace) Port() C.NSInteger {
//  return (C.NSURLProtectionSpace_port(goobj.Self()))
//}
func (goobj NSURLProtectionSpace) ProxyType() NSString {
  return NSString_(Id(C.NSURLProtectionSpace_proxyType(goobj.Self())))
}
func (goobj NSURLProtectionSpace) Protocol() NSString {
  return NSString_(Id(C.NSURLProtectionSpace_protocol(goobj.Self())))
}
func (goobj NSURLProtectionSpace) AuthenticationMethod() NSString {
  return NSString_(Id(C.NSURLProtectionSpace_authenticationMethod(goobj.Self())))
}
func (goobj NSURLProtectionSpace) DistinguishedNames() NSArray {
  return NSArray_(Id(C.NSURLProtectionSpace_distinguishedNames(goobj.Self())))
}
//REJECT: SecTrustRef
//func (goobj NSURLProtectionSpace) ServerTrust() C.SecTrustRef {
//  return (C.NSURLProtectionSpace_serverTrust(goobj.Self()))
//}

type NSURLProtocol struct {
  NSObject
}
func NSURLProtocol_(i Id) NSURLProtocol {
  return NSURLProtocol{ NSObject_(i) }
}
func NSURLProtocol_init() NSURLProtocol {
  p := Id(C.NSURLProtocol_init())
  return NSURLProtocol_(p)
}
func NSURLProtocol_initWithRequestCachedResponseClient(request NSURLRequest, cachedResponse NSCachedURLResponse, client Id) NSURLProtocol {
  return NSURLProtocol_(Id(C.NSURLProtocol_initWithRequestCachedResponseClient(request.Self(), cachedResponse.Self(), unsafe.Pointer(client))))
}
func (goobj NSURLProtocol) Client() Id {
  return Id_(C.NSURLProtocol_client(goobj.Self()))
}
func (goobj NSURLProtocol) Request() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLProtocol_request(goobj.Self())))
}
func (goobj NSURLProtocol) CachedResponse() NSCachedURLResponse {
  return NSCachedURLResponse_(Id(C.NSURLProtocol_cachedResponse(goobj.Self())))
}
func (goobj NSURLProtocol) StartLoading()  {
  C.NSURLProtocol_startLoading(goobj.Self())
}
func (goobj NSURLProtocol) StopLoading()  {
  C.NSURLProtocol_stopLoading(goobj.Self())
}
func NSURLProtocol_canInitWithRequest(request NSURLRequest) C.bool {
  return (C.NSURLProtocol__canInitWithRequest(request.Self()))
}
func NSURLProtocol_canonicalRequestForRequest(request NSURLRequest) NSURLRequest {
  return NSURLRequest_(Id(C.NSURLProtocol__canonicalRequestForRequest(request.Self())))
}
func NSURLProtocol_requestIsCacheEquivalentToRequest(a NSURLRequest, b NSURLRequest) C.bool {
  return (C.NSURLProtocol__requestIsCacheEquivalentToRequest(a.Self(), b.Self()))
}
func NSURLProtocol_propertyForKeyInRequest(key NSString, request NSURLRequest) Id {
  return Id_(C.NSURLProtocol__propertyForKeyInRequest(key.Self(), request.Self()))
}
func NSURLProtocol_setPropertyForKeyInRequest(value Id, key NSString, request NSMutableURLRequest)  {
  C.NSURLProtocol__setPropertyForKeyInRequest(unsafe.Pointer(value), key.Self(), request.Self())
}
func NSURLProtocol_removePropertyForKeyInRequest(key NSString, request NSMutableURLRequest)  {
  C.NSURLProtocol__removePropertyForKeyInRequest(key.Self(), request.Self())
}
//REJECT: protocolClass
//func NSURLProtocol_registerClass(protocolClass C.Class) C.bool {
//  return (C.NSURLProtocol__registerClass(protocolClass))
//}
//REJECT: protocolClass
//func NSURLProtocol_unregisterClass(protocolClass C.Class)  {
//  C.NSURLProtocol__unregisterClass(protocolClass)
//}
type NSURLRequest struct {
  NSObject
}
func NSURLRequest_(i Id) NSURLRequest {
  return NSURLRequest{ NSObject_(i) }
}
func NSURLRequest_init() NSURLRequest {
  p := Id(C.NSURLRequest_init())
  return NSURLRequest_(p)
}
func NSURLRequest_initWithURL(URL NSURL) NSURLRequest {
  return NSURLRequest_(Id(C.NSURLRequest_initWithURL(URL.Self())))
}
//REJECT: cachePolicy timeoutInterval
//func NSURLRequest_initWithURLCachePolicyTimeoutInterval(URL NSURL, cachePolicy C.NSURLRequestCachePolicy, timeoutInterval C.NSTimeInterval) NSURLRequest {
//  return NSURLRequest_(Id(C.NSURLRequest_initWithURLCachePolicyTimeoutInterval(URL.Self(), cachePolicy, timeoutInterval)))
//}
func (goobj NSURLRequest) URL() NSURL {
  return NSURL_(Id(C.NSURLRequest_URL(goobj.Self())))
}
//REJECT: NSURLRequestCachePolicy
//func (goobj NSURLRequest) CachePolicy() C.NSURLRequestCachePolicy {
//  return (C.NSURLRequest_cachePolicy(goobj.Self()))
//}
//REJECT: NSTimeInterval
//func (goobj NSURLRequest) TimeoutInterval() C.NSTimeInterval {
//  return (C.NSURLRequest_timeoutInterval(goobj.Self()))
//}
func (goobj NSURLRequest) MainDocumentURL() NSURL {
  return NSURL_(Id(C.NSURLRequest_mainDocumentURL(goobj.Self())))
}
//REJECT: NSURLRequestNetworkServiceType
//func (goobj NSURLRequest) NetworkServiceType() C.NSURLRequestNetworkServiceType {
//  return (C.NSURLRequest_networkServiceType(goobj.Self()))
//}
func (goobj NSURLRequest) AllowsCellularAccess() C.bool {
  return (C.NSURLRequest_allowsCellularAccess(goobj.Self()))
}
func (goobj NSURLRequest) HTTPMethod() NSString {
  return NSString_(Id(C.NSURLRequest_HTTPMethod(goobj.Self())))
}
func (goobj NSURLRequest) AllHTTPHeaderFields() NSDictionary {
  return NSDictionary_(Id(C.NSURLRequest_allHTTPHeaderFields(goobj.Self())))
}
func (goobj NSURLRequest) ValueForHTTPHeaderField(field NSString) NSString {
  return NSString_(Id(C.NSURLRequest_valueForHTTPHeaderField(goobj.Self(), field.Self())))
}
func (goobj NSURLRequest) HTTPBody() NSData {
  return NSData_(Id(C.NSURLRequest_HTTPBody(goobj.Self())))
}
func (goobj NSURLRequest) HTTPBodyStream() NSInputStream {
  return NSInputStream_(Id(C.NSURLRequest_HTTPBodyStream(goobj.Self())))
}
func (goobj NSURLRequest) HTTPShouldHandleCookies() C.bool {
  return (C.NSURLRequest_HTTPShouldHandleCookies(goobj.Self()))
}
func (goobj NSURLRequest) HTTPShouldUsePipelining() C.bool {
  return (C.NSURLRequest_HTTPShouldUsePipelining(goobj.Self()))
}
func NSURLRequest_requestWithURL(URL NSURL) Id {
  return Id_(C.NSURLRequest__requestWithURL(URL.Self()))
}
func NSURLRequest_supportsSecureCoding() C.bool {
  return (C.NSURLRequest__supportsSecureCoding())
}
//REJECT: cachePolicy timeoutInterval
//func NSURLRequest_requestWithURLCachePolicyTimeoutInterval(URL NSURL, cachePolicy C.NSURLRequestCachePolicy, timeoutInterval C.NSTimeInterval) Id {
//  return Id_(C.NSURLRequest__requestWithURLCachePolicyTimeoutInterval(URL.Self(), cachePolicy, timeoutInterval))
//}
type NSMutableURLRequest struct {
  NSURLRequest
}
func NSMutableURLRequest_(i Id) NSMutableURLRequest {
  return NSMutableURLRequest{ NSURLRequest_(i) }
}
func NSMutableURLRequest_init() NSMutableURLRequest {
  p := Id(C.NSMutableURLRequest_init())
  return NSMutableURLRequest_(p)
}
func (goobj NSMutableURLRequest) SetURL(URL NSURL)  {
  C.NSMutableURLRequest_setURL(goobj.Self(), URL.Self())
}
//REJECT: policy
//func (goobj NSMutableURLRequest) SetCachePolicy(policy C.NSURLRequestCachePolicy)  {
//  C.NSMutableURLRequest_setCachePolicy(goobj.Self(), policy)
//}
//REJECT: seconds
//func (goobj NSMutableURLRequest) SetTimeoutInterval(seconds C.NSTimeInterval)  {
//  C.NSMutableURLRequest_setTimeoutInterval(goobj.Self(), seconds)
//}
func (goobj NSMutableURLRequest) SetMainDocumentURL(URL NSURL)  {
  C.NSMutableURLRequest_setMainDocumentURL(goobj.Self(), URL.Self())
}
//REJECT: networkServiceType
//func (goobj NSMutableURLRequest) SetNetworkServiceType(networkServiceType C.NSURLRequestNetworkServiceType)  {
//  C.NSMutableURLRequest_setNetworkServiceType(goobj.Self(), networkServiceType)
//}
func (goobj NSMutableURLRequest) SetAllowsCellularAccess(allow C.bool)  {
  C.NSMutableURLRequest_setAllowsCellularAccess(goobj.Self(), allow)
}
func (goobj NSMutableURLRequest) SetHTTPMethod(method NSString)  {
  C.NSMutableURLRequest_setHTTPMethod(goobj.Self(), method.Self())
}
func (goobj NSMutableURLRequest) SetAllHTTPHeaderFields(headerFields NSDictionary)  {
  C.NSMutableURLRequest_setAllHTTPHeaderFields(goobj.Self(), headerFields.Self())
}
func (goobj NSMutableURLRequest) SetValueForHTTPHeaderField(value NSString, field NSString)  {
  C.NSMutableURLRequest_setValueForHTTPHeaderField(goobj.Self(), value.Self(), field.Self())
}
func (goobj NSMutableURLRequest) AddValueForHTTPHeaderField(value NSString, field NSString)  {
  C.NSMutableURLRequest_addValueForHTTPHeaderField(goobj.Self(), value.Self(), field.Self())
}
func (goobj NSMutableURLRequest) SetHTTPBody(data NSData)  {
  C.NSMutableURLRequest_setHTTPBody(goobj.Self(), data.Self())
}
func (goobj NSMutableURLRequest) SetHTTPBodyStream(inputStream NSInputStream)  {
  C.NSMutableURLRequest_setHTTPBodyStream(goobj.Self(), inputStream.Self())
}
func (goobj NSMutableURLRequest) SetHTTPShouldHandleCookies(should C.bool)  {
  C.NSMutableURLRequest_setHTTPShouldHandleCookies(goobj.Self(), should)
}
func (goobj NSMutableURLRequest) SetHTTPShouldUsePipelining(shouldUsePipelining C.bool)  {
  C.NSMutableURLRequest_setHTTPShouldUsePipelining(goobj.Self(), shouldUsePipelining)
}

type NSURLResponse struct {
  NSObject
}
func NSURLResponse_(i Id) NSURLResponse {
  return NSURLResponse{ NSObject_(i) }
}
func NSURLResponse_init() NSURLResponse {
  p := Id(C.NSURLResponse_init())
  return NSURLResponse_(p)
}
//REJECT: length
//func NSURLResponse_initWithURLMIMETypeExpectedContentLengthTextEncodingName(URL NSURL, MIMEType NSString, length C.NSInteger, name NSString) NSURLResponse {
//  return NSURLResponse_(Id(C.NSURLResponse_initWithURLMIMETypeExpectedContentLengthTextEncodingName(URL.Self(), MIMEType.Self(), length, name.Self())))
//}
func (goobj NSURLResponse) URL() NSURL {
  return NSURL_(Id(C.NSURLResponse_URL(goobj.Self())))
}
func (goobj NSURLResponse) MIMEType() NSString {
  return NSString_(Id(C.NSURLResponse_MIMEType(goobj.Self())))
}
func (goobj NSURLResponse) ExpectedContentLength() C.longlong {
  return (C.NSURLResponse_expectedContentLength(goobj.Self()))
}
func (goobj NSURLResponse) TextEncodingName() NSString {
  return NSString_(Id(C.NSURLResponse_textEncodingName(goobj.Self())))
}
func (goobj NSURLResponse) SuggestedFilename() NSString {
  return NSString_(Id(C.NSURLResponse_suggestedFilename(goobj.Self())))
}

type NSHTTPURLResponse struct {
  NSURLResponse
}
func NSHTTPURLResponse_(i Id) NSHTTPURLResponse {
  return NSHTTPURLResponse{ NSURLResponse_(i) }
}
func NSHTTPURLResponse_init() NSHTTPURLResponse {
  p := Id(C.NSHTTPURLResponse_init())
  return NSHTTPURLResponse_(p)
}
//REJECT: statusCode
//func NSHTTPURLResponse_initWithURLStatusCodeHTTPVersionHeaderFields(url NSURL, statusCode C.NSInteger, HTTPVersion NSString, headerFields NSDictionary) NSHTTPURLResponse {
//  return NSHTTPURLResponse_(Id(C.NSHTTPURLResponse_initWithURLStatusCodeHTTPVersionHeaderFields(url.Self(), statusCode, HTTPVersion.Self(), headerFields.Self())))
//}
//REJECT: NSInteger
//func (goobj NSHTTPURLResponse) StatusCode() C.NSInteger {
//  return (C.NSHTTPURLResponse_statusCode(goobj.Self()))
//}
func (goobj NSHTTPURLResponse) AllHeaderFields() NSDictionary {
  return NSDictionary_(Id(C.NSHTTPURLResponse_allHeaderFields(goobj.Self())))
}
//REJECT: statusCode
//func NSHTTPURLResponse_localizedStringForStatusCode(statusCode C.NSInteger) NSString {
//  return NSString_(Id(C.NSHTTPURLResponse__localizedStringForStatusCode(statusCode)))
//}
type NSUserDefaults struct {
  NSObject
}
func NSUserDefaults_(i Id) NSUserDefaults {
  return NSUserDefaults{ NSObject_(i) }
}
func NSUserDefaults_init() NSUserDefaults {
  return NSUserDefaults_(Id(C.NSUserDefaults_init()))
}
func NSUserDefaults_initWithSuiteName(suitename NSString) NSUserDefaults {
  return NSUserDefaults_(Id(C.NSUserDefaults_initWithSuiteName(suitename.Self())))
}
func NSUserDefaults_initWithUser(username NSString) NSUserDefaults {
  return NSUserDefaults_(Id(C.NSUserDefaults_initWithUser(username.Self())))
}
func (goobj NSUserDefaults) ObjectForKey(defaultName NSString) Id {
  return Id_(C.NSUserDefaults_objectForKey(goobj.Self(), defaultName.Self()))
}
func (goobj NSUserDefaults) SetObjectForKey(value Id, defaultName NSString)  {
  C.NSUserDefaults_setObjectForKey(goobj.Self(), unsafe.Pointer(value), defaultName.Self())
}
func (goobj NSUserDefaults) RemoveObjectForKey(defaultName NSString)  {
  C.NSUserDefaults_removeObjectForKey(goobj.Self(), defaultName.Self())
}
func (goobj NSUserDefaults) StringForKey(defaultName NSString) NSString {
  return NSString_(Id(C.NSUserDefaults_stringForKey(goobj.Self(), defaultName.Self())))
}
func (goobj NSUserDefaults) ArrayForKey(defaultName NSString) NSArray {
  return NSArray_(Id(C.NSUserDefaults_arrayForKey(goobj.Self(), defaultName.Self())))
}
func (goobj NSUserDefaults) DictionaryForKey(defaultName NSString) NSDictionary {
  return NSDictionary_(Id(C.NSUserDefaults_dictionaryForKey(goobj.Self(), defaultName.Self())))
}
func (goobj NSUserDefaults) DataForKey(defaultName NSString) NSData {
  return NSData_(Id(C.NSUserDefaults_dataForKey(goobj.Self(), defaultName.Self())))
}
func (goobj NSUserDefaults) StringArrayForKey(defaultName NSString) NSArray {
  return NSArray_(Id(C.NSUserDefaults_stringArrayForKey(goobj.Self(), defaultName.Self())))
}
//REJECT: NSInteger
//func (goobj NSUserDefaults) IntegerForKey(defaultName NSString) C.NSInteger {
//  return (C.NSUserDefaults_integerForKey(goobj.Self(), defaultName.Self()))
//}
func (goobj NSUserDefaults) FloatForKey(defaultName NSString) C.float {
  return (C.NSUserDefaults_floatForKey(goobj.Self(), defaultName.Self()))
}
func (goobj NSUserDefaults) DoubleForKey(defaultName NSString) C.double {
  return (C.NSUserDefaults_doubleForKey(goobj.Self(), defaultName.Self()))
}
func (goobj NSUserDefaults) BoolForKey(defaultName NSString) C.bool {
  return (C.NSUserDefaults_boolForKey(goobj.Self(), defaultName.Self()))
}
func (goobj NSUserDefaults) URLForKey(defaultName NSString) NSURL {
  return NSURL_(Id(C.NSUserDefaults_URLForKey(goobj.Self(), defaultName.Self())))
}
//REJECT: value
//func (goobj NSUserDefaults) SetIntegerForKey(value C.NSInteger, defaultName NSString)  {
//  C.NSUserDefaults_setIntegerForKey(goobj.Self(), value, defaultName.Self())
//}
func (goobj NSUserDefaults) SetFloatForKey(value C.float, defaultName NSString)  {
  C.NSUserDefaults_setFloatForKey(goobj.Self(), value, defaultName.Self())
}
func (goobj NSUserDefaults) SetDoubleForKey(value C.double, defaultName NSString)  {
  C.NSUserDefaults_setDoubleForKey(goobj.Self(), value, defaultName.Self())
}
func (goobj NSUserDefaults) SetBoolForKey(value C.bool, defaultName NSString)  {
  C.NSUserDefaults_setBoolForKey(goobj.Self(), value, defaultName.Self())
}
func (goobj NSUserDefaults) SetURLForKey(url NSURL, defaultName NSString)  {
  C.NSUserDefaults_setURLForKey(goobj.Self(), url.Self(), defaultName.Self())
}
func (goobj NSUserDefaults) RegisterDefaults(registrationDictionary NSDictionary)  {
  C.NSUserDefaults_registerDefaults(goobj.Self(), registrationDictionary.Self())
}
func (goobj NSUserDefaults) AddSuiteNamed(suiteName NSString)  {
  C.NSUserDefaults_addSuiteNamed(goobj.Self(), suiteName.Self())
}
func (goobj NSUserDefaults) RemoveSuiteNamed(suiteName NSString)  {
  C.NSUserDefaults_removeSuiteNamed(goobj.Self(), suiteName.Self())
}
func (goobj NSUserDefaults) DictionaryRepresentation() NSDictionary {
  return NSDictionary_(Id(C.NSUserDefaults_dictionaryRepresentation(goobj.Self())))
}
func (goobj NSUserDefaults) VolatileDomainNames() NSArray {
  return NSArray_(Id(C.NSUserDefaults_volatileDomainNames(goobj.Self())))
}
func (goobj NSUserDefaults) VolatileDomainForName(domainName NSString) NSDictionary {
  return NSDictionary_(Id(C.NSUserDefaults_volatileDomainForName(goobj.Self(), domainName.Self())))
}
func (goobj NSUserDefaults) SetVolatileDomainForName(domain NSDictionary, domainName NSString)  {
  C.NSUserDefaults_setVolatileDomainForName(goobj.Self(), domain.Self(), domainName.Self())
}
func (goobj NSUserDefaults) RemoveVolatileDomainForName(domainName NSString)  {
  C.NSUserDefaults_removeVolatileDomainForName(goobj.Self(), domainName.Self())
}
func (goobj NSUserDefaults) PersistentDomainNames() NSArray {
  return NSArray_(Id(C.NSUserDefaults_persistentDomainNames(goobj.Self())))
}
func (goobj NSUserDefaults) PersistentDomainForName(domainName NSString) NSDictionary {
  return NSDictionary_(Id(C.NSUserDefaults_persistentDomainForName(goobj.Self(), domainName.Self())))
}
func (goobj NSUserDefaults) SetPersistentDomainForName(domain NSDictionary, domainName NSString)  {
  C.NSUserDefaults_setPersistentDomainForName(goobj.Self(), domain.Self(), domainName.Self())
}
func (goobj NSUserDefaults) RemovePersistentDomainForName(domainName NSString)  {
  C.NSUserDefaults_removePersistentDomainForName(goobj.Self(), domainName.Self())
}
func (goobj NSUserDefaults) Synchronize() C.bool {
  return (C.NSUserDefaults_synchronize(goobj.Self()))
}
func (goobj NSUserDefaults) ObjectIsForcedForKey(key NSString) C.bool {
  return (C.NSUserDefaults_objectIsForcedForKey(goobj.Self(), key.Self()))
}
func (goobj NSUserDefaults) ObjectIsForcedForKeyInDomain(key NSString, domain NSString) C.bool {
  return (C.NSUserDefaults_objectIsForcedForKeyInDomain(goobj.Self(), key.Self(), domain.Self()))
}
func NSUserDefaults_standardUserDefaults() NSUserDefaults {
  return NSUserDefaults_(Id(C.NSUserDefaults__standardUserDefaults()))
}
func NSUserDefaults_resetStandardUserDefaults()  {
  C.NSUserDefaults__resetStandardUserDefaults()
}
type NSValueTransformer struct {
  NSObject
}
func NSValueTransformer_(i Id) NSValueTransformer {
  return NSValueTransformer{ NSObject_(i) }
}
func NSValueTransformer_init() NSValueTransformer {
  p := Id(C.NSValueTransformer_init())
  return NSValueTransformer_(p)
}
func (goobj NSValueTransformer) TransformedValue(value Id) Id {
  return Id_(C.NSValueTransformer_transformedValue(goobj.Self(), unsafe.Pointer(value)))
}
func (goobj NSValueTransformer) ReverseTransformedValue(value Id) Id {
  return Id_(C.NSValueTransformer_reverseTransformedValue(goobj.Self(), unsafe.Pointer(value)))
}
func NSValueTransformer_setValueTransformerForName(transformer NSValueTransformer, name NSString)  {
  C.NSValueTransformer__setValueTransformerForName(transformer.Self(), name.Self())
}
func NSValueTransformer_valueTransformerForName(name NSString) NSValueTransformer {
  return NSValueTransformer_(Id(C.NSValueTransformer__valueTransformerForName(name.Self())))
}
func NSValueTransformer_valueTransformerNames() NSArray {
  return NSArray_(Id(C.NSValueTransformer__valueTransformerNames()))
}
//REJECT: Class
//func NSValueTransformer_transformedValueClass() C.Class {
//  return (C.NSValueTransformer__transformedValueClass())
//}
func NSValueTransformer_allowsReverseTransformation() C.bool {
  return (C.NSValueTransformer__allowsReverseTransformation())
}
type NSXMLParser struct {
  NSObject
}
func NSXMLParser_(i Id) NSXMLParser {
  return NSXMLParser{ NSObject_(i) }
}
func NSXMLParser_init() NSXMLParser {
  p := Id(C.NSXMLParser_init())
  return NSXMLParser_(p)
}
func NSXMLParser_initWithContentsOfURL(url NSURL) NSXMLParser {
  return NSXMLParser_(Id(C.NSXMLParser_initWithContentsOfURL(url.Self())))
}
func NSXMLParser_initWithData(data NSData) NSXMLParser {
  return NSXMLParser_(Id(C.NSXMLParser_initWithData(data.Self())))
}
func NSXMLParser_initWithStream(stream NSInputStream) NSXMLParser {
  return NSXMLParser_(Id(C.NSXMLParser_initWithStream(stream.Self())))
}
func (goobj NSXMLParser) Delegate() Id {
  return Id_(C.NSXMLParser_delegate(goobj.Self()))
}
func (goobj NSXMLParser) SetDelegate(delegate Id)  {
  C.NSXMLParser_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSXMLParser) SetShouldProcessNamespaces(shouldProcessNamespaces C.bool)  {
  C.NSXMLParser_setShouldProcessNamespaces(goobj.Self(), shouldProcessNamespaces)
}
func (goobj NSXMLParser) SetShouldReportNamespacePrefixes(shouldReportNamespacePrefixes C.bool)  {
  C.NSXMLParser_setShouldReportNamespacePrefixes(goobj.Self(), shouldReportNamespacePrefixes)
}
func (goobj NSXMLParser) SetShouldResolveExternalEntities(shouldResolveExternalEntities C.bool)  {
  C.NSXMLParser_setShouldResolveExternalEntities(goobj.Self(), shouldResolveExternalEntities)
}
func (goobj NSXMLParser) ShouldProcessNamespaces() C.bool {
  return (C.NSXMLParser_shouldProcessNamespaces(goobj.Self()))
}
func (goobj NSXMLParser) ShouldReportNamespacePrefixes() C.bool {
  return (C.NSXMLParser_shouldReportNamespacePrefixes(goobj.Self()))
}
func (goobj NSXMLParser) ShouldResolveExternalEntities() C.bool {
  return (C.NSXMLParser_shouldResolveExternalEntities(goobj.Self()))
}
func (goobj NSXMLParser) Parse() C.bool {
  return (C.NSXMLParser_parse(goobj.Self()))
}
func (goobj NSXMLParser) AbortParsing()  {
  C.NSXMLParser_abortParsing(goobj.Self())
}
func (goobj NSXMLParser) ParserError() NSError {
  return NSError_(Id(C.NSXMLParser_parserError(goobj.Self())))
}
func (goobj NSXMLParser) PublicID() NSString {
  return NSString_(Id(C.NSXMLParser_publicID(goobj.Self())))
}
func (goobj NSXMLParser) SystemID() NSString {
  return NSString_(Id(C.NSXMLParser_systemID(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSXMLParser) LineNumber() C.NSInteger {
//  return (C.NSXMLParser_lineNumber(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSXMLParser) ColumnNumber() C.NSInteger {
//  return (C.NSXMLParser_columnNumber(goobj.Self()))
//}

type NSAttributedString struct {
  NSObject
}
func NSAttributedString_(i Id) NSAttributedString {
  return NSAttributedString{ NSObject_(i) }
}
func NSAttributedString_init() NSAttributedString {
  p := Id(C.NSAttributedString_init())
  return NSAttributedString_(p)
}
func (goobj NSAttributedString) String() NSString {
  return NSString_(Id(C.NSAttributedString_string(goobj.Self())))
}
//REJECT: range
//func (goobj NSAttributedString) AttributesAtIndexEffectiveRange(location C.uint, range_ C.NSRangePointer) NSDictionary {
//  return NSDictionary_(Id(C.NSAttributedString_attributesAtIndexEffectiveRange(goobj.Self(), location, range_)))
//}
func (goobj NSAttributedString) Length() C.uint {
  return (C.NSAttributedString_length(goobj.Self()))
}
//REJECT: range
//func (goobj NSAttributedString) AttributeAtIndexEffectiveRange(attrName NSString, location C.uint, range_ C.NSRangePointer) Id {
//  return Id_(C.NSAttributedString_attributeAtIndexEffectiveRange(goobj.Self(), attrName.Self(), location, range_))
//}
//REJECT: range
//func (goobj NSAttributedString) AttributedSubstringFromRange(range_ C.NSRange) NSAttributedString {
//  return NSAttributedString_(Id(C.NSAttributedString_attributedSubstringFromRange(goobj.Self(), range_)))
//}
//REJECT: range rangeLimit
//func (goobj NSAttributedString) AttributesAtIndexLongestEffectiveRangeInRange(location C.uint, range_ C.NSRangePointer, rangeLimit C.NSRange) NSDictionary {
//  return NSDictionary_(Id(C.NSAttributedString_attributesAtIndexLongestEffectiveRangeInRange(goobj.Self(), location, range_, rangeLimit)))
//}
//REJECT: range rangeLimit
//func (goobj NSAttributedString) AttributeAtIndexLongestEffectiveRangeInRange(attrName NSString, location C.uint, range_ C.NSRangePointer, rangeLimit C.NSRange) Id {
//  return Id_(C.NSAttributedString_attributeAtIndexLongestEffectiveRangeInRange(goobj.Self(), attrName.Self(), location, range_, rangeLimit))
//}
func (goobj NSAttributedString) IsEqualToAttributedString(other NSAttributedString) C.bool {
  return (C.NSAttributedString_isEqualToAttributedString(goobj.Self(), other.Self()))
}
func NSAttributedString_initWithString(str NSString) NSAttributedString {
  return NSAttributedString_(Id(C.NSAttributedString_initWithString(str.Self())))
}
func NSAttributedString_initWithStringAttributes(str NSString, attrs NSDictionary) NSAttributedString {
  return NSAttributedString_(Id(C.NSAttributedString_initWithStringAttributes(str.Self(), attrs.Self())))
}
func NSAttributedString_initWithAttributedString(attrStr NSAttributedString) NSAttributedString {
  return NSAttributedString_(Id(C.NSAttributedString_initWithAttributedString(attrStr.Self())))
}
//REJECT: enumerationRange block
//func (goobj NSAttributedString) EnumerateAttributesInRangeOptionsUsingBlock(enumerationRange C.NSRange, opts C.NSAttributedStringEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSAttributedString_enumerateAttributesInRangeOptionsUsingBlock(goobj.Self(), enumerationRange, opts, block)
//}
//REJECT: enumerationRange block
//func (goobj NSAttributedString) EnumerateAttributeInRangeOptionsUsingBlock(attrName NSString, enumerationRange C.NSRange, opts C.NSAttributedStringEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSAttributedString_enumerateAttributeInRangeOptionsUsingBlock(goobj.Self(), attrName.Self(), enumerationRange, opts, block)
//}

type NSMutableAttributedString struct {
  NSAttributedString
}
func NSMutableAttributedString_(i Id) NSMutableAttributedString {
  return NSMutableAttributedString{ NSAttributedString_(i) }
}
func NSMutableAttributedString_init() NSMutableAttributedString {
  p := Id(C.NSMutableAttributedString_init())
  return NSMutableAttributedString_(p)
}
//REJECT: range
//func (goobj NSMutableAttributedString) ReplaceCharactersInRangeWithString(range_ C.NSRange, str NSString)  {
//  C.NSMutableAttributedString_replaceCharactersInRangeWithString(goobj.Self(), range_, str.Self())
//}
//REJECT: range
//func (goobj NSMutableAttributedString) SetAttributesRange(attrs NSDictionary, range_ C.NSRange)  {
//  C.NSMutableAttributedString_setAttributesRange(goobj.Self(), attrs.Self(), range_)
//}
func (goobj NSMutableAttributedString) MutableString() NSMutableString {
  return NSMutableString_(Id(C.NSMutableAttributedString_mutableString(goobj.Self())))
}
//REJECT: range
//func (goobj NSMutableAttributedString) AddAttributeValueRange(name NSString, value Id, range_ C.NSRange)  {
//  C.NSMutableAttributedString_addAttributeValueRange(goobj.Self(), name.Self(), unsafe.Pointer(value), range_)
//}
//REJECT: range
//func (goobj NSMutableAttributedString) AddAttributesRange(attrs NSDictionary, range_ C.NSRange)  {
//  C.NSMutableAttributedString_addAttributesRange(goobj.Self(), attrs.Self(), range_)
//}
//REJECT: range
//func (goobj NSMutableAttributedString) RemoveAttributeRange(name NSString, range_ C.NSRange)  {
//  C.NSMutableAttributedString_removeAttributeRange(goobj.Self(), name.Self(), range_)
//}
//REJECT: range
//func (goobj NSMutableAttributedString) ReplaceCharactersInRangeWithAttributedString(range_ C.NSRange, attrString NSAttributedString)  {
//  C.NSMutableAttributedString_replaceCharactersInRangeWithAttributedString(goobj.Self(), range_, attrString.Self())
//}
func (goobj NSMutableAttributedString) InsertAttributedStringAtIndex(attrString NSAttributedString, loc C.uint)  {
  C.NSMutableAttributedString_insertAttributedStringAtIndex(goobj.Self(), attrString.Self(), loc)
}
func (goobj NSMutableAttributedString) AppendAttributedString(attrString NSAttributedString)  {
  C.NSMutableAttributedString_appendAttributedString(goobj.Self(), attrString.Self())
}
//REJECT: range
//func (goobj NSMutableAttributedString) DeleteCharactersInRange(range_ C.NSRange)  {
//  C.NSMutableAttributedString_deleteCharactersInRange(goobj.Self(), range_)
//}
func (goobj NSMutableAttributedString) SetAttributedString(attrString NSAttributedString)  {
  C.NSMutableAttributedString_setAttributedString(goobj.Self(), attrString.Self())
}
func (goobj NSMutableAttributedString) BeginEditing()  {
  C.NSMutableAttributedString_beginEditing(goobj.Self())
}
func (goobj NSMutableAttributedString) EndEditing()  {
  C.NSMutableAttributedString_endEditing(goobj.Self())
}

type NSByteCountFormatter struct {
  NSFormatter
}
func NSByteCountFormatter_(i Id) NSByteCountFormatter {
  return NSByteCountFormatter{ NSFormatter_(i) }
}
func NSByteCountFormatter_init() NSByteCountFormatter {
  p := Id(C.NSByteCountFormatter_init())
  return NSByteCountFormatter_(p)
}
func (goobj NSByteCountFormatter) StringFromByteCount(byteCount C.longlong) NSString {
  return NSString_(Id(C.NSByteCountFormatter_stringFromByteCount(goobj.Self(), byteCount)))
}
func (goobj NSByteCountFormatter) AllowedUnits() C.NSByteCountFormatterUnits {
  return (C.NSByteCountFormatter_allowedUnits(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetAllowedUnits(allowedUnits C.NSByteCountFormatterUnits)  {
  C.NSByteCountFormatter_setAllowedUnits(goobj.Self(), allowedUnits)
}
func (goobj NSByteCountFormatter) CountStyle() C.NSByteCountFormatterCountStyle {
  return (C.NSByteCountFormatter_countStyle(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetCountStyle(countStyle C.NSByteCountFormatterCountStyle)  {
  C.NSByteCountFormatter_setCountStyle(goobj.Self(), countStyle)
}
func (goobj NSByteCountFormatter) AllowsNonnumericFormatting() C.bool {
  return (C.NSByteCountFormatter_allowsNonnumericFormatting(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetAllowsNonnumericFormatting(allowsNonnumericFormatting C.bool)  {
  C.NSByteCountFormatter_setAllowsNonnumericFormatting(goobj.Self(), allowsNonnumericFormatting)
}
func (goobj NSByteCountFormatter) IncludesUnit() C.bool {
  return (C.NSByteCountFormatter_includesUnit(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetIncludesUnit(includesUnit C.bool)  {
  C.NSByteCountFormatter_setIncludesUnit(goobj.Self(), includesUnit)
}
func (goobj NSByteCountFormatter) IncludesCount() C.bool {
  return (C.NSByteCountFormatter_includesCount(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetIncludesCount(includesCount C.bool)  {
  C.NSByteCountFormatter_setIncludesCount(goobj.Self(), includesCount)
}
func (goobj NSByteCountFormatter) IncludesActualByteCount() C.bool {
  return (C.NSByteCountFormatter_includesActualByteCount(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetIncludesActualByteCount(includesActualByteCount C.bool)  {
  C.NSByteCountFormatter_setIncludesActualByteCount(goobj.Self(), includesActualByteCount)
}
func (goobj NSByteCountFormatter) IsAdaptive() C.char {
  return (C.NSByteCountFormatter_isAdaptive(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetAdaptive(adaptive C.bool)  {
  C.NSByteCountFormatter_setAdaptive(goobj.Self(), adaptive)
}
func (goobj NSByteCountFormatter) ZeroPadsFractionDigits() C.bool {
  return (C.NSByteCountFormatter_zeroPadsFractionDigits(goobj.Self()))
}
func (goobj NSByteCountFormatter) SetZeroPadsFractionDigits(zeroPadsFractionDigits C.bool)  {
  C.NSByteCountFormatter_setZeroPadsFractionDigits(goobj.Self(), zeroPadsFractionDigits)
}
func NSByteCountFormatter_stringFromByteCountCountStyle(byteCount C.longlong, countStyle C.NSByteCountFormatterCountStyle) NSString {
  return NSString_(Id(C.NSByteCountFormatter__stringFromByteCountCountStyle(byteCount, countStyle)))
}
type NSCache struct {
  NSObject
}
func NSCache_(i Id) NSCache {
  return NSCache{ NSObject_(i) }
}
func NSCache_init() NSCache {
  p := Id(C.NSCache_init())
  return NSCache_(p)
}
func (goobj NSCache) SetName(n NSString)  {
  C.NSCache_setName(goobj.Self(), n.Self())
}
func (goobj NSCache) Name() NSString {
  return NSString_(Id(C.NSCache_name(goobj.Self())))
}
func (goobj NSCache) SetDelegate(d Id)  {
  C.NSCache_setDelegate(goobj.Self(), unsafe.Pointer(d))
}
func (goobj NSCache) Delegate() Id {
  return Id_(C.NSCache_delegate(goobj.Self()))
}
func (goobj NSCache) ObjectForKey(key Id) Id {
  return Id_(C.NSCache_objectForKey(goobj.Self(), unsafe.Pointer(key)))
}
func (goobj NSCache) SetObjectForKey(obj Id, key Id)  {
  C.NSCache_setObjectForKey(goobj.Self(), unsafe.Pointer(obj), unsafe.Pointer(key))
}
func (goobj NSCache) SetObjectForKeyCost(obj Id, key Id, g C.uint)  {
  C.NSCache_setObjectForKeyCost(goobj.Self(), unsafe.Pointer(obj), unsafe.Pointer(key), g)
}
func (goobj NSCache) RemoveObjectForKey(key Id)  {
  C.NSCache_removeObjectForKey(goobj.Self(), unsafe.Pointer(key))
}
func (goobj NSCache) RemoveAllObjects()  {
  C.NSCache_removeAllObjects(goobj.Self())
}
func (goobj NSCache) SetTotalCostLimit(lim C.uint)  {
  C.NSCache_setTotalCostLimit(goobj.Self(), lim)
}
func (goobj NSCache) TotalCostLimit() C.uint {
  return (C.NSCache_totalCostLimit(goobj.Self()))
}
func (goobj NSCache) SetCountLimit(lim C.uint)  {
  C.NSCache_setCountLimit(goobj.Self(), lim)
}
func (goobj NSCache) CountLimit() C.uint {
  return (C.NSCache_countLimit(goobj.Self()))
}
func (goobj NSCache) EvictsObjectsWithDiscardedContent() C.bool {
  return (C.NSCache_evictsObjectsWithDiscardedContent(goobj.Self()))
}
func (goobj NSCache) SetEvictsObjectsWithDiscardedContent(b C.bool)  {
  C.NSCache_setEvictsObjectsWithDiscardedContent(goobj.Self(), b)
}

type NSPredicate struct {
  NSObject
}
func NSPredicate_(i Id) NSPredicate {
  return NSPredicate{ NSObject_(i) }
}
func NSPredicate_init() NSPredicate {
  p := Id(C.NSPredicate_init())
  return NSPredicate_(p)
}
func (goobj NSPredicate) PredicateFormat() NSString {
  return NSString_(Id(C.NSPredicate_predicateFormat(goobj.Self())))
}
func (goobj NSPredicate) PredicateWithSubstitutionVariables(variables NSDictionary) NSPredicate {
  return NSPredicate_(Id(C.NSPredicate_predicateWithSubstitutionVariables(goobj.Self(), variables.Self())))
}
func (goobj NSPredicate) EvaluateWithObject(object Id) C.bool {
  return (C.NSPredicate_evaluateWithObject(goobj.Self(), unsafe.Pointer(object)))
}
func (goobj NSPredicate) EvaluateWithObjectSubstitutionVariables(object Id, bindings NSDictionary) C.bool {
  return (C.NSPredicate_evaluateWithObjectSubstitutionVariables(goobj.Self(), unsafe.Pointer(object), bindings.Self()))
}
func (goobj NSPredicate) AllowEvaluation()  {
  C.NSPredicate_allowEvaluation(goobj.Self())
}
func NSPredicate_predicateWithFormatArgumentArray(predicateFormat NSString, arguments NSArray) NSPredicate {
  return NSPredicate_(Id(C.NSPredicate__predicateWithFormatArgumentArray(predicateFormat.Self(), arguments.Self())))
}
func NSPredicate_predicateWithFormat(predicateFormat NSString) NSPredicate {
  return NSPredicate_(Id(C.NSPredicate__predicateWithFormat(predicateFormat.Self())))
}
//REJECT: argList
//func NSPredicate_predicateWithFormatArguments(predicateFormat NSString, argList C.va_list) NSPredicate {
//  return NSPredicate_(Id(C.NSPredicate__predicateWithFormatArguments(predicateFormat.Self(), argList)))
//}
func NSPredicate_predicateFromMetadataQueryString(queryString NSString) NSPredicate {
  return NSPredicate_(Id(C.NSPredicate__predicateFromMetadataQueryString(queryString.Self())))
}
func NSPredicate_predicateWithValue(value C.bool) NSPredicate {
  return NSPredicate_(Id(C.NSPredicate__predicateWithValue(value)))
}
//unacceptalble-method
//func NSPredicate_predicateWithBlock(block C.bool) NSPredicate {
//  return NSPredicate_(Id(C.NSPredicate__predicateWithBlock(block)))
//}
type NSComparisonPredicate struct {
  NSPredicate
}
func NSComparisonPredicate_(i Id) NSComparisonPredicate {
  return NSComparisonPredicate{ NSPredicate_(i) }
}
func NSComparisonPredicate_init() NSComparisonPredicate {
  p := Id(C.NSComparisonPredicate_init())
  return NSComparisonPredicate_(p)
}
func NSComparisonPredicate_initWithLeftExpressionRightExpressionModifierTypeOptions(lhs NSExpression, rhs NSExpression, modifier C.NSComparisonPredicateModifier, type_ C.NSPredicateOperatorType, options C.NSComparisonPredicateOptions) NSComparisonPredicate {
  return NSComparisonPredicate_(Id(C.NSComparisonPredicate_initWithLeftExpressionRightExpressionModifierTypeOptions(lhs.Self(), rhs.Self(), modifier, type_, options)))
}
//REJECT: selector
//func NSComparisonPredicate_initWithLeftExpressionRightExpressionCustomSelector(lhs NSExpression, rhs NSExpression, selector C.SEL) NSComparisonPredicate {
//  return NSComparisonPredicate_(Id(C.NSComparisonPredicate_initWithLeftExpressionRightExpressionCustomSelector(lhs.Self(), rhs.Self(), selector)))
//}
func (goobj NSComparisonPredicate) PredicateOperatorType() C.NSPredicateOperatorType {
  return (C.NSComparisonPredicate_predicateOperatorType(goobj.Self()))
}
func (goobj NSComparisonPredicate) ComparisonPredicateModifier() C.NSComparisonPredicateModifier {
  return (C.NSComparisonPredicate_comparisonPredicateModifier(goobj.Self()))
}
func (goobj NSComparisonPredicate) LeftExpression() NSExpression {
  return NSExpression_(Id(C.NSComparisonPredicate_leftExpression(goobj.Self())))
}
func (goobj NSComparisonPredicate) RightExpression() NSExpression {
  return NSExpression_(Id(C.NSComparisonPredicate_rightExpression(goobj.Self())))
}
//REJECT: SEL
//func (goobj NSComparisonPredicate) CustomSelector() C.SEL {
//  return (C.NSComparisonPredicate_customSelector(goobj.Self()))
//}
func (goobj NSComparisonPredicate) Options() C.NSComparisonPredicateOptions {
  return (C.NSComparisonPredicate_options(goobj.Self()))
}
func NSComparisonPredicate_predicateWithLeftExpressionRightExpressionModifierTypeOptions(lhs NSExpression, rhs NSExpression, modifier C.NSComparisonPredicateModifier, type_ C.NSPredicateOperatorType, options C.NSComparisonPredicateOptions) NSPredicate {
  return NSPredicate_(Id(C.NSComparisonPredicate__predicateWithLeftExpressionRightExpressionModifierTypeOptions(lhs.Self(), rhs.Self(), modifier, type_, options)))
}
//REJECT: selector
//func NSComparisonPredicate_predicateWithLeftExpressionRightExpressionCustomSelector(lhs NSExpression, rhs NSExpression, selector C.SEL) NSPredicate {
//  return NSPredicate_(Id(C.NSComparisonPredicate__predicateWithLeftExpressionRightExpressionCustomSelector(lhs.Self(), rhs.Self(), selector)))
//}
type NSCompoundPredicate struct {
  NSPredicate
}
func NSCompoundPredicate_(i Id) NSCompoundPredicate {
  return NSCompoundPredicate{ NSPredicate_(i) }
}
func NSCompoundPredicate_init() NSCompoundPredicate {
  p := Id(C.NSCompoundPredicate_init())
  return NSCompoundPredicate_(p)
}
func NSCompoundPredicate_initWithTypeSubpredicates(type_ C.NSCompoundPredicateType, subpredicates NSArray) NSCompoundPredicate {
  return NSCompoundPredicate_(Id(C.NSCompoundPredicate_initWithTypeSubpredicates(type_, subpredicates.Self())))
}
func (goobj NSCompoundPredicate) CompoundPredicateType() C.NSCompoundPredicateType {
  return (C.NSCompoundPredicate_compoundPredicateType(goobj.Self()))
}
func (goobj NSCompoundPredicate) Subpredicates() NSArray {
  return NSArray_(Id(C.NSCompoundPredicate_subpredicates(goobj.Self())))
}
func NSCompoundPredicate_andPredicateWithSubpredicates(subpredicates NSArray) NSPredicate {
  return NSPredicate_(Id(C.NSCompoundPredicate__andPredicateWithSubpredicates(subpredicates.Self())))
}
func NSCompoundPredicate_orPredicateWithSubpredicates(subpredicates NSArray) NSPredicate {
  return NSPredicate_(Id(C.NSCompoundPredicate__orPredicateWithSubpredicates(subpredicates.Self())))
}
func NSCompoundPredicate_notPredicateWithSubpredicate(predicate NSPredicate) NSPredicate {
  return NSPredicate_(Id(C.NSCompoundPredicate__notPredicateWithSubpredicate(predicate.Self())))
}
type NSExpression struct {
  NSObject
}
func NSExpression_(i Id) NSExpression {
  return NSExpression{ NSObject_(i) }
}
func NSExpression_init() NSExpression {
  p := Id(C.NSExpression_init())
  return NSExpression_(p)
}
func NSExpression_initWithExpressionType(type_ C.NSExpressionType) NSExpression {
  return NSExpression_(Id(C.NSExpression_initWithExpressionType(type_)))
}
func (goobj NSExpression) ExpressionType() C.NSExpressionType {
  return (C.NSExpression_expressionType(goobj.Self()))
}
func (goobj NSExpression) ConstantValue() Id {
  return Id_(C.NSExpression_constantValue(goobj.Self()))
}
func (goobj NSExpression) KeyPath() NSString {
  return NSString_(Id(C.NSExpression_keyPath(goobj.Self())))
}
func (goobj NSExpression) Function() NSString {
  return NSString_(Id(C.NSExpression_function(goobj.Self())))
}
func (goobj NSExpression) Variable() NSString {
  return NSString_(Id(C.NSExpression_variable(goobj.Self())))
}
func (goobj NSExpression) Operand() NSExpression {
  return NSExpression_(Id(C.NSExpression_operand(goobj.Self())))
}
func (goobj NSExpression) Arguments() NSArray {
  return NSArray_(Id(C.NSExpression_arguments(goobj.Self())))
}
func (goobj NSExpression) Collection() Id {
  return Id_(C.NSExpression_collection(goobj.Self()))
}
func (goobj NSExpression) Predicate() NSPredicate {
  return NSPredicate_(Id(C.NSExpression_predicate(goobj.Self())))
}
func (goobj NSExpression) LeftExpression() NSExpression {
  return NSExpression_(Id(C.NSExpression_leftExpression(goobj.Self())))
}
func (goobj NSExpression) RightExpression() NSExpression {
  return NSExpression_(Id(C.NSExpression_rightExpression(goobj.Self())))
}
//unacceptalble-method
//func (goobj NSExpression) ExpressionBlock( Id,  NSArray,  NSMutableDictionary) Id {
//  return Id_(C.NSExpression_expressionBlock(goobj.Self(), unsafe.Pointer(), .Self(), .Self()))
//}
func (goobj NSExpression) ExpressionValueWithObjectContext(object Id, context NSMutableDictionary) Id {
  return Id_(C.NSExpression_expressionValueWithObjectContext(goobj.Self(), unsafe.Pointer(object), context.Self()))
}
func (goobj NSExpression) AllowEvaluation()  {
  C.NSExpression_allowEvaluation(goobj.Self())
}
func NSExpression_expressionWithFormatArgumentArray(expressionFormat NSString, arguments NSArray) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionWithFormatArgumentArray(expressionFormat.Self(), arguments.Self())))
}
func NSExpression_expressionWithFormat(expressionFormat NSString) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionWithFormat(expressionFormat.Self())))
}
//REJECT: argList
//func NSExpression_expressionWithFormatArguments(expressionFormat NSString, argList C.va_list) NSExpression {
//  return NSExpression_(Id(C.NSExpression__expressionWithFormatArguments(expressionFormat.Self(), argList)))
//}
func NSExpression_expressionForConstantValue(obj Id) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForConstantValue(unsafe.Pointer(obj))))
}
func NSExpression_expressionForEvaluatedObject() NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForEvaluatedObject()))
}
func NSExpression_expressionForVariable(string NSString) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForVariable(string.Self())))
}
func NSExpression_expressionForKeyPath(keyPath NSString) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForKeyPath(keyPath.Self())))
}
func NSExpression_expressionForFunctionArguments(name NSString, parameters NSArray) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForFunctionArguments(name.Self(), parameters.Self())))
}
func NSExpression_expressionForAggregate(subexpressions NSArray) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForAggregate(subexpressions.Self())))
}
func NSExpression_expressionForUnionSetWith(left NSExpression, right NSExpression) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForUnionSetWith(left.Self(), right.Self())))
}
func NSExpression_expressionForIntersectSetWith(left NSExpression, right NSExpression) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForIntersectSetWith(left.Self(), right.Self())))
}
func NSExpression_expressionForMinusSetWith(left NSExpression, right NSExpression) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForMinusSetWith(left.Self(), right.Self())))
}
func NSExpression_expressionForSubqueryUsingIteratorVariablePredicate(expression NSExpression, variable NSString, predicate Id) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForSubqueryUsingIteratorVariablePredicate(expression.Self(), variable.Self(), unsafe.Pointer(predicate))))
}
func NSExpression_expressionForFunctionSelectorNameArguments(target NSExpression, name NSString, parameters NSArray) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForFunctionSelectorNameArguments(target.Self(), name.Self(), parameters.Self())))
}
func NSExpression_expressionForAnyKey() NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForAnyKey()))
}
func NSExpression_expressionForBlockArguments(block Id, arguments NSArray) NSExpression {
  return NSExpression_(Id(C.NSExpression__expressionForBlockArguments(unsafe.Pointer(block), arguments.Self())))
}
type NSFileCoordinator struct {
  NSObject
}
func NSFileCoordinator_(i Id) NSFileCoordinator {
  return NSFileCoordinator{ NSObject_(i) }
}
func NSFileCoordinator_init() NSFileCoordinator {
  p := Id(C.NSFileCoordinator_init())
  return NSFileCoordinator_(p)
}
func NSFileCoordinator_initWithFilePresenter(filePresenterOrNil Id) NSFileCoordinator {
  return NSFileCoordinator_(Id(C.NSFileCoordinator_initWithFilePresenter(unsafe.Pointer(filePresenterOrNil))))
}
//REJECT: reader
//func (goobj NSFileCoordinator) CoordinateReadingItemAtURLOptionsErrorByAccessor(url NSURL, options C.NSFileCoordinatorReadingOptions, outError NSError, reader *INVALID TYPE*)  {
//  C.NSFileCoordinator_coordinateReadingItemAtURLOptionsErrorByAccessor(goobj.Self(), url.Self(), options, outError.Self(), reader)
//}
//REJECT: writer
//func (goobj NSFileCoordinator) CoordinateWritingItemAtURLOptionsErrorByAccessor(url NSURL, options C.NSFileCoordinatorWritingOptions, outError NSError, writer *INVALID TYPE*)  {
//  C.NSFileCoordinator_coordinateWritingItemAtURLOptionsErrorByAccessor(goobj.Self(), url.Self(), options, outError.Self(), writer)
//}
//REJECT: readerWriter
//func (goobj NSFileCoordinator) CoordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(readingURL NSURL, readingOptions C.NSFileCoordinatorReadingOptions, writingURL NSURL, writingOptions C.NSFileCoordinatorWritingOptions, outError NSError, readerWriter *INVALID TYPE*)  {
//  C.NSFileCoordinator_coordinateReadingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(goobj.Self(), readingURL.Self(), readingOptions, writingURL.Self(), writingOptions, outError.Self(), readerWriter)
//}
//REJECT: writer
//func (goobj NSFileCoordinator) CoordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(url1 NSURL, options1 C.NSFileCoordinatorWritingOptions, url2 NSURL, options2 C.NSFileCoordinatorWritingOptions, outError NSError, writer *INVALID TYPE*)  {
//  C.NSFileCoordinator_coordinateWritingItemAtURLOptionsWritingItemAtURLOptionsErrorByAccessor(goobj.Self(), url1.Self(), options1, url2.Self(), options2, outError.Self(), writer)
//}
//REJECT: batchAccessor
//func (goobj NSFileCoordinator) PrepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(readingURLs NSArray, readingOptions C.NSFileCoordinatorReadingOptions, writingURLs NSArray, writingOptions C.NSFileCoordinatorWritingOptions, outError NSError, batchAccessor *INVALID TYPE*)  {
//  C.NSFileCoordinator_prepareForReadingItemsAtURLsOptionsWritingItemsAtURLsOptionsErrorByAccessor(goobj.Self(), readingURLs.Self(), readingOptions, writingURLs.Self(), writingOptions, outError.Self(), batchAccessor)
//}
func (goobj NSFileCoordinator) ItemAtURLWillMoveToURL(oldURL NSURL, newURL NSURL)  {
  C.NSFileCoordinator_itemAtURLWillMoveToURL(goobj.Self(), oldURL.Self(), newURL.Self())
}
func (goobj NSFileCoordinator) ItemAtURLDidMoveToURL(oldURL NSURL, newURL NSURL)  {
  C.NSFileCoordinator_itemAtURLDidMoveToURL(goobj.Self(), oldURL.Self(), newURL.Self())
}
func (goobj NSFileCoordinator) Cancel()  {
  C.NSFileCoordinator_cancel(goobj.Self())
}
func NSFileCoordinator_addFilePresenter(filePresenter Id)  {
  C.NSFileCoordinator__addFilePresenter(unsafe.Pointer(filePresenter))
}
func NSFileCoordinator_removeFilePresenter(filePresenter Id)  {
  C.NSFileCoordinator__removeFilePresenter(unsafe.Pointer(filePresenter))
}
func NSFileCoordinator_filePresenters() NSArray {
  return NSArray_(Id(C.NSFileCoordinator__filePresenters()))
}
type NSFileVersion struct {
  NSObject
}
func NSFileVersion_(i Id) NSFileVersion {
  return NSFileVersion{ NSObject_(i) }
}
func NSFileVersion_init() NSFileVersion {
  p := Id(C.NSFileVersion_init())
  return NSFileVersion_(p)
}
func (goobj NSFileVersion) ReplaceItemAtURLOptionsError(url NSURL, options C.NSFileVersionReplacingOptions, error NSError) NSURL {
  return NSURL_(Id(C.NSFileVersion_replaceItemAtURLOptionsError(goobj.Self(), url.Self(), options, error.Self())))
}
func (goobj NSFileVersion) RemoveAndReturnError(outError NSError) C.bool {
  return (C.NSFileVersion_removeAndReturnError(goobj.Self(), outError.Self()))
}
func (goobj NSFileVersion) URL() NSURL {
  return NSURL_(Id(C.NSFileVersion_URL(goobj.Self())))
}
func (goobj NSFileVersion) LocalizedName() NSString {
  return NSString_(Id(C.NSFileVersion_localizedName(goobj.Self())))
}
func (goobj NSFileVersion) LocalizedNameOfSavingComputer() NSString {
  return NSString_(Id(C.NSFileVersion_localizedNameOfSavingComputer(goobj.Self())))
}
func (goobj NSFileVersion) ModificationDate() NSDate {
  return NSDate_(Id(C.NSFileVersion_modificationDate(goobj.Self())))
}
func (goobj NSFileVersion) PersistentIdentifier() Id {
  return Id_(C.NSFileVersion_persistentIdentifier(goobj.Self()))
}
func (goobj NSFileVersion) IsConflict() C.char {
  return (C.NSFileVersion_isConflict(goobj.Self()))
}
func (goobj NSFileVersion) IsResolved() C.char {
  return (C.NSFileVersion_isResolved(goobj.Self()))
}
func (goobj NSFileVersion) SetResolved(resolved C.bool)  {
  C.NSFileVersion_setResolved(goobj.Self(), resolved)
}
func (goobj NSFileVersion) IsDiscardable() C.char {
  return (C.NSFileVersion_isDiscardable(goobj.Self()))
}
func (goobj NSFileVersion) SetDiscardable(discardable C.bool)  {
  C.NSFileVersion_setDiscardable(goobj.Self(), discardable)
}
func NSFileVersion_currentVersionOfItemAtURL(url NSURL) NSFileVersion {
  return NSFileVersion_(Id(C.NSFileVersion__currentVersionOfItemAtURL(url.Self())))
}
func NSFileVersion_otherVersionsOfItemAtURL(url NSURL) NSArray {
  return NSArray_(Id(C.NSFileVersion__otherVersionsOfItemAtURL(url.Self())))
}
func NSFileVersion_unresolvedConflictVersionsOfItemAtURL(url NSURL) NSArray {
  return NSArray_(Id(C.NSFileVersion__unresolvedConflictVersionsOfItemAtURL(url.Self())))
}
func NSFileVersion_versionOfItemAtURLForPersistentIdentifier(url NSURL, persistentIdentifier Id) NSFileVersion {
  return NSFileVersion_(Id(C.NSFileVersion__versionOfItemAtURLForPersistentIdentifier(url.Self(), unsafe.Pointer(persistentIdentifier))))
}
func NSFileVersion_addVersionOfItemAtURLWithContentsOfURLOptionsError(url NSURL, contentsURL NSURL, options C.NSFileVersionAddingOptions, outError NSError) NSFileVersion {
  return NSFileVersion_(Id(C.NSFileVersion__addVersionOfItemAtURLWithContentsOfURLOptionsError(url.Self(), contentsURL.Self(), options, outError.Self())))
}
func NSFileVersion_temporaryDirectoryURLForNewVersionOfItemAtURL(url NSURL) NSURL {
  return NSURL_(Id(C.NSFileVersion__temporaryDirectoryURLForNewVersionOfItemAtURL(url.Self())))
}
func NSFileVersion_removeOtherVersionsOfItemAtURLError(url NSURL, outError NSError) C.bool {
  return (C.NSFileVersion__removeOtherVersionsOfItemAtURLError(url.Self(), outError.Self()))
}
type NSFileWrapper struct {
  NSObject
}
func NSFileWrapper_(i Id) NSFileWrapper {
  return NSFileWrapper{ NSObject_(i) }
}
func NSFileWrapper_init() NSFileWrapper {
  p := Id(C.NSFileWrapper_init())
  return NSFileWrapper_(p)
}
func NSFileWrapper_initWithURLOptionsError(url NSURL, options C.NSFileWrapperReadingOptions, outError NSError) NSFileWrapper {
  return NSFileWrapper_(Id(C.NSFileWrapper_initWithURLOptionsError(url.Self(), options, outError.Self())))
}
func (goobj NSFileWrapper) InitDirectoryWithFileWrappers(childrenByPreferredName NSDictionary) Id {
  return Id_(C.NSFileWrapper_initDirectoryWithFileWrappers(goobj.Self(), childrenByPreferredName.Self()))
}
func (goobj NSFileWrapper) InitRegularFileWithContents(contents NSData) Id {
  return Id_(C.NSFileWrapper_initRegularFileWithContents(goobj.Self(), contents.Self()))
}
func (goobj NSFileWrapper) InitSymbolicLinkWithDestinationURL(url NSURL) Id {
  return Id_(C.NSFileWrapper_initSymbolicLinkWithDestinationURL(goobj.Self(), url.Self()))
}
func NSFileWrapper_initWithSerializedRepresentation(serializeRepresentation NSData) NSFileWrapper {
  return NSFileWrapper_(Id(C.NSFileWrapper_initWithSerializedRepresentation(serializeRepresentation.Self())))
}
func (goobj NSFileWrapper) IsDirectory() C.bool {
  return (C.NSFileWrapper_isDirectory(goobj.Self()))
}
func (goobj NSFileWrapper) IsRegularFile() C.bool {
  return (C.NSFileWrapper_isRegularFile(goobj.Self()))
}
func (goobj NSFileWrapper) IsSymbolicLink() C.bool {
  return (C.NSFileWrapper_isSymbolicLink(goobj.Self()))
}
func (goobj NSFileWrapper) SetPreferredFilename(fileName NSString)  {
  C.NSFileWrapper_setPreferredFilename(goobj.Self(), fileName.Self())
}
func (goobj NSFileWrapper) PreferredFilename() NSString {
  return NSString_(Id(C.NSFileWrapper_preferredFilename(goobj.Self())))
}
func (goobj NSFileWrapper) SetFilename(fileName NSString)  {
  C.NSFileWrapper_setFilename(goobj.Self(), fileName.Self())
}
func (goobj NSFileWrapper) Filename() NSString {
  return NSString_(Id(C.NSFileWrapper_filename(goobj.Self())))
}
func (goobj NSFileWrapper) SetFileAttributes(fileAttributes NSDictionary)  {
  C.NSFileWrapper_setFileAttributes(goobj.Self(), fileAttributes.Self())
}
func (goobj NSFileWrapper) FileAttributes() NSDictionary {
  return NSDictionary_(Id(C.NSFileWrapper_fileAttributes(goobj.Self())))
}
func (goobj NSFileWrapper) MatchesContentsOfURL(url NSURL) C.bool {
  return (C.NSFileWrapper_matchesContentsOfURL(goobj.Self(), url.Self()))
}
func (goobj NSFileWrapper) ReadFromURLOptionsError(url NSURL, options C.NSFileWrapperReadingOptions, outError NSError) C.bool {
  return (C.NSFileWrapper_readFromURLOptionsError(goobj.Self(), url.Self(), options, outError.Self()))
}
func (goobj NSFileWrapper) WriteToURLOptionsOriginalContentsURLError(url NSURL, options C.NSFileWrapperWritingOptions, originalContentsURL NSURL, outError NSError) C.bool {
  return (C.NSFileWrapper_writeToURLOptionsOriginalContentsURLError(goobj.Self(), url.Self(), options, originalContentsURL.Self(), outError.Self()))
}
func (goobj NSFileWrapper) SerializedRepresentation() NSData {
  return NSData_(Id(C.NSFileWrapper_serializedRepresentation(goobj.Self())))
}
func (goobj NSFileWrapper) AddFileWrapper(child NSFileWrapper) NSString {
  return NSString_(Id(C.NSFileWrapper_addFileWrapper(goobj.Self(), child.Self())))
}
func (goobj NSFileWrapper) AddRegularFileWithContentsPreferredFilename(data NSData, fileName NSString) NSString {
  return NSString_(Id(C.NSFileWrapper_addRegularFileWithContentsPreferredFilename(goobj.Self(), data.Self(), fileName.Self())))
}
func (goobj NSFileWrapper) RemoveFileWrapper(child NSFileWrapper)  {
  C.NSFileWrapper_removeFileWrapper(goobj.Self(), child.Self())
}
func (goobj NSFileWrapper) FileWrappers() NSDictionary {
  return NSDictionary_(Id(C.NSFileWrapper_fileWrappers(goobj.Self())))
}
func (goobj NSFileWrapper) KeyForFileWrapper(child NSFileWrapper) NSString {
  return NSString_(Id(C.NSFileWrapper_keyForFileWrapper(goobj.Self(), child.Self())))
}
func (goobj NSFileWrapper) RegularFileContents() NSData {
  return NSData_(Id(C.NSFileWrapper_regularFileContents(goobj.Self())))
}
func (goobj NSFileWrapper) SymbolicLinkDestinationURL() NSURL {
  return NSURL_(Id(C.NSFileWrapper_symbolicLinkDestinationURL(goobj.Self())))
}

type NSLinguisticTagger struct {
  NSObject
}
func NSLinguisticTagger_(i Id) NSLinguisticTagger {
  return NSLinguisticTagger{ NSObject_(i) }
}
func NSLinguisticTagger_init() NSLinguisticTagger {
  p := Id(C.NSLinguisticTagger_init())
  return NSLinguisticTagger_(p)
}
func NSLinguisticTagger_initWithTagSchemesOptions(tagSchemes NSArray, opts C.uint) NSLinguisticTagger {
  return NSLinguisticTagger_(Id(C.NSLinguisticTagger_initWithTagSchemesOptions(tagSchemes.Self(), opts)))
}
func (goobj NSLinguisticTagger) TagSchemes() NSArray {
  return NSArray_(Id(C.NSLinguisticTagger_tagSchemes(goobj.Self())))
}
func (goobj NSLinguisticTagger) SetString(string NSString)  {
  C.NSLinguisticTagger_setString(goobj.Self(), string.Self())
}
func (goobj NSLinguisticTagger) String() NSString {
  return NSString_(Id(C.NSLinguisticTagger_string(goobj.Self())))
}
//REJECT: range
//func (goobj NSLinguisticTagger) SetOrthographyRange(orthography NSOrthography, range_ C.NSRange)  {
//  C.NSLinguisticTagger_setOrthographyRange(goobj.Self(), orthography.Self(), range_)
//}
//REJECT: effectiveRange
//func (goobj NSLinguisticTagger) OrthographyAtIndexEffectiveRange(charIndex C.uint, effectiveRange C.NSRangePointer) NSOrthography {
//  return NSOrthography_(Id(C.NSLinguisticTagger_orthographyAtIndexEffectiveRange(goobj.Self(), charIndex, effectiveRange)))
//}
//REJECT: newRange delta
//func (goobj NSLinguisticTagger) StringEditedInRangeChangeInLength(newRange C.NSRange, delta C.NSInteger)  {
//  C.NSLinguisticTagger_stringEditedInRangeChangeInLength(goobj.Self(), newRange, delta)
//}
//REJECT: range block
//func (goobj NSLinguisticTagger) EnumerateTagsInRangeSchemeOptionsUsingBlock(range_ C.NSRange, tagScheme NSString, opts C.NSLinguisticTaggerOptions, block *INVALID TYPE*)  {
//  C.NSLinguisticTagger_enumerateTagsInRangeSchemeOptionsUsingBlock(goobj.Self(), range_, tagScheme.Self(), opts, block)
//}
//REJECT: NSRange range
//func (goobj NSLinguisticTagger) SentenceRangeForRange(range_ C.NSRange) C.NSRange {
//  return (C.NSLinguisticTagger_sentenceRangeForRange(goobj.Self(), range_))
//}
//REJECT: tokenRange sentenceRange
//func (goobj NSLinguisticTagger) TagAtIndexSchemeTokenRangeSentenceRange(charIndex C.uint, tagScheme NSString, tokenRange C.NSRangePointer, sentenceRange C.NSRangePointer) NSString {
//  return NSString_(Id(C.NSLinguisticTagger_tagAtIndexSchemeTokenRangeSentenceRange(goobj.Self(), charIndex, tagScheme.Self(), tokenRange, sentenceRange)))
//}
//REJECT: range
//func (goobj NSLinguisticTagger) TagsInRangeSchemeOptionsTokenRanges(range_ C.NSRange, tagScheme NSString, opts C.NSLinguisticTaggerOptions, tokenRanges NSArray) NSArray {
//  return NSArray_(Id(C.NSLinguisticTagger_tagsInRangeSchemeOptionsTokenRanges(goobj.Self(), range_, tagScheme.Self(), opts, tokenRanges.Self())))
//}
//REJECT: tokenRange sentenceRange
//func (goobj NSLinguisticTagger) PossibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(charIndex C.uint, tagScheme NSString, tokenRange C.NSRangePointer, sentenceRange C.NSRangePointer, scores NSArray) NSArray {
//  return NSArray_(Id(C.NSLinguisticTagger_possibleTagsAtIndexSchemeTokenRangeSentenceRangeScores(goobj.Self(), charIndex, tagScheme.Self(), tokenRange, sentenceRange, scores.Self())))
//}
func NSLinguisticTagger_availableTagSchemesForLanguage(language NSString) NSArray {
  return NSArray_(Id(C.NSLinguisticTagger__availableTagSchemesForLanguage(language.Self())))
}
type NSMetadataQuery struct {
  NSObject
}
func NSMetadataQuery_(i Id) NSMetadataQuery {
  return NSMetadataQuery{ NSObject_(i) }
}
func NSMetadataQuery_init() NSMetadataQuery {
  return NSMetadataQuery_(Id(C.NSMetadataQuery_init()))
}
func (goobj NSMetadataQuery) Delegate() Id {
  return Id_(C.NSMetadataQuery_delegate(goobj.Self()))
}
func (goobj NSMetadataQuery) SetDelegate(delegate Id)  {
  C.NSMetadataQuery_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSMetadataQuery) Predicate() NSPredicate {
  return NSPredicate_(Id(C.NSMetadataQuery_predicate(goobj.Self())))
}
func (goobj NSMetadataQuery) SetPredicate(predicate NSPredicate)  {
  C.NSMetadataQuery_setPredicate(goobj.Self(), predicate.Self())
}
func (goobj NSMetadataQuery) SortDescriptors() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_sortDescriptors(goobj.Self())))
}
func (goobj NSMetadataQuery) SetSortDescriptors(descriptors NSArray)  {
  C.NSMetadataQuery_setSortDescriptors(goobj.Self(), descriptors.Self())
}
func (goobj NSMetadataQuery) ValueListAttributes() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_valueListAttributes(goobj.Self())))
}
func (goobj NSMetadataQuery) SetValueListAttributes(attrs NSArray)  {
  C.NSMetadataQuery_setValueListAttributes(goobj.Self(), attrs.Self())
}
func (goobj NSMetadataQuery) GroupingAttributes() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_groupingAttributes(goobj.Self())))
}
func (goobj NSMetadataQuery) SetGroupingAttributes(attrs NSArray)  {
  C.NSMetadataQuery_setGroupingAttributes(goobj.Self(), attrs.Self())
}
//REJECT: NSTimeInterval
//func (goobj NSMetadataQuery) NotificationBatchingInterval() C.NSTimeInterval {
//  return (C.NSMetadataQuery_notificationBatchingInterval(goobj.Self()))
//}
//REJECT: ti
//func (goobj NSMetadataQuery) SetNotificationBatchingInterval(ti C.NSTimeInterval)  {
//  C.NSMetadataQuery_setNotificationBatchingInterval(goobj.Self(), ti)
//}
func (goobj NSMetadataQuery) SearchScopes() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_searchScopes(goobj.Self())))
}
func (goobj NSMetadataQuery) SetSearchScopes(scopes NSArray)  {
  C.NSMetadataQuery_setSearchScopes(goobj.Self(), scopes.Self())
}
func (goobj NSMetadataQuery) SearchItems() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_searchItems(goobj.Self())))
}
func (goobj NSMetadataQuery) SetSearchItems(items NSArray)  {
  C.NSMetadataQuery_setSearchItems(goobj.Self(), items.Self())
}
func (goobj NSMetadataQuery) OperationQueue() NSOperationQueue {
  return NSOperationQueue_(Id(C.NSMetadataQuery_operationQueue(goobj.Self())))
}
func (goobj NSMetadataQuery) SetOperationQueue(operationQueue NSOperationQueue)  {
  C.NSMetadataQuery_setOperationQueue(goobj.Self(), operationQueue.Self())
}
func (goobj NSMetadataQuery) StartQuery() C.bool {
  return (C.NSMetadataQuery_startQuery(goobj.Self()))
}
func (goobj NSMetadataQuery) StopQuery()  {
  C.NSMetadataQuery_stopQuery(goobj.Self())
}
func (goobj NSMetadataQuery) IsStarted() C.bool {
  return (C.NSMetadataQuery_isStarted(goobj.Self()))
}
func (goobj NSMetadataQuery) IsGathering() C.bool {
  return (C.NSMetadataQuery_isGathering(goobj.Self()))
}
func (goobj NSMetadataQuery) IsStopped() C.bool {
  return (C.NSMetadataQuery_isStopped(goobj.Self()))
}
func (goobj NSMetadataQuery) DisableUpdates()  {
  C.NSMetadataQuery_disableUpdates(goobj.Self())
}
func (goobj NSMetadataQuery) EnableUpdates()  {
  C.NSMetadataQuery_enableUpdates(goobj.Self())
}
func (goobj NSMetadataQuery) ResultCount() C.uint {
  return (C.NSMetadataQuery_resultCount(goobj.Self()))
}
func (goobj NSMetadataQuery) ResultAtIndex(idx C.uint) Id {
  return Id_(C.NSMetadataQuery_resultAtIndex(goobj.Self(), idx))
}
//REJECT: block
//func (goobj NSMetadataQuery) EnumerateResultsUsingBlock(block *INVALID TYPE*)  {
//  C.NSMetadataQuery_enumerateResultsUsingBlock(goobj.Self(), block)
//}
//REJECT: opts block
//func (goobj NSMetadataQuery) EnumerateResultsWithOptionsUsingBlock(opts C.NSEnumerationOptions, block *INVALID TYPE*)  {
//  C.NSMetadataQuery_enumerateResultsWithOptionsUsingBlock(goobj.Self(), opts, block)
//}
func (goobj NSMetadataQuery) Results() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_results(goobj.Self())))
}
func (goobj NSMetadataQuery) IndexOfResult(result Id) C.uint {
  return (C.NSMetadataQuery_indexOfResult(goobj.Self(), unsafe.Pointer(result)))
}
func (goobj NSMetadataQuery) ValueLists() NSDictionary {
  return NSDictionary_(Id(C.NSMetadataQuery_valueLists(goobj.Self())))
}
func (goobj NSMetadataQuery) GroupedResults() NSArray {
  return NSArray_(Id(C.NSMetadataQuery_groupedResults(goobj.Self())))
}
func (goobj NSMetadataQuery) ValueOfAttributeForResultAtIndex(attrName NSString, idx C.uint) Id {
  return Id_(C.NSMetadataQuery_valueOfAttributeForResultAtIndex(goobj.Self(), attrName.Self(), idx))
}

type NSMetadataItem struct {
  NSObject
}
func NSMetadataItem_(i Id) NSMetadataItem {
  return NSMetadataItem{ NSObject_(i) }
}
func NSMetadataItem_init() NSMetadataItem {
  p := Id(C.NSMetadataItem_init())
  return NSMetadataItem_(p)
}
func NSMetadataItem_initWithURL(url NSURL) NSMetadataItem {
  return NSMetadataItem_(Id(C.NSMetadataItem_initWithURL(url.Self())))
}
func (goobj NSMetadataItem) ValueForAttribute(key NSString) Id {
  return Id_(C.NSMetadataItem_valueForAttribute(goobj.Self(), key.Self()))
}
func (goobj NSMetadataItem) ValuesForAttributes(keys NSArray) NSDictionary {
  return NSDictionary_(Id(C.NSMetadataItem_valuesForAttributes(goobj.Self(), keys.Self())))
}
func (goobj NSMetadataItem) Attributes() NSArray {
  return NSArray_(Id(C.NSMetadataItem_attributes(goobj.Self())))
}

type NSMetadataQueryAttributeValueTuple struct {
  NSObject
}
func NSMetadataQueryAttributeValueTuple_(i Id) NSMetadataQueryAttributeValueTuple {
  return NSMetadataQueryAttributeValueTuple{ NSObject_(i) }
}
func NSMetadataQueryAttributeValueTuple_init() NSMetadataQueryAttributeValueTuple {
  p := Id(C.NSMetadataQueryAttributeValueTuple_init())
  return NSMetadataQueryAttributeValueTuple_(p)
}
func (goobj NSMetadataQueryAttributeValueTuple) Attribute() NSString {
  return NSString_(Id(C.NSMetadataQueryAttributeValueTuple_attribute(goobj.Self())))
}
func (goobj NSMetadataQueryAttributeValueTuple) Value() Id {
  return Id_(C.NSMetadataQueryAttributeValueTuple_value(goobj.Self()))
}
func (goobj NSMetadataQueryAttributeValueTuple) Count() C.uint {
  return (C.NSMetadataQueryAttributeValueTuple_count(goobj.Self()))
}

type NSMetadataQueryResultGroup struct {
  NSObject
}
func NSMetadataQueryResultGroup_(i Id) NSMetadataQueryResultGroup {
  return NSMetadataQueryResultGroup{ NSObject_(i) }
}
func NSMetadataQueryResultGroup_init() NSMetadataQueryResultGroup {
  p := Id(C.NSMetadataQueryResultGroup_init())
  return NSMetadataQueryResultGroup_(p)
}
func (goobj NSMetadataQueryResultGroup) Attribute() NSString {
  return NSString_(Id(C.NSMetadataQueryResultGroup_attribute(goobj.Self())))
}
func (goobj NSMetadataQueryResultGroup) Value() Id {
  return Id_(C.NSMetadataQueryResultGroup_value(goobj.Self()))
}
func (goobj NSMetadataQueryResultGroup) Subgroups() NSArray {
  return NSArray_(Id(C.NSMetadataQueryResultGroup_subgroups(goobj.Self())))
}
func (goobj NSMetadataQueryResultGroup) ResultCount() C.uint {
  return (C.NSMetadataQueryResultGroup_resultCount(goobj.Self()))
}
func (goobj NSMetadataQueryResultGroup) ResultAtIndex(idx C.uint) Id {
  return Id_(C.NSMetadataQueryResultGroup_resultAtIndex(goobj.Self(), idx))
}
func (goobj NSMetadataQueryResultGroup) Results() NSArray {
  return NSArray_(Id(C.NSMetadataQueryResultGroup_results(goobj.Self())))
}

type NSNetService struct {
  NSObject
}
func NSNetService_(i Id) NSNetService {
  return NSNetService{ NSObject_(i) }
}
func NSNetService_init() NSNetService {
  p := Id(C.NSNetService_init())
  return NSNetService_(p)
}
func NSNetService_initWithDomainTypeNamePort(domain NSString, type_ NSString, name NSString, port C.int) NSNetService {
  return NSNetService_(Id(C.NSNetService_initWithDomainTypeNamePort(domain.Self(), type_.Self(), name.Self(), port)))
}
func NSNetService_initWithDomainTypeName(domain NSString, type_ NSString, name NSString) NSNetService {
  return NSNetService_(Id(C.NSNetService_initWithDomainTypeName(domain.Self(), type_.Self(), name.Self())))
}
func (goobj NSNetService) ScheduleInRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSNetService_scheduleInRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSNetService) RemoveFromRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSNetService_removeFromRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSNetService) Publish()  {
  C.NSNetService_publish(goobj.Self())
}
func (goobj NSNetService) PublishWithOptions(options C.NSNetServiceOptions)  {
  C.NSNetService_publishWithOptions(goobj.Self(), options)
}
func (goobj NSNetService) Resolve()  {
  C.NSNetService_resolve(goobj.Self())
}
func (goobj NSNetService) Stop()  {
  C.NSNetService_stop(goobj.Self())
}
//REJECT: timeout
//func (goobj NSNetService) ResolveWithTimeout(timeout C.NSTimeInterval)  {
//  C.NSNetService_resolveWithTimeout(goobj.Self(), timeout)
//}
func (goobj NSNetService) GetInputStreamOutputStream(inputStream NSInputStream, outputStream NSOutputStream) C.bool {
  return (C.NSNetService_getInputStreamOutputStream(goobj.Self(), inputStream.Self(), outputStream.Self()))
}
func (goobj NSNetService) SetTXTRecordData(recordData NSData) C.bool {
  return (C.NSNetService_setTXTRecordData(goobj.Self(), recordData.Self()))
}
func (goobj NSNetService) TXTRecordData() NSData {
  return NSData_(Id(C.NSNetService_TXTRecordData(goobj.Self())))
}
func (goobj NSNetService) StartMonitoring()  {
  C.NSNetService_startMonitoring(goobj.Self())
}
func (goobj NSNetService) StopMonitoring()  {
  C.NSNetService_stopMonitoring(goobj.Self())
}
func (goobj NSNetService) Delegate() Id {
  return Id_(C.NSNetService_delegate(goobj.Self()))
}
func (goobj NSNetService) SetDelegate(delegate Id)  {
  C.NSNetService_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
//unacceptalble-method
//func (goobj NSNetService) IncludesPeerToPeer() C.bool {
//  return (C.NSNetService_includesPeerToPeer(goobj.Self()))
//}
//unacceptalble-method
//func (goobj NSNetService) SetIncludesPeerToPeer(includesPeerToPeer C.bool)  {
//  C.NSNetService_setIncludesPeerToPeer(goobj.Self(), includesPeerToPeer)
//}
func (goobj NSNetService) Name() NSString {
  return NSString_(Id(C.NSNetService_name(goobj.Self())))
}
func (goobj NSNetService) Type() NSString {
  return NSString_(Id(C.NSNetService_type(goobj.Self())))
}
func (goobj NSNetService) Domain() NSString {
  return NSString_(Id(C.NSNetService_domain(goobj.Self())))
}
func (goobj NSNetService) HostName() NSString {
  return NSString_(Id(C.NSNetService_hostName(goobj.Self())))
}
func (goobj NSNetService) Addresses() NSArray {
  return NSArray_(Id(C.NSNetService_addresses(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSNetService) Port() C.NSInteger {
//  return (C.NSNetService_port(goobj.Self()))
//}
func NSNetService_dictionaryFromTXTRecordData(txtData NSData) NSDictionary {
  return NSDictionary_(Id(C.NSNetService__dictionaryFromTXTRecordData(txtData.Self())))
}
func NSNetService_dataFromTXTRecordDictionary(txtDictionary NSDictionary) NSData {
  return NSData_(Id(C.NSNetService__dataFromTXTRecordDictionary(txtDictionary.Self())))
}
type NSNetServiceBrowser struct {
  NSObject
}
func NSNetServiceBrowser_(i Id) NSNetServiceBrowser {
  return NSNetServiceBrowser{ NSObject_(i) }
}
func NSNetServiceBrowser_init() NSNetServiceBrowser {
  return NSNetServiceBrowser_(Id(C.NSNetServiceBrowser_init()))
}
func (goobj NSNetServiceBrowser) ScheduleInRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSNetServiceBrowser_scheduleInRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSNetServiceBrowser) RemoveFromRunLoopForMode(aRunLoop NSRunLoop, mode NSString)  {
  C.NSNetServiceBrowser_removeFromRunLoopForMode(goobj.Self(), aRunLoop.Self(), mode.Self())
}
func (goobj NSNetServiceBrowser) SearchForBrowsableDomains()  {
  C.NSNetServiceBrowser_searchForBrowsableDomains(goobj.Self())
}
func (goobj NSNetServiceBrowser) SearchForRegistrationDomains()  {
  C.NSNetServiceBrowser_searchForRegistrationDomains(goobj.Self())
}
func (goobj NSNetServiceBrowser) SearchForServicesOfTypeInDomain(type_ NSString, domainString NSString)  {
  C.NSNetServiceBrowser_searchForServicesOfTypeInDomain(goobj.Self(), type_.Self(), domainString.Self())
}
func (goobj NSNetServiceBrowser) Stop()  {
  C.NSNetServiceBrowser_stop(goobj.Self())
}
func (goobj NSNetServiceBrowser) Delegate() Id {
  return Id_(C.NSNetServiceBrowser_delegate(goobj.Self()))
}
func (goobj NSNetServiceBrowser) SetDelegate(delegate Id)  {
  C.NSNetServiceBrowser_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
//unacceptalble-method
//func (goobj NSNetServiceBrowser) IncludesPeerToPeer() C.bool {
//  return (C.NSNetServiceBrowser_includesPeerToPeer(goobj.Self()))
//}
//unacceptalble-method
//func (goobj NSNetServiceBrowser) SetIncludesPeerToPeer(includesPeerToPeer C.bool)  {
//  C.NSNetServiceBrowser_setIncludesPeerToPeer(goobj.Self(), includesPeerToPeer)
//}

type NSProgress struct {
  NSObject
}
func NSProgress_(i Id) NSProgress {
  return NSProgress{ NSObject_(i) }
}
func NSProgress_init() NSProgress {
  p := Id(C.NSProgress_init())
  return NSProgress_(p)
}
func NSProgress_initWithParentUserInfo(parentProgressOrNil NSProgress, userInfoOrNil NSDictionary) NSProgress {
  return NSProgress_(Id(C.NSProgress_initWithParentUserInfo(parentProgressOrNil.Self(), userInfoOrNil.Self())))
}
func (goobj NSProgress) BecomeCurrentWithPendingUnitCount(unitCount C.int64_t)  {
  C.NSProgress_becomeCurrentWithPendingUnitCount(goobj.Self(), unitCount)
}
func (goobj NSProgress) ResignCurrent()  {
  C.NSProgress_resignCurrent(goobj.Self())
}
func (goobj NSProgress) SetUserInfoObjectForKey(objectOrNil Id, key NSString)  {
  C.NSProgress_setUserInfoObjectForKey(goobj.Self(), unsafe.Pointer(objectOrNil), key.Self())
}
func (goobj NSProgress) Cancel()  {
  C.NSProgress_cancel(goobj.Self())
}
func (goobj NSProgress) Pause()  {
  C.NSProgress_pause(goobj.Self())
}
func (goobj NSProgress) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSProgress_userInfo(goobj.Self())))
}
func (goobj NSProgress) Publish()  {
  C.NSProgress_publish(goobj.Self())
}
func (goobj NSProgress) Unpublish()  {
  C.NSProgress_unpublish(goobj.Self())
}
func (goobj NSProgress) TotalUnitCount() C.int64_t {
  return (C.NSProgress_totalUnitCount(goobj.Self()))
}
func (goobj NSProgress) SetTotalUnitCount(totalUnitCount C.int64_t)  {
  C.NSProgress_setTotalUnitCount(goobj.Self(), totalUnitCount)
}
func (goobj NSProgress) CompletedUnitCount() C.int64_t {
  return (C.NSProgress_completedUnitCount(goobj.Self()))
}
func (goobj NSProgress) SetCompletedUnitCount(completedUnitCount C.int64_t)  {
  C.NSProgress_setCompletedUnitCount(goobj.Self(), completedUnitCount)
}
func (goobj NSProgress) LocalizedDescription() NSString {
  return NSString_(Id(C.NSProgress_localizedDescription(goobj.Self())))
}
func (goobj NSProgress) SetLocalizedDescription(localizedDescription NSString)  {
  C.NSProgress_setLocalizedDescription(goobj.Self(), localizedDescription.Self())
}
func (goobj NSProgress) LocalizedAdditionalDescription() NSString {
  return NSString_(Id(C.NSProgress_localizedAdditionalDescription(goobj.Self())))
}
func (goobj NSProgress) SetLocalizedAdditionalDescription(localizedAdditionalDescription NSString)  {
  C.NSProgress_setLocalizedAdditionalDescription(goobj.Self(), localizedAdditionalDescription.Self())
}
func (goobj NSProgress) IsCancellable() C.char {
  return (C.NSProgress_isCancellable(goobj.Self()))
}
func (goobj NSProgress) SetCancellable(cancellable C.bool)  {
  C.NSProgress_setCancellable(goobj.Self(), cancellable)
}
func (goobj NSProgress) IsPausable() C.char {
  return (C.NSProgress_isPausable(goobj.Self()))
}
func (goobj NSProgress) SetPausable(pausable C.bool)  {
  C.NSProgress_setPausable(goobj.Self(), pausable)
}
func (goobj NSProgress) IsCancelled() C.char {
  return (C.NSProgress_isCancelled(goobj.Self()))
}
func (goobj NSProgress) IsPaused() C.char {
  return (C.NSProgress_isPaused(goobj.Self()))
}
//REJECT: *INVALID TYPE*
//func (goobj NSProgress) CancellationHandler() *INVALID TYPE* {
//  return (C.NSProgress_cancellationHandler(goobj.Self()))
//}
//REJECT: cancellationHandler
//func (goobj NSProgress) SetCancellationHandler(cancellationHandler *INVALID TYPE*)  {
//  C.NSProgress_setCancellationHandler(goobj.Self(), cancellationHandler)
//}
//REJECT: *INVALID TYPE*
//func (goobj NSProgress) PausingHandler() *INVALID TYPE* {
//  return (C.NSProgress_pausingHandler(goobj.Self()))
//}
//REJECT: pausingHandler
//func (goobj NSProgress) SetPausingHandler(pausingHandler *INVALID TYPE*)  {
//  C.NSProgress_setPausingHandler(goobj.Self(), pausingHandler)
//}
func (goobj NSProgress) IsIndeterminate() C.char {
  return (C.NSProgress_isIndeterminate(goobj.Self()))
}
//REJECT: *INVALID TYPE*
//func (goobj NSProgress) FractionCompleted() *INVALID TYPE* {
//  return (C.NSProgress_fractionCompleted(goobj.Self()))
//}
func (goobj NSProgress) Kind() NSString {
  return NSString_(Id(C.NSProgress_kind(goobj.Self())))
}
func (goobj NSProgress) SetKind(kind NSString)  {
  C.NSProgress_setKind(goobj.Self(), kind.Self())
}
func (goobj NSProgress) IsOld() C.char {
  return (C.NSProgress_isOld(goobj.Self()))
}
func NSProgress_currentProgress() NSProgress {
  return NSProgress_(Id(C.NSProgress__currentProgress()))
}
func NSProgress_progressWithTotalUnitCount(unitCount C.int64_t) NSProgress {
  return NSProgress_(Id(C.NSProgress__progressWithTotalUnitCount(unitCount)))
}
//REJECT: publishingHandler
//func NSProgress_addSubscriberForFileURLWithPublishingHandler(url NSURL, publishingHandler C.NSProgressPublishingHandler) Id {
//  return Id_(C.NSProgress__addSubscriberForFileURLWithPublishingHandler(url.Self(), publishingHandler))
//}
func NSProgress_removeSubscriber(subscriber Id)  {
  C.NSProgress__removeSubscriber(unsafe.Pointer(subscriber))
}
type NSUbiquitousKeyValueStore struct {
  NSObject
}
func NSUbiquitousKeyValueStore_(i Id) NSUbiquitousKeyValueStore {
  return NSUbiquitousKeyValueStore{ NSObject_(i) }
}
func NSUbiquitousKeyValueStore_init() NSUbiquitousKeyValueStore {
  p := Id(C.NSUbiquitousKeyValueStore_init())
  return NSUbiquitousKeyValueStore_(p)
}
func (goobj NSUbiquitousKeyValueStore) ObjectForKey(aKey NSString) Id {
  return Id_(C.NSUbiquitousKeyValueStore_objectForKey(goobj.Self(), aKey.Self()))
}
func (goobj NSUbiquitousKeyValueStore) SetObjectForKey(anObject Id, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setObjectForKey(goobj.Self(), unsafe.Pointer(anObject), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) RemoveObjectForKey(aKey NSString)  {
  C.NSUbiquitousKeyValueStore_removeObjectForKey(goobj.Self(), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) StringForKey(aKey NSString) NSString {
  return NSString_(Id(C.NSUbiquitousKeyValueStore_stringForKey(goobj.Self(), aKey.Self())))
}
func (goobj NSUbiquitousKeyValueStore) ArrayForKey(aKey NSString) NSArray {
  return NSArray_(Id(C.NSUbiquitousKeyValueStore_arrayForKey(goobj.Self(), aKey.Self())))
}
func (goobj NSUbiquitousKeyValueStore) DictionaryForKey(aKey NSString) NSDictionary {
  return NSDictionary_(Id(C.NSUbiquitousKeyValueStore_dictionaryForKey(goobj.Self(), aKey.Self())))
}
func (goobj NSUbiquitousKeyValueStore) DataForKey(aKey NSString) NSData {
  return NSData_(Id(C.NSUbiquitousKeyValueStore_dataForKey(goobj.Self(), aKey.Self())))
}
func (goobj NSUbiquitousKeyValueStore) LongLongForKey(aKey NSString) C.longlong {
  return (C.NSUbiquitousKeyValueStore_longLongForKey(goobj.Self(), aKey.Self()))
}
func (goobj NSUbiquitousKeyValueStore) DoubleForKey(aKey NSString) C.double {
  return (C.NSUbiquitousKeyValueStore_doubleForKey(goobj.Self(), aKey.Self()))
}
func (goobj NSUbiquitousKeyValueStore) BoolForKey(aKey NSString) C.bool {
  return (C.NSUbiquitousKeyValueStore_boolForKey(goobj.Self(), aKey.Self()))
}
func (goobj NSUbiquitousKeyValueStore) SetStringForKey(aString NSString, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setStringForKey(goobj.Self(), aString.Self(), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetDataForKey(aData NSData, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setDataForKey(goobj.Self(), aData.Self(), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetArrayForKey(anArray NSArray, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setArrayForKey(goobj.Self(), anArray.Self(), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetDictionaryForKey(aDictionary NSDictionary, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setDictionaryForKey(goobj.Self(), aDictionary.Self(), aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetLongLongForKey(value C.longlong, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setLongLongForKey(goobj.Self(), value, aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetDoubleForKey(value C.double, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setDoubleForKey(goobj.Self(), value, aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) SetBoolForKey(value C.bool, aKey NSString)  {
  C.NSUbiquitousKeyValueStore_setBoolForKey(goobj.Self(), value, aKey.Self())
}
func (goobj NSUbiquitousKeyValueStore) DictionaryRepresentation() NSDictionary {
  return NSDictionary_(Id(C.NSUbiquitousKeyValueStore_dictionaryRepresentation(goobj.Self())))
}
func (goobj NSUbiquitousKeyValueStore) Synchronize() C.bool {
  return (C.NSUbiquitousKeyValueStore_synchronize(goobj.Self()))
}
func NSUbiquitousKeyValueStore_defaultStore() NSUbiquitousKeyValueStore {
  return NSUbiquitousKeyValueStore_(Id(C.NSUbiquitousKeyValueStore__defaultStore()))
}
type NSUndoManager struct {
  NSObject
}
func NSUndoManager_(i Id) NSUndoManager {
  return NSUndoManager{ NSObject_(i) }
}
func NSUndoManager_init() NSUndoManager {
  p := Id(C.NSUndoManager_init())
  return NSUndoManager_(p)
}
func (goobj NSUndoManager) BeginUndoGrouping()  {
  C.NSUndoManager_beginUndoGrouping(goobj.Self())
}
func (goobj NSUndoManager) EndUndoGrouping()  {
  C.NSUndoManager_endUndoGrouping(goobj.Self())
}
//REJECT: NSInteger
//func (goobj NSUndoManager) GroupingLevel() C.NSInteger {
//  return (C.NSUndoManager_groupingLevel(goobj.Self()))
//}
func (goobj NSUndoManager) DisableUndoRegistration()  {
  C.NSUndoManager_disableUndoRegistration(goobj.Self())
}
func (goobj NSUndoManager) EnableUndoRegistration()  {
  C.NSUndoManager_enableUndoRegistration(goobj.Self())
}
func (goobj NSUndoManager) IsUndoRegistrationEnabled() C.bool {
  return (C.NSUndoManager_isUndoRegistrationEnabled(goobj.Self()))
}
func (goobj NSUndoManager) GroupsByEvent() C.bool {
  return (C.NSUndoManager_groupsByEvent(goobj.Self()))
}
func (goobj NSUndoManager) SetGroupsByEvent(groupsByEvent C.bool)  {
  C.NSUndoManager_setGroupsByEvent(goobj.Self(), groupsByEvent)
}
func (goobj NSUndoManager) SetLevelsOfUndo(levels C.uint)  {
  C.NSUndoManager_setLevelsOfUndo(goobj.Self(), levels)
}
func (goobj NSUndoManager) LevelsOfUndo() C.uint {
  return (C.NSUndoManager_levelsOfUndo(goobj.Self()))
}
func (goobj NSUndoManager) SetRunLoopModes(runLoopModes NSArray)  {
  C.NSUndoManager_setRunLoopModes(goobj.Self(), runLoopModes.Self())
}
func (goobj NSUndoManager) RunLoopModes() NSArray {
  return NSArray_(Id(C.NSUndoManager_runLoopModes(goobj.Self())))
}
func (goobj NSUndoManager) Undo()  {
  C.NSUndoManager_undo(goobj.Self())
}
func (goobj NSUndoManager) Redo()  {
  C.NSUndoManager_redo(goobj.Self())
}
func (goobj NSUndoManager) UndoNestedGroup()  {
  C.NSUndoManager_undoNestedGroup(goobj.Self())
}
func (goobj NSUndoManager) CanUndo() C.bool {
  return (C.NSUndoManager_canUndo(goobj.Self()))
}
func (goobj NSUndoManager) CanRedo() C.bool {
  return (C.NSUndoManager_canRedo(goobj.Self()))
}
func (goobj NSUndoManager) IsUndoing() C.bool {
  return (C.NSUndoManager_isUndoing(goobj.Self()))
}
func (goobj NSUndoManager) IsRedoing() C.bool {
  return (C.NSUndoManager_isRedoing(goobj.Self()))
}
func (goobj NSUndoManager) RemoveAllActions()  {
  C.NSUndoManager_removeAllActions(goobj.Self())
}
func (goobj NSUndoManager) RemoveAllActionsWithTarget(target Id)  {
  C.NSUndoManager_removeAllActionsWithTarget(goobj.Self(), unsafe.Pointer(target))
}
//REJECT: selector
//func (goobj NSUndoManager) RegisterUndoWithTargetSelectorObject(target Id, selector C.SEL, anObject Id)  {
//  C.NSUndoManager_registerUndoWithTargetSelectorObject(goobj.Self(), unsafe.Pointer(target), selector, unsafe.Pointer(anObject))
//}
func (goobj NSUndoManager) PrepareWithInvocationTarget(target Id) Id {
  return Id_(C.NSUndoManager_prepareWithInvocationTarget(goobj.Self(), unsafe.Pointer(target)))
}
func (goobj NSUndoManager) SetActionIsDiscardable(discardable C.bool)  {
  C.NSUndoManager_setActionIsDiscardable(goobj.Self(), discardable)
}
func (goobj NSUndoManager) UndoActionIsDiscardable() C.bool {
  return (C.NSUndoManager_undoActionIsDiscardable(goobj.Self()))
}
func (goobj NSUndoManager) RedoActionIsDiscardable() C.bool {
  return (C.NSUndoManager_redoActionIsDiscardable(goobj.Self()))
}
func (goobj NSUndoManager) UndoActionName() NSString {
  return NSString_(Id(C.NSUndoManager_undoActionName(goobj.Self())))
}
func (goobj NSUndoManager) RedoActionName() NSString {
  return NSString_(Id(C.NSUndoManager_redoActionName(goobj.Self())))
}
func (goobj NSUndoManager) SetActionName(actionName NSString)  {
  C.NSUndoManager_setActionName(goobj.Self(), actionName.Self())
}
func (goobj NSUndoManager) UndoMenuItemTitle() NSString {
  return NSString_(Id(C.NSUndoManager_undoMenuItemTitle(goobj.Self())))
}
func (goobj NSUndoManager) RedoMenuItemTitle() NSString {
  return NSString_(Id(C.NSUndoManager_redoMenuItemTitle(goobj.Self())))
}
func (goobj NSUndoManager) UndoMenuTitleForUndoActionName(actionName NSString) NSString {
  return NSString_(Id(C.NSUndoManager_undoMenuTitleForUndoActionName(goobj.Self(), actionName.Self())))
}
func (goobj NSUndoManager) RedoMenuTitleForUndoActionName(actionName NSString) NSString {
  return NSString_(Id(C.NSUndoManager_redoMenuTitleForUndoActionName(goobj.Self(), actionName.Self())))
}

type NSURLSession struct {
  NSObject
}
func NSURLSession_(i Id) NSURLSession {
  return NSURLSession{ NSObject_(i) }
}
func NSURLSession_init() NSURLSession {
  p := Id(C.NSURLSession_init())
  return NSURLSession_(p)
}
func (goobj NSURLSession) FinishTasksAndInvalidate()  {
  C.NSURLSession_finishTasksAndInvalidate(goobj.Self())
}
func (goobj NSURLSession) InvalidateAndCancel()  {
  C.NSURLSession_invalidateAndCancel(goobj.Self())
}
//REJECT: completionHandler
//func (goobj NSURLSession) ResetWithCompletionHandler(completionHandler *INVALID TYPE*)  {
//  C.NSURLSession_resetWithCompletionHandler(goobj.Self(), completionHandler)
//}
//REJECT: completionHandler
//func (goobj NSURLSession) FlushWithCompletionHandler(completionHandler *INVALID TYPE*)  {
//  C.NSURLSession_flushWithCompletionHandler(goobj.Self(), completionHandler)
//}
//REJECT: completionHandler
//func (goobj NSURLSession) GetTasksWithCompletionHandler(completionHandler *INVALID TYPE*)  {
//  C.NSURLSession_getTasksWithCompletionHandler(goobj.Self(), completionHandler)
//}
func (goobj NSURLSession) DataTaskWithRequest(request NSURLRequest) NSURLSessionDataTask {
  return NSURLSessionDataTask_(Id(C.NSURLSession_dataTaskWithRequest(goobj.Self(), request.Self())))
}
func (goobj NSURLSession) DataTaskWithURL(url NSURL) NSURLSessionDataTask {
  return NSURLSessionDataTask_(Id(C.NSURLSession_dataTaskWithURL(goobj.Self(), url.Self())))
}
func (goobj NSURLSession) UploadTaskWithRequestFromFile(request NSURLRequest, fileURL NSURL) NSURLSessionUploadTask {
  return NSURLSessionUploadTask_(Id(C.NSURLSession_uploadTaskWithRequestFromFile(goobj.Self(), request.Self(), fileURL.Self())))
}
func (goobj NSURLSession) UploadTaskWithRequestFromData(request NSURLRequest, bodyData NSData) NSURLSessionUploadTask {
  return NSURLSessionUploadTask_(Id(C.NSURLSession_uploadTaskWithRequestFromData(goobj.Self(), request.Self(), bodyData.Self())))
}
func (goobj NSURLSession) UploadTaskWithStreamedRequest(request NSURLRequest) NSURLSessionUploadTask {
  return NSURLSessionUploadTask_(Id(C.NSURLSession_uploadTaskWithStreamedRequest(goobj.Self(), request.Self())))
}
func (goobj NSURLSession) DownloadTaskWithRequest(request NSURLRequest) NSURLSessionDownloadTask {
  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithRequest(goobj.Self(), request.Self())))
}
func (goobj NSURLSession) DownloadTaskWithURL(url NSURL) NSURLSessionDownloadTask {
  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithURL(goobj.Self(), url.Self())))
}
func (goobj NSURLSession) DownloadTaskWithResumeData(resumeData NSData) NSURLSessionDownloadTask {
  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithResumeData(goobj.Self(), resumeData.Self())))
}
func (goobj NSURLSession) DelegateQueue() NSOperationQueue {
  return NSOperationQueue_(Id(C.NSURLSession_delegateQueue(goobj.Self())))
}
func (goobj NSURLSession) Delegate() Id {
  return Id_(C.NSURLSession_delegate(goobj.Self()))
}
func (goobj NSURLSession) Configuration() NSURLSessionConfiguration {
  return NSURLSessionConfiguration_(Id(C.NSURLSession_configuration(goobj.Self())))
}
func (goobj NSURLSession) SessionDescription() NSString {
  return NSString_(Id(C.NSURLSession_sessionDescription(goobj.Self())))
}
func (goobj NSURLSession) SetSessionDescription(sessionDescription NSString)  {
  C.NSURLSession_setSessionDescription(goobj.Self(), sessionDescription.Self())
}
//REJECT: completionHandler
//func (goobj NSURLSession) DataTaskWithRequestCompletionHandler(request NSURLRequest, completionHandler *INVALID TYPE*) NSURLSessionDataTask {
//  return NSURLSessionDataTask_(Id(C.NSURLSession_dataTaskWithRequestCompletionHandler(goobj.Self(), request.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) DataTaskWithURLCompletionHandler(url NSURL, completionHandler *INVALID TYPE*) NSURLSessionDataTask {
//  return NSURLSessionDataTask_(Id(C.NSURLSession_dataTaskWithURLCompletionHandler(goobj.Self(), url.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) UploadTaskWithRequestFromFileCompletionHandler(request NSURLRequest, fileURL NSURL, completionHandler *INVALID TYPE*) NSURLSessionUploadTask {
//  return NSURLSessionUploadTask_(Id(C.NSURLSession_uploadTaskWithRequestFromFileCompletionHandler(goobj.Self(), request.Self(), fileURL.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) UploadTaskWithRequestFromDataCompletionHandler(request NSURLRequest, bodyData NSData, completionHandler *INVALID TYPE*) NSURLSessionUploadTask {
//  return NSURLSessionUploadTask_(Id(C.NSURLSession_uploadTaskWithRequestFromDataCompletionHandler(goobj.Self(), request.Self(), bodyData.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) DownloadTaskWithRequestCompletionHandler(request NSURLRequest, completionHandler *INVALID TYPE*) NSURLSessionDownloadTask {
//  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithRequestCompletionHandler(goobj.Self(), request.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) DownloadTaskWithURLCompletionHandler(url NSURL, completionHandler *INVALID TYPE*) NSURLSessionDownloadTask {
//  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithURLCompletionHandler(goobj.Self(), url.Self(), completionHandler)))
//}
//REJECT: completionHandler
//func (goobj NSURLSession) DownloadTaskWithResumeDataCompletionHandler(resumeData NSData, completionHandler *INVALID TYPE*) NSURLSessionDownloadTask {
//  return NSURLSessionDownloadTask_(Id(C.NSURLSession_downloadTaskWithResumeDataCompletionHandler(goobj.Self(), resumeData.Self(), completionHandler)))
//}
func NSURLSession_sharedSession() NSURLSession {
  return NSURLSession_(Id(C.NSURLSession__sharedSession()))
}
func NSURLSession_sessionWithConfiguration(configuration NSURLSessionConfiguration) NSURLSession {
  return NSURLSession_(Id(C.NSURLSession__sessionWithConfiguration(configuration.Self())))
}
func NSURLSession_sessionWithConfigurationDelegateDelegateQueue(configuration NSURLSessionConfiguration, delegate Id, queue NSOperationQueue) NSURLSession {
  return NSURLSession_(Id(C.NSURLSession__sessionWithConfigurationDelegateDelegateQueue(configuration.Self(), unsafe.Pointer(delegate), queue.Self())))
}
type NSURLSessionTask struct {
  NSObject
}
func NSURLSessionTask_(i Id) NSURLSessionTask {
  return NSURLSessionTask{ NSObject_(i) }
}
func NSURLSessionTask_init() NSURLSessionTask {
  p := Id(C.NSURLSessionTask_init())
  return NSURLSessionTask_(p)
}
func (goobj NSURLSessionTask) Cancel()  {
  C.NSURLSessionTask_cancel(goobj.Self())
}
func (goobj NSURLSessionTask) Suspend()  {
  C.NSURLSessionTask_suspend(goobj.Self())
}
func (goobj NSURLSessionTask) Resume()  {
  C.NSURLSessionTask_resume(goobj.Self())
}
func (goobj NSURLSessionTask) TaskIdentifier() C.uint {
  return (C.NSURLSessionTask_taskIdentifier(goobj.Self()))
}
func (goobj NSURLSessionTask) OriginalRequest() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLSessionTask_originalRequest(goobj.Self())))
}
func (goobj NSURLSessionTask) CurrentRequest() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLSessionTask_currentRequest(goobj.Self())))
}
func (goobj NSURLSessionTask) Response() NSURLResponse {
  return NSURLResponse_(Id(C.NSURLSessionTask_response(goobj.Self())))
}
func (goobj NSURLSessionTask) CountOfBytesReceived() C.int64_t {
  return (C.NSURLSessionTask_countOfBytesReceived(goobj.Self()))
}
func (goobj NSURLSessionTask) CountOfBytesSent() C.int64_t {
  return (C.NSURLSessionTask_countOfBytesSent(goobj.Self()))
}
func (goobj NSURLSessionTask) CountOfBytesExpectedToSend() C.int64_t {
  return (C.NSURLSessionTask_countOfBytesExpectedToSend(goobj.Self()))
}
func (goobj NSURLSessionTask) CountOfBytesExpectedToReceive() C.int64_t {
  return (C.NSURLSessionTask_countOfBytesExpectedToReceive(goobj.Self()))
}
func (goobj NSURLSessionTask) TaskDescription() NSString {
  return NSString_(Id(C.NSURLSessionTask_taskDescription(goobj.Self())))
}
func (goobj NSURLSessionTask) SetTaskDescription(taskDescription NSString)  {
  C.NSURLSessionTask_setTaskDescription(goobj.Self(), taskDescription.Self())
}
func (goobj NSURLSessionTask) State() C.NSURLSessionTaskState {
  return (C.NSURLSessionTask_state(goobj.Self()))
}
func (goobj NSURLSessionTask) Error() NSError {
  return NSError_(Id(C.NSURLSessionTask_error(goobj.Self())))
}

type NSURLSessionDataTask struct {
  NSURLSessionTask
}
func NSURLSessionDataTask_(i Id) NSURLSessionDataTask {
  return NSURLSessionDataTask{ NSURLSessionTask_(i) }
}
func NSURLSessionDataTask_init() NSURLSessionDataTask {
  p := Id(C.NSURLSessionDataTask_init())
  return NSURLSessionDataTask_(p)
}


type NSURLSessionUploadTask struct {
  NSURLSessionDataTask
}
func NSURLSessionUploadTask_(i Id) NSURLSessionUploadTask {
  return NSURLSessionUploadTask{ NSURLSessionDataTask_(i) }
}
func NSURLSessionUploadTask_init() NSURLSessionUploadTask {
  p := Id(C.NSURLSessionUploadTask_init())
  return NSURLSessionUploadTask_(p)
}


type NSURLSessionDownloadTask struct {
  NSURLSessionTask
}
func NSURLSessionDownloadTask_(i Id) NSURLSessionDownloadTask {
  return NSURLSessionDownloadTask{ NSURLSessionTask_(i) }
}
func NSURLSessionDownloadTask_init() NSURLSessionDownloadTask {
  p := Id(C.NSURLSessionDownloadTask_init())
  return NSURLSessionDownloadTask_(p)
}
//REJECT: completionHandler
//func (goobj NSURLSessionDownloadTask) CancelByProducingResumeData(completionHandler *INVALID TYPE*)  {
//  C.NSURLSessionDownloadTask_cancelByProducingResumeData(goobj.Self(), completionHandler)
//}

type NSURLSessionConfiguration struct {
  NSObject
}
func NSURLSessionConfiguration_(i Id) NSURLSessionConfiguration {
  return NSURLSessionConfiguration{ NSObject_(i) }
}
func NSURLSessionConfiguration_init() NSURLSessionConfiguration {
  p := Id(C.NSURLSessionConfiguration_init())
  return NSURLSessionConfiguration_(p)
}
func (goobj NSURLSessionConfiguration) Identifier() NSString {
  return NSString_(Id(C.NSURLSessionConfiguration_identifier(goobj.Self())))
}
//REJECT: NSURLRequestCachePolicy
//func (goobj NSURLSessionConfiguration) RequestCachePolicy() C.NSURLRequestCachePolicy {
//  return (C.NSURLSessionConfiguration_requestCachePolicy(goobj.Self()))
//}
//REJECT: requestCachePolicy
//func (goobj NSURLSessionConfiguration) SetRequestCachePolicy(requestCachePolicy C.NSURLRequestCachePolicy)  {
//  C.NSURLSessionConfiguration_setRequestCachePolicy(goobj.Self(), requestCachePolicy)
//}
//REJECT: NSTimeInterval
//func (goobj NSURLSessionConfiguration) TimeoutIntervalForRequest() C.NSTimeInterval {
//  return (C.NSURLSessionConfiguration_timeoutIntervalForRequest(goobj.Self()))
//}
//REJECT: timeoutIntervalForRequest
//func (goobj NSURLSessionConfiguration) SetTimeoutIntervalForRequest(timeoutIntervalForRequest C.NSTimeInterval)  {
//  C.NSURLSessionConfiguration_setTimeoutIntervalForRequest(goobj.Self(), timeoutIntervalForRequest)
//}
//REJECT: NSTimeInterval
//func (goobj NSURLSessionConfiguration) TimeoutIntervalForResource() C.NSTimeInterval {
//  return (C.NSURLSessionConfiguration_timeoutIntervalForResource(goobj.Self()))
//}
//REJECT: timeoutIntervalForResource
//func (goobj NSURLSessionConfiguration) SetTimeoutIntervalForResource(timeoutIntervalForResource C.NSTimeInterval)  {
//  C.NSURLSessionConfiguration_setTimeoutIntervalForResource(goobj.Self(), timeoutIntervalForResource)
//}
//REJECT: NSURLRequestNetworkServiceType
//func (goobj NSURLSessionConfiguration) NetworkServiceType() C.NSURLRequestNetworkServiceType {
//  return (C.NSURLSessionConfiguration_networkServiceType(goobj.Self()))
//}
//REJECT: networkServiceType
//func (goobj NSURLSessionConfiguration) SetNetworkServiceType(networkServiceType C.NSURLRequestNetworkServiceType)  {
//  C.NSURLSessionConfiguration_setNetworkServiceType(goobj.Self(), networkServiceType)
//}
func (goobj NSURLSessionConfiguration) AllowsCellularAccess() C.bool {
  return (C.NSURLSessionConfiguration_allowsCellularAccess(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetAllowsCellularAccess(allowsCellularAccess C.bool)  {
  C.NSURLSessionConfiguration_setAllowsCellularAccess(goobj.Self(), allowsCellularAccess)
}
//unacceptalble-method
//func (goobj NSURLSessionConfiguration) IsDiscretionary() C.char {
//  return (C.NSURLSessionConfiguration_isDiscretionary(goobj.Self()))
//}
//unacceptalble-method
//func (goobj NSURLSessionConfiguration) SetDiscretionary(discretionary C.bool)  {
//  C.NSURLSessionConfiguration_setDiscretionary(goobj.Self(), discretionary)
//}
//unacceptalble-method
//func (goobj NSURLSessionConfiguration) SessionSendsLaunchEvents() C.bool {
//  return (C.NSURLSessionConfiguration_sessionSendsLaunchEvents(goobj.Self()))
//}
//unacceptalble-method
//func (goobj NSURLSessionConfiguration) SetSessionSendsLaunchEvents(sessionSendsLaunchEvents C.bool)  {
//  C.NSURLSessionConfiguration_setSessionSendsLaunchEvents(goobj.Self(), sessionSendsLaunchEvents)
//}
func (goobj NSURLSessionConfiguration) ConnectionProxyDictionary() NSDictionary {
  return NSDictionary_(Id(C.NSURLSessionConfiguration_connectionProxyDictionary(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetConnectionProxyDictionary(connectionProxyDictionary NSDictionary)  {
  C.NSURLSessionConfiguration_setConnectionProxyDictionary(goobj.Self(), connectionProxyDictionary.Self())
}
func (goobj NSURLSessionConfiguration) TLSMinimumSupportedProtocol() C.SSLProtocol {
  return (C.NSURLSessionConfiguration_TLSMinimumSupportedProtocol(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetTLSMinimumSupportedProtocol(TLSMinimumSupportedProtocol C.SSLProtocol)  {
  C.NSURLSessionConfiguration_setTLSMinimumSupportedProtocol(goobj.Self(), TLSMinimumSupportedProtocol)
}
func (goobj NSURLSessionConfiguration) TLSMaximumSupportedProtocol() C.SSLProtocol {
  return (C.NSURLSessionConfiguration_TLSMaximumSupportedProtocol(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetTLSMaximumSupportedProtocol(TLSMaximumSupportedProtocol C.SSLProtocol)  {
  C.NSURLSessionConfiguration_setTLSMaximumSupportedProtocol(goobj.Self(), TLSMaximumSupportedProtocol)
}
func (goobj NSURLSessionConfiguration) HTTPShouldUsePipelining() C.bool {
  return (C.NSURLSessionConfiguration_HTTPShouldUsePipelining(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetHTTPShouldUsePipelining(HTTPShouldUsePipelining C.bool)  {
  C.NSURLSessionConfiguration_setHTTPShouldUsePipelining(goobj.Self(), HTTPShouldUsePipelining)
}
func (goobj NSURLSessionConfiguration) HTTPShouldSetCookies() C.bool {
  return (C.NSURLSessionConfiguration_HTTPShouldSetCookies(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetHTTPShouldSetCookies(HTTPShouldSetCookies C.bool)  {
  C.NSURLSessionConfiguration_setHTTPShouldSetCookies(goobj.Self(), HTTPShouldSetCookies)
}
func (goobj NSURLSessionConfiguration) HTTPCookieAcceptPolicy() C.NSHTTPCookieAcceptPolicy {
  return (C.NSURLSessionConfiguration_HTTPCookieAcceptPolicy(goobj.Self()))
}
func (goobj NSURLSessionConfiguration) SetHTTPCookieAcceptPolicy(HTTPCookieAcceptPolicy C.NSHTTPCookieAcceptPolicy)  {
  C.NSURLSessionConfiguration_setHTTPCookieAcceptPolicy(goobj.Self(), HTTPCookieAcceptPolicy)
}
func (goobj NSURLSessionConfiguration) HTTPAdditionalHeaders() NSDictionary {
  return NSDictionary_(Id(C.NSURLSessionConfiguration_HTTPAdditionalHeaders(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetHTTPAdditionalHeaders(HTTPAdditionalHeaders NSDictionary)  {
  C.NSURLSessionConfiguration_setHTTPAdditionalHeaders(goobj.Self(), HTTPAdditionalHeaders.Self())
}
//REJECT: NSInteger
//func (goobj NSURLSessionConfiguration) HTTPMaximumConnectionsPerHost() C.NSInteger {
//  return (C.NSURLSessionConfiguration_HTTPMaximumConnectionsPerHost(goobj.Self()))
//}
//REJECT: HTTPMaximumConnectionsPerHost
//func (goobj NSURLSessionConfiguration) SetHTTPMaximumConnectionsPerHost(HTTPMaximumConnectionsPerHost C.NSInteger)  {
//  C.NSURLSessionConfiguration_setHTTPMaximumConnectionsPerHost(goobj.Self(), HTTPMaximumConnectionsPerHost)
//}
func (goobj NSURLSessionConfiguration) HTTPCookieStorage() NSHTTPCookieStorage {
  return NSHTTPCookieStorage_(Id(C.NSURLSessionConfiguration_HTTPCookieStorage(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetHTTPCookieStorage(HTTPCookieStorage NSHTTPCookieStorage)  {
  C.NSURLSessionConfiguration_setHTTPCookieStorage(goobj.Self(), HTTPCookieStorage.Self())
}
func (goobj NSURLSessionConfiguration) URLCredentialStorage() NSURLCredentialStorage {
  return NSURLCredentialStorage_(Id(C.NSURLSessionConfiguration_URLCredentialStorage(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetURLCredentialStorage(URLCredentialStorage NSURLCredentialStorage)  {
  C.NSURLSessionConfiguration_setURLCredentialStorage(goobj.Self(), URLCredentialStorage.Self())
}
func (goobj NSURLSessionConfiguration) URLCache() NSURLCache {
  return NSURLCache_(Id(C.NSURLSessionConfiguration_URLCache(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetURLCache(URLCache NSURLCache)  {
  C.NSURLSessionConfiguration_setURLCache(goobj.Self(), URLCache.Self())
}
func (goobj NSURLSessionConfiguration) ProtocolClasses() NSArray {
  return NSArray_(Id(C.NSURLSessionConfiguration_protocolClasses(goobj.Self())))
}
func (goobj NSURLSessionConfiguration) SetProtocolClasses(protocolClasses NSArray)  {
  C.NSURLSessionConfiguration_setProtocolClasses(goobj.Self(), protocolClasses.Self())
}
func NSURLSessionConfiguration_defaultSessionConfiguration() NSURLSessionConfiguration {
  return NSURLSessionConfiguration_(Id(C.NSURLSessionConfiguration__defaultSessionConfiguration()))
}
func NSURLSessionConfiguration_ephemeralSessionConfiguration() NSURLSessionConfiguration {
  return NSURLSessionConfiguration_(Id(C.NSURLSessionConfiguration__ephemeralSessionConfiguration()))
}
func NSURLSessionConfiguration_backgroundSessionConfiguration(identifier NSString) NSURLSessionConfiguration {
  return NSURLSessionConfiguration_(Id(C.NSURLSessionConfiguration__backgroundSessionConfiguration(identifier.Self())))
}
type NSUUID struct {
  NSObject
}
func NSUUID_(i Id) NSUUID {
  return NSUUID{ NSObject_(i) }
}
func NSUUID_init() NSUUID {
  return NSUUID_(Id(C.NSUUID_init()))
}
func NSUUID_initWithUUIDString(string NSString) NSUUID {
  return NSUUID_(Id(C.NSUUID_initWithUUIDString(string.Self())))
}
//REJECT: bytes
//func NSUUID_initWithUUIDBytes(bytes C.uuid_t) NSUUID {
//  return NSUUID_(Id(C.NSUUID_initWithUUIDBytes(bytes)))
//}
//REJECT: uuid
//func (goobj NSUUID) GetUUIDBytes(uuid C.uuid_t)  {
//  C.NSUUID_getUUIDBytes(goobj.Self(), uuid)
//}
func (goobj NSUUID) UUIDString() NSString {
  return NSString_(Id(C.NSUUID_UUIDString(goobj.Self())))
}
func NSUUID_uUID() Id {
  return Id_(C.NSUUID__UUID())
}
type NSArchiver struct {
  NSCoder
}
func NSArchiver_(i Id) NSArchiver {
  return NSArchiver{ NSCoder_(i) }
}
func NSArchiver_init() NSArchiver {
  p := Id(C.NSArchiver_init())
  return NSArchiver_(p)
}
func (goobj NSArchiver) InitForWritingWithMutableData(mdata NSMutableData) Id {
  return Id_(C.NSArchiver_initForWritingWithMutableData(goobj.Self(), mdata.Self()))
}
func (goobj NSArchiver) ArchiverData() NSMutableData {
  return NSMutableData_(Id(C.NSArchiver_archiverData(goobj.Self())))
}
func (goobj NSArchiver) EncodeRootObject(rootObject Id)  {
  C.NSArchiver_encodeRootObject(goobj.Self(), unsafe.Pointer(rootObject))
}
func (goobj NSArchiver) EncodeConditionalObject(object Id)  {
  C.NSArchiver_encodeConditionalObject(goobj.Self(), unsafe.Pointer(object))
}
func (goobj NSArchiver) EncodeClassNameIntoClassName(trueName NSString, inArchiveName NSString)  {
  C.NSArchiver_encodeClassNameIntoClassName(goobj.Self(), trueName.Self(), inArchiveName.Self())
}
func (goobj NSArchiver) ClassNameEncodedForTrueClassName(trueName NSString) NSString {
  return NSString_(Id(C.NSArchiver_classNameEncodedForTrueClassName(goobj.Self(), trueName.Self())))
}
func (goobj NSArchiver) ReplaceObjectWithObject(object Id, newObject Id)  {
  C.NSArchiver_replaceObjectWithObject(goobj.Self(), unsafe.Pointer(object), unsafe.Pointer(newObject))
}
func NSArchiver_archivedDataWithRootObject(rootObject Id) NSData {
  return NSData_(Id(C.NSArchiver__archivedDataWithRootObject(unsafe.Pointer(rootObject))))
}
func NSArchiver_archiveRootObjectToFile(rootObject Id, path NSString) C.bool {
  return (C.NSArchiver__archiveRootObjectToFile(unsafe.Pointer(rootObject), path.Self()))
}
type NSUnarchiver struct {
  NSCoder
}
func NSUnarchiver_(i Id) NSUnarchiver {
  return NSUnarchiver{ NSCoder_(i) }
}
func NSUnarchiver_init() NSUnarchiver {
  p := Id(C.NSUnarchiver_init())
  return NSUnarchiver_(p)
}
func (goobj NSUnarchiver) InitForReadingWithData(data NSData) Id {
  return Id_(C.NSUnarchiver_initForReadingWithData(goobj.Self(), data.Self()))
}
//REJECT: zone
//func (goobj NSUnarchiver) SetObjectZone(zone C.NSZone)  {
//  C.NSUnarchiver_setObjectZone(goobj.Self(), zone)
//}
//REJECT: NSZone
//func (goobj NSUnarchiver) ObjectZone() C.NSZone {
//  return (C.NSUnarchiver_objectZone(goobj.Self()))
//}
func (goobj NSUnarchiver) IsAtEnd() C.bool {
  return (C.NSUnarchiver_isAtEnd(goobj.Self()))
}
func (goobj NSUnarchiver) SystemVersion() C.uint {
  return (C.NSUnarchiver_systemVersion(goobj.Self()))
}
func (goobj NSUnarchiver) DecodeClassNameAsClassName(inArchiveName NSString, trueName NSString)  {
  C.NSUnarchiver_decodeClassNameAsClassName(goobj.Self(), inArchiveName.Self(), trueName.Self())
}
func (goobj NSUnarchiver) ClassNameDecodedForArchiveClassName(inArchiveName NSString) NSString {
  return NSString_(Id(C.NSUnarchiver_classNameDecodedForArchiveClassName(goobj.Self(), inArchiveName.Self())))
}
func (goobj NSUnarchiver) ReplaceObjectWithObject(object Id, newObject Id)  {
  C.NSUnarchiver_replaceObjectWithObject(goobj.Self(), unsafe.Pointer(object), unsafe.Pointer(newObject))
}
func NSUnarchiver_unarchiveObjectWithData(data NSData) Id {
  return Id_(C.NSUnarchiver__unarchiveObjectWithData(data.Self()))
}
func NSUnarchiver_unarchiveObjectWithFile(path NSString) Id {
  return Id_(C.NSUnarchiver__unarchiveObjectWithFile(path.Self()))
}
func NSUnarchiver_decodeClassNameAsClassName(inArchiveName NSString, trueName NSString)  {
  C.NSUnarchiver__decodeClassNameAsClassName(inArchiveName.Self(), trueName.Self())
}
func NSUnarchiver_classNameDecodedForArchiveClassName(inArchiveName NSString) NSString {
  return NSString_(Id(C.NSUnarchiver__classNameDecodedForArchiveClassName(inArchiveName.Self())))
}
type NSCalendarDate struct {
  NSDate
}
func NSCalendarDate_(i Id) NSCalendarDate {
  return NSCalendarDate{ NSDate_(i) }
}
func NSCalendarDate_init() NSCalendarDate {
  p := Id(C.NSCalendarDate_init())
  return NSCalendarDate_(p)
}
//REJECT: year month day hour minute second
//func (goobj NSCalendarDate) DateByAddingYearsMonthsDaysHoursMinutesSeconds(year C.NSInteger, month C.NSInteger, day C.NSInteger, hour C.NSInteger, minute C.NSInteger, second C.NSInteger) NSCalendarDate {
//  return NSCalendarDate_(Id(C.NSCalendarDate_dateByAddingYearsMonthsDaysHoursMinutesSeconds(goobj.Self(), year, month, day, hour, minute, second)))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) DayOfCommonEra() C.NSInteger {
//  return (C.NSCalendarDate_dayOfCommonEra(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) DayOfMonth() C.NSInteger {
//  return (C.NSCalendarDate_dayOfMonth(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) DayOfWeek() C.NSInteger {
//  return (C.NSCalendarDate_dayOfWeek(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) DayOfYear() C.NSInteger {
//  return (C.NSCalendarDate_dayOfYear(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) HourOfDay() C.NSInteger {
//  return (C.NSCalendarDate_hourOfDay(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) MinuteOfHour() C.NSInteger {
//  return (C.NSCalendarDate_minuteOfHour(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) MonthOfYear() C.NSInteger {
//  return (C.NSCalendarDate_monthOfYear(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) SecondOfMinute() C.NSInteger {
//  return (C.NSCalendarDate_secondOfMinute(goobj.Self()))
//}
//REJECT: NSInteger
//func (goobj NSCalendarDate) YearOfCommonEra() C.NSInteger {
//  return (C.NSCalendarDate_yearOfCommonEra(goobj.Self()))
//}
func (goobj NSCalendarDate) CalendarFormat() NSString {
  return NSString_(Id(C.NSCalendarDate_calendarFormat(goobj.Self())))
}
func (goobj NSCalendarDate) DescriptionWithCalendarFormatLocale(format NSString, locale Id) NSString {
  return NSString_(Id(C.NSCalendarDate_descriptionWithCalendarFormatLocale(goobj.Self(), format.Self(), unsafe.Pointer(locale))))
}
func (goobj NSCalendarDate) DescriptionWithCalendarFormat(format NSString) NSString {
  return NSString_(Id(C.NSCalendarDate_descriptionWithCalendarFormat(goobj.Self(), format.Self())))
}
func (goobj NSCalendarDate) DescriptionWithLocale(locale Id) NSString {
  return NSString_(Id(C.NSCalendarDate_descriptionWithLocale(goobj.Self(), unsafe.Pointer(locale))))
}
func (goobj NSCalendarDate) TimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSCalendarDate_timeZone(goobj.Self())))
}
func NSCalendarDate_initWithStringCalendarFormatLocale(description NSString, format NSString, locale Id) NSCalendarDate {
  return NSCalendarDate_(Id(C.NSCalendarDate_initWithStringCalendarFormatLocale(description.Self(), format.Self(), unsafe.Pointer(locale))))
}
func NSCalendarDate_initWithStringCalendarFormat(description NSString, format NSString) NSCalendarDate {
  return NSCalendarDate_(Id(C.NSCalendarDate_initWithStringCalendarFormat(description.Self(), format.Self())))
}
func NSCalendarDate_initWithString(description NSString) NSCalendarDate {
  return NSCalendarDate_(Id(C.NSCalendarDate_initWithString(description.Self())))
}
//REJECT: year
//func NSCalendarDate_initWithYearMonthDayHourMinuteSecondTimeZone(year C.NSInteger, month C.uint, day C.uint, hour C.uint, minute C.uint, second C.uint, aTimeZone NSTimeZone) NSCalendarDate {
//  return NSCalendarDate_(Id(C.NSCalendarDate_initWithYearMonthDayHourMinuteSecondTimeZone(year, month, day, hour, minute, second, aTimeZone.Self())))
//}
func (goobj NSCalendarDate) SetCalendarFormat(format NSString)  {
  C.NSCalendarDate_setCalendarFormat(goobj.Self(), format.Self())
}
func (goobj NSCalendarDate) SetTimeZone(aTimeZone NSTimeZone)  {
  C.NSCalendarDate_setTimeZone(goobj.Self(), aTimeZone.Self())
}
//REJECT: yp mop dp hp mip sp
//func (goobj NSCalendarDate) YearsMonthsDaysHoursMinutesSecondsSinceDate(yp C.NSInteger, mop C.NSInteger, dp C.NSInteger, hp C.NSInteger, mip C.NSInteger, sp C.NSInteger, date NSCalendarDate)  {
//  C.NSCalendarDate_yearsMonthsDaysHoursMinutesSecondsSinceDate(goobj.Self(), yp, mop, dp, hp, mip, sp, date.Self())
//}
func NSCalendarDate_calendarDate() Id {
  return Id_(C.NSCalendarDate__calendarDate())
}
func NSCalendarDate_dateWithStringCalendarFormatLocale(description NSString, format NSString, locale Id) Id {
  return Id_(C.NSCalendarDate__dateWithStringCalendarFormatLocale(description.Self(), format.Self(), unsafe.Pointer(locale)))
}
func NSCalendarDate_dateWithStringCalendarFormat(description NSString, format NSString) Id {
  return Id_(C.NSCalendarDate__dateWithStringCalendarFormat(description.Self(), format.Self()))
}
//REJECT: year
//func NSCalendarDate_dateWithYearMonthDayHourMinuteSecondTimeZone(year C.NSInteger, month C.uint, day C.uint, hour C.uint, minute C.uint, second C.uint, aTimeZone NSTimeZone) Id {
//  return Id_(C.NSCalendarDate__dateWithYearMonthDayHourMinuteSecondTimeZone(year, month, day, hour, minute, second, aTimeZone.Self()))
//}
type NSConnection struct {
  NSObject
}
func NSConnection_(i Id) NSConnection {
  return NSConnection{ NSObject_(i) }
}
func NSConnection_init() NSConnection {
  p := Id(C.NSConnection_init())
  return NSConnection_(p)
}
func (goobj NSConnection) Statistics() NSDictionary {
  return NSDictionary_(Id(C.NSConnection_statistics(goobj.Self())))
}
//REJECT: ti
//func (goobj NSConnection) SetRequestTimeout(ti C.NSTimeInterval)  {
//  C.NSConnection_setRequestTimeout(goobj.Self(), ti)
//}
//REJECT: NSTimeInterval
//func (goobj NSConnection) RequestTimeout() C.NSTimeInterval {
//  return (C.NSConnection_requestTimeout(goobj.Self()))
//}
//REJECT: ti
//func (goobj NSConnection) SetReplyTimeout(ti C.NSTimeInterval)  {
//  C.NSConnection_setReplyTimeout(goobj.Self(), ti)
//}
//REJECT: NSTimeInterval
//func (goobj NSConnection) ReplyTimeout() C.NSTimeInterval {
//  return (C.NSConnection_replyTimeout(goobj.Self()))
//}
func (goobj NSConnection) SetRootObject(anObject Id)  {
  C.NSConnection_setRootObject(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSConnection) RootObject() Id {
  return Id_(C.NSConnection_rootObject(goobj.Self()))
}
//REJECT: NSDistantObject
//func (goobj NSConnection) RootProxy() NSDistantObject {
//  return NSDistantObject_(Id(C.NSConnection_rootProxy(goobj.Self())))
//}
func (goobj NSConnection) SetDelegate(anObject Id)  {
  C.NSConnection_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSConnection) Delegate() Id {
  return Id_(C.NSConnection_delegate(goobj.Self()))
}
func (goobj NSConnection) SetIndependentConversationQueueing(yorn C.bool)  {
  C.NSConnection_setIndependentConversationQueueing(goobj.Self(), yorn)
}
func (goobj NSConnection) IndependentConversationQueueing() C.bool {
  return (C.NSConnection_independentConversationQueueing(goobj.Self()))
}
func (goobj NSConnection) IsValid() C.bool {
  return (C.NSConnection_isValid(goobj.Self()))
}
func (goobj NSConnection) Invalidate()  {
  C.NSConnection_invalidate(goobj.Self())
}
func (goobj NSConnection) AddRequestMode(rmode NSString)  {
  C.NSConnection_addRequestMode(goobj.Self(), rmode.Self())
}
func (goobj NSConnection) RemoveRequestMode(rmode NSString)  {
  C.NSConnection_removeRequestMode(goobj.Self(), rmode.Self())
}
func (goobj NSConnection) RequestModes() NSArray {
  return NSArray_(Id(C.NSConnection_requestModes(goobj.Self())))
}
func (goobj NSConnection) RegisterName(name NSString) C.bool {
  return (C.NSConnection_registerName(goobj.Self(), name.Self()))
}
func (goobj NSConnection) RegisterNameWithNameServer(name NSString, server NSPortNameServer) C.bool {
  return (C.NSConnection_registerNameWithNameServer(goobj.Self(), name.Self(), server.Self()))
}
func NSConnection_initWithReceivePortSendPort(receivePort NSPort, sendPort NSPort) NSConnection {
  return NSConnection_(Id(C.NSConnection_initWithReceivePortSendPort(receivePort.Self(), sendPort.Self())))
}
func (goobj NSConnection) SendPort() NSPort {
  return NSPort_(Id(C.NSConnection_sendPort(goobj.Self())))
}
func (goobj NSConnection) ReceivePort() NSPort {
  return NSPort_(Id(C.NSConnection_receivePort(goobj.Self())))
}
func (goobj NSConnection) EnableMultipleThreads()  {
  C.NSConnection_enableMultipleThreads(goobj.Self())
}
func (goobj NSConnection) MultipleThreadsEnabled() C.bool {
  return (C.NSConnection_multipleThreadsEnabled(goobj.Self()))
}
func (goobj NSConnection) AddRunLoop(runloop NSRunLoop)  {
  C.NSConnection_addRunLoop(goobj.Self(), runloop.Self())
}
func (goobj NSConnection) RemoveRunLoop(runloop NSRunLoop)  {
  C.NSConnection_removeRunLoop(goobj.Self(), runloop.Self())
}
func (goobj NSConnection) RunInNewThread()  {
  C.NSConnection_runInNewThread(goobj.Self())
}
func (goobj NSConnection) RemoteObjects() NSArray {
  return NSArray_(Id(C.NSConnection_remoteObjects(goobj.Self())))
}
func (goobj NSConnection) LocalObjects() NSArray {
  return NSArray_(Id(C.NSConnection_localObjects(goobj.Self())))
}
func (goobj NSConnection) DispatchWithComponents(components NSArray)  {
  C.NSConnection_dispatchWithComponents(goobj.Self(), components.Self())
}
func NSConnection_allConnections() NSArray {
  return NSArray_(Id(C.NSConnection__allConnections()))
}
func NSConnection_defaultConnection() NSConnection {
  return NSConnection_(Id(C.NSConnection__defaultConnection()))
}
func NSConnection_connectionWithRegisteredNameHost(name NSString, hostName NSString) Id {
  return Id_(C.NSConnection__connectionWithRegisteredNameHost(name.Self(), hostName.Self()))
}
func NSConnection_connectionWithRegisteredNameHostUsingNameServer(name NSString, hostName NSString, server NSPortNameServer) Id {
  return Id_(C.NSConnection__connectionWithRegisteredNameHostUsingNameServer(name.Self(), hostName.Self(), server.Self()))
}
//REJECT: NSDistantObject
//func NSConnection_rootProxyForConnectionWithRegisteredNameHost(name NSString, hostName NSString) NSDistantObject {
//  return NSDistantObject_(Id(C.NSConnection__rootProxyForConnectionWithRegisteredNameHost(name.Self(), hostName.Self())))
//}
//REJECT: NSDistantObject
//func NSConnection_rootProxyForConnectionWithRegisteredNameHostUsingNameServer(name NSString, hostName NSString, server NSPortNameServer) NSDistantObject {
//  return NSDistantObject_(Id(C.NSConnection__rootProxyForConnectionWithRegisteredNameHostUsingNameServer(name.Self(), hostName.Self(), server.Self())))
//}
func NSConnection_serviceConnectionWithNameRootObjectUsingNameServer(name NSString, root Id, server NSPortNameServer) Id {
  return Id_(C.NSConnection__serviceConnectionWithNameRootObjectUsingNameServer(name.Self(), unsafe.Pointer(root), server.Self()))
}
func NSConnection_serviceConnectionWithNameRootObject(name NSString, root Id) Id {
  return Id_(C.NSConnection__serviceConnectionWithNameRootObject(name.Self(), unsafe.Pointer(root)))
}
func NSConnection_connectionWithReceivePortSendPort(receivePort NSPort, sendPort NSPort) Id {
  return Id_(C.NSConnection__connectionWithReceivePortSendPort(receivePort.Self(), sendPort.Self()))
}
func NSConnection_currentConversation() Id {
  return Id_(C.NSConnection__currentConversation())
}
type NSDistantObjectRequest struct {
  NSObject
}
func NSDistantObjectRequest_(i Id) NSDistantObjectRequest {
  return NSDistantObjectRequest{ NSObject_(i) }
}
func NSDistantObjectRequest_init() NSDistantObjectRequest {
  p := Id(C.NSDistantObjectRequest_init())
  return NSDistantObjectRequest_(p)
}
//REJECT: NSInvocation
//func (goobj NSDistantObjectRequest) Invocation() NSInvocation {
//  return NSInvocation_(Id(C.NSDistantObjectRequest_invocation(goobj.Self())))
//}
func (goobj NSDistantObjectRequest) Connection() NSConnection {
  return NSConnection_(Id(C.NSDistantObjectRequest_connection(goobj.Self())))
}
func (goobj NSDistantObjectRequest) Conversation() Id {
  return Id_(C.NSDistantObjectRequest_conversation(goobj.Self()))
}
func (goobj NSDistantObjectRequest) ReplyWithException(exception NSException)  {
  C.NSDistantObjectRequest_replyWithException(goobj.Self(), exception.Self())
}



type NSDistributedNotificationCenter struct {
  NSNotificationCenter
}
func NSDistributedNotificationCenter_(i Id) NSDistributedNotificationCenter {
  return NSDistributedNotificationCenter{ NSNotificationCenter_(i) }
}
func NSDistributedNotificationCenter_init() NSDistributedNotificationCenter {
  p := Id(C.NSDistributedNotificationCenter_init())
  return NSDistributedNotificationCenter_(p)
}
//REJECT: selector
//func (goobj NSDistributedNotificationCenter) AddObserverSelectorNameObjectSuspensionBehavior(observer Id, selector C.SEL, name NSString, object NSString, suspensionBehavior C.NSNotificationSuspensionBehavior)  {
//  C.NSDistributedNotificationCenter_addObserverSelectorNameObjectSuspensionBehavior(goobj.Self(), unsafe.Pointer(observer), selector, name.Self(), object.Self(), suspensionBehavior)
//}
func (goobj NSDistributedNotificationCenter) PostNotificationNameObjectUserInfoDeliverImmediately(name NSString, object NSString, userInfo NSDictionary, deliverImmediately C.bool)  {
  C.NSDistributedNotificationCenter_postNotificationNameObjectUserInfoDeliverImmediately(goobj.Self(), name.Self(), object.Self(), userInfo.Self(), deliverImmediately)
}
func (goobj NSDistributedNotificationCenter) PostNotificationNameObjectUserInfoOptions(name NSString, object NSString, userInfo NSDictionary, options C.uint)  {
  C.NSDistributedNotificationCenter_postNotificationNameObjectUserInfoOptions(goobj.Self(), name.Self(), object.Self(), userInfo.Self(), options)
}
func (goobj NSDistributedNotificationCenter) SetSuspended(suspended C.bool)  {
  C.NSDistributedNotificationCenter_setSuspended(goobj.Self(), suspended)
}
func (goobj NSDistributedNotificationCenter) Suspended() C.bool {
  return (C.NSDistributedNotificationCenter_suspended(goobj.Self()))
}
//REJECT: aSelector
//func (goobj NSDistributedNotificationCenter) AddObserverSelectorNameObject(observer Id, aSelector C.SEL, aName NSString, anObject NSString)  {
//  C.NSDistributedNotificationCenter_addObserverSelectorNameObject(goobj.Self(), unsafe.Pointer(observer), aSelector, aName.Self(), anObject.Self())
//}
func (goobj NSDistributedNotificationCenter) PostNotificationNameObject(aName NSString, anObject NSString)  {
  C.NSDistributedNotificationCenter_postNotificationNameObject(goobj.Self(), aName.Self(), anObject.Self())
}
func (goobj NSDistributedNotificationCenter) PostNotificationNameObjectUserInfo(aName NSString, anObject NSString, aUserInfo NSDictionary)  {
  C.NSDistributedNotificationCenter_postNotificationNameObjectUserInfo(goobj.Self(), aName.Self(), anObject.Self(), aUserInfo.Self())
}
func (goobj NSDistributedNotificationCenter) RemoveObserverNameObject(observer Id, aName NSString, anObject NSString)  {
  C.NSDistributedNotificationCenter_removeObserverNameObject(goobj.Self(), unsafe.Pointer(observer), aName.Self(), anObject.Self())
}
func NSDistributedNotificationCenter_notificationCenterForType(notificationCenterType NSString) NSDistributedNotificationCenter {
  return NSDistributedNotificationCenter_(Id(C.NSDistributedNotificationCenter__notificationCenterForType(notificationCenterType.Self())))
}
func NSDistributedNotificationCenter_defaultCenter() Id {
  return Id_(C.NSDistributedNotificationCenter__defaultCenter())
}
type NSPortCoder struct {
  NSCoder
}
func NSPortCoder_(i Id) NSPortCoder {
  return NSPortCoder{ NSCoder_(i) }
}
func NSPortCoder_init() NSPortCoder {
  p := Id(C.NSPortCoder_init())
  return NSPortCoder_(p)
}
func (goobj NSPortCoder) IsBycopy() C.bool {
  return (C.NSPortCoder_isBycopy(goobj.Self()))
}
func (goobj NSPortCoder) IsByref() C.bool {
  return (C.NSPortCoder_isByref(goobj.Self()))
}
func (goobj NSPortCoder) EncodePortObject(aport NSPort)  {
  C.NSPortCoder_encodePortObject(goobj.Self(), aport.Self())
}
func (goobj NSPortCoder) DecodePortObject() NSPort {
  return NSPort_(Id(C.NSPortCoder_decodePortObject(goobj.Self())))
}
func (goobj NSPortCoder) Connection() NSConnection {
  return NSConnection_(Id(C.NSPortCoder_connection(goobj.Self())))
}
func NSPortCoder_initWithReceivePortSendPortComponents(rcvPort NSPort, sndPort NSPort, comps NSArray) NSPortCoder {
  return NSPortCoder_(Id(C.NSPortCoder_initWithReceivePortSendPortComponents(rcvPort.Self(), sndPort.Self(), comps.Self())))
}
func (goobj NSPortCoder) Dispatch()  {
  C.NSPortCoder_dispatch(goobj.Self())
}
func NSPortCoder_portCoderWithReceivePortSendPortComponents(rcvPort NSPort, sndPort NSPort, comps NSArray)  {
  C.NSPortCoder__portCoderWithReceivePortSendPortComponents(rcvPort.Self(), sndPort.Self(), comps.Self())
}
type NSPortMessage struct {
  NSObject
}
func NSPortMessage_(i Id) NSPortMessage {
  return NSPortMessage{ NSObject_(i) }
}
func NSPortMessage_init() NSPortMessage {
  p := Id(C.NSPortMessage_init())
  return NSPortMessage_(p)
}
func NSPortMessage_initWithSendPortReceivePortComponents(sendPort NSPort, replyPort NSPort, components NSArray) NSPortMessage {
  return NSPortMessage_(Id(C.NSPortMessage_initWithSendPortReceivePortComponents(sendPort.Self(), replyPort.Self(), components.Self())))
}
func (goobj NSPortMessage) Components() NSArray {
  return NSArray_(Id(C.NSPortMessage_components(goobj.Self())))
}
func (goobj NSPortMessage) ReceivePort() NSPort {
  return NSPort_(Id(C.NSPortMessage_receivePort(goobj.Self())))
}
func (goobj NSPortMessage) SendPort() NSPort {
  return NSPort_(Id(C.NSPortMessage_sendPort(goobj.Self())))
}
func (goobj NSPortMessage) SendBeforeDate(date NSDate) C.bool {
  return (C.NSPortMessage_sendBeforeDate(goobj.Self(), date.Self()))
}
func (goobj NSPortMessage) Msgid() C.uint32_t {
  return (C.NSPortMessage_msgid(goobj.Self()))
}
func (goobj NSPortMessage) SetMsgid(msgid C.uint32_t)  {
  C.NSPortMessage_setMsgid(goobj.Self(), msgid)
}

type NSPortNameServer struct {
  NSObject
}
func NSPortNameServer_(i Id) NSPortNameServer {
  return NSPortNameServer{ NSObject_(i) }
}
func NSPortNameServer_init() NSPortNameServer {
  p := Id(C.NSPortNameServer_init())
  return NSPortNameServer_(p)
}
func (goobj NSPortNameServer) PortForName(name NSString) NSPort {
  return NSPort_(Id(C.NSPortNameServer_portForName(goobj.Self(), name.Self())))
}
func (goobj NSPortNameServer) PortForNameHost(name NSString, host NSString) NSPort {
  return NSPort_(Id(C.NSPortNameServer_portForNameHost(goobj.Self(), name.Self(), host.Self())))
}
func (goobj NSPortNameServer) RegisterPortName(port NSPort, name NSString) C.bool {
  return (C.NSPortNameServer_registerPortName(goobj.Self(), port.Self(), name.Self()))
}
func (goobj NSPortNameServer) RemovePortForName(name NSString) C.bool {
  return (C.NSPortNameServer_removePortForName(goobj.Self(), name.Self()))
}
func NSPortNameServer_systemDefaultPortNameServer() NSPortNameServer {
  return NSPortNameServer_(Id(C.NSPortNameServer__systemDefaultPortNameServer()))
}
type NSMachBootstrapServer struct {
  NSPortNameServer
}
func NSMachBootstrapServer_(i Id) NSMachBootstrapServer {
  return NSMachBootstrapServer{ NSPortNameServer_(i) }
}
func NSMachBootstrapServer_init() NSMachBootstrapServer {
  p := Id(C.NSMachBootstrapServer_init())
  return NSMachBootstrapServer_(p)
}
func (goobj NSMachBootstrapServer) PortForName(name NSString) NSPort {
  return NSPort_(Id(C.NSMachBootstrapServer_portForName(goobj.Self(), name.Self())))
}
func (goobj NSMachBootstrapServer) PortForNameHost(name NSString, host NSString) NSPort {
  return NSPort_(Id(C.NSMachBootstrapServer_portForNameHost(goobj.Self(), name.Self(), host.Self())))
}
func (goobj NSMachBootstrapServer) RegisterPortName(port NSPort, name NSString) C.bool {
  return (C.NSMachBootstrapServer_registerPortName(goobj.Self(), port.Self(), name.Self()))
}
func (goobj NSMachBootstrapServer) ServicePortWithName(name NSString) NSPort {
  return NSPort_(Id(C.NSMachBootstrapServer_servicePortWithName(goobj.Self(), name.Self())))
}
func NSMachBootstrapServer_sharedInstance() Id {
  return Id_(C.NSMachBootstrapServer__sharedInstance())
}
type NSMessagePortNameServer struct {
  NSPortNameServer
}
func NSMessagePortNameServer_(i Id) NSMessagePortNameServer {
  return NSMessagePortNameServer{ NSPortNameServer_(i) }
}
func NSMessagePortNameServer_init() NSMessagePortNameServer {
  p := Id(C.NSMessagePortNameServer_init())
  return NSMessagePortNameServer_(p)
}
func (goobj NSMessagePortNameServer) PortForName(name NSString) NSPort {
  return NSPort_(Id(C.NSMessagePortNameServer_portForName(goobj.Self(), name.Self())))
}
func (goobj NSMessagePortNameServer) PortForNameHost(name NSString, host NSString) NSPort {
  return NSPort_(Id(C.NSMessagePortNameServer_portForNameHost(goobj.Self(), name.Self(), host.Self())))
}
func NSMessagePortNameServer_sharedInstance() Id {
  return Id_(C.NSMessagePortNameServer__sharedInstance())
}
type NSSocketPortNameServer struct {
  NSPortNameServer
}
func NSSocketPortNameServer_(i Id) NSSocketPortNameServer {
  return NSSocketPortNameServer{ NSPortNameServer_(i) }
}
func NSSocketPortNameServer_init() NSSocketPortNameServer {
  p := Id(C.NSSocketPortNameServer_init())
  return NSSocketPortNameServer_(p)
}
func (goobj NSSocketPortNameServer) PortForName(name NSString) NSPort {
  return NSPort_(Id(C.NSSocketPortNameServer_portForName(goobj.Self(), name.Self())))
}
func (goobj NSSocketPortNameServer) PortForNameHost(name NSString, host NSString) NSPort {
  return NSPort_(Id(C.NSSocketPortNameServer_portForNameHost(goobj.Self(), name.Self(), host.Self())))
}
func (goobj NSSocketPortNameServer) RegisterPortName(port NSPort, name NSString) C.bool {
  return (C.NSSocketPortNameServer_registerPortName(goobj.Self(), port.Self(), name.Self()))
}
func (goobj NSSocketPortNameServer) RemovePortForName(name NSString) C.bool {
  return (C.NSSocketPortNameServer_removePortForName(goobj.Self(), name.Self()))
}
func (goobj NSSocketPortNameServer) PortForNameHostNameServerPortNumber(name NSString, host NSString, portNumber C.uint16_t) NSPort {
  return NSPort_(Id(C.NSSocketPortNameServer_portForNameHostNameServerPortNumber(goobj.Self(), name.Self(), host.Self(), portNumber)))
}
func (goobj NSSocketPortNameServer) RegisterPortNameNameServerPortNumber(port NSPort, name NSString, portNumber C.uint16_t) C.bool {
  return (C.NSSocketPortNameServer_registerPortNameNameServerPortNumber(goobj.Self(), port.Self(), name.Self(), portNumber))
}
func (goobj NSSocketPortNameServer) SetDefaultNameServerPortNumber(portNumber C.uint16_t)  {
  C.NSSocketPortNameServer_setDefaultNameServerPortNumber(goobj.Self(), portNumber)
}
func (goobj NSSocketPortNameServer) DefaultNameServerPortNumber() C.uint16_t {
  return (C.NSSocketPortNameServer_defaultNameServerPortNumber(goobj.Self()))
}
func NSSocketPortNameServer_sharedInstance() Id {
  return Id_(C.NSSocketPortNameServer__sharedInstance())
}


type NSTask struct {
  NSObject
}
func NSTask_(i Id) NSTask {
  return NSTask{ NSObject_(i) }
}
func NSTask_init() NSTask {
  return NSTask_(Id(C.NSTask_init()))
}
func (goobj NSTask) SetLaunchPath(path NSString)  {
  C.NSTask_setLaunchPath(goobj.Self(), path.Self())
}
func (goobj NSTask) SetArguments(arguments NSArray)  {
  C.NSTask_setArguments(goobj.Self(), arguments.Self())
}
func (goobj NSTask) SetEnvironment(dict NSDictionary)  {
  C.NSTask_setEnvironment(goobj.Self(), dict.Self())
}
func (goobj NSTask) SetCurrentDirectoryPath(path NSString)  {
  C.NSTask_setCurrentDirectoryPath(goobj.Self(), path.Self())
}
func (goobj NSTask) SetStandardInput(input Id)  {
  C.NSTask_setStandardInput(goobj.Self(), unsafe.Pointer(input))
}
func (goobj NSTask) SetStandardOutput(output Id)  {
  C.NSTask_setStandardOutput(goobj.Self(), unsafe.Pointer(output))
}
func (goobj NSTask) SetStandardError(error Id)  {
  C.NSTask_setStandardError(goobj.Self(), unsafe.Pointer(error))
}
func (goobj NSTask) LaunchPath() NSString {
  return NSString_(Id(C.NSTask_launchPath(goobj.Self())))
}
func (goobj NSTask) Arguments() NSArray {
  return NSArray_(Id(C.NSTask_arguments(goobj.Self())))
}
func (goobj NSTask) Environment() NSDictionary {
  return NSDictionary_(Id(C.NSTask_environment(goobj.Self())))
}
func (goobj NSTask) CurrentDirectoryPath() NSString {
  return NSString_(Id(C.NSTask_currentDirectoryPath(goobj.Self())))
}
func (goobj NSTask) StandardInput() Id {
  return Id_(C.NSTask_standardInput(goobj.Self()))
}
func (goobj NSTask) StandardOutput() Id {
  return Id_(C.NSTask_standardOutput(goobj.Self()))
}
func (goobj NSTask) StandardError() Id {
  return Id_(C.NSTask_standardError(goobj.Self()))
}
func (goobj NSTask) Launch()  {
  C.NSTask_launch(goobj.Self())
}
func (goobj NSTask) Interrupt()  {
  C.NSTask_interrupt(goobj.Self())
}
func (goobj NSTask) Terminate()  {
  C.NSTask_terminate(goobj.Self())
}
func (goobj NSTask) Suspend() C.bool {
  return (C.NSTask_suspend(goobj.Self()))
}
func (goobj NSTask) Resume() C.bool {
  return (C.NSTask_resume(goobj.Self()))
}
func (goobj NSTask) ProcessIdentifier() C.int {
  return (C.NSTask_processIdentifier(goobj.Self()))
}
func (goobj NSTask) IsRunning() C.bool {
  return (C.NSTask_isRunning(goobj.Self()))
}
func (goobj NSTask) TerminationStatus() C.int {
  return (C.NSTask_terminationStatus(goobj.Self()))
}
func (goobj NSTask) TerminationReason() C.NSTaskTerminationReason {
  return (C.NSTask_terminationReason(goobj.Self()))
}
//REJECT: *INVALID TYPE*
//func (goobj NSTask) TerminationHandler() *INVALID TYPE* {
//  return (C.NSTask_terminationHandler(goobj.Self()))
//}
//REJECT: terminationHandler
//func (goobj NSTask) SetTerminationHandler(terminationHandler *INVALID TYPE*)  {
//  C.NSTask_setTerminationHandler(goobj.Self(), terminationHandler)
//}
func (goobj NSTask) WaitUntilExit()  {
  C.NSTask_waitUntilExit(goobj.Self())
}

type NSXMLNode struct {
  NSObject
}
func NSXMLNode_(i Id) NSXMLNode {
  return NSXMLNode{ NSObject_(i) }
}
func NSXMLNode_init() NSXMLNode {
  p := Id(C.NSXMLNode_init())
  return NSXMLNode_(p)
}
func NSXMLNode_initWithKind(kind C.NSXMLNodeKind) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_initWithKind(kind)))
}
func NSXMLNode_initWithKindOptions(kind C.NSXMLNodeKind, options C.uint) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_initWithKindOptions(kind, options)))
}
func (goobj NSXMLNode) Kind() C.NSXMLNodeKind {
  return (C.NSXMLNode_kind(goobj.Self()))
}
func (goobj NSXMLNode) SetName(name NSString)  {
  C.NSXMLNode_setName(goobj.Self(), name.Self())
}
func (goobj NSXMLNode) Name() NSString {
  return NSString_(Id(C.NSXMLNode_name(goobj.Self())))
}
func (goobj NSXMLNode) SetObjectValue(value Id)  {
  C.NSXMLNode_setObjectValue(goobj.Self(), unsafe.Pointer(value))
}
func (goobj NSXMLNode) ObjectValue() Id {
  return Id_(C.NSXMLNode_objectValue(goobj.Self()))
}
func (goobj NSXMLNode) SetStringValue(string NSString)  {
  C.NSXMLNode_setStringValue(goobj.Self(), string.Self())
}
func (goobj NSXMLNode) SetStringValueResolvingEntities(string NSString, resolve C.bool)  {
  C.NSXMLNode_setStringValueResolvingEntities(goobj.Self(), string.Self(), resolve)
}
func (goobj NSXMLNode) StringValue() NSString {
  return NSString_(Id(C.NSXMLNode_stringValue(goobj.Self())))
}
func (goobj NSXMLNode) Index() C.uint {
  return (C.NSXMLNode_index(goobj.Self()))
}
func (goobj NSXMLNode) Level() C.uint {
  return (C.NSXMLNode_level(goobj.Self()))
}
func (goobj NSXMLNode) RootDocument() NSXMLDocument {
  return NSXMLDocument_(Id(C.NSXMLNode_rootDocument(goobj.Self())))
}
func (goobj NSXMLNode) Parent() NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_parent(goobj.Self())))
}
func (goobj NSXMLNode) ChildCount() C.uint {
  return (C.NSXMLNode_childCount(goobj.Self()))
}
func (goobj NSXMLNode) Children() NSArray {
  return NSArray_(Id(C.NSXMLNode_children(goobj.Self())))
}
func (goobj NSXMLNode) ChildAtIndex(index C.uint) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_childAtIndex(goobj.Self(), index)))
}
func (goobj NSXMLNode) PreviousSibling() NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_previousSibling(goobj.Self())))
}
func (goobj NSXMLNode) NextSibling() NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_nextSibling(goobj.Self())))
}
func (goobj NSXMLNode) PreviousNode() NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_previousNode(goobj.Self())))
}
func (goobj NSXMLNode) NextNode() NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode_nextNode(goobj.Self())))
}
func (goobj NSXMLNode) Detach()  {
  C.NSXMLNode_detach(goobj.Self())
}
func (goobj NSXMLNode) XPath() NSString {
  return NSString_(Id(C.NSXMLNode_XPath(goobj.Self())))
}
func (goobj NSXMLNode) LocalName() NSString {
  return NSString_(Id(C.NSXMLNode_localName(goobj.Self())))
}
func (goobj NSXMLNode) Prefix() NSString {
  return NSString_(Id(C.NSXMLNode_prefix(goobj.Self())))
}
func (goobj NSXMLNode) SetURI(URI NSString)  {
  C.NSXMLNode_setURI(goobj.Self(), URI.Self())
}
func (goobj NSXMLNode) URI() NSString {
  return NSString_(Id(C.NSXMLNode_URI(goobj.Self())))
}
func (goobj NSXMLNode) Description() NSString {
  return NSString_(Id(C.NSXMLNode_description(goobj.Self())))
}
func (goobj NSXMLNode) XMLString() NSString {
  return NSString_(Id(C.NSXMLNode_XMLString(goobj.Self())))
}
func (goobj NSXMLNode) XMLStringWithOptions(options C.uint) NSString {
  return NSString_(Id(C.NSXMLNode_XMLStringWithOptions(goobj.Self(), options)))
}
func (goobj NSXMLNode) CanonicalXMLStringPreservingComments(comments C.bool) NSString {
  return NSString_(Id(C.NSXMLNode_canonicalXMLStringPreservingComments(goobj.Self(), comments)))
}
func (goobj NSXMLNode) NodesForXPathError(xpath NSString, error NSError) NSArray {
  return NSArray_(Id(C.NSXMLNode_nodesForXPathError(goobj.Self(), xpath.Self(), error.Self())))
}
func (goobj NSXMLNode) ObjectsForXQueryConstantsError(xquery NSString, constants NSDictionary, error NSError) NSArray {
  return NSArray_(Id(C.NSXMLNode_objectsForXQueryConstantsError(goobj.Self(), xquery.Self(), constants.Self(), error.Self())))
}
func (goobj NSXMLNode) ObjectsForXQueryError(xquery NSString, error NSError) NSArray {
  return NSArray_(Id(C.NSXMLNode_objectsForXQueryError(goobj.Self(), xquery.Self(), error.Self())))
}
func NSXMLNode_document() Id {
  return Id_(C.NSXMLNode__document())
}
func NSXMLNode_documentWithRootElement(element NSXMLElement) Id {
  return Id_(C.NSXMLNode__documentWithRootElement(element.Self()))
}
func NSXMLNode_elementWithName(name NSString) Id {
  return Id_(C.NSXMLNode__elementWithName(name.Self()))
}
func NSXMLNode_elementWithNameURI(name NSString, URI NSString) Id {
  return Id_(C.NSXMLNode__elementWithNameURI(name.Self(), URI.Self()))
}
func NSXMLNode_elementWithNameStringValue(name NSString, string NSString) Id {
  return Id_(C.NSXMLNode__elementWithNameStringValue(name.Self(), string.Self()))
}
func NSXMLNode_elementWithNameChildrenAttributes(name NSString, children NSArray, attributes NSArray) Id {
  return Id_(C.NSXMLNode__elementWithNameChildrenAttributes(name.Self(), children.Self(), attributes.Self()))
}
func NSXMLNode_attributeWithNameStringValue(name NSString, stringValue NSString) Id {
  return Id_(C.NSXMLNode__attributeWithNameStringValue(name.Self(), stringValue.Self()))
}
func NSXMLNode_attributeWithNameURIStringValue(name NSString, URI NSString, stringValue NSString) Id {
  return Id_(C.NSXMLNode__attributeWithNameURIStringValue(name.Self(), URI.Self(), stringValue.Self()))
}
func NSXMLNode_namespaceWithNameStringValue(name NSString, stringValue NSString) Id {
  return Id_(C.NSXMLNode__namespaceWithNameStringValue(name.Self(), stringValue.Self()))
}
func NSXMLNode_processingInstructionWithNameStringValue(name NSString, stringValue NSString) Id {
  return Id_(C.NSXMLNode__processingInstructionWithNameStringValue(name.Self(), stringValue.Self()))
}
func NSXMLNode_commentWithStringValue(stringValue NSString) Id {
  return Id_(C.NSXMLNode__commentWithStringValue(stringValue.Self()))
}
func NSXMLNode_textWithStringValue(stringValue NSString) Id {
  return Id_(C.NSXMLNode__textWithStringValue(stringValue.Self()))
}
func NSXMLNode_dTDNodeWithXMLString(string NSString) Id {
  return Id_(C.NSXMLNode__DTDNodeWithXMLString(string.Self()))
}
func NSXMLNode_localNameForName(name NSString) NSString {
  return NSString_(Id(C.NSXMLNode__localNameForName(name.Self())))
}
func NSXMLNode_prefixForName(name NSString) NSString {
  return NSString_(Id(C.NSXMLNode__prefixForName(name.Self())))
}
func NSXMLNode_predefinedNamespaceForPrefix(name NSString) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLNode__predefinedNamespaceForPrefix(name.Self())))
}
type NSXMLDTD struct {
  NSXMLNode
}
func NSXMLDTD_(i Id) NSXMLDTD {
  return NSXMLDTD{ NSXMLNode_(i) }
}
func NSXMLDTD_init() NSXMLDTD {
  p := Id(C.NSXMLDTD_init())
  return NSXMLDTD_(p)
}
func NSXMLDTD_initWithContentsOfURLOptionsError(url NSURL, mask C.uint, error NSError) NSXMLDTD {
  return NSXMLDTD_(Id(C.NSXMLDTD_initWithContentsOfURLOptionsError(url.Self(), mask, error.Self())))
}
func NSXMLDTD_initWithDataOptionsError(data NSData, mask C.uint, error NSError) NSXMLDTD {
  return NSXMLDTD_(Id(C.NSXMLDTD_initWithDataOptionsError(data.Self(), mask, error.Self())))
}
func (goobj NSXMLDTD) SetPublicID(publicID NSString)  {
  C.NSXMLDTD_setPublicID(goobj.Self(), publicID.Self())
}
func (goobj NSXMLDTD) PublicID() NSString {
  return NSString_(Id(C.NSXMLDTD_publicID(goobj.Self())))
}
func (goobj NSXMLDTD) SetSystemID(systemID NSString)  {
  C.NSXMLDTD_setSystemID(goobj.Self(), systemID.Self())
}
func (goobj NSXMLDTD) SystemID() NSString {
  return NSString_(Id(C.NSXMLDTD_systemID(goobj.Self())))
}
func (goobj NSXMLDTD) InsertChildAtIndex(child NSXMLNode, index C.uint)  {
  C.NSXMLDTD_insertChildAtIndex(goobj.Self(), child.Self(), index)
}
func (goobj NSXMLDTD) InsertChildrenAtIndex(children NSArray, index C.uint)  {
  C.NSXMLDTD_insertChildrenAtIndex(goobj.Self(), children.Self(), index)
}
func (goobj NSXMLDTD) RemoveChildAtIndex(index C.uint)  {
  C.NSXMLDTD_removeChildAtIndex(goobj.Self(), index)
}
func (goobj NSXMLDTD) SetChildren(children NSArray)  {
  C.NSXMLDTD_setChildren(goobj.Self(), children.Self())
}
func (goobj NSXMLDTD) AddChild(child NSXMLNode)  {
  C.NSXMLDTD_addChild(goobj.Self(), child.Self())
}
func (goobj NSXMLDTD) ReplaceChildAtIndexWithNode(index C.uint, node NSXMLNode)  {
  C.NSXMLDTD_replaceChildAtIndexWithNode(goobj.Self(), index, node.Self())
}
func (goobj NSXMLDTD) EntityDeclarationForName(name NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTD_entityDeclarationForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLDTD) NotationDeclarationForName(name NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTD_notationDeclarationForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLDTD) ElementDeclarationForName(name NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTD_elementDeclarationForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLDTD) AttributeDeclarationForNameElementName(name NSString, elementName NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTD_attributeDeclarationForNameElementName(goobj.Self(), name.Self(), elementName.Self())))
}
func NSXMLDTD_predefinedEntityDeclarationForName(name NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTD__predefinedEntityDeclarationForName(name.Self())))
}
type NSXMLDTDNode struct {
  NSXMLNode
}
func NSXMLDTDNode_(i Id) NSXMLDTDNode {
  return NSXMLDTDNode{ NSXMLNode_(i) }
}
func NSXMLDTDNode_init() NSXMLDTDNode {
  p := Id(C.NSXMLDTDNode_init())
  return NSXMLDTDNode_(p)
}
func NSXMLDTDNode_initWithXMLString(string NSString) NSXMLDTDNode {
  return NSXMLDTDNode_(Id(C.NSXMLDTDNode_initWithXMLString(string.Self())))
}
func (goobj NSXMLDTDNode) SetDTDKind(kind C.NSXMLDTDNodeKind)  {
  C.NSXMLDTDNode_setDTDKind(goobj.Self(), kind)
}
func (goobj NSXMLDTDNode) DTDKind() C.NSXMLDTDNodeKind {
  return (C.NSXMLDTDNode_DTDKind(goobj.Self()))
}
func (goobj NSXMLDTDNode) IsExternal() C.bool {
  return (C.NSXMLDTDNode_isExternal(goobj.Self()))
}
func (goobj NSXMLDTDNode) SetPublicID(publicID NSString)  {
  C.NSXMLDTDNode_setPublicID(goobj.Self(), publicID.Self())
}
func (goobj NSXMLDTDNode) PublicID() NSString {
  return NSString_(Id(C.NSXMLDTDNode_publicID(goobj.Self())))
}
func (goobj NSXMLDTDNode) SetSystemID(systemID NSString)  {
  C.NSXMLDTDNode_setSystemID(goobj.Self(), systemID.Self())
}
func (goobj NSXMLDTDNode) SystemID() NSString {
  return NSString_(Id(C.NSXMLDTDNode_systemID(goobj.Self())))
}
func (goobj NSXMLDTDNode) SetNotationName(notationName NSString)  {
  C.NSXMLDTDNode_setNotationName(goobj.Self(), notationName.Self())
}
func (goobj NSXMLDTDNode) NotationName() NSString {
  return NSString_(Id(C.NSXMLDTDNode_notationName(goobj.Self())))
}

type NSXMLDocument struct {
  NSXMLNode
}
func NSXMLDocument_(i Id) NSXMLDocument {
  return NSXMLDocument{ NSXMLNode_(i) }
}
func NSXMLDocument_init() NSXMLDocument {
  p := Id(C.NSXMLDocument_init())
  return NSXMLDocument_(p)
}
func NSXMLDocument_initWithXMLStringOptionsError(string NSString, mask C.uint, error NSError) NSXMLDocument {
  return NSXMLDocument_(Id(C.NSXMLDocument_initWithXMLStringOptionsError(string.Self(), mask, error.Self())))
}
func NSXMLDocument_initWithContentsOfURLOptionsError(url NSURL, mask C.uint, error NSError) NSXMLDocument {
  return NSXMLDocument_(Id(C.NSXMLDocument_initWithContentsOfURLOptionsError(url.Self(), mask, error.Self())))
}
func NSXMLDocument_initWithDataOptionsError(data NSData, mask C.uint, error NSError) NSXMLDocument {
  return NSXMLDocument_(Id(C.NSXMLDocument_initWithDataOptionsError(data.Self(), mask, error.Self())))
}
func NSXMLDocument_initWithRootElement(element NSXMLElement) NSXMLDocument {
  return NSXMLDocument_(Id(C.NSXMLDocument_initWithRootElement(element.Self())))
}
func (goobj NSXMLDocument) SetCharacterEncoding(encoding NSString)  {
  C.NSXMLDocument_setCharacterEncoding(goobj.Self(), encoding.Self())
}
func (goobj NSXMLDocument) CharacterEncoding() NSString {
  return NSString_(Id(C.NSXMLDocument_characterEncoding(goobj.Self())))
}
func (goobj NSXMLDocument) SetVersion(version NSString)  {
  C.NSXMLDocument_setVersion(goobj.Self(), version.Self())
}
func (goobj NSXMLDocument) Version() NSString {
  return NSString_(Id(C.NSXMLDocument_version(goobj.Self())))
}
func (goobj NSXMLDocument) SetStandalone(standalone C.bool)  {
  C.NSXMLDocument_setStandalone(goobj.Self(), standalone)
}
func (goobj NSXMLDocument) IsStandalone() C.bool {
  return (C.NSXMLDocument_isStandalone(goobj.Self()))
}
func (goobj NSXMLDocument) SetDocumentContentKind(kind C.NSXMLDocumentContentKind)  {
  C.NSXMLDocument_setDocumentContentKind(goobj.Self(), kind)
}
func (goobj NSXMLDocument) DocumentContentKind() C.NSXMLDocumentContentKind {
  return (C.NSXMLDocument_documentContentKind(goobj.Self()))
}
func (goobj NSXMLDocument) SetMIMEType(MIMEType NSString)  {
  C.NSXMLDocument_setMIMEType(goobj.Self(), MIMEType.Self())
}
func (goobj NSXMLDocument) MIMEType() NSString {
  return NSString_(Id(C.NSXMLDocument_MIMEType(goobj.Self())))
}
func (goobj NSXMLDocument) SetDTD(documentTypeDeclaration NSXMLDTD)  {
  C.NSXMLDocument_setDTD(goobj.Self(), documentTypeDeclaration.Self())
}
func (goobj NSXMLDocument) DTD() NSXMLDTD {
  return NSXMLDTD_(Id(C.NSXMLDocument_DTD(goobj.Self())))
}
func (goobj NSXMLDocument) SetRootElement(root NSXMLNode)  {
  C.NSXMLDocument_setRootElement(goobj.Self(), root.Self())
}
func (goobj NSXMLDocument) RootElement() NSXMLElement {
  return NSXMLElement_(Id(C.NSXMLDocument_rootElement(goobj.Self())))
}
func (goobj NSXMLDocument) InsertChildAtIndex(child NSXMLNode, index C.uint)  {
  C.NSXMLDocument_insertChildAtIndex(goobj.Self(), child.Self(), index)
}
func (goobj NSXMLDocument) InsertChildrenAtIndex(children NSArray, index C.uint)  {
  C.NSXMLDocument_insertChildrenAtIndex(goobj.Self(), children.Self(), index)
}
func (goobj NSXMLDocument) RemoveChildAtIndex(index C.uint)  {
  C.NSXMLDocument_removeChildAtIndex(goobj.Self(), index)
}
func (goobj NSXMLDocument) SetChildren(children NSArray)  {
  C.NSXMLDocument_setChildren(goobj.Self(), children.Self())
}
func (goobj NSXMLDocument) AddChild(child NSXMLNode)  {
  C.NSXMLDocument_addChild(goobj.Self(), child.Self())
}
func (goobj NSXMLDocument) ReplaceChildAtIndexWithNode(index C.uint, node NSXMLNode)  {
  C.NSXMLDocument_replaceChildAtIndexWithNode(goobj.Self(), index, node.Self())
}
func (goobj NSXMLDocument) XMLData() NSData {
  return NSData_(Id(C.NSXMLDocument_XMLData(goobj.Self())))
}
func (goobj NSXMLDocument) XMLDataWithOptions(options C.uint) NSData {
  return NSData_(Id(C.NSXMLDocument_XMLDataWithOptions(goobj.Self(), options)))
}
func (goobj NSXMLDocument) ObjectByApplyingXSLTArgumentsError(xslt NSData, arguments NSDictionary, error NSError) Id {
  return Id_(C.NSXMLDocument_objectByApplyingXSLTArgumentsError(goobj.Self(), xslt.Self(), arguments.Self(), error.Self()))
}
func (goobj NSXMLDocument) ObjectByApplyingXSLTStringArgumentsError(xslt NSString, arguments NSDictionary, error NSError) Id {
  return Id_(C.NSXMLDocument_objectByApplyingXSLTStringArgumentsError(goobj.Self(), xslt.Self(), arguments.Self(), error.Self()))
}
func (goobj NSXMLDocument) ObjectByApplyingXSLTAtURLArgumentsError(xsltURL NSURL, argument NSDictionary, error NSError) Id {
  return Id_(C.NSXMLDocument_objectByApplyingXSLTAtURLArgumentsError(goobj.Self(), xsltURL.Self(), argument.Self(), error.Self()))
}
func (goobj NSXMLDocument) ValidateAndReturnError(error NSError) C.bool {
  return (C.NSXMLDocument_validateAndReturnError(goobj.Self(), error.Self()))
}
//REJECT: Class cls
//func NSXMLDocument_replacementClassForClass(cls C.Class) C.Class {
//  return (C.NSXMLDocument__replacementClassForClass(cls))
//}
type NSXMLElement struct {
  NSXMLNode
}
func NSXMLElement_(i Id) NSXMLElement {
  return NSXMLElement{ NSXMLNode_(i) }
}
func NSXMLElement_init() NSXMLElement {
  p := Id(C.NSXMLElement_init())
  return NSXMLElement_(p)
}
func NSXMLElement_initWithName(name NSString) NSXMLElement {
  return NSXMLElement_(Id(C.NSXMLElement_initWithName(name.Self())))
}
func NSXMLElement_initWithNameURI(name NSString, URI NSString) NSXMLElement {
  return NSXMLElement_(Id(C.NSXMLElement_initWithNameURI(name.Self(), URI.Self())))
}
func NSXMLElement_initWithNameStringValue(name NSString, string NSString) NSXMLElement {
  return NSXMLElement_(Id(C.NSXMLElement_initWithNameStringValue(name.Self(), string.Self())))
}
func NSXMLElement_initWithXMLStringError(string NSString, error NSError) NSXMLElement {
  return NSXMLElement_(Id(C.NSXMLElement_initWithXMLStringError(string.Self(), error.Self())))
}
func (goobj NSXMLElement) ElementsForName(name NSString) NSArray {
  return NSArray_(Id(C.NSXMLElement_elementsForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLElement) ElementsForLocalNameURI(localName NSString, URI NSString) NSArray {
  return NSArray_(Id(C.NSXMLElement_elementsForLocalNameURI(goobj.Self(), localName.Self(), URI.Self())))
}
func (goobj NSXMLElement) AddAttribute(attribute NSXMLNode)  {
  C.NSXMLElement_addAttribute(goobj.Self(), attribute.Self())
}
func (goobj NSXMLElement) RemoveAttributeForName(name NSString)  {
  C.NSXMLElement_removeAttributeForName(goobj.Self(), name.Self())
}
func (goobj NSXMLElement) SetAttributes(attributes NSArray)  {
  C.NSXMLElement_setAttributes(goobj.Self(), attributes.Self())
}
func (goobj NSXMLElement) SetAttributesWithDictionary(attributes NSDictionary)  {
  C.NSXMLElement_setAttributesWithDictionary(goobj.Self(), attributes.Self())
}
func (goobj NSXMLElement) Attributes() NSArray {
  return NSArray_(Id(C.NSXMLElement_attributes(goobj.Self())))
}
func (goobj NSXMLElement) AttributeForName(name NSString) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLElement_attributeForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLElement) AttributeForLocalNameURI(localName NSString, URI NSString) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLElement_attributeForLocalNameURI(goobj.Self(), localName.Self(), URI.Self())))
}
func (goobj NSXMLElement) AddNamespace(aNamespace NSXMLNode)  {
  C.NSXMLElement_addNamespace(goobj.Self(), aNamespace.Self())
}
func (goobj NSXMLElement) RemoveNamespaceForPrefix(name NSString)  {
  C.NSXMLElement_removeNamespaceForPrefix(goobj.Self(), name.Self())
}
func (goobj NSXMLElement) SetNamespaces(namespaces NSArray)  {
  C.NSXMLElement_setNamespaces(goobj.Self(), namespaces.Self())
}
func (goobj NSXMLElement) Namespaces() NSArray {
  return NSArray_(Id(C.NSXMLElement_namespaces(goobj.Self())))
}
func (goobj NSXMLElement) NamespaceForPrefix(name NSString) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLElement_namespaceForPrefix(goobj.Self(), name.Self())))
}
func (goobj NSXMLElement) ResolveNamespaceForName(name NSString) NSXMLNode {
  return NSXMLNode_(Id(C.NSXMLElement_resolveNamespaceForName(goobj.Self(), name.Self())))
}
func (goobj NSXMLElement) ResolvePrefixForNamespaceURI(namespaceURI NSString) NSString {
  return NSString_(Id(C.NSXMLElement_resolvePrefixForNamespaceURI(goobj.Self(), namespaceURI.Self())))
}
func (goobj NSXMLElement) InsertChildAtIndex(child NSXMLNode, index C.uint)  {
  C.NSXMLElement_insertChildAtIndex(goobj.Self(), child.Self(), index)
}
func (goobj NSXMLElement) InsertChildrenAtIndex(children NSArray, index C.uint)  {
  C.NSXMLElement_insertChildrenAtIndex(goobj.Self(), children.Self(), index)
}
func (goobj NSXMLElement) RemoveChildAtIndex(index C.uint)  {
  C.NSXMLElement_removeChildAtIndex(goobj.Self(), index)
}
func (goobj NSXMLElement) SetChildren(children NSArray)  {
  C.NSXMLElement_setChildren(goobj.Self(), children.Self())
}
func (goobj NSXMLElement) AddChild(child NSXMLNode)  {
  C.NSXMLElement_addChild(goobj.Self(), child.Self())
}
func (goobj NSXMLElement) ReplaceChildAtIndexWithNode(index C.uint, node NSXMLNode)  {
  C.NSXMLElement_replaceChildAtIndexWithNode(goobj.Self(), index, node.Self())
}
func (goobj NSXMLElement) NormalizeAdjacentTextNodesPreservingCDATA(preserve C.bool)  {
  C.NSXMLElement_normalizeAdjacentTextNodesPreservingCDATA(goobj.Self(), preserve)
}

type NSURLDownload struct {
  NSObject
}
func NSURLDownload_(i Id) NSURLDownload {
  return NSURLDownload{ NSObject_(i) }
}
func NSURLDownload_init() NSURLDownload {
  p := Id(C.NSURLDownload_init())
  return NSURLDownload_(p)
}
func NSURLDownload_initWithRequestDelegate(request NSURLRequest, delegate Id) NSURLDownload {
  return NSURLDownload_(Id(C.NSURLDownload_initWithRequestDelegate(request.Self(), unsafe.Pointer(delegate))))
}
func NSURLDownload_initWithResumeDataDelegatePath(resumeData NSData, delegate Id, path NSString) NSURLDownload {
  return NSURLDownload_(Id(C.NSURLDownload_initWithResumeDataDelegatePath(resumeData.Self(), unsafe.Pointer(delegate), path.Self())))
}
func (goobj NSURLDownload) Cancel()  {
  C.NSURLDownload_cancel(goobj.Self())
}
func (goobj NSURLDownload) SetDestinationAllowOverwrite(path NSString, allowOverwrite C.bool)  {
  C.NSURLDownload_setDestinationAllowOverwrite(goobj.Self(), path.Self(), allowOverwrite)
}
func (goobj NSURLDownload) Request() NSURLRequest {
  return NSURLRequest_(Id(C.NSURLDownload_request(goobj.Self())))
}
func (goobj NSURLDownload) ResumeData() NSData {
  return NSData_(Id(C.NSURLDownload_resumeData(goobj.Self())))
}
func (goobj NSURLDownload) SetDeletesFileUponFailure(deletesFileUponFailure C.bool)  {
  C.NSURLDownload_setDeletesFileUponFailure(goobj.Self(), deletesFileUponFailure)
}
func (goobj NSURLDownload) DeletesFileUponFailure() C.bool {
  return (C.NSURLDownload_deletesFileUponFailure(goobj.Self()))
}
func NSURLDownload_canResumeDownloadDecodedWithEncodingMIMEType(MIMEType NSString) C.bool {
  return (C.NSURLDownload__canResumeDownloadDecodedWithEncodingMIMEType(MIMEType.Self()))
}
type NSAffineTransform struct {
  NSObject
}
func NSAffineTransform_(i Id) NSAffineTransform {
  return NSAffineTransform{ NSObject_(i) }
}
func NSAffineTransform_init() NSAffineTransform {
  p := Id(C.NSAffineTransform_init())
  return NSAffineTransform_(p)
}
func NSAffineTransform_initWithTransform(transform NSAffineTransform) NSAffineTransform {
  return NSAffineTransform_(Id(C.NSAffineTransform_initWithTransform(transform.Self())))
}
//REJECT: deltaX deltaY
//func (goobj NSAffineTransform) TranslateXByYBy(deltaX C.CGFloat, deltaY C.CGFloat)  {
//  C.NSAffineTransform_translateXByYBy(goobj.Self(), deltaX, deltaY)
//}
//REJECT: angle
//func (goobj NSAffineTransform) RotateByDegrees(angle C.CGFloat)  {
//  C.NSAffineTransform_rotateByDegrees(goobj.Self(), angle)
//}
//REJECT: angle
//func (goobj NSAffineTransform) RotateByRadians(angle C.CGFloat)  {
//  C.NSAffineTransform_rotateByRadians(goobj.Self(), angle)
//}
//REJECT: scale
//func (goobj NSAffineTransform) ScaleBy(scale C.CGFloat)  {
//  C.NSAffineTransform_scaleBy(goobj.Self(), scale)
//}
//REJECT: scaleX scaleY
//func (goobj NSAffineTransform) ScaleXByYBy(scaleX C.CGFloat, scaleY C.CGFloat)  {
//  C.NSAffineTransform_scaleXByYBy(goobj.Self(), scaleX, scaleY)
//}
func (goobj NSAffineTransform) Invert()  {
  C.NSAffineTransform_invert(goobj.Self())
}
func (goobj NSAffineTransform) AppendTransform(transform NSAffineTransform)  {
  C.NSAffineTransform_appendTransform(goobj.Self(), transform.Self())
}
func (goobj NSAffineTransform) PrependTransform(transform NSAffineTransform)  {
  C.NSAffineTransform_prependTransform(goobj.Self(), transform.Self())
}
func (goobj NSAffineTransform) TransformPoint(aPoint NSPoint) NSPoint {
  return NSPoint_(C.NSAffineTransform_transformPoint(goobj.Self(), C.CGPointMake(C.CGFloat(aPoint.X), C.CGFloat(aPoint.Y))))
}
//REJECT: NSSize aSize
//func (goobj NSAffineTransform) TransformSize(aSize C.NSSize) C.NSSize {
//  return (C.NSAffineTransform_transformSize(goobj.Self(), aSize))
//}
func (goobj NSAffineTransform) TransformStruct() C.NSAffineTransformStruct {
  return (C.NSAffineTransform_transformStruct(goobj.Self()))
}
func (goobj NSAffineTransform) SetTransformStruct(transformStruct C.NSAffineTransformStruct)  {
  C.NSAffineTransform_setTransformStruct(goobj.Self(), transformStruct)
}
func NSAffineTransform_transform() NSAffineTransform {
  return NSAffineTransform_(Id(C.NSAffineTransform__transform()))
}
type NSAppleEventManager struct {
  NSObject
}
func NSAppleEventManager_(i Id) NSAppleEventManager {
  return NSAppleEventManager{ NSObject_(i) }
}
func NSAppleEventManager_init() NSAppleEventManager {
  p := Id(C.NSAppleEventManager_init())
  return NSAppleEventManager_(p)
}
//REJECT: handleEventSelector eventClass eventID
//func (goobj NSAppleEventManager) SetEventHandlerAndSelectorForEventClassAndEventID(handler Id, handleEventSelector C.SEL, eventClass C.AEEventClass, eventID C.AEEventID)  {
//  C.NSAppleEventManager_setEventHandlerAndSelectorForEventClassAndEventID(goobj.Self(), unsafe.Pointer(handler), handleEventSelector, eventClass, eventID)
//}
//REJECT: eventClass eventID
//func (goobj NSAppleEventManager) RemoveEventHandlerForEventClassAndEventID(eventClass C.AEEventClass, eventID C.AEEventID)  {
//  C.NSAppleEventManager_removeEventHandlerForEventClassAndEventID(goobj.Self(), eventClass, eventID)
//}
//REJECT: OSErr theAppleEvent theReply
//func (goobj NSAppleEventManager) DispatchRawAppleEventWithRawReplyHandlerRefCon(theAppleEvent C.AppleEvent, theReply C.AppleEvent, handlerRefCon C.SRefCon) C.OSErr {
//  return (C.NSAppleEventManager_dispatchRawAppleEventWithRawReplyHandlerRefCon(goobj.Self(), theAppleEvent, theReply, handlerRefCon))
//}
func (goobj NSAppleEventManager) CurrentAppleEvent() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventManager_currentAppleEvent(goobj.Self())))
}
func (goobj NSAppleEventManager) CurrentReplyAppleEvent() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleEventManager_currentReplyAppleEvent(goobj.Self())))
}
//REJECT: NSAppleEventManagerSuspensionID
//func (goobj NSAppleEventManager) SuspendCurrentAppleEvent() C.NSAppleEventManagerSuspensionID {
//  return (C.NSAppleEventManager_suspendCurrentAppleEvent(goobj.Self()))
//}
//REJECT: suspensionID
//func (goobj NSAppleEventManager) AppleEventForSuspensionID(suspensionID C.NSAppleEventManagerSuspensionID) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventManager_appleEventForSuspensionID(goobj.Self(), suspensionID)))
//}
//REJECT: suspensionID
//func (goobj NSAppleEventManager) ReplyAppleEventForSuspensionID(suspensionID C.NSAppleEventManagerSuspensionID) NSAppleEventDescriptor {
//  return NSAppleEventDescriptor_(Id(C.NSAppleEventManager_replyAppleEventForSuspensionID(goobj.Self(), suspensionID)))
//}
//REJECT: suspensionID
//func (goobj NSAppleEventManager) SetCurrentAppleEventAndReplyEventWithSuspensionID(suspensionID C.NSAppleEventManagerSuspensionID)  {
//  C.NSAppleEventManager_setCurrentAppleEventAndReplyEventWithSuspensionID(goobj.Self(), suspensionID)
//}
//REJECT: suspensionID
//func (goobj NSAppleEventManager) ResumeWithSuspensionID(suspensionID C.NSAppleEventManagerSuspensionID)  {
//  C.NSAppleEventManager_resumeWithSuspensionID(goobj.Self(), suspensionID)
//}
func NSAppleEventManager_sharedAppleEventManager() NSAppleEventManager {
  return NSAppleEventManager_(Id(C.NSAppleEventManager__sharedAppleEventManager()))
}
type NSAppleScript struct {
  NSObject
}
func NSAppleScript_(i Id) NSAppleScript {
  return NSAppleScript{ NSObject_(i) }
}
func NSAppleScript_init() NSAppleScript {
  p := Id(C.NSAppleScript_init())
  return NSAppleScript_(p)
}
func NSAppleScript_initWithContentsOfURLError(url NSURL, errorInfo NSDictionary) NSAppleScript {
  return NSAppleScript_(Id(C.NSAppleScript_initWithContentsOfURLError(url.Self(), errorInfo.Self())))
}
func NSAppleScript_initWithSource(source NSString) NSAppleScript {
  return NSAppleScript_(Id(C.NSAppleScript_initWithSource(source.Self())))
}
func (goobj NSAppleScript) Source() NSString {
  return NSString_(Id(C.NSAppleScript_source(goobj.Self())))
}
func (goobj NSAppleScript) IsCompiled() C.bool {
  return (C.NSAppleScript_isCompiled(goobj.Self()))
}
func (goobj NSAppleScript) CompileAndReturnError(errorInfo NSDictionary) C.bool {
  return (C.NSAppleScript_compileAndReturnError(goobj.Self(), errorInfo.Self()))
}
func (goobj NSAppleScript) ExecuteAndReturnError(errorInfo NSDictionary) NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleScript_executeAndReturnError(goobj.Self(), errorInfo.Self())))
}
func (goobj NSAppleScript) ExecuteAppleEventError(event NSAppleEventDescriptor, errorInfo NSDictionary) NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSAppleScript_executeAppleEventError(goobj.Self(), event.Self(), errorInfo.Self())))
}

type NSClassDescription struct {
  NSObject
}
func NSClassDescription_(i Id) NSClassDescription {
  return NSClassDescription{ NSObject_(i) }
}
func NSClassDescription_init() NSClassDescription {
  p := Id(C.NSClassDescription_init())
  return NSClassDescription_(p)
}
func (goobj NSClassDescription) AttributeKeys() NSArray {
  return NSArray_(Id(C.NSClassDescription_attributeKeys(goobj.Self())))
}
func (goobj NSClassDescription) ToOneRelationshipKeys() NSArray {
  return NSArray_(Id(C.NSClassDescription_toOneRelationshipKeys(goobj.Self())))
}
func (goobj NSClassDescription) ToManyRelationshipKeys() NSArray {
  return NSArray_(Id(C.NSClassDescription_toManyRelationshipKeys(goobj.Self())))
}
func (goobj NSClassDescription) InverseForRelationshipKey(relationshipKey NSString) NSString {
  return NSString_(Id(C.NSClassDescription_inverseForRelationshipKey(goobj.Self(), relationshipKey.Self())))
}
//REJECT: aClass
//func NSClassDescription_registerClassDescriptionForClass(description NSClassDescription, aClass C.Class)  {
//  C.NSClassDescription__registerClassDescriptionForClass(description.Self(), aClass)
//}
func NSClassDescription_invalidateClassDescriptionCache()  {
  C.NSClassDescription__invalidateClassDescriptionCache()
}
//REJECT: aClass
//func NSClassDescription_classDescriptionForClass(aClass C.Class) NSClassDescription {
//  return NSClassDescription_(Id(C.NSClassDescription__classDescriptionForClass(aClass)))
//}
type NSDistributedLock struct {
  NSObject
}
func NSDistributedLock_(i Id) NSDistributedLock {
  return NSDistributedLock{ NSObject_(i) }
}
func NSDistributedLock_init() NSDistributedLock {
  p := Id(C.NSDistributedLock_init())
  return NSDistributedLock_(p)
}
func NSDistributedLock_initWithPath(path NSString) NSDistributedLock {
  return NSDistributedLock_(Id(C.NSDistributedLock_initWithPath(path.Self())))
}
func (goobj NSDistributedLock) TryLock() C.bool {
  return (C.NSDistributedLock_tryLock(goobj.Self()))
}
func (goobj NSDistributedLock) Unlock()  {
  C.NSDistributedLock_unlock(goobj.Self())
}
func (goobj NSDistributedLock) BreakLock()  {
  C.NSDistributedLock_breakLock(goobj.Self())
}
func (goobj NSDistributedLock) LockDate() NSDate {
  return NSDate_(Id(C.NSDistributedLock_lockDate(goobj.Self())))
}
func NSDistributedLock_lockWithPath(path NSString) NSDistributedLock {
  return NSDistributedLock_(Id(C.NSDistributedLock__lockWithPath(path.Self())))
}
type NSGarbageCollector struct {
  NSObject
}
func NSGarbageCollector_(i Id) NSGarbageCollector {
  return NSGarbageCollector{ NSObject_(i) }
}
func NSGarbageCollector_init() NSGarbageCollector {
  p := Id(C.NSGarbageCollector_init())
  return NSGarbageCollector_(p)
}
func (goobj NSGarbageCollector) IsCollecting() C.bool {
  return (C.NSGarbageCollector_isCollecting(goobj.Self()))
}
func (goobj NSGarbageCollector) Disable()  {
  C.NSGarbageCollector_disable(goobj.Self())
}
func (goobj NSGarbageCollector) Enable()  {
  C.NSGarbageCollector_enable(goobj.Self())
}
func (goobj NSGarbageCollector) IsEnabled() C.bool {
  return (C.NSGarbageCollector_isEnabled(goobj.Self()))
}
func (goobj NSGarbageCollector) CollectIfNeeded()  {
  C.NSGarbageCollector_collectIfNeeded(goobj.Self())
}
func (goobj NSGarbageCollector) CollectExhaustively()  {
  C.NSGarbageCollector_collectExhaustively(goobj.Self())
}
func (goobj NSGarbageCollector) DisableCollectorForPointer(ptr unsafe.Pointer)  {
  C.NSGarbageCollector_disableCollectorForPointer(goobj.Self(), ptr)
}
func (goobj NSGarbageCollector) EnableCollectorForPointer(ptr unsafe.Pointer)  {
  C.NSGarbageCollector_enableCollectorForPointer(goobj.Self(), ptr)
}
//REJECT: NSZone
//func (goobj NSGarbageCollector) Zone() C.NSZone {
//  return (C.NSGarbageCollector_zone(goobj.Self()))
//}
func NSGarbageCollector_defaultCollector() Id {
  return Id_(C.NSGarbageCollector__defaultCollector())
}
type NSHost struct {
  NSObject
}
func NSHost_(i Id) NSHost {
  return NSHost{ NSObject_(i) }
}
func NSHost_init() NSHost {
  p := Id(C.NSHost_init())
  return NSHost_(p)
}
func (goobj NSHost) IsEqualToHost(aHost NSHost) C.bool {
  return (C.NSHost_isEqualToHost(goobj.Self(), aHost.Self()))
}
func (goobj NSHost) Name() NSString {
  return NSString_(Id(C.NSHost_name(goobj.Self())))
}
func (goobj NSHost) Names() NSArray {
  return NSArray_(Id(C.NSHost_names(goobj.Self())))
}
func (goobj NSHost) Address() NSString {
  return NSString_(Id(C.NSHost_address(goobj.Self())))
}
func (goobj NSHost) Addresses() NSArray {
  return NSArray_(Id(C.NSHost_addresses(goobj.Self())))
}
func (goobj NSHost) LocalizedName() NSString {
  return NSString_(Id(C.NSHost_localizedName(goobj.Self())))
}
func NSHost_currentHost() NSHost {
  return NSHost_(Id(C.NSHost__currentHost()))
}
func NSHost_hostWithName(name NSString) NSHost {
  return NSHost_(Id(C.NSHost__hostWithName(name.Self())))
}
func NSHost_hostWithAddress(address NSString) NSHost {
  return NSHost_(Id(C.NSHost__hostWithAddress(address.Self())))
}
func NSHost_setHostCacheEnabled(flag C.bool)  {
  C.NSHost__setHostCacheEnabled(flag)
}
func NSHost_isHostCacheEnabled() C.bool {
  return (C.NSHost__isHostCacheEnabled())
}
func NSHost_flushHostCache()  {
  C.NSHost__flushHostCache()
}
type NSScriptClassDescription struct {
  NSClassDescription
}
func NSScriptClassDescription_(i Id) NSScriptClassDescription {
  return NSScriptClassDescription{ NSClassDescription_(i) }
}
func NSScriptClassDescription_init() NSScriptClassDescription {
  p := Id(C.NSScriptClassDescription_init())
  return NSScriptClassDescription_(p)
}
func NSScriptClassDescription_initWithSuiteNameClassNameDictionary(suiteName NSString, className NSString, classDeclaration NSDictionary) NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSScriptClassDescription_initWithSuiteNameClassNameDictionary(suiteName.Self(), className.Self(), classDeclaration.Self())))
}
func (goobj NSScriptClassDescription) SuiteName() NSString {
  return NSString_(Id(C.NSScriptClassDescription_suiteName(goobj.Self())))
}
func (goobj NSScriptClassDescription) ClassName() NSString {
  return NSString_(Id(C.NSScriptClassDescription_className(goobj.Self())))
}
func (goobj NSScriptClassDescription) ImplementationClassName() NSString {
  return NSString_(Id(C.NSScriptClassDescription_implementationClassName(goobj.Self())))
}
func (goobj NSScriptClassDescription) SuperclassDescription() NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSScriptClassDescription_superclassDescription(goobj.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptClassDescription) AppleEventCode() C.FourCharCode {
//  return (C.NSScriptClassDescription_appleEventCode(goobj.Self()))
//}
//REJECT: appleEventCode
//func (goobj NSScriptClassDescription) MatchesAppleEventCode(appleEventCode C.FourCharCode) C.bool {
//  return (C.NSScriptClassDescription_matchesAppleEventCode(goobj.Self(), appleEventCode))
//}
func (goobj NSScriptClassDescription) SupportsCommand(commandDescription NSScriptCommandDescription) C.bool {
  return (C.NSScriptClassDescription_supportsCommand(goobj.Self(), commandDescription.Self()))
}
//REJECT: SEL
//func (goobj NSScriptClassDescription) SelectorForCommand(commandDescription NSScriptCommandDescription) C.SEL {
//  return (C.NSScriptClassDescription_selectorForCommand(goobj.Self(), commandDescription.Self()))
//}
func (goobj NSScriptClassDescription) TypeForKey(key NSString) NSString {
  return NSString_(Id(C.NSScriptClassDescription_typeForKey(goobj.Self(), key.Self())))
}
func (goobj NSScriptClassDescription) ClassDescriptionForKey(key NSString) NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSScriptClassDescription_classDescriptionForKey(goobj.Self(), key.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptClassDescription) AppleEventCodeForKey(key NSString) C.FourCharCode {
//  return (C.NSScriptClassDescription_appleEventCodeForKey(goobj.Self(), key.Self()))
//}
//REJECT: appleEventCode
//func (goobj NSScriptClassDescription) KeyWithAppleEventCode(appleEventCode C.FourCharCode) NSString {
//  return NSString_(Id(C.NSScriptClassDescription_keyWithAppleEventCode(goobj.Self(), appleEventCode)))
//}
func (goobj NSScriptClassDescription) DefaultSubcontainerAttributeKey() NSString {
  return NSString_(Id(C.NSScriptClassDescription_defaultSubcontainerAttributeKey(goobj.Self())))
}
func (goobj NSScriptClassDescription) IsLocationRequiredToCreateForKey(toManyRelationshipKey NSString) C.bool {
  return (C.NSScriptClassDescription_isLocationRequiredToCreateForKey(goobj.Self(), toManyRelationshipKey.Self()))
}
func (goobj NSScriptClassDescription) HasPropertyForKey(key NSString) C.bool {
  return (C.NSScriptClassDescription_hasPropertyForKey(goobj.Self(), key.Self()))
}
func (goobj NSScriptClassDescription) HasOrderedToManyRelationshipForKey(key NSString) C.bool {
  return (C.NSScriptClassDescription_hasOrderedToManyRelationshipForKey(goobj.Self(), key.Self()))
}
func (goobj NSScriptClassDescription) HasReadablePropertyForKey(key NSString) C.bool {
  return (C.NSScriptClassDescription_hasReadablePropertyForKey(goobj.Self(), key.Self()))
}
func (goobj NSScriptClassDescription) HasWritablePropertyForKey(key NSString) C.bool {
  return (C.NSScriptClassDescription_hasWritablePropertyForKey(goobj.Self(), key.Self()))
}
//REJECT: aClass
//func NSScriptClassDescription_classDescriptionForClass(aClass C.Class) NSScriptClassDescription {
//  return NSScriptClassDescription_(Id(C.NSScriptClassDescription__classDescriptionForClass(aClass)))
//}
type NSScriptCoercionHandler struct {
  NSObject
}
func NSScriptCoercionHandler_(i Id) NSScriptCoercionHandler {
  return NSScriptCoercionHandler{ NSObject_(i) }
}
func NSScriptCoercionHandler_init() NSScriptCoercionHandler {
  p := Id(C.NSScriptCoercionHandler_init())
  return NSScriptCoercionHandler_(p)
}
//REJECT: toClass
//func (goobj NSScriptCoercionHandler) CoerceValueToClass(value Id, toClass C.Class) Id {
//  return Id_(C.NSScriptCoercionHandler_coerceValueToClass(goobj.Self(), unsafe.Pointer(value), toClass))
//}
//REJECT: selector fromClass toClass
//func (goobj NSScriptCoercionHandler) RegisterCoercerSelectorToConvertFromClassToClass(coercer Id, selector C.SEL, fromClass C.Class, toClass C.Class)  {
//  C.NSScriptCoercionHandler_registerCoercerSelectorToConvertFromClassToClass(goobj.Self(), unsafe.Pointer(coercer), selector, fromClass, toClass)
//}
func NSScriptCoercionHandler_sharedCoercionHandler() NSScriptCoercionHandler {
  return NSScriptCoercionHandler_(Id(C.NSScriptCoercionHandler__sharedCoercionHandler()))
}
type NSScriptCommand struct {
  NSObject
}
func NSScriptCommand_(i Id) NSScriptCommand {
  return NSScriptCommand{ NSObject_(i) }
}
func NSScriptCommand_init() NSScriptCommand {
  p := Id(C.NSScriptCommand_init())
  return NSScriptCommand_(p)
}
func NSScriptCommand_initWithCommandDescription(commandDef NSScriptCommandDescription) NSScriptCommand {
  return NSScriptCommand_(Id(C.NSScriptCommand_initWithCommandDescription(commandDef.Self())))
}
func (goobj NSScriptCommand) CommandDescription() NSScriptCommandDescription {
  return NSScriptCommandDescription_(Id(C.NSScriptCommand_commandDescription(goobj.Self())))
}
func (goobj NSScriptCommand) SetDirectParameter(directParameter Id)  {
  C.NSScriptCommand_setDirectParameter(goobj.Self(), unsafe.Pointer(directParameter))
}
func (goobj NSScriptCommand) DirectParameter() Id {
  return Id_(C.NSScriptCommand_directParameter(goobj.Self()))
}
func (goobj NSScriptCommand) SetReceiversSpecifier(receiversRef NSScriptObjectSpecifier)  {
  C.NSScriptCommand_setReceiversSpecifier(goobj.Self(), receiversRef.Self())
}
func (goobj NSScriptCommand) ReceiversSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptCommand_receiversSpecifier(goobj.Self())))
}
func (goobj NSScriptCommand) EvaluatedReceivers() Id {
  return Id_(C.NSScriptCommand_evaluatedReceivers(goobj.Self()))
}
func (goobj NSScriptCommand) SetArguments(args NSDictionary)  {
  C.NSScriptCommand_setArguments(goobj.Self(), args.Self())
}
func (goobj NSScriptCommand) Arguments() NSDictionary {
  return NSDictionary_(Id(C.NSScriptCommand_arguments(goobj.Self())))
}
func (goobj NSScriptCommand) EvaluatedArguments() NSDictionary {
  return NSDictionary_(Id(C.NSScriptCommand_evaluatedArguments(goobj.Self())))
}
func (goobj NSScriptCommand) IsWellFormed() C.bool {
  return (C.NSScriptCommand_isWellFormed(goobj.Self()))
}
func (goobj NSScriptCommand) PerformDefaultImplementation() Id {
  return Id_(C.NSScriptCommand_performDefaultImplementation(goobj.Self()))
}
func (goobj NSScriptCommand) ExecuteCommand() Id {
  return Id_(C.NSScriptCommand_executeCommand(goobj.Self()))
}
func (goobj NSScriptCommand) SetScriptErrorNumber(errorNumber C.int)  {
  C.NSScriptCommand_setScriptErrorNumber(goobj.Self(), errorNumber)
}
func (goobj NSScriptCommand) SetScriptErrorOffendingObjectDescriptor(errorOffendingObjectDescriptor NSAppleEventDescriptor)  {
  C.NSScriptCommand_setScriptErrorOffendingObjectDescriptor(goobj.Self(), errorOffendingObjectDescriptor.Self())
}
func (goobj NSScriptCommand) SetScriptErrorExpectedTypeDescriptor(errorExpectedTypeDescriptor NSAppleEventDescriptor)  {
  C.NSScriptCommand_setScriptErrorExpectedTypeDescriptor(goobj.Self(), errorExpectedTypeDescriptor.Self())
}
func (goobj NSScriptCommand) SetScriptErrorString(errorString NSString)  {
  C.NSScriptCommand_setScriptErrorString(goobj.Self(), errorString.Self())
}
func (goobj NSScriptCommand) ScriptErrorNumber() C.int {
  return (C.NSScriptCommand_scriptErrorNumber(goobj.Self()))
}
func (goobj NSScriptCommand) ScriptErrorOffendingObjectDescriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSScriptCommand_scriptErrorOffendingObjectDescriptor(goobj.Self())))
}
func (goobj NSScriptCommand) ScriptErrorExpectedTypeDescriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSScriptCommand_scriptErrorExpectedTypeDescriptor(goobj.Self())))
}
func (goobj NSScriptCommand) ScriptErrorString() NSString {
  return NSString_(Id(C.NSScriptCommand_scriptErrorString(goobj.Self())))
}
func (goobj NSScriptCommand) AppleEvent() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSScriptCommand_appleEvent(goobj.Self())))
}
func (goobj NSScriptCommand) SuspendExecution()  {
  C.NSScriptCommand_suspendExecution(goobj.Self())
}
func (goobj NSScriptCommand) ResumeExecutionWithResult(result Id)  {
  C.NSScriptCommand_resumeExecutionWithResult(goobj.Self(), unsafe.Pointer(result))
}
func NSScriptCommand_currentCommand() NSScriptCommand {
  return NSScriptCommand_(Id(C.NSScriptCommand__currentCommand()))
}
type NSScriptCommandDescription struct {
  NSObject
}
func NSScriptCommandDescription_(i Id) NSScriptCommandDescription {
  return NSScriptCommandDescription{ NSObject_(i) }
}
func NSScriptCommandDescription_init() NSScriptCommandDescription {
  p := Id(C.NSScriptCommandDescription_init())
  return NSScriptCommandDescription_(p)
}
func NSScriptCommandDescription_initWithSuiteNameCommandNameDictionary(suiteName NSString, commandName NSString, commandDeclaration NSDictionary) NSScriptCommandDescription {
  return NSScriptCommandDescription_(Id(C.NSScriptCommandDescription_initWithSuiteNameCommandNameDictionary(suiteName.Self(), commandName.Self(), commandDeclaration.Self())))
}
func (goobj NSScriptCommandDescription) SuiteName() NSString {
  return NSString_(Id(C.NSScriptCommandDescription_suiteName(goobj.Self())))
}
func (goobj NSScriptCommandDescription) CommandName() NSString {
  return NSString_(Id(C.NSScriptCommandDescription_commandName(goobj.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptCommandDescription) AppleEventClassCode() C.FourCharCode {
//  return (C.NSScriptCommandDescription_appleEventClassCode(goobj.Self()))
//}
//REJECT: FourCharCode
//func (goobj NSScriptCommandDescription) AppleEventCode() C.FourCharCode {
//  return (C.NSScriptCommandDescription_appleEventCode(goobj.Self()))
//}
func (goobj NSScriptCommandDescription) CommandClassName() NSString {
  return NSString_(Id(C.NSScriptCommandDescription_commandClassName(goobj.Self())))
}
func (goobj NSScriptCommandDescription) ReturnType() NSString {
  return NSString_(Id(C.NSScriptCommandDescription_returnType(goobj.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptCommandDescription) AppleEventCodeForReturnType() C.FourCharCode {
//  return (C.NSScriptCommandDescription_appleEventCodeForReturnType(goobj.Self()))
//}
func (goobj NSScriptCommandDescription) ArgumentNames() NSArray {
  return NSArray_(Id(C.NSScriptCommandDescription_argumentNames(goobj.Self())))
}
func (goobj NSScriptCommandDescription) TypeForArgumentWithName(argumentName NSString) NSString {
  return NSString_(Id(C.NSScriptCommandDescription_typeForArgumentWithName(goobj.Self(), argumentName.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptCommandDescription) AppleEventCodeForArgumentWithName(argumentName NSString) C.FourCharCode {
//  return (C.NSScriptCommandDescription_appleEventCodeForArgumentWithName(goobj.Self(), argumentName.Self()))
//}
func (goobj NSScriptCommandDescription) IsOptionalArgumentWithName(argumentName NSString) C.bool {
  return (C.NSScriptCommandDescription_isOptionalArgumentWithName(goobj.Self(), argumentName.Self()))
}
func (goobj NSScriptCommandDescription) CreateCommandInstance() NSScriptCommand {
  return NSScriptCommand_(Id(C.NSScriptCommandDescription_createCommandInstance(goobj.Self())))
}
//REJECT: zone
//func (goobj NSScriptCommandDescription) CreateCommandInstanceWithZone(zone C.NSZone) NSScriptCommand {
//  return NSScriptCommand_(Id(C.NSScriptCommandDescription_createCommandInstanceWithZone(goobj.Self(), zone)))
//}

type NSScriptExecutionContext struct {
  NSObject
}
func NSScriptExecutionContext_(i Id) NSScriptExecutionContext {
  return NSScriptExecutionContext{ NSObject_(i) }
}
func NSScriptExecutionContext_init() NSScriptExecutionContext {
  p := Id(C.NSScriptExecutionContext_init())
  return NSScriptExecutionContext_(p)
}
func (goobj NSScriptExecutionContext) TopLevelObject() Id {
  return Id_(C.NSScriptExecutionContext_topLevelObject(goobj.Self()))
}
func (goobj NSScriptExecutionContext) SetTopLevelObject(obj Id)  {
  C.NSScriptExecutionContext_setTopLevelObject(goobj.Self(), unsafe.Pointer(obj))
}
func (goobj NSScriptExecutionContext) ObjectBeingTested() Id {
  return Id_(C.NSScriptExecutionContext_objectBeingTested(goobj.Self()))
}
func (goobj NSScriptExecutionContext) SetObjectBeingTested(obj Id)  {
  C.NSScriptExecutionContext_setObjectBeingTested(goobj.Self(), unsafe.Pointer(obj))
}
func (goobj NSScriptExecutionContext) RangeContainerObject() Id {
  return Id_(C.NSScriptExecutionContext_rangeContainerObject(goobj.Self()))
}
func (goobj NSScriptExecutionContext) SetRangeContainerObject(obj Id)  {
  C.NSScriptExecutionContext_setRangeContainerObject(goobj.Self(), unsafe.Pointer(obj))
}
func NSScriptExecutionContext_sharedScriptExecutionContext() NSScriptExecutionContext {
  return NSScriptExecutionContext_(Id(C.NSScriptExecutionContext__sharedScriptExecutionContext()))
}
type NSScriptObjectSpecifier struct {
  NSObject
}
func NSScriptObjectSpecifier_(i Id) NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier{ NSObject_(i) }
}
func NSScriptObjectSpecifier_init() NSScriptObjectSpecifier {
  p := Id(C.NSScriptObjectSpecifier_init())
  return NSScriptObjectSpecifier_(p)
}
func NSScriptObjectSpecifier_initWithContainerSpecifierKey(container NSScriptObjectSpecifier, property NSString) NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier_initWithContainerSpecifierKey(container.Self(), property.Self())))
}
func NSScriptObjectSpecifier_initWithContainerClassDescriptionContainerSpecifierKey(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString) NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier_initWithContainerClassDescriptionContainerSpecifierKey(classDesc.Self(), container.Self(), property.Self())))
}
func (goobj NSScriptObjectSpecifier) ChildSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier_childSpecifier(goobj.Self())))
}
func (goobj NSScriptObjectSpecifier) SetChildSpecifier(child NSScriptObjectSpecifier)  {
  C.NSScriptObjectSpecifier_setChildSpecifier(goobj.Self(), child.Self())
}
func (goobj NSScriptObjectSpecifier) ContainerSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier_containerSpecifier(goobj.Self())))
}
func (goobj NSScriptObjectSpecifier) SetContainerSpecifier(subRef NSScriptObjectSpecifier)  {
  C.NSScriptObjectSpecifier_setContainerSpecifier(goobj.Self(), subRef.Self())
}
func (goobj NSScriptObjectSpecifier) ContainerIsObjectBeingTested() C.bool {
  return (C.NSScriptObjectSpecifier_containerIsObjectBeingTested(goobj.Self()))
}
func (goobj NSScriptObjectSpecifier) SetContainerIsObjectBeingTested(flag C.bool)  {
  C.NSScriptObjectSpecifier_setContainerIsObjectBeingTested(goobj.Self(), flag)
}
func (goobj NSScriptObjectSpecifier) ContainerIsRangeContainerObject() C.bool {
  return (C.NSScriptObjectSpecifier_containerIsRangeContainerObject(goobj.Self()))
}
func (goobj NSScriptObjectSpecifier) SetContainerIsRangeContainerObject(flag C.bool)  {
  C.NSScriptObjectSpecifier_setContainerIsRangeContainerObject(goobj.Self(), flag)
}
func (goobj NSScriptObjectSpecifier) Key() NSString {
  return NSString_(Id(C.NSScriptObjectSpecifier_key(goobj.Self())))
}
func (goobj NSScriptObjectSpecifier) SetKey(key NSString)  {
  C.NSScriptObjectSpecifier_setKey(goobj.Self(), key.Self())
}
func (goobj NSScriptObjectSpecifier) ContainerClassDescription() NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSScriptObjectSpecifier_containerClassDescription(goobj.Self())))
}
func (goobj NSScriptObjectSpecifier) SetContainerClassDescription(classDesc NSScriptClassDescription)  {
  C.NSScriptObjectSpecifier_setContainerClassDescription(goobj.Self(), classDesc.Self())
}
func (goobj NSScriptObjectSpecifier) KeyClassDescription() NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSScriptObjectSpecifier_keyClassDescription(goobj.Self())))
}
//REJECT: NSInteger count
//func (goobj NSScriptObjectSpecifier) IndicesOfObjectsByEvaluatingWithContainerCount(container Id, count C.NSInteger) C.NSInteger {
//  return (C.NSScriptObjectSpecifier_indicesOfObjectsByEvaluatingWithContainerCount(goobj.Self(), unsafe.Pointer(container), count))
//}
func (goobj NSScriptObjectSpecifier) ObjectsByEvaluatingWithContainers(containers Id) Id {
  return Id_(C.NSScriptObjectSpecifier_objectsByEvaluatingWithContainers(goobj.Self(), unsafe.Pointer(containers)))
}
func (goobj NSScriptObjectSpecifier) ObjectsByEvaluatingSpecifier() Id {
  return Id_(C.NSScriptObjectSpecifier_objectsByEvaluatingSpecifier(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSScriptObjectSpecifier) EvaluationErrorNumber() C.NSInteger {
//  return (C.NSScriptObjectSpecifier_evaluationErrorNumber(goobj.Self()))
//}
//REJECT: error
//func (goobj NSScriptObjectSpecifier) SetEvaluationErrorNumber(error C.NSInteger)  {
//  C.NSScriptObjectSpecifier_setEvaluationErrorNumber(goobj.Self(), error)
//}
func (goobj NSScriptObjectSpecifier) EvaluationErrorSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier_evaluationErrorSpecifier(goobj.Self())))
}
func (goobj NSScriptObjectSpecifier) Descriptor() NSAppleEventDescriptor {
  return NSAppleEventDescriptor_(Id(C.NSScriptObjectSpecifier_descriptor(goobj.Self())))
}
func NSScriptObjectSpecifier_objectSpecifierWithDescriptor(descriptor NSAppleEventDescriptor) NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSScriptObjectSpecifier__objectSpecifierWithDescriptor(descriptor.Self())))
}
type NSIndexSpecifier struct {
  NSScriptObjectSpecifier
}
func NSIndexSpecifier_(i Id) NSIndexSpecifier {
  return NSIndexSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSIndexSpecifier_init() NSIndexSpecifier {
  p := Id(C.NSIndexSpecifier_init())
  return NSIndexSpecifier_(p)
}
//REJECT: index
//func NSIndexSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyIndex(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, index C.NSInteger) NSIndexSpecifier {
//  return NSIndexSpecifier_(Id(C.NSIndexSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyIndex(classDesc.Self(), container.Self(), property.Self(), index)))
//}
//REJECT: NSInteger
//func (goobj NSIndexSpecifier) Index() C.NSInteger {
//  return (C.NSIndexSpecifier_index(goobj.Self()))
//}
//REJECT: index
//func (goobj NSIndexSpecifier) SetIndex(index C.NSInteger)  {
//  C.NSIndexSpecifier_setIndex(goobj.Self(), index)
//}

type NSMiddleSpecifier struct {
  NSScriptObjectSpecifier
}
func NSMiddleSpecifier_(i Id) NSMiddleSpecifier {
  return NSMiddleSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSMiddleSpecifier_init() NSMiddleSpecifier {
  p := Id(C.NSMiddleSpecifier_init())
  return NSMiddleSpecifier_(p)
}


type NSNameSpecifier struct {
  NSScriptObjectSpecifier
}
func NSNameSpecifier_(i Id) NSNameSpecifier {
  return NSNameSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSNameSpecifier_init() NSNameSpecifier {
  p := Id(C.NSNameSpecifier_init())
  return NSNameSpecifier_(p)
}
func NSNameSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyName(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, name NSString) NSNameSpecifier {
  return NSNameSpecifier_(Id(C.NSNameSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyName(classDesc.Self(), container.Self(), property.Self(), name.Self())))
}
func (goobj NSNameSpecifier) Name() NSString {
  return NSString_(Id(C.NSNameSpecifier_name(goobj.Self())))
}
func (goobj NSNameSpecifier) SetName(name NSString)  {
  C.NSNameSpecifier_setName(goobj.Self(), name.Self())
}

type NSPositionalSpecifier struct {
  NSObject
}
func NSPositionalSpecifier_(i Id) NSPositionalSpecifier {
  return NSPositionalSpecifier{ NSObject_(i) }
}
func NSPositionalSpecifier_init() NSPositionalSpecifier {
  p := Id(C.NSPositionalSpecifier_init())
  return NSPositionalSpecifier_(p)
}
func NSPositionalSpecifier_initWithPositionObjectSpecifier(position C.NSInsertionPosition, specifier NSScriptObjectSpecifier) NSPositionalSpecifier {
  return NSPositionalSpecifier_(Id(C.NSPositionalSpecifier_initWithPositionObjectSpecifier(position, specifier.Self())))
}
func (goobj NSPositionalSpecifier) Position() C.NSInsertionPosition {
  return (C.NSPositionalSpecifier_position(goobj.Self()))
}
func (goobj NSPositionalSpecifier) ObjectSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSPositionalSpecifier_objectSpecifier(goobj.Self())))
}
func (goobj NSPositionalSpecifier) SetInsertionClassDescription(classDescription NSScriptClassDescription)  {
  C.NSPositionalSpecifier_setInsertionClassDescription(goobj.Self(), classDescription.Self())
}
func (goobj NSPositionalSpecifier) Evaluate()  {
  C.NSPositionalSpecifier_evaluate(goobj.Self())
}
func (goobj NSPositionalSpecifier) InsertionContainer() Id {
  return Id_(C.NSPositionalSpecifier_insertionContainer(goobj.Self()))
}
func (goobj NSPositionalSpecifier) InsertionKey() NSString {
  return NSString_(Id(C.NSPositionalSpecifier_insertionKey(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSPositionalSpecifier) InsertionIndex() C.NSInteger {
//  return (C.NSPositionalSpecifier_insertionIndex(goobj.Self()))
//}
func (goobj NSPositionalSpecifier) InsertionReplaces() C.bool {
  return (C.NSPositionalSpecifier_insertionReplaces(goobj.Self()))
}

type NSPropertySpecifier struct {
  NSScriptObjectSpecifier
}
func NSPropertySpecifier_(i Id) NSPropertySpecifier {
  return NSPropertySpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSPropertySpecifier_init() NSPropertySpecifier {
  p := Id(C.NSPropertySpecifier_init())
  return NSPropertySpecifier_(p)
}


type NSRandomSpecifier struct {
  NSScriptObjectSpecifier
}
func NSRandomSpecifier_(i Id) NSRandomSpecifier {
  return NSRandomSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSRandomSpecifier_init() NSRandomSpecifier {
  p := Id(C.NSRandomSpecifier_init())
  return NSRandomSpecifier_(p)
}


type NSRangeSpecifier struct {
  NSScriptObjectSpecifier
}
func NSRangeSpecifier_(i Id) NSRangeSpecifier {
  return NSRangeSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSRangeSpecifier_init() NSRangeSpecifier {
  p := Id(C.NSRangeSpecifier_init())
  return NSRangeSpecifier_(p)
}
func NSRangeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, startSpec NSScriptObjectSpecifier, endSpec NSScriptObjectSpecifier) NSRangeSpecifier {
  return NSRangeSpecifier_(Id(C.NSRangeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyStartSpecifierEndSpecifier(classDesc.Self(), container.Self(), property.Self(), startSpec.Self(), endSpec.Self())))
}
func (goobj NSRangeSpecifier) StartSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSRangeSpecifier_startSpecifier(goobj.Self())))
}
func (goobj NSRangeSpecifier) SetStartSpecifier(startSpec NSScriptObjectSpecifier)  {
  C.NSRangeSpecifier_setStartSpecifier(goobj.Self(), startSpec.Self())
}
func (goobj NSRangeSpecifier) EndSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSRangeSpecifier_endSpecifier(goobj.Self())))
}
func (goobj NSRangeSpecifier) SetEndSpecifier(endSpec NSScriptObjectSpecifier)  {
  C.NSRangeSpecifier_setEndSpecifier(goobj.Self(), endSpec.Self())
}

type NSRelativeSpecifier struct {
  NSScriptObjectSpecifier
}
func NSRelativeSpecifier_(i Id) NSRelativeSpecifier {
  return NSRelativeSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSRelativeSpecifier_init() NSRelativeSpecifier {
  p := Id(C.NSRelativeSpecifier_init())
  return NSRelativeSpecifier_(p)
}
func NSRelativeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, relPos C.NSRelativePosition, baseSpecifier NSScriptObjectSpecifier) NSRelativeSpecifier {
  return NSRelativeSpecifier_(Id(C.NSRelativeSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyRelativePositionBaseSpecifier(classDesc.Self(), container.Self(), property.Self(), relPos, baseSpecifier.Self())))
}
func (goobj NSRelativeSpecifier) RelativePosition() C.NSRelativePosition {
  return (C.NSRelativeSpecifier_relativePosition(goobj.Self()))
}
func (goobj NSRelativeSpecifier) SetRelativePosition(relPos C.NSRelativePosition)  {
  C.NSRelativeSpecifier_setRelativePosition(goobj.Self(), relPos)
}
func (goobj NSRelativeSpecifier) BaseSpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSRelativeSpecifier_baseSpecifier(goobj.Self())))
}
func (goobj NSRelativeSpecifier) SetBaseSpecifier(baseSpecifier NSScriptObjectSpecifier)  {
  C.NSRelativeSpecifier_setBaseSpecifier(goobj.Self(), baseSpecifier.Self())
}

type NSUniqueIDSpecifier struct {
  NSScriptObjectSpecifier
}
func NSUniqueIDSpecifier_(i Id) NSUniqueIDSpecifier {
  return NSUniqueIDSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSUniqueIDSpecifier_init() NSUniqueIDSpecifier {
  p := Id(C.NSUniqueIDSpecifier_init())
  return NSUniqueIDSpecifier_(p)
}
func NSUniqueIDSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyUniqueID(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, uniqueID Id) NSUniqueIDSpecifier {
  return NSUniqueIDSpecifier_(Id(C.NSUniqueIDSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyUniqueID(classDesc.Self(), container.Self(), property.Self(), unsafe.Pointer(uniqueID))))
}
func (goobj NSUniqueIDSpecifier) UniqueID() Id {
  return Id_(C.NSUniqueIDSpecifier_uniqueID(goobj.Self()))
}
func (goobj NSUniqueIDSpecifier) SetUniqueID(uniqueID Id)  {
  C.NSUniqueIDSpecifier_setUniqueID(goobj.Self(), unsafe.Pointer(uniqueID))
}

type NSWhoseSpecifier struct {
  NSScriptObjectSpecifier
}
func NSWhoseSpecifier_(i Id) NSWhoseSpecifier {
  return NSWhoseSpecifier{ NSScriptObjectSpecifier_(i) }
}
func NSWhoseSpecifier_init() NSWhoseSpecifier {
  p := Id(C.NSWhoseSpecifier_init())
  return NSWhoseSpecifier_(p)
}
func NSWhoseSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyTest(classDesc NSScriptClassDescription, container NSScriptObjectSpecifier, property NSString, test NSScriptWhoseTest) NSWhoseSpecifier {
  return NSWhoseSpecifier_(Id(C.NSWhoseSpecifier_initWithContainerClassDescriptionContainerSpecifierKeyTest(classDesc.Self(), container.Self(), property.Self(), test.Self())))
}
func (goobj NSWhoseSpecifier) Test() NSScriptWhoseTest {
  return NSScriptWhoseTest_(Id(C.NSWhoseSpecifier_test(goobj.Self())))
}
func (goobj NSWhoseSpecifier) SetTest(test NSScriptWhoseTest)  {
  C.NSWhoseSpecifier_setTest(goobj.Self(), test.Self())
}
func (goobj NSWhoseSpecifier) StartSubelementIdentifier() C.NSWhoseSubelementIdentifier {
  return (C.NSWhoseSpecifier_startSubelementIdentifier(goobj.Self()))
}
func (goobj NSWhoseSpecifier) SetStartSubelementIdentifier(subelement C.NSWhoseSubelementIdentifier)  {
  C.NSWhoseSpecifier_setStartSubelementIdentifier(goobj.Self(), subelement)
}
//REJECT: NSInteger
//func (goobj NSWhoseSpecifier) StartSubelementIndex() C.NSInteger {
//  return (C.NSWhoseSpecifier_startSubelementIndex(goobj.Self()))
//}
//REJECT: index
//func (goobj NSWhoseSpecifier) SetStartSubelementIndex(index C.NSInteger)  {
//  C.NSWhoseSpecifier_setStartSubelementIndex(goobj.Self(), index)
//}
func (goobj NSWhoseSpecifier) EndSubelementIdentifier() C.NSWhoseSubelementIdentifier {
  return (C.NSWhoseSpecifier_endSubelementIdentifier(goobj.Self()))
}
func (goobj NSWhoseSpecifier) SetEndSubelementIdentifier(subelement C.NSWhoseSubelementIdentifier)  {
  C.NSWhoseSpecifier_setEndSubelementIdentifier(goobj.Self(), subelement)
}
//REJECT: NSInteger
//func (goobj NSWhoseSpecifier) EndSubelementIndex() C.NSInteger {
//  return (C.NSWhoseSpecifier_endSubelementIndex(goobj.Self()))
//}
//REJECT: index
//func (goobj NSWhoseSpecifier) SetEndSubelementIndex(index C.NSInteger)  {
//  C.NSWhoseSpecifier_setEndSubelementIndex(goobj.Self(), index)
//}

type NSCloneCommand struct {
  NSScriptCommand
}
func NSCloneCommand_(i Id) NSCloneCommand {
  return NSCloneCommand{ NSScriptCommand_(i) }
}
func NSCloneCommand_init() NSCloneCommand {
  p := Id(C.NSCloneCommand_init())
  return NSCloneCommand_(p)
}
func (goobj NSCloneCommand) SetReceiversSpecifier(receiversRef NSScriptObjectSpecifier)  {
  C.NSCloneCommand_setReceiversSpecifier(goobj.Self(), receiversRef.Self())
}
func (goobj NSCloneCommand) KeySpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSCloneCommand_keySpecifier(goobj.Self())))
}

type NSCloseCommand struct {
  NSScriptCommand
}
func NSCloseCommand_(i Id) NSCloseCommand {
  return NSCloseCommand{ NSScriptCommand_(i) }
}
func NSCloseCommand_init() NSCloseCommand {
  p := Id(C.NSCloseCommand_init())
  return NSCloseCommand_(p)
}
func (goobj NSCloseCommand) SaveOptions() C.NSSaveOptions {
  return (C.NSCloseCommand_saveOptions(goobj.Self()))
}

type NSCountCommand struct {
  NSScriptCommand
}
func NSCountCommand_(i Id) NSCountCommand {
  return NSCountCommand{ NSScriptCommand_(i) }
}
func NSCountCommand_init() NSCountCommand {
  p := Id(C.NSCountCommand_init())
  return NSCountCommand_(p)
}


type NSCreateCommand struct {
  NSScriptCommand
}
func NSCreateCommand_(i Id) NSCreateCommand {
  return NSCreateCommand{ NSScriptCommand_(i) }
}
func NSCreateCommand_init() NSCreateCommand {
  p := Id(C.NSCreateCommand_init())
  return NSCreateCommand_(p)
}
func (goobj NSCreateCommand) CreateClassDescription() NSScriptClassDescription {
  return NSScriptClassDescription_(Id(C.NSCreateCommand_createClassDescription(goobj.Self())))
}
func (goobj NSCreateCommand) ResolvedKeyDictionary() NSDictionary {
  return NSDictionary_(Id(C.NSCreateCommand_resolvedKeyDictionary(goobj.Self())))
}

type NSDeleteCommand struct {
  NSScriptCommand
}
func NSDeleteCommand_(i Id) NSDeleteCommand {
  return NSDeleteCommand{ NSScriptCommand_(i) }
}
func NSDeleteCommand_init() NSDeleteCommand {
  p := Id(C.NSDeleteCommand_init())
  return NSDeleteCommand_(p)
}
func (goobj NSDeleteCommand) SetReceiversSpecifier(receiversRef NSScriptObjectSpecifier)  {
  C.NSDeleteCommand_setReceiversSpecifier(goobj.Self(), receiversRef.Self())
}
func (goobj NSDeleteCommand) KeySpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSDeleteCommand_keySpecifier(goobj.Self())))
}

type NSExistsCommand struct {
  NSScriptCommand
}
func NSExistsCommand_(i Id) NSExistsCommand {
  return NSExistsCommand{ NSScriptCommand_(i) }
}
func NSExistsCommand_init() NSExistsCommand {
  p := Id(C.NSExistsCommand_init())
  return NSExistsCommand_(p)
}


type NSGetCommand struct {
  NSScriptCommand
}
func NSGetCommand_(i Id) NSGetCommand {
  return NSGetCommand{ NSScriptCommand_(i) }
}
func NSGetCommand_init() NSGetCommand {
  p := Id(C.NSGetCommand_init())
  return NSGetCommand_(p)
}


type NSMoveCommand struct {
  NSScriptCommand
}
func NSMoveCommand_(i Id) NSMoveCommand {
  return NSMoveCommand{ NSScriptCommand_(i) }
}
func NSMoveCommand_init() NSMoveCommand {
  p := Id(C.NSMoveCommand_init())
  return NSMoveCommand_(p)
}
func (goobj NSMoveCommand) SetReceiversSpecifier(receiversRef NSScriptObjectSpecifier)  {
  C.NSMoveCommand_setReceiversSpecifier(goobj.Self(), receiversRef.Self())
}
func (goobj NSMoveCommand) KeySpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSMoveCommand_keySpecifier(goobj.Self())))
}

type NSQuitCommand struct {
  NSScriptCommand
}
func NSQuitCommand_(i Id) NSQuitCommand {
  return NSQuitCommand{ NSScriptCommand_(i) }
}
func NSQuitCommand_init() NSQuitCommand {
  p := Id(C.NSQuitCommand_init())
  return NSQuitCommand_(p)
}
func (goobj NSQuitCommand) SaveOptions() C.NSSaveOptions {
  return (C.NSQuitCommand_saveOptions(goobj.Self()))
}

type NSSetCommand struct {
  NSScriptCommand
}
func NSSetCommand_(i Id) NSSetCommand {
  return NSSetCommand{ NSScriptCommand_(i) }
}
func NSSetCommand_init() NSSetCommand {
  p := Id(C.NSSetCommand_init())
  return NSSetCommand_(p)
}
func (goobj NSSetCommand) SetReceiversSpecifier(receiversRef NSScriptObjectSpecifier)  {
  C.NSSetCommand_setReceiversSpecifier(goobj.Self(), receiversRef.Self())
}
func (goobj NSSetCommand) KeySpecifier() NSScriptObjectSpecifier {
  return NSScriptObjectSpecifier_(Id(C.NSSetCommand_keySpecifier(goobj.Self())))
}

type NSScriptSuiteRegistry struct {
  NSObject
}
func NSScriptSuiteRegistry_(i Id) NSScriptSuiteRegistry {
  return NSScriptSuiteRegistry{ NSObject_(i) }
}
func NSScriptSuiteRegistry_init() NSScriptSuiteRegistry {
  p := Id(C.NSScriptSuiteRegistry_init())
  return NSScriptSuiteRegistry_(p)
}
func (goobj NSScriptSuiteRegistry) LoadSuitesFromBundle(bundle NSBundle)  {
  C.NSScriptSuiteRegistry_loadSuitesFromBundle(goobj.Self(), bundle.Self())
}
func (goobj NSScriptSuiteRegistry) LoadSuiteWithDictionaryFromBundle(suiteDeclaration NSDictionary, bundle NSBundle)  {
  C.NSScriptSuiteRegistry_loadSuiteWithDictionaryFromBundle(goobj.Self(), suiteDeclaration.Self(), bundle.Self())
}
func (goobj NSScriptSuiteRegistry) RegisterClassDescription(classDescription NSScriptClassDescription)  {
  C.NSScriptSuiteRegistry_registerClassDescription(goobj.Self(), classDescription.Self())
}
func (goobj NSScriptSuiteRegistry) RegisterCommandDescription(commandDescription NSScriptCommandDescription)  {
  C.NSScriptSuiteRegistry_registerCommandDescription(goobj.Self(), commandDescription.Self())
}
func (goobj NSScriptSuiteRegistry) SuiteNames() NSArray {
  return NSArray_(Id(C.NSScriptSuiteRegistry_suiteNames(goobj.Self())))
}
//REJECT: FourCharCode
//func (goobj NSScriptSuiteRegistry) AppleEventCodeForSuite(suiteName NSString) C.FourCharCode {
//  return (C.NSScriptSuiteRegistry_appleEventCodeForSuite(goobj.Self(), suiteName.Self()))
//}
func (goobj NSScriptSuiteRegistry) BundleForSuite(suiteName NSString) NSBundle {
  return NSBundle_(Id(C.NSScriptSuiteRegistry_bundleForSuite(goobj.Self(), suiteName.Self())))
}
func (goobj NSScriptSuiteRegistry) ClassDescriptionsInSuite(suiteName NSString) NSDictionary {
  return NSDictionary_(Id(C.NSScriptSuiteRegistry_classDescriptionsInSuite(goobj.Self(), suiteName.Self())))
}
func (goobj NSScriptSuiteRegistry) CommandDescriptionsInSuite(suiteName NSString) NSDictionary {
  return NSDictionary_(Id(C.NSScriptSuiteRegistry_commandDescriptionsInSuite(goobj.Self(), suiteName.Self())))
}
//REJECT: appleEventCode
//func (goobj NSScriptSuiteRegistry) SuiteForAppleEventCode(appleEventCode C.FourCharCode) NSString {
//  return NSString_(Id(C.NSScriptSuiteRegistry_suiteForAppleEventCode(goobj.Self(), appleEventCode)))
//}
//REJECT: appleEventCode
//func (goobj NSScriptSuiteRegistry) ClassDescriptionWithAppleEventCode(appleEventCode C.FourCharCode) NSScriptClassDescription {
//  return NSScriptClassDescription_(Id(C.NSScriptSuiteRegistry_classDescriptionWithAppleEventCode(goobj.Self(), appleEventCode)))
//}
//REJECT: appleEventClassCode appleEventIDCode
//func (goobj NSScriptSuiteRegistry) CommandDescriptionWithAppleEventClassAndAppleEventCode(appleEventClassCode C.FourCharCode, appleEventIDCode C.FourCharCode) NSScriptCommandDescription {
//  return NSScriptCommandDescription_(Id(C.NSScriptSuiteRegistry_commandDescriptionWithAppleEventClassAndAppleEventCode(goobj.Self(), appleEventClassCode, appleEventIDCode)))
//}
func (goobj NSScriptSuiteRegistry) AeteResource(languageName NSString) NSData {
  return NSData_(Id(C.NSScriptSuiteRegistry_aeteResource(goobj.Self(), languageName.Self())))
}
func NSScriptSuiteRegistry_sharedScriptSuiteRegistry() NSScriptSuiteRegistry {
  return NSScriptSuiteRegistry_(Id(C.NSScriptSuiteRegistry__sharedScriptSuiteRegistry()))
}
func NSScriptSuiteRegistry_setSharedScriptSuiteRegistry(registry NSScriptSuiteRegistry)  {
  C.NSScriptSuiteRegistry__setSharedScriptSuiteRegistry(registry.Self())
}
type NSScriptWhoseTest struct {
  NSObject
}
func NSScriptWhoseTest_(i Id) NSScriptWhoseTest {
  return NSScriptWhoseTest{ NSObject_(i) }
}
func NSScriptWhoseTest_init() NSScriptWhoseTest {
  p := Id(C.NSScriptWhoseTest_init())
  return NSScriptWhoseTest_(p)
}
func (goobj NSScriptWhoseTest) IsTrue() C.bool {
  return (C.NSScriptWhoseTest_isTrue(goobj.Self()))
}

type NSLogicalTest struct {
  NSScriptWhoseTest
}
func NSLogicalTest_(i Id) NSLogicalTest {
  return NSLogicalTest{ NSScriptWhoseTest_(i) }
}
func NSLogicalTest_init() NSLogicalTest {
  p := Id(C.NSLogicalTest_init())
  return NSLogicalTest_(p)
}
func (goobj NSLogicalTest) InitAndTestWithTests(subTests NSArray) Id {
  return Id_(C.NSLogicalTest_initAndTestWithTests(goobj.Self(), subTests.Self()))
}
func (goobj NSLogicalTest) InitOrTestWithTests(subTests NSArray) Id {
  return Id_(C.NSLogicalTest_initOrTestWithTests(goobj.Self(), subTests.Self()))
}
func (goobj NSLogicalTest) InitNotTestWithTest(subTest NSScriptWhoseTest) Id {
  return Id_(C.NSLogicalTest_initNotTestWithTest(goobj.Self(), subTest.Self()))
}

type NSSpecifierTest struct {
  NSScriptWhoseTest
}
func NSSpecifierTest_(i Id) NSSpecifierTest {
  return NSSpecifierTest{ NSScriptWhoseTest_(i) }
}
func NSSpecifierTest_init() NSSpecifierTest {
  p := Id(C.NSSpecifierTest_init())
  return NSSpecifierTest_(p)
}
func NSSpecifierTest_initWithObjectSpecifierComparisonOperatorTestObject(obj1 NSScriptObjectSpecifier, compOp C.NSTestComparisonOperation, obj2 Id) NSSpecifierTest {
  return NSSpecifierTest_(Id(C.NSSpecifierTest_initWithObjectSpecifierComparisonOperatorTestObject(obj1.Self(), compOp, unsafe.Pointer(obj2))))
}

type NSSpellServer struct {
  NSObject
}
func NSSpellServer_(i Id) NSSpellServer {
  return NSSpellServer{ NSObject_(i) }
}
func NSSpellServer_init() NSSpellServer {
  p := Id(C.NSSpellServer_init())
  return NSSpellServer_(p)
}
func (goobj NSSpellServer) SetDelegate(anObject Id)  {
  C.NSSpellServer_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSSpellServer) Delegate() Id {
  return Id_(C.NSSpellServer_delegate(goobj.Self()))
}
func (goobj NSSpellServer) RegisterLanguageByVendor(language NSString, vendor NSString) C.bool {
  return (C.NSSpellServer_registerLanguageByVendor(goobj.Self(), language.Self(), vendor.Self()))
}
func (goobj NSSpellServer) IsWordInUserDictionariesCaseSensitive(word NSString, flag C.bool) C.bool {
  return (C.NSSpellServer_isWordInUserDictionariesCaseSensitive(goobj.Self(), word.Self(), flag))
}
func (goobj NSSpellServer) Run()  {
  C.NSSpellServer_run(goobj.Self())
}

type NSUserNotification struct {
  NSObject
}
func NSUserNotification_(i Id) NSUserNotification {
  return NSUserNotification{ NSObject_(i) }
}
func NSUserNotification_init() NSUserNotification {
  p := Id(C.NSUserNotification_init())
  return NSUserNotification_(p)
}
func (goobj NSUserNotification) Title() NSString {
  return NSString_(Id(C.NSUserNotification_title(goobj.Self())))
}
func (goobj NSUserNotification) SetTitle(title NSString)  {
  C.NSUserNotification_setTitle(goobj.Self(), title.Self())
}
func (goobj NSUserNotification) Subtitle() NSString {
  return NSString_(Id(C.NSUserNotification_subtitle(goobj.Self())))
}
func (goobj NSUserNotification) SetSubtitle(subtitle NSString)  {
  C.NSUserNotification_setSubtitle(goobj.Self(), subtitle.Self())
}
func (goobj NSUserNotification) InformativeText() NSString {
  return NSString_(Id(C.NSUserNotification_informativeText(goobj.Self())))
}
func (goobj NSUserNotification) SetInformativeText(informativeText NSString)  {
  C.NSUserNotification_setInformativeText(goobj.Self(), informativeText.Self())
}
func (goobj NSUserNotification) ActionButtonTitle() NSString {
  return NSString_(Id(C.NSUserNotification_actionButtonTitle(goobj.Self())))
}
func (goobj NSUserNotification) SetActionButtonTitle(actionButtonTitle NSString)  {
  C.NSUserNotification_setActionButtonTitle(goobj.Self(), actionButtonTitle.Self())
}
func (goobj NSUserNotification) UserInfo() NSDictionary {
  return NSDictionary_(Id(C.NSUserNotification_userInfo(goobj.Self())))
}
func (goobj NSUserNotification) SetUserInfo(userInfo NSDictionary)  {
  C.NSUserNotification_setUserInfo(goobj.Self(), userInfo.Self())
}
func (goobj NSUserNotification) DeliveryDate() NSDate {
  return NSDate_(Id(C.NSUserNotification_deliveryDate(goobj.Self())))
}
func (goobj NSUserNotification) SetDeliveryDate(deliveryDate NSDate)  {
  C.NSUserNotification_setDeliveryDate(goobj.Self(), deliveryDate.Self())
}
func (goobj NSUserNotification) DeliveryTimeZone() NSTimeZone {
  return NSTimeZone_(Id(C.NSUserNotification_deliveryTimeZone(goobj.Self())))
}
func (goobj NSUserNotification) SetDeliveryTimeZone(deliveryTimeZone NSTimeZone)  {
  C.NSUserNotification_setDeliveryTimeZone(goobj.Self(), deliveryTimeZone.Self())
}
func (goobj NSUserNotification) DeliveryRepeatInterval() NSDateComponents {
  return NSDateComponents_(Id(C.NSUserNotification_deliveryRepeatInterval(goobj.Self())))
}
func (goobj NSUserNotification) SetDeliveryRepeatInterval(deliveryRepeatInterval NSDateComponents)  {
  C.NSUserNotification_setDeliveryRepeatInterval(goobj.Self(), deliveryRepeatInterval.Self())
}
func (goobj NSUserNotification) ActualDeliveryDate() NSDate {
  return NSDate_(Id(C.NSUserNotification_actualDeliveryDate(goobj.Self())))
}
func (goobj NSUserNotification) IsPresented() C.char {
  return (C.NSUserNotification_isPresented(goobj.Self()))
}
func (goobj NSUserNotification) IsRemote() C.char {
  return (C.NSUserNotification_isRemote(goobj.Self()))
}
func (goobj NSUserNotification) SoundName() NSString {
  return NSString_(Id(C.NSUserNotification_soundName(goobj.Self())))
}
func (goobj NSUserNotification) SetSoundName(soundName NSString)  {
  C.NSUserNotification_setSoundName(goobj.Self(), soundName.Self())
}
func (goobj NSUserNotification) HasActionButton() C.bool {
  return (C.NSUserNotification_hasActionButton(goobj.Self()))
}
func (goobj NSUserNotification) SetHasActionButton(hasActionButton C.bool)  {
  C.NSUserNotification_setHasActionButton(goobj.Self(), hasActionButton)
}
func (goobj NSUserNotification) ActivationType() C.NSUserNotificationActivationType {
  return (C.NSUserNotification_activationType(goobj.Self()))
}
func (goobj NSUserNotification) OtherButtonTitle() NSString {
  return NSString_(Id(C.NSUserNotification_otherButtonTitle(goobj.Self())))
}
func (goobj NSUserNotification) SetOtherButtonTitle(otherButtonTitle NSString)  {
  C.NSUserNotification_setOtherButtonTitle(goobj.Self(), otherButtonTitle.Self())
}
func (goobj NSUserNotification) Identifier() NSString {
  return NSString_(Id(C.NSUserNotification_identifier(goobj.Self())))
}
func (goobj NSUserNotification) SetIdentifier(identifier NSString)  {
  C.NSUserNotification_setIdentifier(goobj.Self(), identifier.Self())
}
func (goobj NSUserNotification) ContentImage() NSImage {
  return NSImage_(Id(C.NSUserNotification_contentImage(goobj.Self())))
}
func (goobj NSUserNotification) SetContentImage(contentImage NSImage)  {
  C.NSUserNotification_setContentImage(goobj.Self(), contentImage.Self())
}
func (goobj NSUserNotification) HasReplyButton() C.bool {
  return (C.NSUserNotification_hasReplyButton(goobj.Self()))
}
func (goobj NSUserNotification) SetHasReplyButton(hasReplyButton C.bool)  {
  C.NSUserNotification_setHasReplyButton(goobj.Self(), hasReplyButton)
}
func (goobj NSUserNotification) ResponsePlaceholder() NSString {
  return NSString_(Id(C.NSUserNotification_responsePlaceholder(goobj.Self())))
}
func (goobj NSUserNotification) SetResponsePlaceholder(responsePlaceholder NSString)  {
  C.NSUserNotification_setResponsePlaceholder(goobj.Self(), responsePlaceholder.Self())
}
func (goobj NSUserNotification) Response() NSAttributedString {
  return NSAttributedString_(Id(C.NSUserNotification_response(goobj.Self())))
}

type NSUserNotificationCenter struct {
  NSObject
}
func NSUserNotificationCenter_(i Id) NSUserNotificationCenter {
  return NSUserNotificationCenter{ NSObject_(i) }
}
func NSUserNotificationCenter_init() NSUserNotificationCenter {
  p := Id(C.NSUserNotificationCenter_init())
  return NSUserNotificationCenter_(p)
}
func (goobj NSUserNotificationCenter) ScheduleNotification(notification NSUserNotification)  {
  C.NSUserNotificationCenter_scheduleNotification(goobj.Self(), notification.Self())
}
func (goobj NSUserNotificationCenter) RemoveScheduledNotification(notification NSUserNotification)  {
  C.NSUserNotificationCenter_removeScheduledNotification(goobj.Self(), notification.Self())
}
func (goobj NSUserNotificationCenter) DeliverNotification(notification NSUserNotification)  {
  C.NSUserNotificationCenter_deliverNotification(goobj.Self(), notification.Self())
}
func (goobj NSUserNotificationCenter) RemoveDeliveredNotification(notification NSUserNotification)  {
  C.NSUserNotificationCenter_removeDeliveredNotification(goobj.Self(), notification.Self())
}
func (goobj NSUserNotificationCenter) RemoveAllDeliveredNotifications()  {
  C.NSUserNotificationCenter_removeAllDeliveredNotifications(goobj.Self())
}
func (goobj NSUserNotificationCenter) Delegate() Id {
  return Id_(C.NSUserNotificationCenter_delegate(goobj.Self()))
}
func (goobj NSUserNotificationCenter) SetDelegate(delegate Id)  {
  C.NSUserNotificationCenter_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSUserNotificationCenter) ScheduledNotifications() NSArray {
  return NSArray_(Id(C.NSUserNotificationCenter_scheduledNotifications(goobj.Self())))
}
func (goobj NSUserNotificationCenter) SetScheduledNotifications(scheduledNotifications NSArray)  {
  C.NSUserNotificationCenter_setScheduledNotifications(goobj.Self(), scheduledNotifications.Self())
}
func (goobj NSUserNotificationCenter) DeliveredNotifications() NSArray {
  return NSArray_(Id(C.NSUserNotificationCenter_deliveredNotifications(goobj.Self())))
}
func NSUserNotificationCenter_defaultUserNotificationCenter() NSUserNotificationCenter {
  return NSUserNotificationCenter_(Id(C.NSUserNotificationCenter__defaultUserNotificationCenter()))
}
type NSUserScriptTask struct {
  NSObject
}
func NSUserScriptTask_(i Id) NSUserScriptTask {
  return NSUserScriptTask{ NSObject_(i) }
}
func NSUserScriptTask_init() NSUserScriptTask {
  p := Id(C.NSUserScriptTask_init())
  return NSUserScriptTask_(p)
}
func NSUserScriptTask_initWithURLError(url NSURL, error NSError) NSUserScriptTask {
  return NSUserScriptTask_(Id(C.NSUserScriptTask_initWithURLError(url.Self(), error.Self())))
}
func (goobj NSUserScriptTask) ScriptURL() NSURL {
  return NSURL_(Id(C.NSUserScriptTask_scriptURL(goobj.Self())))
}
func (goobj NSUserScriptTask) ExecuteWithCompletionHandler(handler C.NSUserScriptTaskCompletionHandler)  {
  C.NSUserScriptTask_executeWithCompletionHandler(goobj.Self(), handler)
}

type NSUserUnixTask struct {
  NSUserScriptTask
}
func NSUserUnixTask_(i Id) NSUserUnixTask {
  return NSUserUnixTask{ NSUserScriptTask_(i) }
}
func NSUserUnixTask_init() NSUserUnixTask {
  p := Id(C.NSUserUnixTask_init())
  return NSUserUnixTask_(p)
}
func (goobj NSUserUnixTask) ExecuteWithArgumentsCompletionHandler(arguments NSArray, handler C.NSUserUnixTaskCompletionHandler)  {
  C.NSUserUnixTask_executeWithArgumentsCompletionHandler(goobj.Self(), arguments.Self(), handler)
}
func (goobj NSUserUnixTask) StandardInput() NSFileHandle {
  return NSFileHandle_(Id(C.NSUserUnixTask_standardInput(goobj.Self())))
}
func (goobj NSUserUnixTask) SetStandardInput(standardInput NSFileHandle)  {
  C.NSUserUnixTask_setStandardInput(goobj.Self(), standardInput.Self())
}
func (goobj NSUserUnixTask) StandardOutput() NSFileHandle {
  return NSFileHandle_(Id(C.NSUserUnixTask_standardOutput(goobj.Self())))
}
func (goobj NSUserUnixTask) SetStandardOutput(standardOutput NSFileHandle)  {
  C.NSUserUnixTask_setStandardOutput(goobj.Self(), standardOutput.Self())
}
func (goobj NSUserUnixTask) StandardError() NSFileHandle {
  return NSFileHandle_(Id(C.NSUserUnixTask_standardError(goobj.Self())))
}
func (goobj NSUserUnixTask) SetStandardError(standardError NSFileHandle)  {
  C.NSUserUnixTask_setStandardError(goobj.Self(), standardError.Self())
}

type NSUserAppleScriptTask struct {
  NSUserScriptTask
}
func NSUserAppleScriptTask_(i Id) NSUserAppleScriptTask {
  return NSUserAppleScriptTask{ NSUserScriptTask_(i) }
}
func NSUserAppleScriptTask_init() NSUserAppleScriptTask {
  p := Id(C.NSUserAppleScriptTask_init())
  return NSUserAppleScriptTask_(p)
}
func (goobj NSUserAppleScriptTask) ExecuteWithAppleEventCompletionHandler(event NSAppleEventDescriptor, handler C.NSUserAppleScriptTaskCompletionHandler)  {
  C.NSUserAppleScriptTask_executeWithAppleEventCompletionHandler(goobj.Self(), event.Self(), handler)
}

type NSUserAutomatorTask struct {
  NSUserScriptTask
}
func NSUserAutomatorTask_(i Id) NSUserAutomatorTask {
  return NSUserAutomatorTask{ NSUserScriptTask_(i) }
}
func NSUserAutomatorTask_init() NSUserAutomatorTask {
  p := Id(C.NSUserAutomatorTask_init())
  return NSUserAutomatorTask_(p)
}
func (goobj NSUserAutomatorTask) ExecuteWithInputCompletionHandler(input Id, handler C.NSUserAutomatorTaskCompletionHandler)  {
  C.NSUserAutomatorTask_executeWithInputCompletionHandler(goobj.Self(), unsafe.Pointer(input), handler)
}
func (goobj NSUserAutomatorTask) Variables() NSDictionary {
  return NSDictionary_(Id(C.NSUserAutomatorTask_variables(goobj.Self())))
}
func (goobj NSUserAutomatorTask) SetVariables(variables NSDictionary)  {
  C.NSUserAutomatorTask_setVariables(goobj.Self(), variables.Self())
}

type NSXPCConnection struct {
  NSObject
}
func NSXPCConnection_(i Id) NSXPCConnection {
  return NSXPCConnection{ NSObject_(i) }
}
func NSXPCConnection_init() NSXPCConnection {
  p := Id(C.NSXPCConnection_init())
  return NSXPCConnection_(p)
}
func NSXPCConnection_initWithServiceName(serviceName NSString) NSXPCConnection {
  return NSXPCConnection_(Id(C.NSXPCConnection_initWithServiceName(serviceName.Self())))
}
func NSXPCConnection_initWithMachServiceNameOptions(name NSString, options C.NSXPCConnectionOptions) NSXPCConnection {
  return NSXPCConnection_(Id(C.NSXPCConnection_initWithMachServiceNameOptions(name.Self(), options)))
}
func NSXPCConnection_initWithListenerEndpoint(endpoint NSXPCListenerEndpoint) NSXPCConnection {
  return NSXPCConnection_(Id(C.NSXPCConnection_initWithListenerEndpoint(endpoint.Self())))
}
func (goobj NSXPCConnection) RemoteObjectProxy() Id {
  return Id_(C.NSXPCConnection_remoteObjectProxy(goobj.Self()))
}
//REJECT: handler
//func (goobj NSXPCConnection) RemoteObjectProxyWithErrorHandler(handler *INVALID TYPE*) Id {
//  return Id_(C.NSXPCConnection_remoteObjectProxyWithErrorHandler(goobj.Self(), handler))
//}
func (goobj NSXPCConnection) Resume()  {
  C.NSXPCConnection_resume(goobj.Self())
}
func (goobj NSXPCConnection) Suspend()  {
  C.NSXPCConnection_suspend(goobj.Self())
}
func (goobj NSXPCConnection) Invalidate()  {
  C.NSXPCConnection_invalidate(goobj.Self())
}
func (goobj NSXPCConnection) ServiceName() NSString {
  return NSString_(Id(C.NSXPCConnection_serviceName(goobj.Self())))
}
func (goobj NSXPCConnection) Endpoint() NSXPCListenerEndpoint {
  return NSXPCListenerEndpoint_(Id(C.NSXPCConnection_endpoint(goobj.Self())))
}
func (goobj NSXPCConnection) ExportedInterface() NSXPCInterface {
  return NSXPCInterface_(Id(C.NSXPCConnection_exportedInterface(goobj.Self())))
}
func (goobj NSXPCConnection) SetExportedInterface(exportedInterface NSXPCInterface)  {
  C.NSXPCConnection_setExportedInterface(goobj.Self(), exportedInterface.Self())
}
func (goobj NSXPCConnection) ExportedObject() Id {
  return Id_(C.NSXPCConnection_exportedObject(goobj.Self()))
}
func (goobj NSXPCConnection) SetExportedObject(exportedObject Id)  {
  C.NSXPCConnection_setExportedObject(goobj.Self(), unsafe.Pointer(exportedObject))
}
func (goobj NSXPCConnection) RemoteObjectInterface() NSXPCInterface {
  return NSXPCInterface_(Id(C.NSXPCConnection_remoteObjectInterface(goobj.Self())))
}
func (goobj NSXPCConnection) SetRemoteObjectInterface(remoteObjectInterface NSXPCInterface)  {
  C.NSXPCConnection_setRemoteObjectInterface(goobj.Self(), remoteObjectInterface.Self())
}
//REJECT: *INVALID TYPE*
//func (goobj NSXPCConnection) InterruptionHandler() *INVALID TYPE* {
//  return (C.NSXPCConnection_interruptionHandler(goobj.Self()))
//}
//REJECT: interruptionHandler
//func (goobj NSXPCConnection) SetInterruptionHandler(interruptionHandler *INVALID TYPE*)  {
//  C.NSXPCConnection_setInterruptionHandler(goobj.Self(), interruptionHandler)
//}
//REJECT: *INVALID TYPE*
//func (goobj NSXPCConnection) InvalidationHandler() *INVALID TYPE* {
//  return (C.NSXPCConnection_invalidationHandler(goobj.Self()))
//}
//REJECT: invalidationHandler
//func (goobj NSXPCConnection) SetInvalidationHandler(invalidationHandler *INVALID TYPE*)  {
//  C.NSXPCConnection_setInvalidationHandler(goobj.Self(), invalidationHandler)
//}
//REJECT: au_asid_t
//func (goobj NSXPCConnection) AuditSessionIdentifier() C.au_asid_t {
//  return (C.NSXPCConnection_auditSessionIdentifier(goobj.Self()))
//}
//REJECT: pid_t
//func (goobj NSXPCConnection) ProcessIdentifier() C.pid_t {
//  return (C.NSXPCConnection_processIdentifier(goobj.Self()))
//}
//REJECT: uid_t
//func (goobj NSXPCConnection) EffectiveUserIdentifier() C.uid_t {
//  return (C.NSXPCConnection_effectiveUserIdentifier(goobj.Self()))
//}
//REJECT: gid_t
//func (goobj NSXPCConnection) EffectiveGroupIdentifier() C.gid_t {
//  return (C.NSXPCConnection_effectiveGroupIdentifier(goobj.Self()))
//}

type NSXPCListener struct {
  NSObject
}
func NSXPCListener_(i Id) NSXPCListener {
  return NSXPCListener{ NSObject_(i) }
}
func NSXPCListener_init() NSXPCListener {
  p := Id(C.NSXPCListener_init())
  return NSXPCListener_(p)
}
func NSXPCListener_initWithMachServiceName(name NSString) NSXPCListener {
  return NSXPCListener_(Id(C.NSXPCListener_initWithMachServiceName(name.Self())))
}
func (goobj NSXPCListener) Endpoint() NSXPCListenerEndpoint {
  return NSXPCListenerEndpoint_(Id(C.NSXPCListener_endpoint(goobj.Self())))
}
func (goobj NSXPCListener) Resume()  {
  C.NSXPCListener_resume(goobj.Self())
}
func (goobj NSXPCListener) Suspend()  {
  C.NSXPCListener_suspend(goobj.Self())
}
func (goobj NSXPCListener) Invalidate()  {
  C.NSXPCListener_invalidate(goobj.Self())
}
func (goobj NSXPCListener) Delegate() Id {
  return Id_(C.NSXPCListener_delegate(goobj.Self()))
}
func (goobj NSXPCListener) SetDelegate(delegate Id)  {
  C.NSXPCListener_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func NSXPCListener_serviceListener() Id {
  return Id_(C.NSXPCListener__serviceListener())
}
func NSXPCListener_anonymousListener() Id {
  return Id_(C.NSXPCListener__anonymousListener())
}
type NSXPCInterface struct {
  NSObject
}
func NSXPCInterface_(i Id) NSXPCInterface {
  return NSXPCInterface{ NSObject_(i) }
}
func NSXPCInterface_init() NSXPCInterface {
  p := Id(C.NSXPCInterface_init())
  return NSXPCInterface_(p)
}
//REJECT: sel
//func (goobj NSXPCInterface) SetClassesForSelectorArgumentIndexOfReply(classes NSSet, sel C.SEL, arg C.uint, ofReply C.bool)  {
//  C.NSXPCInterface_setClassesForSelectorArgumentIndexOfReply(goobj.Self(), classes.Self(), sel, arg, ofReply)
//}
//REJECT: sel
//func (goobj NSXPCInterface) ClassesForSelectorArgumentIndexOfReply(sel C.SEL, arg C.uint, ofReply C.bool) NSSet {
//  return NSSet_(Id(C.NSXPCInterface_classesForSelectorArgumentIndexOfReply(goobj.Self(), sel, arg, ofReply)))
//}
//REJECT: sel
//func (goobj NSXPCInterface) SetInterfaceForSelectorArgumentIndexOfReply(ifc NSXPCInterface, sel C.SEL, arg C.uint, ofReply C.bool)  {
//  C.NSXPCInterface_setInterfaceForSelectorArgumentIndexOfReply(goobj.Self(), ifc.Self(), sel, arg, ofReply)
//}
//REJECT: sel
//func (goobj NSXPCInterface) InterfaceForSelectorArgumentIndexOfReply(sel C.SEL, arg C.uint, ofReply C.bool) NSXPCInterface {
//  return NSXPCInterface_(Id(C.NSXPCInterface_interfaceForSelectorArgumentIndexOfReply(goobj.Self(), sel, arg, ofReply)))
//}
func (goobj NSXPCInterface) Protocol() Protocol {
  return Protocol_(Id(C.NSXPCInterface_protocol(goobj.Self())))
}
func (goobj NSXPCInterface) SetProtocol(protocol Protocol)  {
  C.NSXPCInterface_setProtocol(goobj.Self(), protocol.Self())
}
func NSXPCInterface_interfaceWithProtocol(protocol Protocol) NSXPCInterface {
  return NSXPCInterface_(Id(C.NSXPCInterface__interfaceWithProtocol(protocol.Self())))
}
type NSXPCListenerEndpoint struct {
  NSObject
}
func NSXPCListenerEndpoint_(i Id) NSXPCListenerEndpoint {
  return NSXPCListenerEndpoint{ NSObject_(i) }
}
func NSXPCListenerEndpoint_init() NSXPCListenerEndpoint {
  p := Id(C.NSXPCListenerEndpoint_init())
  return NSXPCListenerEndpoint_(p)
}


type NSAnimation struct {
  NSObject
}
func NSAnimation_(i Id) NSAnimation {
  return NSAnimation{ NSObject_(i) }
}
func NSAnimation_init() NSAnimation {
  p := Id(C.NSAnimation_init())
  return NSAnimation_(p)
}
//REJECT: duration
//func NSAnimation_initWithDurationAnimationCurve(duration C.NSTimeInterval, animationCurve C.NSAnimationCurve) NSAnimation {
//  return NSAnimation_(Id(C.NSAnimation_initWithDurationAnimationCurve(duration, animationCurve)))
//}
func (goobj NSAnimation) StartAnimation()  {
  C.NSAnimation_startAnimation(goobj.Self())
}
func (goobj NSAnimation) StopAnimation()  {
  C.NSAnimation_stopAnimation(goobj.Self())
}
func (goobj NSAnimation) IsAnimating() C.bool {
  return (C.NSAnimation_isAnimating(goobj.Self()))
}
func (goobj NSAnimation) CurrentProgress() C.NSAnimationProgress {
  return (C.NSAnimation_currentProgress(goobj.Self()))
}
func (goobj NSAnimation) SetCurrentProgress(progress C.NSAnimationProgress)  {
  C.NSAnimation_setCurrentProgress(goobj.Self(), progress)
}
//REJECT: duration
//func (goobj NSAnimation) SetDuration(duration C.NSTimeInterval)  {
//  C.NSAnimation_setDuration(goobj.Self(), duration)
//}
//REJECT: NSTimeInterval
//func (goobj NSAnimation) Duration() C.NSTimeInterval {
//  return (C.NSAnimation_duration(goobj.Self()))
//}
func (goobj NSAnimation) AnimationBlockingMode() C.NSAnimationBlockingMode {
  return (C.NSAnimation_animationBlockingMode(goobj.Self()))
}
func (goobj NSAnimation) SetAnimationBlockingMode(animationBlockingMode C.NSAnimationBlockingMode)  {
  C.NSAnimation_setAnimationBlockingMode(goobj.Self(), animationBlockingMode)
}
func (goobj NSAnimation) SetFrameRate(framesPerSecond C.float)  {
  C.NSAnimation_setFrameRate(goobj.Self(), framesPerSecond)
}
func (goobj NSAnimation) FrameRate() C.float {
  return (C.NSAnimation_frameRate(goobj.Self()))
}
func (goobj NSAnimation) SetAnimationCurve(curve C.NSAnimationCurve)  {
  C.NSAnimation_setAnimationCurve(goobj.Self(), curve)
}
func (goobj NSAnimation) AnimationCurve() C.NSAnimationCurve {
  return (C.NSAnimation_animationCurve(goobj.Self()))
}
func (goobj NSAnimation) CurrentValue() C.float {
  return (C.NSAnimation_currentValue(goobj.Self()))
}
func (goobj NSAnimation) SetDelegate(delegate Id)  {
  C.NSAnimation_setDelegate(goobj.Self(), unsafe.Pointer(delegate))
}
func (goobj NSAnimation) Delegate() Id {
  return Id_(C.NSAnimation_delegate(goobj.Self()))
}
func (goobj NSAnimation) ProgressMarks() NSArray {
  return NSArray_(Id(C.NSAnimation_progressMarks(goobj.Self())))
}
func (goobj NSAnimation) SetProgressMarks(progressMarks NSArray)  {
  C.NSAnimation_setProgressMarks(goobj.Self(), progressMarks.Self())
}
func (goobj NSAnimation) AddProgressMark(progressMark C.NSAnimationProgress)  {
  C.NSAnimation_addProgressMark(goobj.Self(), progressMark)
}
func (goobj NSAnimation) RemoveProgressMark(progressMark C.NSAnimationProgress)  {
  C.NSAnimation_removeProgressMark(goobj.Self(), progressMark)
}
func (goobj NSAnimation) StartWhenAnimationReachesProgress(animation NSAnimation, startProgress C.NSAnimationProgress)  {
  C.NSAnimation_startWhenAnimationReachesProgress(goobj.Self(), animation.Self(), startProgress)
}
func (goobj NSAnimation) StopWhenAnimationReachesProgress(animation NSAnimation, stopProgress C.NSAnimationProgress)  {
  C.NSAnimation_stopWhenAnimationReachesProgress(goobj.Self(), animation.Self(), stopProgress)
}
func (goobj NSAnimation) ClearStartAnimation()  {
  C.NSAnimation_clearStartAnimation(goobj.Self())
}
func (goobj NSAnimation) ClearStopAnimation()  {
  C.NSAnimation_clearStopAnimation(goobj.Self())
}
func (goobj NSAnimation) RunLoopModesForAnimating() NSArray {
  return NSArray_(Id(C.NSAnimation_runLoopModesForAnimating(goobj.Self())))
}

type NSViewAnimation struct {
  NSAnimation
}
func NSViewAnimation_(i Id) NSViewAnimation {
  return NSViewAnimation{ NSAnimation_(i) }
}
func NSViewAnimation_init() NSViewAnimation {
  p := Id(C.NSViewAnimation_init())
  return NSViewAnimation_(p)
}
func NSViewAnimation_initWithViewAnimations(viewAnimations NSArray) NSViewAnimation {
  return NSViewAnimation_(Id(C.NSViewAnimation_initWithViewAnimations(viewAnimations.Self())))
}
func (goobj NSViewAnimation) ViewAnimations() NSArray {
  return NSArray_(Id(C.NSViewAnimation_viewAnimations(goobj.Self())))
}
func (goobj NSViewAnimation) SetViewAnimations(viewAnimations NSArray)  {
  C.NSViewAnimation_setViewAnimations(goobj.Self(), viewAnimations.Self())
}

type NSAppearance struct {
  NSObject
}
func NSAppearance_(i Id) NSAppearance {
  return NSAppearance{ NSObject_(i) }
}
func NSAppearance_init() NSAppearance {
  p := Id(C.NSAppearance_init())
  return NSAppearance_(p)
}
func NSAppearance_initWithAppearanceNamedBundle(name NSString, bundle NSBundle) NSAppearance {
  return NSAppearance_(Id(C.NSAppearance_initWithAppearanceNamedBundle(name.Self(), bundle.Self())))
}
func NSAppearance_currentAppearance() NSAppearance {
  return NSAppearance_(Id(C.NSAppearance__currentAppearance()))
}
func NSAppearance_setCurrentAppearance(appearance NSAppearance)  {
  C.NSAppearance__setCurrentAppearance(appearance.Self())
}
func NSAppearance_appearanceNamed(name NSString) NSAppearance {
  return NSAppearance_(Id(C.NSAppearance__appearanceNamed(name.Self())))
}
type NSWindow struct {
  NSResponder
}
func NSWindow_(i Id) NSWindow {
  return NSWindow{ NSResponder_(i) }
}
func NSWindow_init() NSWindow {
  p := Id(C.NSWindow_init())
  return NSWindow_(p)
}
func (goobj NSWindow) FrameRectForContentRect(contentRect NSRect) NSRect {
  return NSRect_(C.NSWindow_frameRectForContentRect(goobj.Self(), C.CGRectMake(C.CGFloat(contentRect.X), C.CGFloat(contentRect.Y), C.CGFloat(contentRect.Width), C.CGFloat(contentRect.Height))))
}
func (goobj NSWindow) ContentRectForFrameRect(frameRect NSRect) NSRect {
  return NSRect_(C.NSWindow_contentRectForFrameRect(goobj.Self(), C.CGRectMake(C.CGFloat(frameRect.X), C.CGFloat(frameRect.Y), C.CGFloat(frameRect.Width), C.CGFloat(frameRect.Height))))
}
func NSWindow_initWithContentRectStyleMaskBackingDefer(contentRect NSRect, aStyle C.uint, bufferingType C.NSBackingStoreType, flag C.bool) NSWindow {
  return NSWindow_(Id(C.NSWindow_initWithContentRectStyleMaskBackingDefer(C.CGRectMake(C.CGFloat(contentRect.X), C.CGFloat(contentRect.Y), C.CGFloat(contentRect.Width), C.CGFloat(contentRect.Height)), aStyle, bufferingType, flag)))
}
func NSWindow_initWithContentRectStyleMaskBackingDeferScreen(contentRect NSRect, aStyle C.uint, bufferingType C.NSBackingStoreType, flag C.bool, screen NSScreen) NSWindow {
  return NSWindow_(Id(C.NSWindow_initWithContentRectStyleMaskBackingDeferScreen(C.CGRectMake(C.CGFloat(contentRect.X), C.CGFloat(contentRect.Y), C.CGFloat(contentRect.Width), C.CGFloat(contentRect.Height)), aStyle, bufferingType, flag, screen.Self())))
}
func (goobj NSWindow) Title() NSString {
  return NSString_(Id(C.NSWindow_title(goobj.Self())))
}
func (goobj NSWindow) SetTitle(aString NSString)  {
  C.NSWindow_setTitle(goobj.Self(), aString.Self())
}
func (goobj NSWindow) SetRepresentedURL(url NSURL)  {
  C.NSWindow_setRepresentedURL(goobj.Self(), url.Self())
}
func (goobj NSWindow) RepresentedURL() NSURL {
  return NSURL_(Id(C.NSWindow_representedURL(goobj.Self())))
}
func (goobj NSWindow) RepresentedFilename() NSString {
  return NSString_(Id(C.NSWindow_representedFilename(goobj.Self())))
}
func (goobj NSWindow) SetRepresentedFilename(aString NSString)  {
  C.NSWindow_setRepresentedFilename(goobj.Self(), aString.Self())
}
func (goobj NSWindow) SetTitleWithRepresentedFilename(filename NSString)  {
  C.NSWindow_setTitleWithRepresentedFilename(goobj.Self(), filename.Self())
}
func (goobj NSWindow) SetExcludedFromWindowsMenu(flag C.bool)  {
  C.NSWindow_setExcludedFromWindowsMenu(goobj.Self(), flag)
}
func (goobj NSWindow) IsExcludedFromWindowsMenu() C.bool {
  return (C.NSWindow_isExcludedFromWindowsMenu(goobj.Self()))
}
func (goobj NSWindow) SetContentView(aView NSView)  {
  C.NSWindow_setContentView(goobj.Self(), aView.Self())
}
func (goobj NSWindow) ContentView() Id {
  return Id_(C.NSWindow_contentView(goobj.Self()))
}
func (goobj NSWindow) SetDelegate(anObject Id)  {
  C.NSWindow_setDelegate(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSWindow) Delegate() Id {
  return Id_(C.NSWindow_delegate(goobj.Self()))
}
//REJECT: NSInteger
//func (goobj NSWindow) WindowNumber() C.NSInteger {
//  return (C.NSWindow_windowNumber(goobj.Self()))
//}
func (goobj NSWindow) StyleMask() C.uint {
  return (C.NSWindow_styleMask(goobj.Self()))
}
func (goobj NSWindow) SetStyleMask(styleMask C.uint)  {
  C.NSWindow_setStyleMask(goobj.Self(), styleMask)
}
func (goobj NSWindow) FieldEditorForObject(createFlag C.bool, anObject Id) NSText {
  return NSText_(Id(C.NSWindow_fieldEditorForObject(goobj.Self(), createFlag, unsafe.Pointer(anObject))))
}
func (goobj NSWindow) EndEditingFor(anObject Id)  {
  C.NSWindow_endEditingFor(goobj.Self(), unsafe.Pointer(anObject))
}
func (goobj NSWindow) ConstrainFrameRectToScreen(frameRect NSRect, screen NSScreen) NSRect {
  return NSRect_(C.NSWindow_constrainFrameRectToScreen(goobj.Self(), C.CGRectMake(C.CGFloat(frameRect.X), C.CGFloat(frameRect.Y), C.CGFloat(frameRect.Width), C.CGFloat(frameRect.Height)), screen.Self()))
}
func (goobj NSWindow) SetFrameDisplay(frameRect NSRect, flag C.bool)  {
  C.NSWindow_setFrameDisplay(goobj.Self(), C.CGRectMake(C.CGFloat(frameRect.X), C.CGFloat(frameRect.Y), C.CGFloat(frameRect.Width), C.CGFloat(frameRect.Height)), flag)
}
//REJECT: aSize
//func (goobj NSWindow) SetContentSize(aSize C.NSSize)  {
//  C.NSWindow_setContentSize(goobj.Self(), aSize)
//}
func (goobj NSWindow) SetFrameOrigin(aPoint NSPoint)  {
  C.NSWindow_setFrameOrigin(goobj.Self(), C.CGPointMake(C.CGFloat(aPoint.X), C.CGFloat(aPoint.Y)))
}
func (goobj NSWindow) SetFrameTopLeftPoint(aPoint NSPoint)  {
  C.NSWindow_setFrameTopLeftPoint(goobj.Self(), C.CGPointMake(C.CGFloat(aPoint.X), C.CGFloat(aPoint.Y)))
}
func (goobj NSWindow) CascadeTopLeftFromPoint(topLeftPoint NSPoint) NSPoint {
  return NSPoint_(C.NSWindow_cascadeTopLeftFromPoint(goobj.Self(), C.CGPointMake(C.CGFloat(topLeftPoint.X), C.CGFloat(topLeftPoint.Y))))
}
func (goobj NSWindow) Frame() NSRect {
  return NSRect_(C.NSWindow_frame(goobj.Self()))
}
//REJECT: NSTimeInterval
//func (goobj NSWindow) AnimationResizeTime(newFrame NSRect) C.NSTimeInterval {
//  return (C.NSWindow_animationResizeTime(goobj.Self(), C.CGRectMake(C.CGFloat(newFrame.X), C.CGFloat(newFrame.Y), C.CGFloat(newFrame.Width), C.CGFloat(newFrame.Height))))
//}
func (goobj NSWindow) SetFrameDisplayAnimate(frameRect NSRect, displayFlag C.bool, animateFlag C.bool)  {
  C.NSWindow_setFrameDisplayAnimate(goobj.Self(), C.CGRectMake(C.CGFloat(frameRect.X), C.CGFloat(frameRect.Y), C.CGFloat(frameRect.Width), C.CGFloat(frameRect.Height)), displayFlag, animateFlag)
}
func (goobj NSWindow) InLiveResize() C.bool {
  return (C.NSWindow_inLiveResize(goobj.Self()))
}
func (goobj NSWindow) SetShowsResizeIndicator(show C.bool)  {
  C.NSWindow_setShowsResizeIndicator(goobj.Self(), show)
}
func (goobj NSWindow) ShowsResizeIndicator() C.bool {
  return (C.NSWindow_showsResizeIndicator(goobj.Self()))
}
//REJECT: increments
//func (goobj NSWindow) SetResizeIncrements(increments C.NSSize)  {
//  C.NSWindow_setResizeIncrements(goobj.Self(), increments)
//}
//REJECT: NSSize
//func (goobj NSWindow) ResizeIncrements() C.NSSize {
//  return (C.NSWindow_resizeIncrements(goobj.Self()))
//}
//REJECT: ratio
//func (goobj NSWindow) SetAspectRatio(ratio C.NSSize)  {
//  C.NSWindow_setAspectRatio(goobj.Self(), ratio)
//}
//REJECT: NSSize
//func (goobj NSWindow) AspectRatio() C.NSSize {
//  return (C.NSWindow_aspectRatio(goobj.Self()))
//}
//REJECT: increments
//func (goobj NSWindow) SetContentResizeIncrements(increments C.NSSize)  {
//  C.NSWindow_setContentResizeIncrements(goobj.Self(), increments)
//}
//REJECT: NSSize
//func (goobj NSWindow) ContentResizeIncrements() C.NSSize {
//  return (C.NSWindow_contentResizeIncrements(goobj.Self()))
//}
//REJECT: ratio
//func (goobj NSWindow) SetContentAspectRatio(ratio C.NSSize)  {
//  C.NSWindow_setContentAspectRatio(goobj.Self(), ratio)
//}
//REJECT: NSSize
//func (goobj NSWindow) ContentAspectRatio() C.NSSize {
//  return (C.NSWindow_contentAspectRatio(goobj.Self()))
//}
func (goobj NSWindow) UseOptimizedDrawing(flag C.bool)  {
  C.NSWindow_useOptimizedDrawing(goobj.Self(), flag)
}
func (goobj NSWindow) DisableFlushWindow()  {
  C.NSWindow_disableFlushWindow(goobj.Self())
}
func (goobj NSWindow) EnableFlushWindow()  {
  C.NSWindow_enableFlushWindow(goobj.Self())
}
func (goobj NSWindow) IsFlushWindowDisabled() C.bool {
  return (C.NSWindow_isFlushWindowDisabled(goobj.Self()))
}
func (goobj NSWindow) FlushWindow()  {
  C.NSWindow_flushWindow(goobj.Self())
}
func (goobj NSWindow) FlushWindowIfNeeded()  {
  C.NSWindow_flushWindowIfNeeded(goobj.Self())
}
func (goobj NSWindow) SetViewsNeedDisplay(flag C.bool)  {
  C.NSWindow_setViewsNeedDisplay(goobj.Self(), flag)
}
func (goobj NSWindow) ViewsNeedDisplay() C.bool {
  return (C.NSWindow_viewsNeedDisplay(goobj.Self()))
}
func (goobj NSWindow) DisplayIfNeeded()  {
  C.NSWindow_displayIfNeeded(goobj.Self())
}
func (goobj NSWindow) Display()  {
  C.NSWindow_display(goobj.Self())
}
func (goobj NSWindow) SetAutodisplay(flag C.bool)  {
  C.NSWindow_setAutodisplay(goobj.Self(), flag)
}
func (goobj NSWindow) IsAutodisplay() C.bool {
  return (C.NSWindow_isAutodisplay(goobj.Self()))
}
func (goobj NSWindow) PreservesContentDuringLiveResize() C.bool {
  return (C.NSWindow_preservesContentDuringLiveResize(goobj.Self()))
}
func (goobj NSWindow) SetPreservesContentDuringLiveResize(flag C.bool)  {
  C.NSWindow_setPreservesContentDuringLiveResize(goobj.Self(), flag)
}
func (goobj NSWindow) Update()  {
  C.NSWindow_update(goobj.Self())
}
func (goobj NSWindow) MakeFirstResponder(aResponder NSResponder) C.bool {
  return (C.NSWindow_makeFirstResponder(goobj.Self(), aResponder.Self()))
}
func (goobj NSWindow) FirstResponder() NSResponder {
  return NSResponder_(Id(C.NSWindow_firstResponder(goobj.Self())))
}
//REJECT: NSInteger
//func (goobj NSWindow) ResizeFlags() C.NSInteger {
//  return (C.NSWindow_resizeFlags(goobj.Self()))
//}
func (goobj NSWindow) KeyDown(theEvent NSEvent)  {
  C.NSWindow_keyDown(goobj.Self(), theEvent.Self())
}
func (goobj NSWindow) Close()  {
  C.NSWindow_close(goobj.Self())
}
func (goobj NSWindow) SetReleasedWhenClosed(flag C.bool)  {
  C.NSWindow_setReleasedWhenClosed(goobj.Self(), flag)
}
func (goobj NSWindow) IsReleasedWhenClosed() C.bool {
  return (C.NSWindow_isReleasedWhenClosed(goobj.Self()))
}
func (goobj NSWindow) Miniaturize(sender Id)  {
  C.NSWindow_miniaturize(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) Deminiaturize(sender Id)  {
  C.NSWindow_deminiaturize(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) IsZoomed() C.bool {
  return (C.NSWindow_isZoomed(goobj.Self()))
}
func (goobj NSWindow) Zoom(sender Id)  {
  C.NSWindow_zoom(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) IsMiniaturized() C.bool {
  return (C.NSWindow_isMiniaturized(goobj.Self()))
}
//REJECT: anAction
//func (goobj NSWindow) TryToPerformWith(anAction C.SEL, anObject Id) C.bool {
//  return (C.NSWindow_tryToPerformWith(goobj.Self(), anAction, unsafe.Pointer(anObject)))
//}
func (goobj NSWindow) ValidRequestorForSendTypeReturnType(sendType NSString, returnType NSString) Id {
  return Id_(C.NSWindow_validRequestorForSendTypeReturnType(goobj.Self(), sendType.Self(), returnType.Self()))
}
func (goobj NSWindow) SetBackgroundColor(color NSColor)  {
  C.NSWindow_setBackgroundColor(goobj.Self(), color.Self())
}
func (goobj NSWindow) BackgroundColor() NSColor {
  return NSColor_(Id(C.NSWindow_backgroundColor(goobj.Self())))
}
//REJECT: thickness edge
//func (goobj NSWindow) SetContentBorderThicknessForEdge(thickness C.CGFloat, edge C.NSRectEdge)  {
//  C.NSWindow_setContentBorderThicknessForEdge(goobj.Self(), thickness, edge)
//}
//REJECT: CGFloat edge
//func (goobj NSWindow) ContentBorderThicknessForEdge(edge C.NSRectEdge) C.CGFloat {
//  return (C.NSWindow_contentBorderThicknessForEdge(goobj.Self(), edge))
//}
//REJECT: edge
//func (goobj NSWindow) SetAutorecalculatesContentBorderThicknessForEdge(flag C.bool, edge C.NSRectEdge)  {
//  C.NSWindow_setAutorecalculatesContentBorderThicknessForEdge(goobj.Self(), flag, edge)
//}
//REJECT: edge
//func (goobj NSWindow) AutorecalculatesContentBorderThicknessForEdge(edge C.NSRectEdge) C.bool {
//  return (C.NSWindow_autorecalculatesContentBorderThicknessForEdge(goobj.Self(), edge))
//}
func (goobj NSWindow) SetMovable(flag C.bool)  {
  C.NSWindow_setMovable(goobj.Self(), flag)
}
func (goobj NSWindow) IsMovable() C.bool {
  return (C.NSWindow_isMovable(goobj.Self()))
}
func (goobj NSWindow) SetMovableByWindowBackground(flag C.bool)  {
  C.NSWindow_setMovableByWindowBackground(goobj.Self(), flag)
}
func (goobj NSWindow) IsMovableByWindowBackground() C.bool {
  return (C.NSWindow_isMovableByWindowBackground(goobj.Self()))
}
func (goobj NSWindow) SetHidesOnDeactivate(flag C.bool)  {
  C.NSWindow_setHidesOnDeactivate(goobj.Self(), flag)
}
func (goobj NSWindow) HidesOnDeactivate() C.bool {
  return (C.NSWindow_hidesOnDeactivate(goobj.Self()))
}
func (goobj NSWindow) SetCanHide(flag C.bool)  {
  C.NSWindow_setCanHide(goobj.Self(), flag)
}
func (goobj NSWindow) CanHide() C.bool {
  return (C.NSWindow_canHide(goobj.Self()))
}
func (goobj NSWindow) Center()  {
  C.NSWindow_center(goobj.Self())
}
func (goobj NSWindow) MakeKeyAndOrderFront(sender Id)  {
  C.NSWindow_makeKeyAndOrderFront(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) OrderFront(sender Id)  {
  C.NSWindow_orderFront(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) OrderBack(sender Id)  {
  C.NSWindow_orderBack(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) OrderOut(sender Id)  {
  C.NSWindow_orderOut(goobj.Self(), unsafe.Pointer(sender))
}
//REJECT: place otherWin
//func (goobj NSWindow) OrderWindowRelativeTo(place C.NSWindowOrderingMode, otherWin C.NSInteger)  {
//  C.NSWindow_orderWindowRelativeTo(goobj.Self(), place, otherWin)
//}
func (goobj NSWindow) OrderFrontRegardless()  {
  C.NSWindow_orderFrontRegardless(goobj.Self())
}
func (goobj NSWindow) SetMiniwindowImage(image NSImage)  {
  C.NSWindow_setMiniwindowImage(goobj.Self(), image.Self())
}
func (goobj NSWindow) SetMiniwindowTitle(title NSString)  {
  C.NSWindow_setMiniwindowTitle(goobj.Self(), title.Self())
}
func (goobj NSWindow) MiniwindowImage() NSImage {
  return NSImage_(Id(C.NSWindow_miniwindowImage(goobj.Self())))
}
func (goobj NSWindow) MiniwindowTitle() NSString {
  return NSString_(Id(C.NSWindow_miniwindowTitle(goobj.Self())))
}
func (goobj NSWindow) DockTile() NSDockTile {
  return NSDockTile_(Id(C.NSWindow_dockTile(goobj.Self())))
}
func (goobj NSWindow) SetDocumentEdited(flag C.bool)  {
  C.NSWindow_setDocumentEdited(goobj.Self(), flag)
}
func (goobj NSWindow) IsDocumentEdited() C.bool {
  return (C.NSWindow_isDocumentEdited(goobj.Self()))
}
func (goobj NSWindow) IsVisible() C.bool {
  return (C.NSWindow_isVisible(goobj.Self()))
}
func (goobj NSWindow) IsKeyWindow() C.bool {
  return (C.NSWindow_isKeyWindow(goobj.Self()))
}
func (goobj NSWindow) IsMainWindow() C.bool {
  return (C.NSWindow_isMainWindow(goobj.Self()))
}
func (goobj NSWindow) CanBecomeKeyWindow() C.bool {
  return (C.NSWindow_canBecomeKeyWindow(goobj.Self()))
}
func (goobj NSWindow) CanBecomeMainWindow() C.bool {
  return (C.NSWindow_canBecomeMainWindow(goobj.Self()))
}
func (goobj NSWindow) MakeKeyWindow()  {
  C.NSWindow_makeKeyWindow(goobj.Self())
}
func (goobj NSWindow) MakeMainWindow()  {
  C.NSWindow_makeMainWindow(goobj.Self())
}
func (goobj NSWindow) BecomeKeyWindow()  {
  C.NSWindow_becomeKeyWindow(goobj.Self())
}
func (goobj NSWindow) ResignKeyWindow()  {
  C.NSWindow_resignKeyWindow(goobj.Self())
}
func (goobj NSWindow) BecomeMainWindow()  {
  C.NSWindow_becomeMainWindow(goobj.Self())
}
func (goobj NSWindow) ResignMainWindow()  {
  C.NSWindow_resignMainWindow(goobj.Self())
}
func (goobj NSWindow) WorksWhenModal() C.bool {
  return (C.NSWindow_worksWhenModal(goobj.Self()))
}
func (goobj NSWindow) PreventsApplicationTerminationWhenModal() C.bool {
  return (C.NSWindow_preventsApplicationTerminationWhenModal(goobj.Self()))
}
func (goobj NSWindow) SetPreventsApplicationTerminationWhenModal(flag C.bool)  {
  C.NSWindow_setPreventsApplicationTerminationWhenModal(goobj.Self(), flag)
}
func (goobj NSWindow) ConvertRectToScreen(aRect NSRect) NSRect {
  return NSRect_(C.NSWindow_convertRectToScreen(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height))))
}
func (goobj NSWindow) ConvertRectFromScreen(aRect NSRect) NSRect {
  return NSRect_(C.NSWindow_convertRectFromScreen(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height))))
}
func (goobj NSWindow) ConvertRectToBacking(aRect NSRect) NSRect {
  return NSRect_(C.NSWindow_convertRectToBacking(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height))))
}
func (goobj NSWindow) ConvertRectFromBacking(aRect NSRect) NSRect {
  return NSRect_(C.NSWindow_convertRectFromBacking(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height))))
}
func (goobj NSWindow) BackingAlignedRectOptions(aRect NSRect, options C.NSAlignmentOptions) NSRect {
  return NSRect_(C.NSWindow_backingAlignedRectOptions(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height)), options))
}
//REJECT: CGFloat
//func (goobj NSWindow) BackingScaleFactor() C.CGFloat {
//  return (C.NSWindow_backingScaleFactor(goobj.Self()))
//}
func (goobj NSWindow) ConvertBaseToScreen(aPoint NSPoint) NSPoint {
  return NSPoint_(C.NSWindow_convertBaseToScreen(goobj.Self(), C.CGPointMake(C.CGFloat(aPoint.X), C.CGFloat(aPoint.Y))))
}
func (goobj NSWindow) ConvertScreenToBase(aPoint NSPoint) NSPoint {
  return NSPoint_(C.NSWindow_convertScreenToBase(goobj.Self(), C.CGPointMake(C.CGFloat(aPoint.X), C.CGFloat(aPoint.Y))))
}
func (goobj NSWindow) PerformClose(sender Id)  {
  C.NSWindow_performClose(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) PerformMiniaturize(sender Id)  {
  C.NSWindow_performMiniaturize(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) PerformZoom(sender Id)  {
  C.NSWindow_performZoom(goobj.Self(), unsafe.Pointer(sender))
}
//REJECT: NSInteger
//func (goobj NSWindow) GState() C.NSInteger {
//  return (C.NSWindow_gState(goobj.Self()))
//}
func (goobj NSWindow) SetOneShot(flag C.bool)  {
  C.NSWindow_setOneShot(goobj.Self(), flag)
}
func (goobj NSWindow) IsOneShot() C.bool {
  return (C.NSWindow_isOneShot(goobj.Self()))
}
func (goobj NSWindow) DataWithEPSInsideRect(rect NSRect) NSData {
  return NSData_(Id(C.NSWindow_dataWithEPSInsideRect(goobj.Self(), C.CGRectMake(C.CGFloat(rect.X), C.CGFloat(rect.Y), C.CGFloat(rect.Width), C.CGFloat(rect.Height)))))
}
func (goobj NSWindow) DataWithPDFInsideRect(rect NSRect) NSData {
  return NSData_(Id(C.NSWindow_dataWithPDFInsideRect(goobj.Self(), C.CGRectMake(C.CGFloat(rect.X), C.CGFloat(rect.Y), C.CGFloat(rect.Width), C.CGFloat(rect.Height)))))
}
func (goobj NSWindow) Print(sender Id)  {
  C.NSWindow_print(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) DisableCursorRects()  {
  C.NSWindow_disableCursorRects(goobj.Self())
}
func (goobj NSWindow) EnableCursorRects()  {
  C.NSWindow_enableCursorRects(goobj.Self())
}
func (goobj NSWindow) DiscardCursorRects()  {
  C.NSWindow_discardCursorRects(goobj.Self())
}
func (goobj NSWindow) AreCursorRectsEnabled() C.bool {
  return (C.NSWindow_areCursorRectsEnabled(goobj.Self()))
}
func (goobj NSWindow) InvalidateCursorRectsForView(aView NSView)  {
  C.NSWindow_invalidateCursorRectsForView(goobj.Self(), aView.Self())
}
func (goobj NSWindow) ResetCursorRects()  {
  C.NSWindow_resetCursorRects(goobj.Self())
}
func (goobj NSWindow) SetAllowsToolTipsWhenApplicationIsInactive(allowWhenInactive C.bool)  {
  C.NSWindow_setAllowsToolTipsWhenApplicationIsInactive(goobj.Self(), allowWhenInactive)
}
func (goobj NSWindow) AllowsToolTipsWhenApplicationIsInactive() C.bool {
  return (C.NSWindow_allowsToolTipsWhenApplicationIsInactive(goobj.Self()))
}
func (goobj NSWindow) SetBackingType(bufferingType C.NSBackingStoreType)  {
  C.NSWindow_setBackingType(goobj.Self(), bufferingType)
}
func (goobj NSWindow) BackingType() C.NSBackingStoreType {
  return (C.NSWindow_backingType(goobj.Self()))
}
//REJECT: newLevel
//func (goobj NSWindow) SetLevel(newLevel C.NSInteger)  {
//  C.NSWindow_setLevel(goobj.Self(), newLevel)
//}
//REJECT: NSInteger
//func (goobj NSWindow) Level() C.NSInteger {
//  return (C.NSWindow_level(goobj.Self()))
//}
func (goobj NSWindow) SetDepthLimit(limit C.NSWindowDepth)  {
  C.NSWindow_setDepthLimit(goobj.Self(), limit)
}
func (goobj NSWindow) DepthLimit() C.NSWindowDepth {
  return (C.NSWindow_depthLimit(goobj.Self()))
}
func (goobj NSWindow) SetDynamicDepthLimit(flag C.bool)  {
  C.NSWindow_setDynamicDepthLimit(goobj.Self(), flag)
}
func (goobj NSWindow) HasDynamicDepthLimit() C.bool {
  return (C.NSWindow_hasDynamicDepthLimit(goobj.Self()))
}
func (goobj NSWindow) Screen() NSScreen {
  return NSScreen_(Id(C.NSWindow_screen(goobj.Self())))
}
func (goobj NSWindow) DeepestScreen() NSScreen {
  return NSScreen_(Id(C.NSWindow_deepestScreen(goobj.Self())))
}
func (goobj NSWindow) CanStoreColor() C.bool {
  return (C.NSWindow_canStoreColor(goobj.Self()))
}
func (goobj NSWindow) SetHasShadow(hasShadow C.bool)  {
  C.NSWindow_setHasShadow(goobj.Self(), hasShadow)
}
func (goobj NSWindow) HasShadow() C.bool {
  return (C.NSWindow_hasShadow(goobj.Self()))
}
func (goobj NSWindow) InvalidateShadow()  {
  C.NSWindow_invalidateShadow(goobj.Self())
}
//REJECT: windowAlpha
//func (goobj NSWindow) SetAlphaValue(windowAlpha C.CGFloat)  {
//  C.NSWindow_setAlphaValue(goobj.Self(), windowAlpha)
//}
//REJECT: CGFloat
//func (goobj NSWindow) AlphaValue() C.CGFloat {
//  return (C.NSWindow_alphaValue(goobj.Self()))
//}
func (goobj NSWindow) SetOpaque(isOpaque C.bool)  {
  C.NSWindow_setOpaque(goobj.Self(), isOpaque)
}
func (goobj NSWindow) IsOpaque() C.bool {
  return (C.NSWindow_isOpaque(goobj.Self()))
}
//REJECT: type
//func (goobj NSWindow) SetSharingType(type_ C.NSWindowSharingType)  {
//  C.NSWindow_setSharingType(goobj.Self(), type_)
//}
//REJECT: NSWindowSharingType
//func (goobj NSWindow) SharingType() C.NSWindowSharingType {
//  return (C.NSWindow_sharingType(goobj.Self()))
//}
//REJECT: backingLocation
//func (goobj NSWindow) SetPreferredBackingLocation(backingLocation C.NSWindowBackingLocation)  {
//  C.NSWindow_setPreferredBackingLocation(goobj.Self(), backingLocation)
//}
//REJECT: NSWindowBackingLocation
//func (goobj NSWindow) PreferredBackingLocation() C.NSWindowBackingLocation {
//  return (C.NSWindow_preferredBackingLocation(goobj.Self()))
//}
//REJECT: NSWindowBackingLocation
//func (goobj NSWindow) BackingLocation() C.NSWindowBackingLocation {
//  return (C.NSWindow_backingLocation(goobj.Self()))
//}
func (goobj NSWindow) AllowsConcurrentViewDrawing() C.bool {
  return (C.NSWindow_allowsConcurrentViewDrawing(goobj.Self()))
}
func (goobj NSWindow) SetAllowsConcurrentViewDrawing(flag C.bool)  {
  C.NSWindow_setAllowsConcurrentViewDrawing(goobj.Self(), flag)
}
func (goobj NSWindow) DisplaysWhenScreenProfileChanges() C.bool {
  return (C.NSWindow_displaysWhenScreenProfileChanges(goobj.Self()))
}
func (goobj NSWindow) SetDisplaysWhenScreenProfileChanges(flag C.bool)  {
  C.NSWindow_setDisplaysWhenScreenProfileChanges(goobj.Self(), flag)
}
func (goobj NSWindow) DisableScreenUpdatesUntilFlush()  {
  C.NSWindow_disableScreenUpdatesUntilFlush(goobj.Self())
}
func (goobj NSWindow) CanBecomeVisibleWithoutLogin() C.bool {
  return (C.NSWindow_canBecomeVisibleWithoutLogin(goobj.Self()))
}
func (goobj NSWindow) SetCanBecomeVisibleWithoutLogin(flag C.bool)  {
  C.NSWindow_setCanBecomeVisibleWithoutLogin(goobj.Self(), flag)
}
//REJECT: behavior
//func (goobj NSWindow) SetCollectionBehavior(behavior C.NSWindowCollectionBehavior)  {
//  C.NSWindow_setCollectionBehavior(goobj.Self(), behavior)
//}
//REJECT: NSWindowCollectionBehavior
//func (goobj NSWindow) CollectionBehavior() C.NSWindowCollectionBehavior {
//  return (C.NSWindow_collectionBehavior(goobj.Self()))
//}
//REJECT: NSWindowAnimationBehavior
//func (goobj NSWindow) AnimationBehavior() C.NSWindowAnimationBehavior {
//  return (C.NSWindow_animationBehavior(goobj.Self()))
//}
//REJECT: newAnimationBehavior
//func (goobj NSWindow) SetAnimationBehavior(newAnimationBehavior C.NSWindowAnimationBehavior)  {
//  C.NSWindow_setAnimationBehavior(goobj.Self(), newAnimationBehavior)
//}
func (goobj NSWindow) CanBeVisibleOnAllSpaces() C.bool {
  return (C.NSWindow_canBeVisibleOnAllSpaces(goobj.Self()))
}
func (goobj NSWindow) SetCanBeVisibleOnAllSpaces(flag C.bool)  {
  C.NSWindow_setCanBeVisibleOnAllSpaces(goobj.Self(), flag)
}
func (goobj NSWindow) IsOnActiveSpace() C.bool {
  return (C.NSWindow_isOnActiveSpace(goobj.Self()))
}
func (goobj NSWindow) ToggleFullScreen(sender Id)  {
  C.NSWindow_toggleFullScreen(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) StringWithSavedFrame() NSString {
  return NSString_(Id(C.NSWindow_stringWithSavedFrame(goobj.Self())))
}
func (goobj NSWindow) SetFrameFromString(string NSString)  {
  C.NSWindow_setFrameFromString(goobj.Self(), string.Self())
}
func (goobj NSWindow) SaveFrameUsingName(name NSString)  {
  C.NSWindow_saveFrameUsingName(goobj.Self(), name.Self())
}
func (goobj NSWindow) SetFrameUsingNameForce(name NSString, force C.bool) C.bool {
  return (C.NSWindow_setFrameUsingNameForce(goobj.Self(), name.Self(), force))
}
func (goobj NSWindow) SetFrameUsingName(name NSString) C.bool {
  return (C.NSWindow_setFrameUsingName(goobj.Self(), name.Self()))
}
func (goobj NSWindow) SetFrameAutosaveName(name NSString) C.bool {
  return (C.NSWindow_setFrameAutosaveName(goobj.Self(), name.Self()))
}
func (goobj NSWindow) FrameAutosaveName() NSString {
  return NSString_(Id(C.NSWindow_frameAutosaveName(goobj.Self())))
}
func (goobj NSWindow) CacheImageInRect(aRect NSRect)  {
  C.NSWindow_cacheImageInRect(goobj.Self(), C.CGRectMake(C.CGFloat(aRect.X), C.CGFloat(aRect.Y), C.CGFloat(aRect.Width), C.CGFloat(aRect.Height)))
}
func (goobj NSWindow) RestoreCachedImage()  {
  C.NSWindow_restoreCachedImage(goobj.Self())
}
func (goobj NSWindow) DiscardCachedImage()  {
  C.NSWindow_discardCachedImage(goobj.Self())
}
//REJECT: NSSize
//func (goobj NSWindow) MinSize() C.NSSize {
//  return (C.NSWindow_minSize(goobj.Self()))
//}
//REJECT: NSSize
//func (goobj NSWindow) MaxSize() C.NSSize {
//  return (C.NSWindow_maxSize(goobj.Self()))
//}
//REJECT: size
//func (goobj NSWindow) SetMinSize(size C.NSSize)  {
//  C.NSWindow_setMinSize(goobj.Self(), size)
//}
//REJECT: size
//func (goobj NSWindow) SetMaxSize(size C.NSSize)  {
//  C.NSWindow_setMaxSize(goobj.Self(), size)
//}
//REJECT: NSSize
//func (goobj NSWindow) ContentMinSize() C.NSSize {
//  return (C.NSWindow_contentMinSize(goobj.Self()))
//}
//REJECT: NSSize
//func (goobj NSWindow) ContentMaxSize() C.NSSize {
//  return (C.NSWindow_contentMaxSize(goobj.Self()))
//}
//REJECT: size
//func (goobj NSWindow) SetContentMinSize(size C.NSSize)  {
//  C.NSWindow_setContentMinSize(goobj.Self(), size)
//}
//REJECT: size
//func (goobj NSWindow) SetContentMaxSize(size C.NSSize)  {
//  C.NSWindow_setContentMaxSize(goobj.Self(), size)
//}
func (goobj NSWindow) NextEventMatchingMask(mask C.uint) NSEvent {
  return NSEvent_(Id(C.NSWindow_nextEventMatchingMask(goobj.Self(), mask)))
}
func (goobj NSWindow) NextEventMatchingMaskUntilDateInModeDequeue(mask C.uint, expiration NSDate, mode NSString, deqFlag C.bool) NSEvent {
  return NSEvent_(Id(C.NSWindow_nextEventMatchingMaskUntilDateInModeDequeue(goobj.Self(), mask, expiration.Self(), mode.Self(), deqFlag)))
}
func (goobj NSWindow) DiscardEventsMatchingMaskBeforeEvent(mask C.uint, lastEvent NSEvent)  {
  C.NSWindow_discardEventsMatchingMaskBeforeEvent(goobj.Self(), mask, lastEvent.Self())
}
func (goobj NSWindow) PostEventAtStart(event NSEvent, flag C.bool)  {
  C.NSWindow_postEventAtStart(goobj.Self(), event.Self(), flag)
}
func (goobj NSWindow) CurrentEvent() NSEvent {
  return NSEvent_(Id(C.NSWindow_currentEvent(goobj.Self())))
}
func (goobj NSWindow) SetAcceptsMouseMovedEvents(flag C.bool)  {
  C.NSWindow_setAcceptsMouseMovedEvents(goobj.Self(), flag)
}
func (goobj NSWindow) AcceptsMouseMovedEvents() C.bool {
  return (C.NSWindow_acceptsMouseMovedEvents(goobj.Self()))
}
func (goobj NSWindow) SetIgnoresMouseEvents(flag C.bool)  {
  C.NSWindow_setIgnoresMouseEvents(goobj.Self(), flag)
}
func (goobj NSWindow) IgnoresMouseEvents() C.bool {
  return (C.NSWindow_ignoresMouseEvents(goobj.Self()))
}
func (goobj NSWindow) DeviceDescription() NSDictionary {
  return NSDictionary_(Id(C.NSWindow_deviceDescription(goobj.Self())))
}
func (goobj NSWindow) SendEvent(theEvent NSEvent)  {
  C.NSWindow_sendEvent(goobj.Self(), theEvent.Self())
}
func (goobj NSWindow) MouseLocationOutsideOfEventStream() NSPoint {
  return NSPoint_(C.NSWindow_mouseLocationOutsideOfEventStream(goobj.Self()))
}
func (goobj NSWindow) WindowController() Id {
  return Id_(C.NSWindow_windowController(goobj.Self()))
}
func (goobj NSWindow) SetWindowController(windowController NSWindowController)  {
  C.NSWindow_setWindowController(goobj.Self(), windowController.Self())
}
//REJECT: handler
//func (goobj NSWindow) BeginSheetCompletionHandler(sheetWindow NSWindow, handler *INVALID TYPE*)  {
//  C.NSWindow_beginSheetCompletionHandler(goobj.Self(), sheetWindow.Self(), handler)
//}
//REJECT: handler
//func (goobj NSWindow) BeginCriticalSheetCompletionHandler(sheetWindow NSWindow, handler *INVALID TYPE*)  {
//  C.NSWindow_beginCriticalSheetCompletionHandler(goobj.Self(), sheetWindow.Self(), handler)
//}
func (goobj NSWindow) EndSheet(sheetWindow NSWindow)  {
  C.NSWindow_endSheet(goobj.Self(), sheetWindow.Self())
}
//REJECT: returnCode
//func (goobj NSWindow) EndSheetReturnCode(sheetWindow NSWindow, returnCode C.NSModalResponse)  {
//  C.NSWindow_endSheetReturnCode(goobj.Self(), sheetWindow.Self(), returnCode)
//}
func (goobj NSWindow) Sheets() NSArray {
  return NSArray_(Id(C.NSWindow_sheets(goobj.Self())))
}
func (goobj NSWindow) AttachedSheet() NSWindow {
  return NSWindow_(Id(C.NSWindow_attachedSheet(goobj.Self())))
}
func (goobj NSWindow) IsSheet() C.bool {
  return (C.NSWindow_isSheet(goobj.Self()))
}
func (goobj NSWindow) SheetParent() NSWindow {
  return NSWindow_(Id(C.NSWindow_sheetParent(goobj.Self())))
}
//REJECT: b
//func (goobj NSWindow) StandardWindowButton(b C.NSWindowButton) NSButton {
//  return NSButton_(Id(C.NSWindow_standardWindowButton(goobj.Self(), b)))
//}
//REJECT: place
//func (goobj NSWindow) AddChildWindowOrdered(childWin NSWindow, place C.NSWindowOrderingMode)  {
//  C.NSWindow_addChildWindowOrdered(goobj.Self(), childWin.Self(), place)
//}
func (goobj NSWindow) RemoveChildWindow(childWin NSWindow)  {
  C.NSWindow_removeChildWindow(goobj.Self(), childWin.Self())
}
func (goobj NSWindow) ChildWindows() NSArray {
  return NSArray_(Id(C.NSWindow_childWindows(goobj.Self())))
}
func (goobj NSWindow) ParentWindow() NSWindow {
  return NSWindow_(Id(C.NSWindow_parentWindow(goobj.Self())))
}
func (goobj NSWindow) SetParentWindow(window NSWindow)  {
  C.NSWindow_setParentWindow(goobj.Self(), window.Self())
}
func (goobj NSWindow) GraphicsContext() NSGraphicsContext {
  return NSGraphicsContext_(Id(C.NSWindow_graphicsContext(goobj.Self())))
}
//REJECT: CGFloat
//func (goobj NSWindow) UserSpaceScaleFactor() C.CGFloat {
//  return (C.NSWindow_userSpaceScaleFactor(goobj.Self()))
//}
func (goobj NSWindow) SetColorSpace(colorSpace NSColorSpace)  {
  C.NSWindow_setColorSpace(goobj.Self(), colorSpace.Self())
}
func (goobj NSWindow) ColorSpace() NSColorSpace {
  return NSColorSpace_(Id(C.NSWindow_colorSpace(goobj.Self())))
}
func (goobj NSWindow) OcclusionState() C.NSWindowOcclusionState {
  return (C.NSWindow_occlusionState(goobj.Self()))
}
func (goobj NSWindow) SetInitialFirstResponder(view NSView)  {
  C.NSWindow_setInitialFirstResponder(goobj.Self(), view.Self())
}
func (goobj NSWindow) InitialFirstResponder() NSView {
  return NSView_(Id(C.NSWindow_initialFirstResponder(goobj.Self())))
}
func (goobj NSWindow) SelectNextKeyView(sender Id)  {
  C.NSWindow_selectNextKeyView(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) SelectPreviousKeyView(sender Id)  {
  C.NSWindow_selectPreviousKeyView(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) SelectKeyViewFollowingView(aView NSView)  {
  C.NSWindow_selectKeyViewFollowingView(goobj.Self(), aView.Self())
}
func (goobj NSWindow) SelectKeyViewPrecedingView(aView NSView)  {
  C.NSWindow_selectKeyViewPrecedingView(goobj.Self(), aView.Self())
}
//REJECT: NSSelectionDirection
//func (goobj NSWindow) KeyViewSelectionDirection() C.NSSelectionDirection {
//  return (C.NSWindow_keyViewSelectionDirection(goobj.Self()))
//}
func (goobj NSWindow) SetDefaultButtonCell(defButt NSButtonCell)  {
  C.NSWindow_setDefaultButtonCell(goobj.Self(), defButt.Self())
}
func (goobj NSWindow) DefaultButtonCell() NSButtonCell {
  return NSButtonCell_(Id(C.NSWindow_defaultButtonCell(goobj.Self())))
}
func (goobj NSWindow) DisableKeyEquivalentForDefaultButtonCell()  {
  C.NSWindow_disableKeyEquivalentForDefaultButtonCell(goobj.Self())
}
func (goobj NSWindow) EnableKeyEquivalentForDefaultButtonCell()  {
  C.NSWindow_enableKeyEquivalentForDefaultButtonCell(goobj.Self())
}
func (goobj NSWindow) SetAutorecalculatesKeyViewLoop(flag C.bool)  {
  C.NSWindow_setAutorecalculatesKeyViewLoop(goobj.Self(), flag)
}
func (goobj NSWindow) AutorecalculatesKeyViewLoop() C.bool {
  return (C.NSWindow_autorecalculatesKeyViewLoop(goobj.Self()))
}
func (goobj NSWindow) RecalculateKeyViewLoop()  {
  C.NSWindow_recalculateKeyViewLoop(goobj.Self())
}
func (goobj NSWindow) SetToolbar(toolbar NSToolbar)  {
  C.NSWindow_setToolbar(goobj.Self(), toolbar.Self())
}
func (goobj NSWindow) Toolbar() NSToolbar {
  return NSToolbar_(Id(C.NSWindow_toolbar(goobj.Self())))
}
func (goobj NSWindow) ToggleToolbarShown(sender Id)  {
  C.NSWindow_toggleToolbarShown(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) RunToolbarCustomizationPalette(sender Id)  {
  C.NSWindow_runToolbarCustomizationPalette(goobj.Self(), unsafe.Pointer(sender))
}
func (goobj NSWindow) SetShowsToolbarButton(show C.bool)  {
  C.NSWindow_setShowsToolbarButton(goobj.Self(), show)
}
func (goobj NSWindow) ShowsToolbarButton() C.bool {
  return (C.NSWindow_showsToolbarButton(goobj.Self()))
}
//REJECT: initialOffset
//func (goobj NSWindow) DragImageAtOffsetEventPasteboardSourceSlideBack(anImage NSImage, baseLocation NSPoint, initialOffset C.NSSize, event NSEvent, pboard NSPasteboard, sourceObj Id, slideFlag C.bool)  {
//  C.NSWindow_dragImageAtOffsetEventPasteboardSourceSlideBack(goobj.Self(), anImage.Self(), C.CGPointMake(C.CGFloat(baseLocation.X), C.CGFloat(baseLocation.Y)), initialOffset, event.Self(), pboard.Self(), unsafe.Pointer(sourceObj), slideFlag)
//}
func (goobj NSWindow) RegisterForDraggedTypes(newTypes NSArray)  {
  C.NSWindow_registerForDraggedTypes(goobj.Self(), newTypes.Self())
}
func (goobj NSWindow) UnregisterDraggedTypes()  {
  C.NSWindow_unregisterDraggedTypes(goobj.Self())
}
func NSWindow_initWithWindowRef(windowRef unsafe.Pointer) NSWindow {
  return NSWindow_(Id(C.NSWindow_initWithWindowRef(windowRef)))
}
func (goobj NSWindow) WindowRef() unsafe.Pointer {
  return (C.NSWindow_windowRef(goobj.Self()))
}
func NSWindow_frameRectForContentRectStyleMask(cRect NSRect, aStyle C.uint) NSRect {
  return NSRect_(C.NSWindow__frameRectForContentRectStyleMask(C.CGRectMake(C.CGFloat(cRect.X), C.CGFloat(cRect.Y), C.CGFloat(cRect.Width), C.CGFloat(cRect.Height)), aStyle))
}
func NSWindow_contentRectForFrameRectStyleMask(fRect NSRect, aStyle C.uint) NSRect {
  return NSRect_(C.NSWindow__contentRectForFrameRectStyleMask(C.CGRectMake(C.CGFloat(fRect.X), C.CGFloat(fRect.Y), C.CGFloat(fRect.Width), C.CGFloat(fRect.Height)), aStyle))
}
//REJECT: CGFloat
//func NSWindow_minFrameWidthWithTitleStyleMask(aTitle NSString, aStyle C.uint) C.CGFloat {
//  return (C.NSWindow__minFrameWidthWithTitleStyleMask(aTitle.Self(), aStyle))
//}
func NSWindow_defaultDepthLimit() C.NSWindowDepth {
  return (C.NSWindow__defaultDepthLimit())
}
func NSWindow_removeFrameUsingName(name NSString)  {
  C.NSWindow__removeFrameUsingName(name.Self())
}
func NSWindow_menuChanged(menu NSMenu)  {
  C.NSWindow__menuChanged(menu.Self())
}
//REJECT: b
//func NSWindow_standardWindowButtonForStyleMask(b C.NSWindowButton, styleMask C.uint) NSButton {
//  return NSButton_(Id(C.NSWindow__standardWindowButtonForStyleMask(b, styleMask)))
//}
//REJECT: options
//func NSWindow_windowNumbersWithOptions(options C.NSWindowNumberListOptions) NSArray {
//  return NSArray_(Id(C.NSWindow__windowNumbersWithOptions(options)))
//}
//REJECT: NSInteger windowNumber
//func NSWindow_windowNumberAtPointBelowWindowWithWindowNumber(point NSPoint, windowNumber C.NSInteger) C.NSInteger {
//  return (C.NSWindow__windowNumberAtPointBelowWindowWithWindowNumber(C.CGPointMake(C.CGFloat(point.X), C.CGFloat(point.Y)), windowNumber))
//}



type NSGraphicsContext struct {
    NSObject
}
func NSGraphicsContext_(i Id) NSGraphicsContext {
    return NSGraphicsContext{ NSObject_(i) }
}

type Protocol struct {
    NSObject
}
func Protocol_(i Id) Protocol {
    return Protocol{ NSObject_(i) }
}

type NSPasteboard struct {
    NSObject
}
func NSPasteboard_(i Id) NSPasteboard {
    return NSPasteboard{ NSObject_(i) }
}

type NSWindowController struct {
    NSObject
}
func NSWindowController_(i Id) NSWindowController {
    return NSWindowController{ NSObject_(i) }
}

type NSButton struct {
    NSObject
}
func NSButton_(i Id) NSButton {
    return NSButton{ NSObject_(i) }
}

type NSToolbar struct {
    NSObject
}
func NSToolbar_(i Id) NSToolbar {
    return NSToolbar{ NSObject_(i) }
}

type NSView struct {
    NSObject
}
func NSView_(i Id) NSView {
    return NSView{ NSObject_(i) }
}

type NSDockTile struct {
    NSObject
}
func NSDockTile_(i Id) NSDockTile {
    return NSDockTile{ NSObject_(i) }
}

type NSColorSpace struct {
    NSObject
}
func NSColorSpace_(i Id) NSColorSpace {
    return NSColorSpace{ NSObject_(i) }
}

type NSMenu struct {
    NSObject
}
func NSMenu_(i Id) NSMenu {
    return NSMenu{ NSObject_(i) }
}

type NSColor struct {
    NSObject
}
func NSColor_(i Id) NSColor {
    return NSColor{ NSObject_(i) }
}

type NSText struct {
    NSObject
}
func NSText_(i Id) NSText {
    return NSText{ NSObject_(i) }
}

type NSImage struct {
    NSObject
}
func NSImage_(i Id) NSImage {
    return NSImage{ NSObject_(i) }
}

type NSTrackingArea struct {
    NSObject
}
func NSTrackingArea_(i Id) NSTrackingArea {
    return NSTrackingArea{ NSObject_(i) }
}

type NSButtonCell struct {
    NSObject
}
func NSButtonCell_(i Id) NSButtonCell {
    return NSButtonCell{ NSObject_(i) }
}

type NSScreen struct {
    NSObject
}
func NSScreen_(i Id) NSScreen {
    return NSScreen{ NSObject_(i) }
}

